
STM32G0_encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002124  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080021e0  080021e0  000121e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002240  08002240  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002240  08002240  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002240  08002240  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002240  08002240  00012240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002244  08002244  00012244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000010  08002258  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08002258  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012d4b  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002750  00000000  00000000  00032dc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000895b  00000000  00000000  00035516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e80  00000000  00000000  0003de78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bb5  00000000  00000000  0003ecf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001dc0f  00000000  00000000  0003f8ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014f4b  00000000  00000000  0005d4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c18cf  00000000  00000000  00072407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000257c  00000000  00000000  00133cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00136254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080021c8 	.word	0x080021c8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	080021c8 	.word	0x080021c8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	46ce      	mov	lr, r9
 8000220:	4647      	mov	r7, r8
 8000222:	b580      	push	{r7, lr}
 8000224:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	2214      	movs	r2, #20
 8000228:	2100      	movs	r1, #0
 800022a:	a805      	add	r0, sp, #20
 800022c:	f001 ffa0 	bl	8002170 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000230:	4b34      	ldr	r3, [pc, #208]	; (8000304 <MX_GPIO_Init+0xe8>)
 8000232:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000234:	2204      	movs	r2, #4
 8000236:	4311      	orrs	r1, r2
 8000238:	6359      	str	r1, [r3, #52]	; 0x34
 800023a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800023c:	400a      	ands	r2, r1
 800023e:	9201      	str	r2, [sp, #4]
 8000240:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000244:	2501      	movs	r5, #1
 8000246:	432a      	orrs	r2, r5
 8000248:	635a      	str	r2, [r3, #52]	; 0x34
 800024a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800024c:	402a      	ands	r2, r5
 800024e:	9202      	str	r2, [sp, #8]
 8000250:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000252:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000254:	2202      	movs	r2, #2
 8000256:	4311      	orrs	r1, r2
 8000258:	6359      	str	r1, [r3, #52]	; 0x34
 800025a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800025c:	400a      	ands	r2, r1
 800025e:	9203      	str	r2, [sp, #12]
 8000260:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000264:	2408      	movs	r4, #8
 8000266:	4322      	orrs	r2, r4
 8000268:	635a      	str	r2, [r3, #52]	; 0x34
 800026a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800026c:	4023      	ands	r3, r4
 800026e:	9304      	str	r3, [sp, #16]
 8000270:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000272:	23a0      	movs	r3, #160	; 0xa0
 8000274:	05db      	lsls	r3, r3, #23
 8000276:	4699      	mov	r9, r3
 8000278:	2201      	movs	r2, #1
 800027a:	2120      	movs	r1, #32
 800027c:	0018      	movs	r0, r3
 800027e:	f000 fbff 	bl	8000a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_MAX7219_Pin|DB_OUT_Pin, GPIO_PIN_RESET);
 8000282:	4b21      	ldr	r3, [pc, #132]	; (8000308 <MX_GPIO_Init+0xec>)
 8000284:	4698      	mov	r8, r3
 8000286:	2200      	movs	r2, #0
 8000288:	2141      	movs	r1, #65	; 0x41
 800028a:	0018      	movs	r0, r3
 800028c:	f000 fbf8 	bl	8000a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VCC_OUT_GPIO_Port, VCC_OUT_Pin, GPIO_PIN_SET);
 8000290:	2780      	movs	r7, #128	; 0x80
 8000292:	00ff      	lsls	r7, r7, #3
 8000294:	4e1d      	ldr	r6, [pc, #116]	; (800030c <MX_GPIO_Init+0xf0>)
 8000296:	2201      	movs	r2, #1
 8000298:	0039      	movs	r1, r7
 800029a:	0030      	movs	r0, r6
 800029c:	f000 fbf0 	bl	8000a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80002a0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002a2:	2384      	movs	r3, #132	; 0x84
 80002a4:	039b      	lsls	r3, r3, #14
 80002a6:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002a8:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002aa:	a905      	add	r1, sp, #20
 80002ac:	0030      	movs	r0, r6
 80002ae:	f000 fb27 	bl	8000900 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80002b2:	2320      	movs	r3, #32
 80002b4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b6:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b8:	2400      	movs	r4, #0
 80002ba:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002bc:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80002be:	a905      	add	r1, sp, #20
 80002c0:	4648      	mov	r0, r9
 80002c2:	f000 fb1d 	bl	8000900 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_MAX7219_Pin DB_OUT_Pin */
  GPIO_InitStruct.Pin = CS_MAX7219_Pin|DB_OUT_Pin;
 80002c6:	2341      	movs	r3, #65	; 0x41
 80002c8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ca:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002cc:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ce:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002d0:	a905      	add	r1, sp, #20
 80002d2:	4640      	mov	r0, r8
 80002d4:	f000 fb14 	bl	8000900 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCC_OUT_Pin */
  GPIO_InitStruct.Pin = VCC_OUT_Pin;
 80002d8:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002da:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002dc:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002de:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(VCC_OUT_GPIO_Port, &GPIO_InitStruct);
 80002e0:	a905      	add	r1, sp, #20
 80002e2:	0030      	movs	r0, r6
 80002e4:	f000 fb0c 	bl	8000900 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2100      	movs	r1, #0
 80002ec:	2006      	movs	r0, #6
 80002ee:	f000 facb 	bl	8000888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80002f2:	2006      	movs	r0, #6
 80002f4:	f000 faf8 	bl	80008e8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002f8:	b00b      	add	sp, #44	; 0x2c
 80002fa:	bcc0      	pop	{r6, r7}
 80002fc:	46b9      	mov	r9, r7
 80002fe:	46b0      	mov	r8, r6
 8000300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	40021000 	.word	0x40021000
 8000308:	50000400 	.word	0x50000400
 800030c:	50000800 	.word	0x50000800

08000310 <MX_TIM7_Init>:
{
 8000310:	b530      	push	{r4, r5, lr}
 8000312:	b087      	sub	sp, #28
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000314:	ad01      	add	r5, sp, #4
 8000316:	2214      	movs	r2, #20
 8000318:	2100      	movs	r1, #0
 800031a:	0028      	movs	r0, r5
 800031c:	f001 ff28 	bl	8002170 <memset>
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8000320:	4a15      	ldr	r2, [pc, #84]	; (8000378 <MX_TIM7_Init+0x68>)
 8000322:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000324:	2320      	movs	r3, #32
 8000326:	4319      	orrs	r1, r3
 8000328:	63d1      	str	r1, [r2, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 800032a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800032c:	4013      	ands	r3, r2
 800032e:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000330:	9b00      	ldr	r3, [sp, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000332:	4b12      	ldr	r3, [pc, #72]	; (800037c <MX_TIM7_Init+0x6c>)
 8000334:	21c4      	movs	r1, #196	; 0xc4
 8000336:	0089      	lsls	r1, r1, #2
 8000338:	585a      	ldr	r2, [r3, r1]
 800033a:	4811      	ldr	r0, [pc, #68]	; (8000380 <MX_TIM7_Init+0x70>)
 800033c:	4002      	ands	r2, r0
 800033e:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000340:	2280      	movs	r2, #128	; 0x80
 8000342:	02d2      	lsls	r2, r2, #11
 8000344:	601a      	str	r2, [r3, #0]
  TIM_InitStruct.Prescaler = 63999;
 8000346:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <MX_TIM7_Init+0x74>)
 8000348:	802b      	strh	r3, [r5, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800034a:	2300      	movs	r3, #0
 800034c:	606b      	str	r3, [r5, #4]
  TIM_InitStruct.Autoreload = 2000;
 800034e:	23fa      	movs	r3, #250	; 0xfa
 8000350:	00db      	lsls	r3, r3, #3
 8000352:	60ab      	str	r3, [r5, #8]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 8000354:	4c0c      	ldr	r4, [pc, #48]	; (8000388 <MX_TIM7_Init+0x78>)
 8000356:	0029      	movs	r1, r5
 8000358:	0020      	movs	r0, r4
 800035a:	f001 fdb3 	bl	8001ec4 <LL_TIM_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800035e:	6823      	ldr	r3, [r4, #0]
 8000360:	2280      	movs	r2, #128	; 0x80
 8000362:	4313      	orrs	r3, r2
 8000364:	6023      	str	r3, [r4, #0]
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000366:	6863      	ldr	r3, [r4, #4]
 8000368:	2170      	movs	r1, #112	; 0x70
 800036a:	438b      	bics	r3, r1
 800036c:	6063      	str	r3, [r4, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800036e:	68a3      	ldr	r3, [r4, #8]
 8000370:	4393      	bics	r3, r2
 8000372:	60a3      	str	r3, [r4, #8]
}
 8000374:	b007      	add	sp, #28
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	40021000 	.word	0x40021000
 800037c:	e000e100 	.word	0xe000e100
 8000380:	ff00ffff 	.word	0xff00ffff
 8000384:	fffff9ff 	.word	0xfffff9ff
 8000388:	40001400 	.word	0x40001400

0800038c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800038c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800038e:	6802      	ldr	r2, [r0, #0]
 8000390:	4b03      	ldr	r3, [pc, #12]	; (80003a0 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000392:	429a      	cmp	r2, r3
 8000394:	d000      	beq.n	8000398 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000396:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8000398:	f000 fa58 	bl	800084c <HAL_IncTick>
}
 800039c:	e7fb      	b.n	8000396 <HAL_TIM_PeriodElapsedCallback+0xa>
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	40001000 	.word	0x40001000

080003a4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a6:	e7fe      	b.n	80003a6 <Error_Handler+0x2>

080003a8 <MX_TIM2_Init>:
{
 80003a8:	b500      	push	{lr}
 80003aa:	b08d      	sub	sp, #52	; 0x34
  TIM_Encoder_InitTypeDef sConfig = {0};
 80003ac:	2224      	movs	r2, #36	; 0x24
 80003ae:	2100      	movs	r1, #0
 80003b0:	a803      	add	r0, sp, #12
 80003b2:	f001 fedd 	bl	8002170 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003b6:	220c      	movs	r2, #12
 80003b8:	2100      	movs	r1, #0
 80003ba:	4668      	mov	r0, sp
 80003bc:	f001 fed8 	bl	8002170 <memset>
  htim2.Instance = TIM2;
 80003c0:	4813      	ldr	r0, [pc, #76]	; (8000410 <MX_TIM2_Init+0x68>)
 80003c2:	2380      	movs	r3, #128	; 0x80
 80003c4:	05db      	lsls	r3, r3, #23
 80003c6:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003cc:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 80003ce:	4a11      	ldr	r2, [pc, #68]	; (8000414 <MX_TIM2_Init+0x6c>)
 80003d0:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003d2:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003d4:	3380      	adds	r3, #128	; 0x80
 80003d6:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80003d8:	3b7d      	subs	r3, #125	; 0x7d
 80003da:	9303      	str	r3, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80003dc:	2201      	movs	r2, #1
 80003de:	9205      	str	r2, [sp, #20]
  sConfig.IC1Filter = 10;
 80003e0:	3307      	adds	r3, #7
 80003e2:	9307      	str	r3, [sp, #28]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80003e4:	9209      	str	r2, [sp, #36]	; 0x24
  sConfig.IC2Filter = 10;
 80003e6:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80003e8:	a903      	add	r1, sp, #12
 80003ea:	f001 fbc1 	bl	8001b70 <HAL_TIM_Encoder_Init>
 80003ee:	2800      	cmp	r0, #0
 80003f0:	d10a      	bne.n	8000408 <MX_TIM2_Init+0x60>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003f2:	2300      	movs	r3, #0
 80003f4:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f6:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003f8:	4805      	ldr	r0, [pc, #20]	; (8000410 <MX_TIM2_Init+0x68>)
 80003fa:	4669      	mov	r1, sp
 80003fc:	f001 fd18 	bl	8001e30 <HAL_TIMEx_MasterConfigSynchronization>
 8000400:	2800      	cmp	r0, #0
 8000402:	d103      	bne.n	800040c <MX_TIM2_Init+0x64>
}
 8000404:	b00d      	add	sp, #52	; 0x34
 8000406:	bd00      	pop	{pc}
    Error_Handler();
 8000408:	f7ff ffcc 	bl	80003a4 <Error_Handler>
    Error_Handler();
 800040c:	f7ff ffca 	bl	80003a4 <Error_Handler>
 8000410:	20000090 	.word	0x20000090
 8000414:	0000ffff 	.word	0x0000ffff

08000418 <MX_SPI1_Init>:
{
 8000418:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 800041a:	4811      	ldr	r0, [pc, #68]	; (8000460 <MX_SPI1_Init+0x48>)
 800041c:	4b11      	ldr	r3, [pc, #68]	; (8000464 <MX_SPI1_Init+0x4c>)
 800041e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000420:	2382      	movs	r3, #130	; 0x82
 8000422:	005b      	lsls	r3, r3, #1
 8000424:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000426:	2300      	movs	r3, #0
 8000428:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800042a:	22e0      	movs	r2, #224	; 0xe0
 800042c:	00d2      	lsls	r2, r2, #3
 800042e:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000430:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000432:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000434:	2280      	movs	r2, #128	; 0x80
 8000436:	0092      	lsls	r2, r2, #2
 8000438:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800043a:	3af1      	subs	r2, #241	; 0xf1
 800043c:	3aff      	subs	r2, #255	; 0xff
 800043e:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000440:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000442:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000444:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000446:	3a09      	subs	r2, #9
 8000448:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800044a:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800044c:	3308      	adds	r3, #8
 800044e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000450:	f001 f87c 	bl	800154c <HAL_SPI_Init>
 8000454:	2800      	cmp	r0, #0
 8000456:	d100      	bne.n	800045a <MX_SPI1_Init+0x42>
}
 8000458:	bd10      	pop	{r4, pc}
    Error_Handler();
 800045a:	f7ff ffa3 	bl	80003a4 <Error_Handler>
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	2000002c 	.word	0x2000002c
 8000464:	40013000 	.word	0x40013000

08000468 <MX_TIM4_Init>:
{
 8000468:	b500      	push	{lr}
 800046a:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800046c:	2210      	movs	r2, #16
 800046e:	2100      	movs	r1, #0
 8000470:	a804      	add	r0, sp, #16
 8000472:	f001 fe7d 	bl	8002170 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000476:	220c      	movs	r2, #12
 8000478:	2100      	movs	r1, #0
 800047a:	a801      	add	r0, sp, #4
 800047c:	f001 fe78 	bl	8002170 <memset>
  htim4.Instance = TIM4;
 8000480:	4815      	ldr	r0, [pc, #84]	; (80004d8 <MX_TIM4_Init+0x70>)
 8000482:	4b16      	ldr	r3, [pc, #88]	; (80004dc <MX_TIM4_Init+0x74>)
 8000484:	6003      	str	r3, [r0, #0]
  htim4.Init.Prescaler = 63999;
 8000486:	4b16      	ldr	r3, [pc, #88]	; (80004e0 <MX_TIM4_Init+0x78>)
 8000488:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800048a:	2300      	movs	r3, #0
 800048c:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 2000;
 800048e:	22fa      	movs	r2, #250	; 0xfa
 8000490:	00d2      	lsls	r2, r2, #3
 8000492:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000494:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000496:	3380      	adds	r3, #128	; 0x80
 8000498:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800049a:	f001 fb39 	bl	8001b10 <HAL_TIM_Base_Init>
 800049e:	2800      	cmp	r0, #0
 80004a0:	d113      	bne.n	80004ca <MX_TIM4_Init+0x62>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a2:	2380      	movs	r3, #128	; 0x80
 80004a4:	015b      	lsls	r3, r3, #5
 80004a6:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80004a8:	480b      	ldr	r0, [pc, #44]	; (80004d8 <MX_TIM4_Init+0x70>)
 80004aa:	a904      	add	r1, sp, #16
 80004ac:	f001 fbca 	bl	8001c44 <HAL_TIM_ConfigClockSource>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d10c      	bne.n	80004ce <MX_TIM4_Init+0x66>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b4:	2300      	movs	r3, #0
 80004b6:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b8:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80004ba:	4807      	ldr	r0, [pc, #28]	; (80004d8 <MX_TIM4_Init+0x70>)
 80004bc:	a901      	add	r1, sp, #4
 80004be:	f001 fcb7 	bl	8001e30 <HAL_TIMEx_MasterConfigSynchronization>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	d105      	bne.n	80004d2 <MX_TIM4_Init+0x6a>
}
 80004c6:	b009      	add	sp, #36	; 0x24
 80004c8:	bd00      	pop	{pc}
    Error_Handler();
 80004ca:	f7ff ff6b 	bl	80003a4 <Error_Handler>
    Error_Handler();
 80004ce:	f7ff ff69 	bl	80003a4 <Error_Handler>
    Error_Handler();
 80004d2:	f7ff ff67 	bl	80003a4 <Error_Handler>
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	200000dc 	.word	0x200000dc
 80004dc:	40000800 	.word	0x40000800
 80004e0:	0000f9ff 	.word	0x0000f9ff

080004e4 <SystemClock_Config>:
{
 80004e4:	b500      	push	{lr}
 80004e6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e8:	223c      	movs	r2, #60	; 0x3c
 80004ea:	2100      	movs	r1, #0
 80004ec:	a805      	add	r0, sp, #20
 80004ee:	f001 fe3f 	bl	8002170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f2:	2210      	movs	r2, #16
 80004f4:	2100      	movs	r1, #0
 80004f6:	a801      	add	r0, sp, #4
 80004f8:	f001 fe3a 	bl	8002170 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004fc:	2080      	movs	r0, #128	; 0x80
 80004fe:	0080      	lsls	r0, r0, #2
 8000500:	f000 fae6 	bl	8000ad0 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000504:	2302      	movs	r3, #2
 8000506:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000508:	2280      	movs	r2, #128	; 0x80
 800050a:	0052      	lsls	r2, r2, #1
 800050c:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800050e:	2200      	movs	r2, #0
 8000510:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000512:	2140      	movs	r1, #64	; 0x40
 8000514:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000516:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000518:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800051a:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 800051c:	3306      	adds	r3, #6
 800051e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	029b      	lsls	r3, r3, #10
 8000524:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000526:	2380      	movs	r3, #128	; 0x80
 8000528:	049b      	lsls	r3, r3, #18
 800052a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800052c:	2380      	movs	r3, #128	; 0x80
 800052e:	059b      	lsls	r3, r3, #22
 8000530:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000532:	a805      	add	r0, sp, #20
 8000534:	f000 faf6 	bl	8000b24 <HAL_RCC_OscConfig>
 8000538:	2800      	cmp	r0, #0
 800053a:	d10e      	bne.n	800055a <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053c:	2307      	movs	r3, #7
 800053e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000540:	3b05      	subs	r3, #5
 8000542:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000544:	2300      	movs	r3, #0
 8000546:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000548:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800054a:	2102      	movs	r1, #2
 800054c:	a801      	add	r0, sp, #4
 800054e:	f000 fdd1 	bl	80010f4 <HAL_RCC_ClockConfig>
 8000552:	2800      	cmp	r0, #0
 8000554:	d103      	bne.n	800055e <SystemClock_Config+0x7a>
}
 8000556:	b015      	add	sp, #84	; 0x54
 8000558:	bd00      	pop	{pc}
    Error_Handler();
 800055a:	f7ff ff23 	bl	80003a4 <Error_Handler>
    Error_Handler();
 800055e:	f7ff ff21 	bl	80003a4 <Error_Handler>
	...

08000564 <main>:
{
 8000564:	b510      	push	{r4, lr}
  HAL_Init();
 8000566:	f000 f95d 	bl	8000824 <HAL_Init>
  SystemClock_Config();
 800056a:	f7ff ffbb 	bl	80004e4 <SystemClock_Config>
  MX_GPIO_Init();
 800056e:	f7ff fe55 	bl	800021c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000572:	f7ff ff19 	bl	80003a8 <MX_TIM2_Init>
  MX_TIM7_Init();
 8000576:	f7ff fecb 	bl	8000310 <MX_TIM7_Init>
  MX_SPI1_Init();
 800057a:	f7ff ff4d 	bl	8000418 <MX_SPI1_Init>
  MX_TIM4_Init();
 800057e:	f7ff ff73 	bl	8000468 <MX_TIM4_Init>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000582:	4804      	ldr	r0, [pc, #16]	; (8000594 <main+0x30>)
 8000584:	213c      	movs	r1, #60	; 0x3c
 8000586:	f001 fbee 	bl	8001d66 <HAL_TIM_Encoder_Start>
  app_encoder_init();
 800058a:	f001 fcf3 	bl	8001f74 <app_encoder_init>
	  app_encoder_loop();
 800058e:	f001 fd61 	bl	8002054 <app_encoder_loop>
  while (1)
 8000592:	e7fc      	b.n	800058e <main+0x2a>
 8000594:	20000090 	.word	0x20000090

08000598 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000598:	b500      	push	{lr}
 800059a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800059c:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <HAL_MspInit+0x34>)
 800059e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80005a0:	2201      	movs	r2, #1
 80005a2:	4311      	orrs	r1, r2
 80005a4:	6419      	str	r1, [r3, #64]	; 0x40
 80005a6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80005a8:	400a      	ands	r2, r1
 80005aa:	9200      	str	r2, [sp, #0]
 80005ac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005b0:	2180      	movs	r1, #128	; 0x80
 80005b2:	0549      	lsls	r1, r1, #21
 80005b4:	430a      	orrs	r2, r1
 80005b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80005b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005ba:	400b      	ands	r3, r1
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80005c0:	20c0      	movs	r0, #192	; 0xc0
 80005c2:	00c0      	lsls	r0, r0, #3
 80005c4:	f000 f954 	bl	8000870 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c8:	b003      	add	sp, #12
 80005ca:	bd00      	pop	{pc}
 80005cc:	40021000 	.word	0x40021000

080005d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005d0:	b530      	push	{r4, r5, lr}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d6:	2214      	movs	r2, #20
 80005d8:	2100      	movs	r1, #0
 80005da:	a803      	add	r0, sp, #12
 80005dc:	f001 fdc8 	bl	8002170 <memset>
  if(hspi->Instance==SPI1)
 80005e0:	6822      	ldr	r2, [r4, #0]
 80005e2:	4b1a      	ldr	r3, [pc, #104]	; (800064c <HAL_SPI_MspInit+0x7c>)
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d001      	beq.n	80005ec <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80005e8:	b009      	add	sp, #36	; 0x24
 80005ea:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005ec:	4b18      	ldr	r3, [pc, #96]	; (8000650 <HAL_SPI_MspInit+0x80>)
 80005ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005f0:	2180      	movs	r1, #128	; 0x80
 80005f2:	0149      	lsls	r1, r1, #5
 80005f4:	430a      	orrs	r2, r1
 80005f6:	641a      	str	r2, [r3, #64]	; 0x40
 80005f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005fa:	400a      	ands	r2, r1
 80005fc:	9200      	str	r2, [sp, #0]
 80005fe:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000602:	2401      	movs	r4, #1
 8000604:	4322      	orrs	r2, r4
 8000606:	635a      	str	r2, [r3, #52]	; 0x34
 8000608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800060a:	4022      	ands	r2, r4
 800060c:	9201      	str	r2, [sp, #4]
 800060e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000610:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000612:	2208      	movs	r2, #8
 8000614:	4311      	orrs	r1, r2
 8000616:	6359      	str	r1, [r3, #52]	; 0x34
 8000618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800061a:	401a      	ands	r2, r3
 800061c:	9202      	str	r2, [sp, #8]
 800061e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000624:	2502      	movs	r5, #2
 8000626:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000628:	20a0      	movs	r0, #160	; 0xa0
 800062a:	a903      	add	r1, sp, #12
 800062c:	05c0      	lsls	r0, r0, #23
 800062e:	f000 f967 	bl	8000900 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000632:	2380      	movs	r3, #128	; 0x80
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000638:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8000640:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000642:	a903      	add	r1, sp, #12
 8000644:	4803      	ldr	r0, [pc, #12]	; (8000654 <HAL_SPI_MspInit+0x84>)
 8000646:	f000 f95b 	bl	8000900 <HAL_GPIO_Init>
}
 800064a:	e7cd      	b.n	80005e8 <HAL_SPI_MspInit+0x18>
 800064c:	40013000 	.word	0x40013000
 8000650:	40021000 	.word	0x40021000
 8000654:	50000c00 	.word	0x50000c00

08000658 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000658:	b510      	push	{r4, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	2214      	movs	r2, #20
 8000660:	2100      	movs	r1, #0
 8000662:	a803      	add	r0, sp, #12
 8000664:	f001 fd84 	bl	8002170 <memset>
  if(htim_encoder->Instance==TIM2)
 8000668:	6822      	ldr	r2, [r4, #0]
 800066a:	2380      	movs	r3, #128	; 0x80
 800066c:	05db      	lsls	r3, r3, #23
 800066e:	429a      	cmp	r2, r3
 8000670:	d001      	beq.n	8000676 <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000672:	b008      	add	sp, #32
 8000674:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000676:	4a0d      	ldr	r2, [pc, #52]	; (80006ac <HAL_TIM_Encoder_MspInit+0x54>)
 8000678:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800067a:	2301      	movs	r3, #1
 800067c:	4319      	orrs	r1, r3
 800067e:	63d1      	str	r1, [r2, #60]	; 0x3c
 8000680:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000682:	4019      	ands	r1, r3
 8000684:	9101      	str	r1, [sp, #4]
 8000686:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000688:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800068a:	4319      	orrs	r1, r3
 800068c:	6351      	str	r1, [r2, #52]	; 0x34
 800068e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000690:	4013      	ands	r3, r2
 8000692:	9302      	str	r3, [sp, #8]
 8000694:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000696:	2303      	movs	r3, #3
 8000698:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069a:	3b01      	subs	r3, #1
 800069c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800069e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a0:	20a0      	movs	r0, #160	; 0xa0
 80006a2:	a903      	add	r1, sp, #12
 80006a4:	05c0      	lsls	r0, r0, #23
 80006a6:	f000 f92b 	bl	8000900 <HAL_GPIO_Init>
}
 80006aa:	e7e2      	b.n	8000672 <HAL_TIM_Encoder_MspInit+0x1a>
 80006ac:	40021000 	.word	0x40021000

080006b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006b0:	b500      	push	{lr}
 80006b2:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM4)
 80006b4:	6802      	ldr	r2, [r0, #0]
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <HAL_TIM_Base_MspInit+0x34>)
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d001      	beq.n	80006c0 <HAL_TIM_Base_MspInit+0x10>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80006bc:	b003      	add	sp, #12
 80006be:	bd00      	pop	{pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 80006c0:	4a09      	ldr	r2, [pc, #36]	; (80006e8 <HAL_TIM_Base_MspInit+0x38>)
 80006c2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80006c4:	2304      	movs	r3, #4
 80006c6:	4319      	orrs	r1, r3
 80006c8:	63d1      	str	r1, [r2, #60]	; 0x3c
 80006ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80006cc:	4013      	ands	r3, r2
 80006ce:	9301      	str	r3, [sp, #4]
 80006d0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_TIM4_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	2010      	movs	r0, #16
 80006d8:	f000 f8d6 	bl	8000888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_TIM4_IRQn);
 80006dc:	2010      	movs	r0, #16
 80006de:	f000 f903 	bl	80008e8 <HAL_NVIC_EnableIRQ>
}
 80006e2:	e7eb      	b.n	80006bc <HAL_TIM_Base_MspInit+0xc>
 80006e4:	40000800 	.word	0x40000800
 80006e8:	40021000 	.word	0x40021000

080006ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ec:	b530      	push	{r4, r5, lr}
 80006ee:	b087      	sub	sp, #28
 80006f0:	0005      	movs	r5, r0
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80006f2:	4a20      	ldr	r2, [pc, #128]	; (8000774 <HAL_InitTick+0x88>)
 80006f4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80006f6:	2310      	movs	r3, #16
 80006f8:	4319      	orrs	r1, r3
 80006fa:	63d1      	str	r1, [r2, #60]	; 0x3c
 80006fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80006fe:	4013      	ands	r3, r2
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	9b00      	ldr	r3, [sp, #0]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000704:	a901      	add	r1, sp, #4
 8000706:	a802      	add	r0, sp, #8
 8000708:	f000 fdd4 	bl	80012b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800070c:	9b05      	ldr	r3, [sp, #20]
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800070e:	2b00      	cmp	r3, #0
 8000710:	d117      	bne.n	8000742 <HAL_InitTick+0x56>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000712:	f000 fdbb 	bl	800128c <HAL_RCC_GetPCLK1Freq>
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000716:	4918      	ldr	r1, [pc, #96]	; (8000778 <HAL_InitTick+0x8c>)
 8000718:	f7ff fcf4 	bl	8000104 <__udivsi3>
 800071c:	1e42      	subs	r2, r0, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <HAL_InitTick+0x90>)
 8000720:	4917      	ldr	r1, [pc, #92]	; (8000780 <HAL_InitTick+0x94>)
 8000722:	0018      	movs	r0, r3
 8000724:	6019      	str	r1, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <HAL_InitTick+0x98>)
 8000728:	60c3      	str	r3, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800072a:	6042      	str	r2, [r0, #4]
  htim6.Init.ClockDivision = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000730:	6083      	str	r3, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000732:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000734:	f001 f9ec 	bl	8001b10 <HAL_TIM_Base_Init>
 8000738:	1e04      	subs	r4, r0, #0
  if (status == HAL_OK)
 800073a:	d006      	beq.n	800074a <HAL_InitTick+0x5e>
    }
  }

 /* Return function status */
  return status;
}
 800073c:	0020      	movs	r0, r4
 800073e:	b007      	add	sp, #28
 8000740:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000742:	f000 fda3 	bl	800128c <HAL_RCC_GetPCLK1Freq>
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	e7e5      	b.n	8000716 <HAL_InitTick+0x2a>
    status = HAL_TIM_Base_Start_IT(&htim6);
 800074a:	480c      	ldr	r0, [pc, #48]	; (800077c <HAL_InitTick+0x90>)
 800074c:	f001 f88a 	bl	8001864 <HAL_TIM_Base_Start_IT>
 8000750:	1e04      	subs	r4, r0, #0
    if (status == HAL_OK)
 8000752:	d1f3      	bne.n	800073c <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8000754:	2011      	movs	r0, #17
 8000756:	f000 f8c7 	bl	80008e8 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800075a:	2d03      	cmp	r5, #3
 800075c:	d901      	bls.n	8000762 <HAL_InitTick+0x76>
        status = HAL_ERROR;
 800075e:	2401      	movs	r4, #1
 8000760:	e7ec      	b.n	800073c <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, TickPriority, 0U);
 8000762:	2200      	movs	r2, #0
 8000764:	0029      	movs	r1, r5
 8000766:	2011      	movs	r0, #17
 8000768:	f000 f88e 	bl	8000888 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_InitTick+0x9c>)
 800076e:	601d      	str	r5, [r3, #0]
 8000770:	e7e4      	b.n	800073c <HAL_InitTick+0x50>
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	40021000 	.word	0x40021000
 8000778:	000f4240 	.word	0x000f4240
 800077c:	20000128 	.word	0x20000128
 8000780:	40001000 	.word	0x40001000
 8000784:	000003e7 	.word	0x000003e7
 8000788:	20000008 	.word	0x20000008

0800078c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800078c:	e7fe      	b.n	800078c <NMI_Handler>

0800078e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078e:	e7fe      	b.n	800078e <HardFault_Handler>

08000790 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000790:	4770      	bx	lr

08000792 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000792:	4770      	bx	lr

08000794 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000794:	4770      	bx	lr

08000796 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000796:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */
  button_isr(); //button (press) interrupt routine
 8000798:	f001 fc12 	bl	8001fc0 <button_isr>
  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800079c:	2008      	movs	r0, #8
 800079e:	f000 f97f 	bl	8000aa0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80007a2:	bd10      	pop	{r4, pc}

080007a4 <TIM3_TIM4_IRQHandler>:

/**
  * @brief This function handles TIM3, TIM4 global Interrupt.
  */
void TIM3_TIM4_IRQHandler(void)
{
 80007a4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_TIM4_IRQn 0 */
  /* USER CODE END TIM3_TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80007a6:	4802      	ldr	r0, [pc, #8]	; (80007b0 <TIM3_TIM4_IRQHandler+0xc>)
 80007a8:	f001 f8a2 	bl	80018f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_TIM4_IRQn 1 */

  /* USER CODE END TIM3_TIM4_IRQn 1 */
}
 80007ac:	bd10      	pop	{r4, pc}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	200000dc 	.word	0x200000dc

080007b4 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80007b4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80007b6:	4802      	ldr	r0, [pc, #8]	; (80007c0 <TIM6_DAC_LPTIM1_IRQHandler+0xc>)
 80007b8:	f001 f89a 	bl	80018f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80007bc:	bd10      	pop	{r4, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	20000128 	.word	0x20000128

080007c4 <TIM7_LPTIM2_IRQHandler>:

/**
  * @brief This function handles TIM7 and LPTIM2 global Interrupt.
  */
void TIM7_LPTIM2_IRQHandler(void)
{
 80007c4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 0 */
	//button_timer_isr();
	timer_delay_isr();
 80007c6:	f001 fc57 	bl	8002078 <timer_delay_isr>
  /* USER CODE END TIM7_LPTIM2_IRQn 0 */

  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 1 */

  /* USER CODE END TIM7_LPTIM2_IRQn 1 */
}
 80007ca:	bd10      	pop	{r4, pc}

080007cc <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007cc:	4770      	bx	lr
	...

080007d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007d0:	480d      	ldr	r0, [pc, #52]	; (8000808 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007d4:	f7ff fffa 	bl	80007cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d8:	480c      	ldr	r0, [pc, #48]	; (800080c <LoopForever+0x6>)
  ldr r1, =_edata
 80007da:	490d      	ldr	r1, [pc, #52]	; (8000810 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007dc:	4a0d      	ldr	r2, [pc, #52]	; (8000814 <LoopForever+0xe>)
  movs r3, #0
 80007de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e0:	e002      	b.n	80007e8 <LoopCopyDataInit>

080007e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007e6:	3304      	adds	r3, #4

080007e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007ec:	d3f9      	bcc.n	80007e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ee:	4a0a      	ldr	r2, [pc, #40]	; (8000818 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007f0:	4c0a      	ldr	r4, [pc, #40]	; (800081c <LoopForever+0x16>)
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f4:	e001      	b.n	80007fa <LoopFillZerobss>

080007f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f8:	3204      	adds	r2, #4

080007fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007fc:	d3fb      	bcc.n	80007f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007fe:	f001 fcbf 	bl	8002180 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000802:	f7ff feaf 	bl	8000564 <main>

08000806 <LoopForever>:

LoopForever:
  b LoopForever
 8000806:	e7fe      	b.n	8000806 <LoopForever>
  ldr   r0, =_estack
 8000808:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800080c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000810:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000814:	08002248 	.word	0x08002248
  ldr r2, =_sbss
 8000818:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800081c:	20000188 	.word	0x20000188

08000820 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000820:	e7fe      	b.n	8000820 <ADC1_COMP_IRQHandler>
	...

08000824 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000824:	b510      	push	{r4, lr}
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000826:	4a08      	ldr	r2, [pc, #32]	; (8000848 <HAL_Init+0x24>)
 8000828:	6811      	ldr	r1, [r2, #0]
 800082a:	2380      	movs	r3, #128	; 0x80
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	430b      	orrs	r3, r1
 8000830:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000832:	2003      	movs	r0, #3
 8000834:	f7ff ff5a 	bl	80006ec <HAL_InitTick>
 8000838:	1e04      	subs	r4, r0, #0
 800083a:	d002      	beq.n	8000842 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800083c:	2401      	movs	r4, #1
  HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 800083e:	0020      	movs	r0, r4
 8000840:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8000842:	f7ff fea9 	bl	8000598 <HAL_MspInit>
 8000846:	e7fa      	b.n	800083e <HAL_Init+0x1a>
 8000848:	40022000 	.word	0x40022000

0800084c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800084c:	4b03      	ldr	r3, [pc, #12]	; (800085c <HAL_IncTick+0x10>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4a03      	ldr	r2, [pc, #12]	; (8000860 <HAL_IncTick+0x14>)
 8000852:	6811      	ldr	r1, [r2, #0]
 8000854:	185b      	adds	r3, r3, r1
 8000856:	6013      	str	r3, [r2, #0]
}
 8000858:	4770      	bx	lr
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	20000004 	.word	0x20000004
 8000860:	20000174 	.word	0x20000174

08000864 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000864:	4b01      	ldr	r3, [pc, #4]	; (800086c <HAL_GetTick+0x8>)
 8000866:	6818      	ldr	r0, [r3, #0]
}
 8000868:	4770      	bx	lr
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	20000174 	.word	0x20000174

08000870 <HAL_SYSCFG_StrobeDBattpinsConfig>:
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000870:	4a03      	ldr	r2, [pc, #12]	; (8000880 <HAL_SYSCFG_StrobeDBattpinsConfig+0x10>)
 8000872:	6813      	ldr	r3, [r2, #0]
 8000874:	4903      	ldr	r1, [pc, #12]	; (8000884 <HAL_SYSCFG_StrobeDBattpinsConfig+0x14>)
 8000876:	400b      	ands	r3, r1
 8000878:	4303      	orrs	r3, r0
 800087a:	6013      	str	r3, [r2, #0]
}
 800087c:	4770      	bx	lr
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	40010000 	.word	0x40010000
 8000884:	fffff9ff 	.word	0xfffff9ff

08000888 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000888:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 800088a:	2800      	cmp	r0, #0
 800088c:	db11      	blt.n	80008b2 <HAL_NVIC_SetPriority+0x2a>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800088e:	0883      	lsrs	r3, r0, #2
 8000890:	4d13      	ldr	r5, [pc, #76]	; (80008e0 <HAL_NVIC_SetPriority+0x58>)
 8000892:	33c0      	adds	r3, #192	; 0xc0
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	595c      	ldr	r4, [r3, r5]
 8000898:	2203      	movs	r2, #3
 800089a:	4010      	ands	r0, r2
 800089c:	00c0      	lsls	r0, r0, #3
 800089e:	32fc      	adds	r2, #252	; 0xfc
 80008a0:	0016      	movs	r6, r2
 80008a2:	4086      	lsls	r6, r0
 80008a4:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008a6:	0189      	lsls	r1, r1, #6
 80008a8:	400a      	ands	r2, r1
 80008aa:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008ac:	4322      	orrs	r2, r4
 80008ae:	515a      	str	r2, [r3, r5]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008b2:	230f      	movs	r3, #15
 80008b4:	4003      	ands	r3, r0
 80008b6:	3b08      	subs	r3, #8
 80008b8:	089b      	lsrs	r3, r3, #2
 80008ba:	3306      	adds	r3, #6
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	4a09      	ldr	r2, [pc, #36]	; (80008e4 <HAL_NVIC_SetPriority+0x5c>)
 80008c0:	4694      	mov	ip, r2
 80008c2:	4463      	add	r3, ip
 80008c4:	685c      	ldr	r4, [r3, #4]
 80008c6:	2203      	movs	r2, #3
 80008c8:	4010      	ands	r0, r2
 80008ca:	00c0      	lsls	r0, r0, #3
 80008cc:	32fc      	adds	r2, #252	; 0xfc
 80008ce:	0015      	movs	r5, r2
 80008d0:	4085      	lsls	r5, r0
 80008d2:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008d4:	0189      	lsls	r1, r1, #6
 80008d6:	400a      	ands	r2, r1
 80008d8:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008da:	4322      	orrs	r2, r4
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	e7e7      	b.n	80008b0 <HAL_NVIC_SetPriority+0x28>
 80008e0:	e000e100 	.word	0xe000e100
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80008e8:	2800      	cmp	r0, #0
 80008ea:	db05      	blt.n	80008f8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ec:	231f      	movs	r3, #31
 80008ee:	4018      	ands	r0, r3
 80008f0:	3b1e      	subs	r3, #30
 80008f2:	4083      	lsls	r3, r0
 80008f4:	4a01      	ldr	r2, [pc, #4]	; (80008fc <HAL_NVIC_EnableIRQ+0x14>)
 80008f6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80008f8:	4770      	bx	lr
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	e000e100 	.word	0xe000e100

08000900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000900:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00u;
 8000902:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000904:	e059      	b.n	80009ba <HAL_GPIO_Init+0xba>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000906:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000908:	005f      	lsls	r7, r3, #1
 800090a:	2403      	movs	r4, #3
 800090c:	40bc      	lsls	r4, r7
 800090e:	43a6      	bics	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000910:	68cc      	ldr	r4, [r1, #12]
 8000912:	40bc      	lsls	r4, r7
 8000914:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000916:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000918:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800091a:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800091c:	684e      	ldr	r6, [r1, #4]
 800091e:	0936      	lsrs	r6, r6, #4
 8000920:	2201      	movs	r2, #1
 8000922:	4032      	ands	r2, r6
 8000924:	409a      	lsls	r2, r3
 8000926:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000928:	6042      	str	r2, [r0, #4]
 800092a:	e056      	b.n	80009da <HAL_GPIO_Init+0xda>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800092c:	08de      	lsrs	r6, r3, #3
 800092e:	3608      	adds	r6, #8
 8000930:	00b6      	lsls	r6, r6, #2
 8000932:	5837      	ldr	r7, [r6, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000934:	3205      	adds	r2, #5
 8000936:	401a      	ands	r2, r3
 8000938:	0092      	lsls	r2, r2, #2
 800093a:	240f      	movs	r4, #15
 800093c:	4094      	lsls	r4, r2
 800093e:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000940:	690c      	ldr	r4, [r1, #16]
 8000942:	4094      	lsls	r4, r2
 8000944:	0022      	movs	r2, r4
 8000946:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3u] = temp;
 8000948:	5032      	str	r2, [r6, r0]
 800094a:	e059      	b.n	8000a00 <HAL_GPIO_Init+0x100>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800094c:	2604      	movs	r6, #4
 800094e:	e000      	b.n	8000952 <HAL_GPIO_Init+0x52>
 8000950:	2600      	movs	r6, #0
 8000952:	40a6      	lsls	r6, r4
 8000954:	0034      	movs	r4, r6
 8000956:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2u] = temp;
 8000958:	4e44      	ldr	r6, [pc, #272]	; (8000a6c <HAL_GPIO_Init+0x16c>)
 800095a:	3218      	adds	r2, #24
 800095c:	0092      	lsls	r2, r2, #2
 800095e:	5194      	str	r4, [r2, r6]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000960:	6837      	ldr	r7, [r6, #0]
        temp &= ~(iocurrent);
 8000962:	43ea      	mvns	r2, r5
 8000964:	003e      	movs	r6, r7
 8000966:	43ae      	bics	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000968:	684c      	ldr	r4, [r1, #4]
 800096a:	02e4      	lsls	r4, r4, #11
 800096c:	d501      	bpl.n	8000972 <HAL_GPIO_Init+0x72>
        {
          temp |= iocurrent;
 800096e:	003e      	movs	r6, r7
 8000970:	432e      	orrs	r6, r5
        }
        EXTI->RTSR1 = temp;
 8000972:	4c3e      	ldr	r4, [pc, #248]	; (8000a6c <HAL_GPIO_Init+0x16c>)
 8000974:	6026      	str	r6, [r4, #0]

        temp = EXTI->FTSR1;
 8000976:	6867      	ldr	r7, [r4, #4]
        temp &= ~(iocurrent);
 8000978:	003e      	movs	r6, r7
 800097a:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800097c:	684c      	ldr	r4, [r1, #4]
 800097e:	02a4      	lsls	r4, r4, #10
 8000980:	d501      	bpl.n	8000986 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 8000982:	003e      	movs	r6, r7
 8000984:	432e      	orrs	r6, r5
        }
        EXTI->FTSR1 = temp;
 8000986:	4c39      	ldr	r4, [pc, #228]	; (8000a6c <HAL_GPIO_Init+0x16c>)
 8000988:	6066      	str	r6, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800098a:	2684      	movs	r6, #132	; 0x84
 800098c:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(iocurrent);
 800098e:	003e      	movs	r6, r7
 8000990:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000992:	684c      	ldr	r4, [r1, #4]
 8000994:	03a4      	lsls	r4, r4, #14
 8000996:	d501      	bpl.n	800099c <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 8000998:	003e      	movs	r6, r7
 800099a:	432e      	orrs	r6, r5
        }
        EXTI->EMR1 = temp;
 800099c:	4c33      	ldr	r4, [pc, #204]	; (8000a6c <HAL_GPIO_Init+0x16c>)
 800099e:	2784      	movs	r7, #132	; 0x84
 80009a0:	51e6      	str	r6, [r4, r7]

        temp = EXTI->IMR1;
 80009a2:	2680      	movs	r6, #128	; 0x80
 80009a4:	59a6      	ldr	r6, [r4, r6]
        temp &= ~(iocurrent);
 80009a6:	4032      	ands	r2, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80009a8:	684c      	ldr	r4, [r1, #4]
 80009aa:	03e4      	lsls	r4, r4, #15
 80009ac:	d501      	bpl.n	80009b2 <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 80009ae:	002a      	movs	r2, r5
 80009b0:	4332      	orrs	r2, r6
        }
        EXTI->IMR1 = temp;
 80009b2:	4d2e      	ldr	r5, [pc, #184]	; (8000a6c <HAL_GPIO_Init+0x16c>)
 80009b4:	2480      	movs	r4, #128	; 0x80
 80009b6:	512a      	str	r2, [r5, r4]
      }
    }

    position++;
 80009b8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ba:	680c      	ldr	r4, [r1, #0]
 80009bc:	0022      	movs	r2, r4
 80009be:	40da      	lsrs	r2, r3
 80009c0:	d053      	beq.n	8000a6a <HAL_GPIO_Init+0x16a>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009c2:	2201      	movs	r2, #1
 80009c4:	409a      	lsls	r2, r3
 80009c6:	0025      	movs	r5, r4
 80009c8:	4015      	ands	r5, r2
    if (iocurrent != 0x00u)
 80009ca:	4214      	tst	r4, r2
 80009cc:	d0f4      	beq.n	80009b8 <HAL_GPIO_Init+0xb8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009ce:	684e      	ldr	r6, [r1, #4]
 80009d0:	2403      	movs	r4, #3
 80009d2:	4034      	ands	r4, r6
 80009d4:	3c01      	subs	r4, #1
 80009d6:	2c01      	cmp	r4, #1
 80009d8:	d995      	bls.n	8000906 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009da:	684c      	ldr	r4, [r1, #4]
 80009dc:	2203      	movs	r2, #3
 80009de:	4022      	ands	r2, r4
 80009e0:	2a03      	cmp	r2, #3
 80009e2:	d008      	beq.n	80009f6 <HAL_GPIO_Init+0xf6>
        temp = GPIOx->PUPDR;
 80009e4:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009e6:	005e      	lsls	r6, r3, #1
 80009e8:	2203      	movs	r2, #3
 80009ea:	40b2      	lsls	r2, r6
 80009ec:	4394      	bics	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009ee:	688a      	ldr	r2, [r1, #8]
 80009f0:	40b2      	lsls	r2, r6
 80009f2:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80009f4:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009f6:	684c      	ldr	r4, [r1, #4]
 80009f8:	2203      	movs	r2, #3
 80009fa:	4022      	ands	r2, r4
 80009fc:	2a02      	cmp	r2, #2
 80009fe:	d095      	beq.n	800092c <HAL_GPIO_Init+0x2c>
      temp = GPIOx->MODER;
 8000a00:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a02:	005e      	lsls	r6, r3, #1
 8000a04:	2203      	movs	r2, #3
 8000a06:	0017      	movs	r7, r2
 8000a08:	40b7      	lsls	r7, r6
 8000a0a:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a0c:	684f      	ldr	r7, [r1, #4]
 8000a0e:	403a      	ands	r2, r7
 8000a10:	40b2      	lsls	r2, r6
 8000a12:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000a14:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a16:	684c      	ldr	r4, [r1, #4]
 8000a18:	22c0      	movs	r2, #192	; 0xc0
 8000a1a:	0292      	lsls	r2, r2, #10
 8000a1c:	4214      	tst	r4, r2
 8000a1e:	d0cb      	beq.n	80009b8 <HAL_GPIO_Init+0xb8>
        temp = EXTI->EXTICR[position >> 2u];
 8000a20:	089a      	lsrs	r2, r3, #2
 8000a22:	0014      	movs	r4, r2
 8000a24:	3418      	adds	r4, #24
 8000a26:	00a4      	lsls	r4, r4, #2
 8000a28:	4e10      	ldr	r6, [pc, #64]	; (8000a6c <HAL_GPIO_Init+0x16c>)
 8000a2a:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000a2c:	2403      	movs	r4, #3
 8000a2e:	401c      	ands	r4, r3
 8000a30:	00e4      	lsls	r4, r4, #3
 8000a32:	260f      	movs	r6, #15
 8000a34:	40a6      	lsls	r6, r4
 8000a36:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000a38:	26a0      	movs	r6, #160	; 0xa0
 8000a3a:	05f6      	lsls	r6, r6, #23
 8000a3c:	42b0      	cmp	r0, r6
 8000a3e:	d087      	beq.n	8000950 <HAL_GPIO_Init+0x50>
 8000a40:	4e0b      	ldr	r6, [pc, #44]	; (8000a70 <HAL_GPIO_Init+0x170>)
 8000a42:	42b0      	cmp	r0, r6
 8000a44:	d00b      	beq.n	8000a5e <HAL_GPIO_Init+0x15e>
 8000a46:	4e0b      	ldr	r6, [pc, #44]	; (8000a74 <HAL_GPIO_Init+0x174>)
 8000a48:	42b0      	cmp	r0, r6
 8000a4a:	d00a      	beq.n	8000a62 <HAL_GPIO_Init+0x162>
 8000a4c:	4e0a      	ldr	r6, [pc, #40]	; (8000a78 <HAL_GPIO_Init+0x178>)
 8000a4e:	42b0      	cmp	r0, r6
 8000a50:	d009      	beq.n	8000a66 <HAL_GPIO_Init+0x166>
 8000a52:	4e0a      	ldr	r6, [pc, #40]	; (8000a7c <HAL_GPIO_Init+0x17c>)
 8000a54:	42b0      	cmp	r0, r6
 8000a56:	d100      	bne.n	8000a5a <HAL_GPIO_Init+0x15a>
 8000a58:	e778      	b.n	800094c <HAL_GPIO_Init+0x4c>
 8000a5a:	2605      	movs	r6, #5
 8000a5c:	e779      	b.n	8000952 <HAL_GPIO_Init+0x52>
 8000a5e:	2601      	movs	r6, #1
 8000a60:	e777      	b.n	8000952 <HAL_GPIO_Init+0x52>
 8000a62:	2602      	movs	r6, #2
 8000a64:	e775      	b.n	8000952 <HAL_GPIO_Init+0x52>
 8000a66:	2603      	movs	r6, #3
 8000a68:	e773      	b.n	8000952 <HAL_GPIO_Init+0x52>
  }
}
 8000a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a6c:	40021800 	.word	0x40021800
 8000a70:	50000400 	.word	0x50000400
 8000a74:	50000800 	.word	0x50000800
 8000a78:	50000c00 	.word	0x50000c00
 8000a7c:	50001000 	.word	0x50001000

08000a80 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a80:	2a00      	cmp	r2, #0
 8000a82:	d001      	beq.n	8000a88 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a84:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000a86:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a88:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000a8a:	e7fc      	b.n	8000a86 <HAL_GPIO_WritePin+0x6>

08000a8c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000a8c:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000a8e:	0013      	movs	r3, r2
 8000a90:	400b      	ands	r3, r1
 8000a92:	041b      	lsls	r3, r3, #16
 8000a94:	4391      	bics	r1, r2
 8000a96:	430b      	orrs	r3, r1
 8000a98:	6183      	str	r3, [r0, #24]
}
 8000a9a:	4770      	bx	lr

08000a9c <HAL_GPIO_EXTI_Rising_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8000a9c:	4770      	bx	lr

08000a9e <HAL_GPIO_EXTI_Falling_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8000a9e:	4770      	bx	lr

08000aa0 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000aa0:	b510      	push	{r4, lr}
 8000aa2:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	4218      	tst	r0, r3
 8000aaa:	d104      	bne.n	8000ab6 <HAL_GPIO_EXTI_IRQHandler+0x16>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000aae:	691b      	ldr	r3, [r3, #16]
 8000ab0:	4223      	tst	r3, r4
 8000ab2:	d105      	bne.n	8000ac0 <HAL_GPIO_EXTI_IRQHandler+0x20>
}
 8000ab4:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000ab6:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ab8:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000aba:	f7ff ffef 	bl	8000a9c <HAL_GPIO_EXTI_Rising_Callback>
 8000abe:	e7f5      	b.n	8000aac <HAL_GPIO_EXTI_IRQHandler+0xc>
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000ac0:	4b02      	ldr	r3, [pc, #8]	; (8000acc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ac2:	611c      	str	r4, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000ac4:	0020      	movs	r0, r4
 8000ac6:	f7ff ffea 	bl	8000a9e <HAL_GPIO_EXTI_Falling_Callback>
}
 8000aca:	e7f3      	b.n	8000ab4 <HAL_GPIO_EXTI_IRQHandler+0x14>
 8000acc:	40021800 	.word	0x40021800

08000ad0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ad0:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000ad2:	4a10      	ldr	r2, [pc, #64]	; (8000b14 <HAL_PWREx_ControlVoltageScaling+0x44>)
 8000ad4:	6813      	ldr	r3, [r2, #0]
 8000ad6:	4910      	ldr	r1, [pc, #64]	; (8000b18 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8000ad8:	400b      	ands	r3, r1
 8000ada:	4303      	orrs	r3, r0
 8000adc:	6013      	str	r3, [r2, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ade:	2380      	movs	r3, #128	; 0x80
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	4298      	cmp	r0, r3
 8000ae4:	d001      	beq.n	8000aea <HAL_PWREx_ControlVoltageScaling+0x1a>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000ae6:	2000      	movs	r0, #0
}
 8000ae8:	bd10      	pop	{r4, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	0058      	lsls	r0, r3, #1
 8000af0:	18c0      	adds	r0, r0, r3
 8000af2:	0040      	lsls	r0, r0, #1
 8000af4:	490a      	ldr	r1, [pc, #40]	; (8000b20 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8000af6:	f7ff fb05 	bl	8000104 <__udivsi3>
 8000afa:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <HAL_PWREx_ControlVoltageScaling+0x44>)
 8000afe:	695b      	ldr	r3, [r3, #20]
 8000b00:	055b      	lsls	r3, r3, #21
 8000b02:	d503      	bpl.n	8000b0c <HAL_PWREx_ControlVoltageScaling+0x3c>
      if (wait_loop_index != 0U)
 8000b04:	2800      	cmp	r0, #0
 8000b06:	d003      	beq.n	8000b10 <HAL_PWREx_ControlVoltageScaling+0x40>
        wait_loop_index--;
 8000b08:	3801      	subs	r0, #1
 8000b0a:	e7f7      	b.n	8000afc <HAL_PWREx_ControlVoltageScaling+0x2c>
  return HAL_OK;
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	e7eb      	b.n	8000ae8 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8000b10:	2003      	movs	r0, #3
 8000b12:	e7e9      	b.n	8000ae8 <HAL_PWREx_ControlVoltageScaling+0x18>
 8000b14:	40007000 	.word	0x40007000
 8000b18:	fffff9ff 	.word	0xfffff9ff
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	000f4240 	.word	0x000f4240

08000b24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b24:	b570      	push	{r4, r5, r6, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b2a:	d100      	bne.n	8000b2e <HAL_RCC_OscConfig+0xa>
 8000b2c:	e25e      	b.n	8000fec <HAL_RCC_OscConfig+0x4c8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b2e:	6803      	ldr	r3, [r0, #0]
 8000b30:	07db      	lsls	r3, r3, #31
 8000b32:	d539      	bpl.n	8000ba8 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b34:	4ac1      	ldr	r2, [pc, #772]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000b36:	6891      	ldr	r1, [r2, #8]
 8000b38:	2338      	movs	r3, #56	; 0x38
 8000b3a:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b3c:	68d1      	ldr	r1, [r2, #12]
 8000b3e:	2203      	movs	r2, #3
 8000b40:	400a      	ands	r2, r1

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000b42:	2b10      	cmp	r3, #16
 8000b44:	d026      	beq.n	8000b94 <HAL_RCC_OscConfig+0x70>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000b46:	2b08      	cmp	r3, #8
 8000b48:	d026      	beq.n	8000b98 <HAL_RCC_OscConfig+0x74>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b4a:	6863      	ldr	r3, [r4, #4]
 8000b4c:	2280      	movs	r2, #128	; 0x80
 8000b4e:	0252      	lsls	r2, r2, #9
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d07f      	beq.n	8000c54 <HAL_RCC_OscConfig+0x130>
 8000b54:	22a0      	movs	r2, #160	; 0xa0
 8000b56:	02d2      	lsls	r2, r2, #11
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d100      	bne.n	8000b5e <HAL_RCC_OscConfig+0x3a>
 8000b5c:	e081      	b.n	8000c62 <HAL_RCC_OscConfig+0x13e>
 8000b5e:	4bb7      	ldr	r3, [pc, #732]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	49b7      	ldr	r1, [pc, #732]	; (8000e40 <HAL_RCC_OscConfig+0x31c>)
 8000b64:	400a      	ands	r2, r1
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	49b6      	ldr	r1, [pc, #728]	; (8000e44 <HAL_RCC_OscConfig+0x320>)
 8000b6c:	400a      	ands	r2, r1
 8000b6e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b70:	6863      	ldr	r3, [r4, #4]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d100      	bne.n	8000b78 <HAL_RCC_OscConfig+0x54>
 8000b76:	e080      	b.n	8000c7a <HAL_RCC_OscConfig+0x156>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b78:	f7ff fe74 	bl	8000864 <HAL_GetTick>
 8000b7c:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000b7e:	4baf      	ldr	r3, [pc, #700]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	039b      	lsls	r3, r3, #14
 8000b84:	d410      	bmi.n	8000ba8 <HAL_RCC_OscConfig+0x84>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b86:	f7ff fe6d 	bl	8000864 <HAL_GetTick>
 8000b8a:	1b40      	subs	r0, r0, r5
 8000b8c:	2864      	cmp	r0, #100	; 0x64
 8000b8e:	d9f6      	bls.n	8000b7e <HAL_RCC_OscConfig+0x5a>
          {
            return HAL_TIMEOUT;
 8000b90:	2003      	movs	r0, #3
 8000b92:	e22c      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000b94:	2a03      	cmp	r2, #3
 8000b96:	d1d6      	bne.n	8000b46 <HAL_RCC_OscConfig+0x22>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b98:	4ba8      	ldr	r3, [pc, #672]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	039b      	lsls	r3, r3, #14
 8000b9e:	d503      	bpl.n	8000ba8 <HAL_RCC_OscConfig+0x84>
 8000ba0:	6863      	ldr	r3, [r4, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d100      	bne.n	8000ba8 <HAL_RCC_OscConfig+0x84>
 8000ba6:	e224      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ba8:	6823      	ldr	r3, [r4, #0]
 8000baa:	079b      	lsls	r3, r3, #30
 8000bac:	d531      	bpl.n	8000c12 <HAL_RCC_OscConfig+0xee>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000bae:	4aa3      	ldr	r2, [pc, #652]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000bb0:	6891      	ldr	r1, [r2, #8]
 8000bb2:	2338      	movs	r3, #56	; 0x38
 8000bb4:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000bb6:	68d1      	ldr	r1, [r2, #12]
 8000bb8:	2203      	movs	r2, #3
 8000bba:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000bbc:	2b10      	cmp	r3, #16
 8000bbe:	d06a      	beq.n	8000c96 <HAL_RCC_OscConfig+0x172>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d16b      	bne.n	8000c9c <HAL_RCC_OscConfig+0x178>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000bc4:	4a9d      	ldr	r2, [pc, #628]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000bc6:	6812      	ldr	r2, [r2, #0]
 8000bc8:	0552      	lsls	r2, r2, #21
 8000bca:	d503      	bpl.n	8000bd4 <HAL_RCC_OscConfig+0xb0>
 8000bcc:	68e2      	ldr	r2, [r4, #12]
 8000bce:	2a00      	cmp	r2, #0
 8000bd0:	d100      	bne.n	8000bd4 <HAL_RCC_OscConfig+0xb0>
 8000bd2:	e210      	b.n	8000ff6 <HAL_RCC_OscConfig+0x4d2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bd4:	4899      	ldr	r0, [pc, #612]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000bd6:	6842      	ldr	r2, [r0, #4]
 8000bd8:	499b      	ldr	r1, [pc, #620]	; (8000e48 <HAL_RCC_OscConfig+0x324>)
 8000bda:	400a      	ands	r2, r1
 8000bdc:	6961      	ldr	r1, [r4, #20]
 8000bde:	0209      	lsls	r1, r1, #8
 8000be0:	430a      	orrs	r2, r1
 8000be2:	6042      	str	r2, [r0, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d10d      	bne.n	8000c04 <HAL_RCC_OscConfig+0xe0>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000be8:	6803      	ldr	r3, [r0, #0]
 8000bea:	4998      	ldr	r1, [pc, #608]	; (8000e4c <HAL_RCC_OscConfig+0x328>)
 8000bec:	400b      	ands	r3, r1
 8000bee:	6921      	ldr	r1, [r4, #16]
 8000bf0:	430b      	orrs	r3, r1
 8000bf2:	6003      	str	r3, [r0, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000bf4:	6803      	ldr	r3, [r0, #0]
 8000bf6:	0adb      	lsrs	r3, r3, #11
 8000bf8:	2207      	movs	r2, #7
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	4b94      	ldr	r3, [pc, #592]	; (8000e50 <HAL_RCC_OscConfig+0x32c>)
 8000bfe:	40d3      	lsrs	r3, r2
 8000c00:	4a94      	ldr	r2, [pc, #592]	; (8000e54 <HAL_RCC_OscConfig+0x330>)
 8000c02:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000c04:	4b94      	ldr	r3, [pc, #592]	; (8000e58 <HAL_RCC_OscConfig+0x334>)
 8000c06:	6818      	ldr	r0, [r3, #0]
 8000c08:	f7ff fd70 	bl	80006ec <HAL_InitTick>
 8000c0c:	2800      	cmp	r0, #0
 8000c0e:	d000      	beq.n	8000c12 <HAL_RCC_OscConfig+0xee>
 8000c10:	e1f3      	b.n	8000ffa <HAL_RCC_OscConfig+0x4d6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c12:	6823      	ldr	r3, [r4, #0]
 8000c14:	071b      	lsls	r3, r3, #28
 8000c16:	d400      	bmi.n	8000c1a <HAL_RCC_OscConfig+0xf6>
 8000c18:	e081      	b.n	8000d1e <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000c1a:	4b88      	ldr	r3, [pc, #544]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000c1c:	689a      	ldr	r2, [r3, #8]
 8000c1e:	2338      	movs	r3, #56	; 0x38
 8000c20:	4013      	ands	r3, r2
 8000c22:	2b18      	cmp	r3, #24
 8000c24:	d073      	beq.n	8000d0e <HAL_RCC_OscConfig+0x1ea>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c26:	69a3      	ldr	r3, [r4, #24]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d100      	bne.n	8000c2e <HAL_RCC_OscConfig+0x10a>
 8000c2c:	e0b4      	b.n	8000d98 <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000c2e:	4a83      	ldr	r2, [pc, #524]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000c30:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8000c32:	2101      	movs	r1, #1
 8000c34:	430b      	orrs	r3, r1
 8000c36:	6613      	str	r3, [r2, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c38:	f7ff fe14 	bl	8000864 <HAL_GetTick>
 8000c3c:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000c3e:	4b7f      	ldr	r3, [pc, #508]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c42:	079b      	lsls	r3, r3, #30
 8000c44:	d46b      	bmi.n	8000d1e <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c46:	f7ff fe0d 	bl	8000864 <HAL_GetTick>
 8000c4a:	1b40      	subs	r0, r0, r5
 8000c4c:	2802      	cmp	r0, #2
 8000c4e:	d9f6      	bls.n	8000c3e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000c50:	2003      	movs	r0, #3
 8000c52:	e1cc      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c54:	4a79      	ldr	r2, [pc, #484]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000c56:	6811      	ldr	r1, [r2, #0]
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	025b      	lsls	r3, r3, #9
 8000c5c:	430b      	orrs	r3, r1
 8000c5e:	6013      	str	r3, [r2, #0]
 8000c60:	e786      	b.n	8000b70 <HAL_RCC_OscConfig+0x4c>
 8000c62:	4b76      	ldr	r3, [pc, #472]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000c64:	6819      	ldr	r1, [r3, #0]
 8000c66:	2280      	movs	r2, #128	; 0x80
 8000c68:	02d2      	lsls	r2, r2, #11
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	6819      	ldr	r1, [r3, #0]
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	0252      	lsls	r2, r2, #9
 8000c74:	430a      	orrs	r2, r1
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	e77a      	b.n	8000b70 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000c7a:	f7ff fdf3 	bl	8000864 <HAL_GetTick>
 8000c7e:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c80:	4b6e      	ldr	r3, [pc, #440]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	039b      	lsls	r3, r3, #14
 8000c86:	d58f      	bpl.n	8000ba8 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c88:	f7ff fdec 	bl	8000864 <HAL_GetTick>
 8000c8c:	1b40      	subs	r0, r0, r5
 8000c8e:	2864      	cmp	r0, #100	; 0x64
 8000c90:	d9f6      	bls.n	8000c80 <HAL_RCC_OscConfig+0x15c>
            return HAL_TIMEOUT;
 8000c92:	2003      	movs	r0, #3
 8000c94:	e1ab      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000c96:	2a02      	cmp	r2, #2
 8000c98:	d192      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x9c>
 8000c9a:	e793      	b.n	8000bc4 <HAL_RCC_OscConfig+0xa0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c9c:	68e3      	ldr	r3, [r4, #12]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d022      	beq.n	8000ce8 <HAL_RCC_OscConfig+0x1c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000ca2:	4a66      	ldr	r2, [pc, #408]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000ca4:	6813      	ldr	r3, [r2, #0]
 8000ca6:	4969      	ldr	r1, [pc, #420]	; (8000e4c <HAL_RCC_OscConfig+0x328>)
 8000ca8:	400b      	ands	r3, r1
 8000caa:	6921      	ldr	r1, [r4, #16]
 8000cac:	430b      	orrs	r3, r1
 8000cae:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8000cb0:	6811      	ldr	r1, [r2, #0]
 8000cb2:	2380      	movs	r3, #128	; 0x80
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	430b      	orrs	r3, r1
 8000cb8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000cba:	f7ff fdd3 	bl	8000864 <HAL_GetTick>
 8000cbe:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000cc0:	4b5e      	ldr	r3, [pc, #376]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	055b      	lsls	r3, r3, #21
 8000cc6:	d406      	bmi.n	8000cd6 <HAL_RCC_OscConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cc8:	f7ff fdcc 	bl	8000864 <HAL_GetTick>
 8000ccc:	1b40      	subs	r0, r0, r5
 8000cce:	2802      	cmp	r0, #2
 8000cd0:	d9f6      	bls.n	8000cc0 <HAL_RCC_OscConfig+0x19c>
            return HAL_TIMEOUT;
 8000cd2:	2003      	movs	r0, #3
 8000cd4:	e18b      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cd6:	4959      	ldr	r1, [pc, #356]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000cd8:	684b      	ldr	r3, [r1, #4]
 8000cda:	4a5b      	ldr	r2, [pc, #364]	; (8000e48 <HAL_RCC_OscConfig+0x324>)
 8000cdc:	4013      	ands	r3, r2
 8000cde:	6962      	ldr	r2, [r4, #20]
 8000ce0:	0212      	lsls	r2, r2, #8
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	604b      	str	r3, [r1, #4]
 8000ce6:	e794      	b.n	8000c12 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 8000ce8:	4a54      	ldr	r2, [pc, #336]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000cea:	6813      	ldr	r3, [r2, #0]
 8000cec:	495b      	ldr	r1, [pc, #364]	; (8000e5c <HAL_RCC_OscConfig+0x338>)
 8000cee:	400b      	ands	r3, r1
 8000cf0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000cf2:	f7ff fdb7 	bl	8000864 <HAL_GetTick>
 8000cf6:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000cf8:	4b50      	ldr	r3, [pc, #320]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	055b      	lsls	r3, r3, #21
 8000cfe:	d588      	bpl.n	8000c12 <HAL_RCC_OscConfig+0xee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d00:	f7ff fdb0 	bl	8000864 <HAL_GetTick>
 8000d04:	1b40      	subs	r0, r0, r5
 8000d06:	2802      	cmp	r0, #2
 8000d08:	d9f6      	bls.n	8000cf8 <HAL_RCC_OscConfig+0x1d4>
            return HAL_TIMEOUT;
 8000d0a:	2003      	movs	r0, #3
 8000d0c:	e16f      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000d0e:	4b4b      	ldr	r3, [pc, #300]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d12:	079b      	lsls	r3, r3, #30
 8000d14:	d503      	bpl.n	8000d1e <HAL_RCC_OscConfig+0x1fa>
 8000d16:	69a3      	ldr	r3, [r4, #24]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d100      	bne.n	8000d1e <HAL_RCC_OscConfig+0x1fa>
 8000d1c:	e16f      	b.n	8000ffe <HAL_RCC_OscConfig+0x4da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d1e:	6823      	ldr	r3, [r4, #0]
 8000d20:	075b      	lsls	r3, r3, #29
 8000d22:	d400      	bmi.n	8000d26 <HAL_RCC_OscConfig+0x202>
 8000d24:	e0a2      	b.n	8000e6c <HAL_RCC_OscConfig+0x348>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000d26:	4b45      	ldr	r3, [pc, #276]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000d28:	689a      	ldr	r2, [r3, #8]
 8000d2a:	2338      	movs	r3, #56	; 0x38
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	2b20      	cmp	r3, #32
 8000d30:	d045      	beq.n	8000dbe <HAL_RCC_OscConfig+0x29a>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000d32:	4b42      	ldr	r3, [pc, #264]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	d44a      	bmi.n	8000dd0 <HAL_RCC_OscConfig+0x2ac>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	4b40      	ldr	r3, [pc, #256]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000d3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d3e:	2180      	movs	r1, #128	; 0x80
 8000d40:	0549      	lsls	r1, r1, #21
 8000d42:	430a      	orrs	r2, r1
 8000d44:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d48:	400b      	ands	r3, r1
 8000d4a:	9301      	str	r3, [sp, #4]
 8000d4c:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8000d4e:	2501      	movs	r5, #1
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d50:	4b43      	ldr	r3, [pc, #268]	; (8000e60 <HAL_RCC_OscConfig+0x33c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	05db      	lsls	r3, r3, #23
 8000d56:	d53d      	bpl.n	8000dd4 <HAL_RCC_OscConfig+0x2b0>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d58:	68a3      	ldr	r3, [r4, #8]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d04e      	beq.n	8000dfc <HAL_RCC_OscConfig+0x2d8>
 8000d5e:	2b05      	cmp	r3, #5
 8000d60:	d052      	beq.n	8000e08 <HAL_RCC_OscConfig+0x2e4>
 8000d62:	4b36      	ldr	r3, [pc, #216]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000d64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000d66:	2101      	movs	r1, #1
 8000d68:	438a      	bics	r2, r1
 8000d6a:	65da      	str	r2, [r3, #92]	; 0x5c
 8000d6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000d6e:	3103      	adds	r1, #3
 8000d70:	438a      	bics	r2, r1
 8000d72:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d74:	68a3      	ldr	r3, [r4, #8]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d050      	beq.n	8000e1c <HAL_RCC_OscConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d7a:	f7ff fd73 	bl	8000864 <HAL_GetTick>
 8000d7e:	0006      	movs	r6, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000d80:	4b2e      	ldr	r3, [pc, #184]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d84:	079b      	lsls	r3, r3, #30
 8000d86:	d46f      	bmi.n	8000e68 <HAL_RCC_OscConfig+0x344>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d88:	f7ff fd6c 	bl	8000864 <HAL_GetTick>
 8000d8c:	1b80      	subs	r0, r0, r6
 8000d8e:	4b35      	ldr	r3, [pc, #212]	; (8000e64 <HAL_RCC_OscConfig+0x340>)
 8000d90:	4298      	cmp	r0, r3
 8000d92:	d9f5      	bls.n	8000d80 <HAL_RCC_OscConfig+0x25c>
          {
            return HAL_TIMEOUT;
 8000d94:	2003      	movs	r0, #3
 8000d96:	e12a      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_LSI_DISABLE();
 8000d98:	4a28      	ldr	r2, [pc, #160]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000d9a:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	438b      	bics	r3, r1
 8000da0:	6613      	str	r3, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 8000da2:	f7ff fd5f 	bl	8000864 <HAL_GetTick>
 8000da6:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000da8:	4b24      	ldr	r3, [pc, #144]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dac:	079b      	lsls	r3, r3, #30
 8000dae:	d5b6      	bpl.n	8000d1e <HAL_RCC_OscConfig+0x1fa>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000db0:	f7ff fd58 	bl	8000864 <HAL_GetTick>
 8000db4:	1b40      	subs	r0, r0, r5
 8000db6:	2802      	cmp	r0, #2
 8000db8:	d9f6      	bls.n	8000da8 <HAL_RCC_OscConfig+0x284>
            return HAL_TIMEOUT;
 8000dba:	2003      	movs	r0, #3
 8000dbc:	e117      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000dbe:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dc2:	079b      	lsls	r3, r3, #30
 8000dc4:	d552      	bpl.n	8000e6c <HAL_RCC_OscConfig+0x348>
 8000dc6:	68a3      	ldr	r3, [r4, #8]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d14f      	bne.n	8000e6c <HAL_RCC_OscConfig+0x348>
        return HAL_ERROR;
 8000dcc:	2001      	movs	r0, #1
 8000dce:	e10e      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
    FlagStatus       pwrclkchanged = RESET;
 8000dd0:	2500      	movs	r5, #0
 8000dd2:	e7bd      	b.n	8000d50 <HAL_RCC_OscConfig+0x22c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000dd4:	4a22      	ldr	r2, [pc, #136]	; (8000e60 <HAL_RCC_OscConfig+0x33c>)
 8000dd6:	6811      	ldr	r1, [r2, #0]
 8000dd8:	2380      	movs	r3, #128	; 0x80
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	430b      	orrs	r3, r1
 8000dde:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000de0:	f7ff fd40 	bl	8000864 <HAL_GetTick>
 8000de4:	0006      	movs	r6, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000de6:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <HAL_RCC_OscConfig+0x33c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	05db      	lsls	r3, r3, #23
 8000dec:	d4b4      	bmi.n	8000d58 <HAL_RCC_OscConfig+0x234>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dee:	f7ff fd39 	bl	8000864 <HAL_GetTick>
 8000df2:	1b80      	subs	r0, r0, r6
 8000df4:	2802      	cmp	r0, #2
 8000df6:	d9f6      	bls.n	8000de6 <HAL_RCC_OscConfig+0x2c2>
            return HAL_TIMEOUT;
 8000df8:	2003      	movs	r0, #3
 8000dfa:	e0f8      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dfc:	4a0f      	ldr	r2, [pc, #60]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000dfe:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8000e00:	2101      	movs	r1, #1
 8000e02:	430b      	orrs	r3, r1
 8000e04:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000e06:	e7b5      	b.n	8000d74 <HAL_RCC_OscConfig+0x250>
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000e0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e0c:	2104      	movs	r1, #4
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	65da      	str	r2, [r3, #92]	; 0x5c
 8000e12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e14:	3903      	subs	r1, #3
 8000e16:	430a      	orrs	r2, r1
 8000e18:	65da      	str	r2, [r3, #92]	; 0x5c
 8000e1a:	e7ab      	b.n	8000d74 <HAL_RCC_OscConfig+0x250>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e1c:	f7ff fd22 	bl	8000864 <HAL_GetTick>
 8000e20:	0006      	movs	r6, r0

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_RCC_OscConfig+0x318>)
 8000e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e26:	079b      	lsls	r3, r3, #30
 8000e28:	d51e      	bpl.n	8000e68 <HAL_RCC_OscConfig+0x344>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e2a:	f7ff fd1b 	bl	8000864 <HAL_GetTick>
 8000e2e:	1b80      	subs	r0, r0, r6
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <HAL_RCC_OscConfig+0x340>)
 8000e32:	4298      	cmp	r0, r3
 8000e34:	d9f5      	bls.n	8000e22 <HAL_RCC_OscConfig+0x2fe>
          {
            return HAL_TIMEOUT;
 8000e36:	2003      	movs	r0, #3
 8000e38:	e0d9      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	fffeffff 	.word	0xfffeffff
 8000e44:	fffbffff 	.word	0xfffbffff
 8000e48:	ffff80ff 	.word	0xffff80ff
 8000e4c:	ffffc7ff 	.word	0xffffc7ff
 8000e50:	00f42400 	.word	0x00f42400
 8000e54:	20000000 	.word	0x20000000
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	fffffeff 	.word	0xfffffeff
 8000e60:	40007000 	.word	0x40007000
 8000e64:	00001388 	.word	0x00001388
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8000e68:	2d01      	cmp	r5, #1
 8000e6a:	d019      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x37c>
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000e6c:	6823      	ldr	r3, [r4, #0]
 8000e6e:	069b      	lsls	r3, r3, #26
 8000e70:	d52f      	bpl.n	8000ed2 <HAL_RCC_OscConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000e72:	69e3      	ldr	r3, [r4, #28]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d019      	beq.n	8000eac <HAL_RCC_OscConfig+0x388>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000e78:	4a6a      	ldr	r2, [pc, #424]	; (8001024 <HAL_RCC_OscConfig+0x500>)
 8000e7a:	6811      	ldr	r1, [r2, #0]
 8000e7c:	2380      	movs	r3, #128	; 0x80
 8000e7e:	03db      	lsls	r3, r3, #15
 8000e80:	430b      	orrs	r3, r1
 8000e82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e84:	f7ff fcee 	bl	8000864 <HAL_GetTick>
 8000e88:	0005      	movs	r5, r0

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8000e8a:	4b66      	ldr	r3, [pc, #408]	; (8001024 <HAL_RCC_OscConfig+0x500>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	021b      	lsls	r3, r3, #8
 8000e90:	d41f      	bmi.n	8000ed2 <HAL_RCC_OscConfig+0x3ae>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000e92:	f7ff fce7 	bl	8000864 <HAL_GetTick>
 8000e96:	1b40      	subs	r0, r0, r5
 8000e98:	2802      	cmp	r0, #2
 8000e9a:	d9f6      	bls.n	8000e8a <HAL_RCC_OscConfig+0x366>
        {
          return HAL_TIMEOUT;
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	e0a6      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_PWR_CLK_DISABLE();
 8000ea0:	4a60      	ldr	r2, [pc, #384]	; (8001024 <HAL_RCC_OscConfig+0x500>)
 8000ea2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000ea4:	4960      	ldr	r1, [pc, #384]	; (8001028 <HAL_RCC_OscConfig+0x504>)
 8000ea6:	400b      	ands	r3, r1
 8000ea8:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000eaa:	e7df      	b.n	8000e6c <HAL_RCC_OscConfig+0x348>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000eac:	4a5d      	ldr	r2, [pc, #372]	; (8001024 <HAL_RCC_OscConfig+0x500>)
 8000eae:	6813      	ldr	r3, [r2, #0]
 8000eb0:	495e      	ldr	r1, [pc, #376]	; (800102c <HAL_RCC_OscConfig+0x508>)
 8000eb2:	400b      	ands	r3, r1
 8000eb4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000eb6:	f7ff fcd5 	bl	8000864 <HAL_GetTick>
 8000eba:	0005      	movs	r5, r0

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8000ebc:	4b59      	ldr	r3, [pc, #356]	; (8001024 <HAL_RCC_OscConfig+0x500>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	021b      	lsls	r3, r3, #8
 8000ec2:	d506      	bpl.n	8000ed2 <HAL_RCC_OscConfig+0x3ae>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000ec4:	f7ff fcce 	bl	8000864 <HAL_GetTick>
 8000ec8:	1b40      	subs	r0, r0, r5
 8000eca:	2802      	cmp	r0, #2
 8000ecc:	d9f6      	bls.n	8000ebc <HAL_RCC_OscConfig+0x398>
        {
          return HAL_TIMEOUT;
 8000ece:	2003      	movs	r0, #3
 8000ed0:	e08d      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000ed2:	6a23      	ldr	r3, [r4, #32]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d100      	bne.n	8000eda <HAL_RCC_OscConfig+0x3b6>
 8000ed8:	e093      	b.n	8001002 <HAL_RCC_OscConfig+0x4de>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000eda:	4a52      	ldr	r2, [pc, #328]	; (8001024 <HAL_RCC_OscConfig+0x500>)
 8000edc:	6891      	ldr	r1, [r2, #8]
 8000ede:	2238      	movs	r2, #56	; 0x38
 8000ee0:	400a      	ands	r2, r1
 8000ee2:	2a10      	cmp	r2, #16
 8000ee4:	d05a      	beq.n	8000f9c <HAL_RCC_OscConfig+0x478>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d012      	beq.n	8000f10 <HAL_RCC_OscConfig+0x3ec>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000eea:	4a4e      	ldr	r2, [pc, #312]	; (8001024 <HAL_RCC_OscConfig+0x500>)
 8000eec:	6813      	ldr	r3, [r2, #0]
 8000eee:	4950      	ldr	r1, [pc, #320]	; (8001030 <HAL_RCC_OscConfig+0x50c>)
 8000ef0:	400b      	ands	r3, r1
 8000ef2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fcb6 	bl	8000864 <HAL_GetTick>
 8000ef8:	0004      	movs	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000efa:	4b4a      	ldr	r3, [pc, #296]	; (8001024 <HAL_RCC_OscConfig+0x500>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	019b      	lsls	r3, r3, #6
 8000f00:	d545      	bpl.n	8000f8e <HAL_RCC_OscConfig+0x46a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f02:	f7ff fcaf 	bl	8000864 <HAL_GetTick>
 8000f06:	1b00      	subs	r0, r0, r4
 8000f08:	2802      	cmp	r0, #2
 8000f0a:	d9f6      	bls.n	8000efa <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	e06e      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_PLL_DISABLE();
 8000f10:	4a44      	ldr	r2, [pc, #272]	; (8001024 <HAL_RCC_OscConfig+0x500>)
 8000f12:	6813      	ldr	r3, [r2, #0]
 8000f14:	4946      	ldr	r1, [pc, #280]	; (8001030 <HAL_RCC_OscConfig+0x50c>)
 8000f16:	400b      	ands	r3, r1
 8000f18:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000f1a:	f7ff fca3 	bl	8000864 <HAL_GetTick>
 8000f1e:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f20:	4b40      	ldr	r3, [pc, #256]	; (8001024 <HAL_RCC_OscConfig+0x500>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	019b      	lsls	r3, r3, #6
 8000f26:	d506      	bpl.n	8000f36 <HAL_RCC_OscConfig+0x412>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f28:	f7ff fc9c 	bl	8000864 <HAL_GetTick>
 8000f2c:	1b40      	subs	r0, r0, r5
 8000f2e:	2802      	cmp	r0, #2
 8000f30:	d9f6      	bls.n	8000f20 <HAL_RCC_OscConfig+0x3fc>
            return HAL_TIMEOUT;
 8000f32:	2003      	movs	r0, #3
 8000f34:	e05b      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f36:	4a3b      	ldr	r2, [pc, #236]	; (8001024 <HAL_RCC_OscConfig+0x500>)
 8000f38:	68d3      	ldr	r3, [r2, #12]
 8000f3a:	493e      	ldr	r1, [pc, #248]	; (8001034 <HAL_RCC_OscConfig+0x510>)
 8000f3c:	4019      	ands	r1, r3
 8000f3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f40:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000f42:	4303      	orrs	r3, r0
 8000f44:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000f46:	0200      	lsls	r0, r0, #8
 8000f48:	4303      	orrs	r3, r0
 8000f4a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000f4c:	4303      	orrs	r3, r0
 8000f4e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8000f50:	4303      	orrs	r3, r0
 8000f52:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000f54:	4303      	orrs	r3, r0
 8000f56:	430b      	orrs	r3, r1
 8000f58:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8000f5a:	6811      	ldr	r1, [r2, #0]
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	045b      	lsls	r3, r3, #17
 8000f60:	430b      	orrs	r3, r1
 8000f62:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8000f64:	68d1      	ldr	r1, [r2, #12]
 8000f66:	2380      	movs	r3, #128	; 0x80
 8000f68:	055b      	lsls	r3, r3, #21
 8000f6a:	430b      	orrs	r3, r1
 8000f6c:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8000f6e:	f7ff fc79 	bl	8000864 <HAL_GetTick>
 8000f72:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f74:	4b2b      	ldr	r3, [pc, #172]	; (8001024 <HAL_RCC_OscConfig+0x500>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	019b      	lsls	r3, r3, #6
 8000f7a:	d406      	bmi.n	8000f8a <HAL_RCC_OscConfig+0x466>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f7c:	f7ff fc72 	bl	8000864 <HAL_GetTick>
 8000f80:	1b00      	subs	r0, r0, r4
 8000f82:	2802      	cmp	r0, #2
 8000f84:	d9f6      	bls.n	8000f74 <HAL_RCC_OscConfig+0x450>
            return HAL_TIMEOUT;
 8000f86:	2003      	movs	r0, #3
 8000f88:	e031      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	e02f      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8000f8e:	4a25      	ldr	r2, [pc, #148]	; (8001024 <HAL_RCC_OscConfig+0x500>)
 8000f90:	68d3      	ldr	r3, [r2, #12]
 8000f92:	4929      	ldr	r1, [pc, #164]	; (8001038 <HAL_RCC_OscConfig+0x514>)
 8000f94:	400b      	ands	r3, r1
 8000f96:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8000f98:	2000      	movs	r0, #0
 8000f9a:	e028      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d032      	beq.n	8001006 <HAL_RCC_OscConfig+0x4e2>
        temp_pllckcfg = RCC->PLLCFGR;
 8000fa0:	4b20      	ldr	r3, [pc, #128]	; (8001024 <HAL_RCC_OscConfig+0x500>)
 8000fa2:	68da      	ldr	r2, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d12d      	bne.n	800100a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000fae:	2370      	movs	r3, #112	; 0x70
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	d12a      	bne.n	800100e <HAL_RCC_OscConfig+0x4ea>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000fb8:	21fe      	movs	r1, #254	; 0xfe
 8000fba:	01c9      	lsls	r1, r1, #7
 8000fbc:	4011      	ands	r1, r2
 8000fbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000fc0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000fc2:	4299      	cmp	r1, r3
 8000fc4:	d125      	bne.n	8001012 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000fc6:	23f8      	movs	r3, #248	; 0xf8
 8000fc8:	039b      	lsls	r3, r3, #14
 8000fca:	4013      	ands	r3, r2
 8000fcc:	6b21      	ldr	r1, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000fce:	428b      	cmp	r3, r1
 8000fd0:	d121      	bne.n	8001016 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8000fd2:	23e0      	movs	r3, #224	; 0xe0
 8000fd4:	051b      	lsls	r3, r3, #20
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	d11d      	bne.n	800101a <HAL_RCC_OscConfig+0x4f6>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8000fde:	0f52      	lsrs	r2, r2, #29
 8000fe0:	0752      	lsls	r2, r2, #29
 8000fe2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d11a      	bne.n	800101e <HAL_RCC_OscConfig+0x4fa>
  return HAL_OK;
 8000fe8:	2000      	movs	r0, #0
 8000fea:	e000      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
    return HAL_ERROR;
 8000fec:	2001      	movs	r0, #1
}
 8000fee:	b002      	add	sp, #8
 8000ff0:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	e7fb      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
        return HAL_ERROR;
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	e7f9      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
          return HAL_ERROR;
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	e7f7      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
        return HAL_ERROR;
 8000ffe:	2001      	movs	r0, #1
 8001000:	e7f5      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
  return HAL_OK;
 8001002:	2000      	movs	r0, #0
 8001004:	e7f3      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
        return HAL_ERROR;
 8001006:	2001      	movs	r0, #1
 8001008:	e7f1      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
          return HAL_ERROR;
 800100a:	2001      	movs	r0, #1
 800100c:	e7ef      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
 800100e:	2001      	movs	r0, #1
 8001010:	e7ed      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
 8001012:	2001      	movs	r0, #1
 8001014:	e7eb      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
 8001016:	2001      	movs	r0, #1
 8001018:	e7e9      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
 800101a:	2001      	movs	r0, #1
 800101c:	e7e7      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
 800101e:	2001      	movs	r0, #1
 8001020:	e7e5      	b.n	8000fee <HAL_RCC_OscConfig+0x4ca>
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	40021000 	.word	0x40021000
 8001028:	efffffff 	.word	0xefffffff
 800102c:	ffbfffff 	.word	0xffbfffff
 8001030:	feffffff 	.word	0xfeffffff
 8001034:	11c1808c 	.word	0x11c1808c
 8001038:	eefefffc 	.word	0xeefefffc

0800103c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800103c:	b510      	push	{r4, lr}
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800103e:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	2238      	movs	r2, #56	; 0x38
 8001044:	421a      	tst	r2, r3
 8001046:	d107      	bne.n	8001058 <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001048:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <HAL_RCC_GetSysClockFreq+0xac>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	0ad2      	lsrs	r2, r2, #11
 800104e:	2307      	movs	r3, #7
 8001050:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001052:	4826      	ldr	r0, [pc, #152]	; (80010ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8001054:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8001056:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001058:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <HAL_RCC_GetSysClockFreq+0xac>)
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	2338      	movs	r3, #56	; 0x38
 800105e:	4013      	ands	r3, r2
 8001060:	2b08      	cmp	r3, #8
 8001062:	d03b      	beq.n	80010dc <HAL_RCC_GetSysClockFreq+0xa0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001064:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	2338      	movs	r3, #56	; 0x38
 800106a:	4013      	ands	r3, r2
 800106c:	2b10      	cmp	r3, #16
 800106e:	d00d      	beq.n	800108c <HAL_RCC_GetSysClockFreq+0x50>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	2338      	movs	r3, #56	; 0x38
 8001076:	4013      	ands	r3, r2
 8001078:	2b20      	cmp	r3, #32
 800107a:	d031      	beq.n	80010e0 <HAL_RCC_GetSysClockFreq+0xa4>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800107c:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <HAL_RCC_GetSysClockFreq+0xac>)
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	2338      	movs	r3, #56	; 0x38
 8001082:	4013      	ands	r3, r2
 8001084:	2b18      	cmp	r3, #24
 8001086:	d026      	beq.n	80010d6 <HAL_RCC_GetSysClockFreq+0x9a>
    sysclockfreq = 0U;
 8001088:	2000      	movs	r0, #0
  return sysclockfreq;
 800108a:	e7e4      	b.n	8001056 <HAL_RCC_GetSysClockFreq+0x1a>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800108c:	4a16      	ldr	r2, [pc, #88]	; (80010e8 <HAL_RCC_GetSysClockFreq+0xac>)
 800108e:	68d1      	ldr	r1, [r2, #12]
 8001090:	3b0d      	subs	r3, #13
 8001092:	400b      	ands	r3, r1
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001094:	68d2      	ldr	r2, [r2, #12]
 8001096:	0912      	lsrs	r2, r2, #4
 8001098:	2107      	movs	r1, #7
 800109a:	4011      	ands	r1, r2
 800109c:	3101      	adds	r1, #1
    switch (pllsource)
 800109e:	2b03      	cmp	r3, #3
 80010a0:	d00f      	beq.n	80010c2 <HAL_RCC_GetSysClockFreq+0x86>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80010a2:	4812      	ldr	r0, [pc, #72]	; (80010ec <HAL_RCC_GetSysClockFreq+0xb0>)
 80010a4:	f7ff f82e 	bl	8000104 <__udivsi3>
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <HAL_RCC_GetSysClockFreq+0xac>)
 80010aa:	68da      	ldr	r2, [r3, #12]
 80010ac:	0a12      	lsrs	r2, r2, #8
 80010ae:	237f      	movs	r3, #127	; 0x7f
 80010b0:	4013      	ands	r3, r2
 80010b2:	4358      	muls	r0, r3
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <HAL_RCC_GetSysClockFreq+0xac>)
 80010b6:	68d9      	ldr	r1, [r3, #12]
 80010b8:	0f49      	lsrs	r1, r1, #29
 80010ba:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 80010bc:	f7ff f822 	bl	8000104 <__udivsi3>
 80010c0:	e7c9      	b.n	8001056 <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80010c2:	480b      	ldr	r0, [pc, #44]	; (80010f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80010c4:	f7ff f81e 	bl	8000104 <__udivsi3>
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <HAL_RCC_GetSysClockFreq+0xac>)
 80010ca:	68da      	ldr	r2, [r3, #12]
 80010cc:	0a12      	lsrs	r2, r2, #8
 80010ce:	237f      	movs	r3, #127	; 0x7f
 80010d0:	4013      	ands	r3, r2
 80010d2:	4358      	muls	r0, r3
        break;
 80010d4:	e7ee      	b.n	80010b4 <HAL_RCC_GetSysClockFreq+0x78>
    sysclockfreq = LSI_VALUE;
 80010d6:	20fa      	movs	r0, #250	; 0xfa
 80010d8:	01c0      	lsls	r0, r0, #7
 80010da:	e7bc      	b.n	8001056 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = HSE_VALUE;
 80010dc:	4804      	ldr	r0, [pc, #16]	; (80010f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80010de:	e7ba      	b.n	8001056 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = LSE_VALUE;
 80010e0:	2080      	movs	r0, #128	; 0x80
 80010e2:	0200      	lsls	r0, r0, #8
 80010e4:	e7b7      	b.n	8001056 <HAL_RCC_GetSysClockFreq+0x1a>
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	40021000 	.word	0x40021000
 80010ec:	00f42400 	.word	0x00f42400
 80010f0:	007a1200 	.word	0x007a1200

080010f4 <HAL_RCC_ClockConfig>:
{
 80010f4:	b570      	push	{r4, r5, r6, lr}
 80010f6:	0004      	movs	r4, r0
 80010f8:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80010fa:	2800      	cmp	r0, #0
 80010fc:	d100      	bne.n	8001100 <HAL_RCC_ClockConfig+0xc>
 80010fe:	e0aa      	b.n	8001256 <HAL_RCC_ClockConfig+0x162>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001100:	4b57      	ldr	r3, [pc, #348]	; (8001260 <HAL_RCC_ClockConfig+0x16c>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	2307      	movs	r3, #7
 8001106:	4013      	ands	r3, r2
 8001108:	428b      	cmp	r3, r1
 800110a:	d321      	bcc.n	8001150 <HAL_RCC_ClockConfig+0x5c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800110c:	6823      	ldr	r3, [r4, #0]
 800110e:	079a      	lsls	r2, r3, #30
 8001110:	d50e      	bpl.n	8001130 <HAL_RCC_ClockConfig+0x3c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001112:	075b      	lsls	r3, r3, #29
 8001114:	d505      	bpl.n	8001122 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001116:	4a53      	ldr	r2, [pc, #332]	; (8001264 <HAL_RCC_ClockConfig+0x170>)
 8001118:	6891      	ldr	r1, [r2, #8]
 800111a:	23e0      	movs	r3, #224	; 0xe0
 800111c:	01db      	lsls	r3, r3, #7
 800111e:	430b      	orrs	r3, r1
 8001120:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001122:	4a50      	ldr	r2, [pc, #320]	; (8001264 <HAL_RCC_ClockConfig+0x170>)
 8001124:	6893      	ldr	r3, [r2, #8]
 8001126:	4950      	ldr	r1, [pc, #320]	; (8001268 <HAL_RCC_ClockConfig+0x174>)
 8001128:	400b      	ands	r3, r1
 800112a:	68a1      	ldr	r1, [r4, #8]
 800112c:	430b      	orrs	r3, r1
 800112e:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001130:	6823      	ldr	r3, [r4, #0]
 8001132:	07db      	lsls	r3, r3, #31
 8001134:	d554      	bpl.n	80011e0 <HAL_RCC_ClockConfig+0xec>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001136:	6863      	ldr	r3, [r4, #4]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d020      	beq.n	800117e <HAL_RCC_ClockConfig+0x8a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800113c:	2b02      	cmp	r3, #2
 800113e:	d03b      	beq.n	80011b8 <HAL_RCC_ClockConfig+0xc4>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001140:	2b00      	cmp	r3, #0
 8001142:	d13f      	bne.n	80011c4 <HAL_RCC_ClockConfig+0xd0>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001144:	4a47      	ldr	r2, [pc, #284]	; (8001264 <HAL_RCC_ClockConfig+0x170>)
 8001146:	6812      	ldr	r2, [r2, #0]
 8001148:	0552      	lsls	r2, r2, #21
 800114a:	d41c      	bmi.n	8001186 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 800114c:	2001      	movs	r0, #1
 800114e:	e06a      	b.n	8001226 <HAL_RCC_ClockConfig+0x132>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001150:	4a43      	ldr	r2, [pc, #268]	; (8001260 <HAL_RCC_ClockConfig+0x16c>)
 8001152:	6813      	ldr	r3, [r2, #0]
 8001154:	2107      	movs	r1, #7
 8001156:	438b      	bics	r3, r1
 8001158:	432b      	orrs	r3, r5
 800115a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800115c:	f7ff fb82 	bl	8000864 <HAL_GetTick>
 8001160:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001162:	4b3f      	ldr	r3, [pc, #252]	; (8001260 <HAL_RCC_ClockConfig+0x16c>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	2307      	movs	r3, #7
 8001168:	4013      	ands	r3, r2
 800116a:	42ab      	cmp	r3, r5
 800116c:	d0ce      	beq.n	800110c <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800116e:	f7ff fb79 	bl	8000864 <HAL_GetTick>
 8001172:	1b80      	subs	r0, r0, r6
 8001174:	4a3d      	ldr	r2, [pc, #244]	; (800126c <HAL_RCC_ClockConfig+0x178>)
 8001176:	4290      	cmp	r0, r2
 8001178:	d9f3      	bls.n	8001162 <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 800117a:	2003      	movs	r0, #3
 800117c:	e053      	b.n	8001226 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800117e:	4a39      	ldr	r2, [pc, #228]	; (8001264 <HAL_RCC_ClockConfig+0x170>)
 8001180:	6812      	ldr	r2, [r2, #0]
 8001182:	0392      	lsls	r2, r2, #14
 8001184:	d569      	bpl.n	800125a <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001186:	4937      	ldr	r1, [pc, #220]	; (8001264 <HAL_RCC_ClockConfig+0x170>)
 8001188:	688a      	ldr	r2, [r1, #8]
 800118a:	2007      	movs	r0, #7
 800118c:	4382      	bics	r2, r0
 800118e:	4313      	orrs	r3, r2
 8001190:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001192:	f7ff fb67 	bl	8000864 <HAL_GetTick>
 8001196:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001198:	4b32      	ldr	r3, [pc, #200]	; (8001264 <HAL_RCC_ClockConfig+0x170>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	2238      	movs	r2, #56	; 0x38
 800119e:	401a      	ands	r2, r3
 80011a0:	6863      	ldr	r3, [r4, #4]
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d01b      	beq.n	80011e0 <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011a8:	f7ff fb5c 	bl	8000864 <HAL_GetTick>
 80011ac:	1b80      	subs	r0, r0, r6
 80011ae:	4b2f      	ldr	r3, [pc, #188]	; (800126c <HAL_RCC_ClockConfig+0x178>)
 80011b0:	4298      	cmp	r0, r3
 80011b2:	d9f1      	bls.n	8001198 <HAL_RCC_ClockConfig+0xa4>
        return HAL_TIMEOUT;
 80011b4:	2003      	movs	r0, #3
 80011b6:	e036      	b.n	8001226 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011b8:	4a2a      	ldr	r2, [pc, #168]	; (8001264 <HAL_RCC_ClockConfig+0x170>)
 80011ba:	6812      	ldr	r2, [r2, #0]
 80011bc:	0192      	lsls	r2, r2, #6
 80011be:	d4e2      	bmi.n	8001186 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 80011c0:	2001      	movs	r0, #1
 80011c2:	e030      	b.n	8001226 <HAL_RCC_ClockConfig+0x132>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	d005      	beq.n	80011d4 <HAL_RCC_ClockConfig+0xe0>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011c8:	4a26      	ldr	r2, [pc, #152]	; (8001264 <HAL_RCC_ClockConfig+0x170>)
 80011ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011cc:	0792      	lsls	r2, r2, #30
 80011ce:	d4da      	bmi.n	8001186 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 80011d0:	2001      	movs	r0, #1
 80011d2:	e028      	b.n	8001226 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011d4:	4a23      	ldr	r2, [pc, #140]	; (8001264 <HAL_RCC_ClockConfig+0x170>)
 80011d6:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80011d8:	0792      	lsls	r2, r2, #30
 80011da:	d4d4      	bmi.n	8001186 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 80011dc:	2001      	movs	r0, #1
 80011de:	e022      	b.n	8001226 <HAL_RCC_ClockConfig+0x132>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011e0:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <HAL_RCC_ClockConfig+0x16c>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2307      	movs	r3, #7
 80011e6:	4013      	ands	r3, r2
 80011e8:	42ab      	cmp	r3, r5
 80011ea:	d81d      	bhi.n	8001228 <HAL_RCC_ClockConfig+0x134>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011ec:	6823      	ldr	r3, [r4, #0]
 80011ee:	075b      	lsls	r3, r3, #29
 80011f0:	d506      	bpl.n	8001200 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80011f2:	4a1c      	ldr	r2, [pc, #112]	; (8001264 <HAL_RCC_ClockConfig+0x170>)
 80011f4:	6893      	ldr	r3, [r2, #8]
 80011f6:	491e      	ldr	r1, [pc, #120]	; (8001270 <HAL_RCC_ClockConfig+0x17c>)
 80011f8:	400b      	ands	r3, r1
 80011fa:	68e1      	ldr	r1, [r4, #12]
 80011fc:	430b      	orrs	r3, r1
 80011fe:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001200:	f7ff ff1c 	bl	800103c <HAL_RCC_GetSysClockFreq>
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <HAL_RCC_ClockConfig+0x170>)
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	0a12      	lsrs	r2, r2, #8
 800120a:	230f      	movs	r3, #15
 800120c:	4013      	ands	r3, r2
 800120e:	4a19      	ldr	r2, [pc, #100]	; (8001274 <HAL_RCC_ClockConfig+0x180>)
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	589a      	ldr	r2, [r3, r2]
 8001214:	231f      	movs	r3, #31
 8001216:	4013      	ands	r3, r2
 8001218:	40d8      	lsrs	r0, r3
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <HAL_RCC_ClockConfig+0x184>)
 800121c:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <HAL_RCC_ClockConfig+0x188>)
 8001220:	6818      	ldr	r0, [r3, #0]
 8001222:	f7ff fa63 	bl	80006ec <HAL_InitTick>
}
 8001226:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001228:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <HAL_RCC_ClockConfig+0x16c>)
 800122a:	6813      	ldr	r3, [r2, #0]
 800122c:	2107      	movs	r1, #7
 800122e:	438b      	bics	r3, r1
 8001230:	432b      	orrs	r3, r5
 8001232:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001234:	f7ff fb16 	bl	8000864 <HAL_GetTick>
 8001238:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <HAL_RCC_ClockConfig+0x16c>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	2307      	movs	r3, #7
 8001240:	4013      	ands	r3, r2
 8001242:	42ab      	cmp	r3, r5
 8001244:	d0d2      	beq.n	80011ec <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001246:	f7ff fb0d 	bl	8000864 <HAL_GetTick>
 800124a:	1b80      	subs	r0, r0, r6
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <HAL_RCC_ClockConfig+0x178>)
 800124e:	4298      	cmp	r0, r3
 8001250:	d9f3      	bls.n	800123a <HAL_RCC_ClockConfig+0x146>
        return HAL_TIMEOUT;
 8001252:	2003      	movs	r0, #3
 8001254:	e7e7      	b.n	8001226 <HAL_RCC_ClockConfig+0x132>
    return HAL_ERROR;
 8001256:	2001      	movs	r0, #1
 8001258:	e7e5      	b.n	8001226 <HAL_RCC_ClockConfig+0x132>
        return HAL_ERROR;
 800125a:	2001      	movs	r0, #1
 800125c:	e7e3      	b.n	8001226 <HAL_RCC_ClockConfig+0x132>
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	40022000 	.word	0x40022000
 8001264:	40021000 	.word	0x40021000
 8001268:	fffff0ff 	.word	0xfffff0ff
 800126c:	00001388 	.word	0x00001388
 8001270:	ffff8fff 	.word	0xffff8fff
 8001274:	080021e0 	.word	0x080021e0
 8001278:	20000000 	.word	0x20000000
 800127c:	20000008 	.word	0x20000008

08001280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001280:	4b01      	ldr	r3, [pc, #4]	; (8001288 <HAL_RCC_GetHCLKFreq+0x8>)
 8001282:	6818      	ldr	r0, [r3, #0]
}
 8001284:	4770      	bx	lr
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	20000000 	.word	0x20000000

0800128c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800128c:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800128e:	f7ff fff7 	bl	8001280 <HAL_RCC_GetHCLKFreq>
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	0b12      	lsrs	r2, r2, #12
 8001298:	2307      	movs	r3, #7
 800129a:	4013      	ands	r3, r2
 800129c:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	589a      	ldr	r2, [r3, r2]
 80012a2:	231f      	movs	r3, #31
 80012a4:	4013      	ands	r3, r2
 80012a6:	40d8      	lsrs	r0, r3
}
 80012a8:	bd10      	pop	{r4, pc}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	40021000 	.word	0x40021000
 80012b0:	08002220 	.word	0x08002220

080012b4 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80012b4:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80012b6:	2307      	movs	r3, #7
 80012b8:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80012ba:	4a09      	ldr	r2, [pc, #36]	; (80012e0 <HAL_RCC_GetClockConfig+0x2c>)
 80012bc:	6894      	ldr	r4, [r2, #8]
 80012be:	401c      	ands	r4, r3
 80012c0:	6044      	str	r4, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80012c2:	6894      	ldr	r4, [r2, #8]
 80012c4:	25f0      	movs	r5, #240	; 0xf0
 80012c6:	012d      	lsls	r5, r5, #4
 80012c8:	402c      	ands	r4, r5
 80012ca:	6084      	str	r4, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 80012cc:	6892      	ldr	r2, [r2, #8]
 80012ce:	24e0      	movs	r4, #224	; 0xe0
 80012d0:	01e4      	lsls	r4, r4, #7
 80012d2:	4022      	ands	r2, r4
 80012d4:	60c2      	str	r2, [r0, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80012d6:	4a03      	ldr	r2, [pc, #12]	; (80012e4 <HAL_RCC_GetClockConfig+0x30>)
 80012d8:	6812      	ldr	r2, [r2, #0]
 80012da:	4013      	ands	r3, r2
 80012dc:	600b      	str	r3, [r1, #0]
}
 80012de:	bd30      	pop	{r4, r5, pc}
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40022000 	.word	0x40022000

080012e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80012e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ea:	46d6      	mov	lr, sl
 80012ec:	464f      	mov	r7, r9
 80012ee:	4646      	mov	r6, r8
 80012f0:	b5c0      	push	{r6, r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	0006      	movs	r6, r0
 80012f6:	000d      	movs	r5, r1
 80012f8:	4690      	mov	r8, r2
 80012fa:	001f      	movs	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80012fc:	f7ff fab2 	bl	8000864 <HAL_GetTick>
 8001300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001302:	1a18      	subs	r0, r3, r0
 8001304:	4681      	mov	r9, r0
 8001306:	44b9      	add	r9, r7
  tmp_tickstart = HAL_GetTick();
 8001308:	f7ff faac 	bl	8000864 <HAL_GetTick>
 800130c:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800130e:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <SPI_WaitFlagStateUntilTimeout+0xe0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	015b      	lsls	r3, r3, #5
 8001314:	0d1b      	lsrs	r3, r3, #20
 8001316:	464a      	mov	r2, r9
 8001318:	4353      	muls	r3, r2
 800131a:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800131c:	6833      	ldr	r3, [r6, #0]
 800131e:	689c      	ldr	r4, [r3, #8]
 8001320:	402c      	ands	r4, r5
 8001322:	1b64      	subs	r4, r4, r5
 8001324:	4263      	negs	r3, r4
 8001326:	415c      	adcs	r4, r3
 8001328:	4544      	cmp	r4, r8
 800132a:	d045      	beq.n	80013b8 <SPI_WaitFlagStateUntilTimeout+0xd0>
  {
    if (Timeout != HAL_MAX_DELAY)
 800132c:	1c7b      	adds	r3, r7, #1
 800132e:	d0f5      	beq.n	800131c <SPI_WaitFlagStateUntilTimeout+0x34>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001330:	f7ff fa98 	bl	8000864 <HAL_GetTick>
 8001334:	4653      	mov	r3, sl
 8001336:	1ac0      	subs	r0, r0, r3
 8001338:	4548      	cmp	r0, r9
 800133a:	d20b      	bcs.n	8001354 <SPI_WaitFlagStateUntilTimeout+0x6c>
 800133c:	464b      	mov	r3, r9
 800133e:	2b00      	cmp	r3, #0
 8001340:	d008      	beq.n	8001354 <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001342:	9a01      	ldr	r2, [sp, #4]
 8001344:	2a00      	cmp	r2, #0
 8001346:	d000      	beq.n	800134a <SPI_WaitFlagStateUntilTimeout+0x62>
 8001348:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 800134a:	9b01      	ldr	r3, [sp, #4]
 800134c:	3b01      	subs	r3, #1
 800134e:	9301      	str	r3, [sp, #4]
 8001350:	4691      	mov	r9, r2
 8001352:	e7e3      	b.n	800131c <SPI_WaitFlagStateUntilTimeout+0x34>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001354:	6832      	ldr	r2, [r6, #0]
 8001356:	6853      	ldr	r3, [r2, #4]
 8001358:	21e0      	movs	r1, #224	; 0xe0
 800135a:	438b      	bics	r3, r1
 800135c:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800135e:	6872      	ldr	r2, [r6, #4]
 8001360:	2382      	movs	r3, #130	; 0x82
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	429a      	cmp	r2, r3
 8001366:	d00c      	beq.n	8001382 <SPI_WaitFlagStateUntilTimeout+0x9a>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001368:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800136a:	2380      	movs	r3, #128	; 0x80
 800136c:	019b      	lsls	r3, r3, #6
 800136e:	429a      	cmp	r2, r3
 8001370:	d016      	beq.n	80013a0 <SPI_WaitFlagStateUntilTimeout+0xb8>
        hspi->State = HAL_SPI_STATE_READY;
 8001372:	235d      	movs	r3, #93	; 0x5d
 8001374:	2201      	movs	r2, #1
 8001376:	54f2      	strb	r2, [r6, r3]
        __HAL_UNLOCK(hspi);
 8001378:	3b01      	subs	r3, #1
 800137a:	2200      	movs	r2, #0
 800137c:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 800137e:	2003      	movs	r0, #3
 8001380:	e01b      	b.n	80013ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001382:	68b3      	ldr	r3, [r6, #8]
 8001384:	2280      	movs	r2, #128	; 0x80
 8001386:	0212      	lsls	r2, r2, #8
 8001388:	4293      	cmp	r3, r2
 800138a:	d003      	beq.n	8001394 <SPI_WaitFlagStateUntilTimeout+0xac>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800138c:	2280      	movs	r2, #128	; 0x80
 800138e:	00d2      	lsls	r2, r2, #3
 8001390:	4293      	cmp	r3, r2
 8001392:	d1e9      	bne.n	8001368 <SPI_WaitFlagStateUntilTimeout+0x80>
          __HAL_SPI_DISABLE(hspi);
 8001394:	6832      	ldr	r2, [r6, #0]
 8001396:	6813      	ldr	r3, [r2, #0]
 8001398:	2140      	movs	r1, #64	; 0x40
 800139a:	438b      	bics	r3, r1
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	e7e3      	b.n	8001368 <SPI_WaitFlagStateUntilTimeout+0x80>
          SPI_RESET_CRC(hspi);
 80013a0:	6832      	ldr	r2, [r6, #0]
 80013a2:	6813      	ldr	r3, [r2, #0]
 80013a4:	4909      	ldr	r1, [pc, #36]	; (80013cc <SPI_WaitFlagStateUntilTimeout+0xe4>)
 80013a6:	400b      	ands	r3, r1
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	6832      	ldr	r2, [r6, #0]
 80013ac:	6811      	ldr	r1, [r2, #0]
 80013ae:	2380      	movs	r3, #128	; 0x80
 80013b0:	019b      	lsls	r3, r3, #6
 80013b2:	430b      	orrs	r3, r1
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	e7dc      	b.n	8001372 <SPI_WaitFlagStateUntilTimeout+0x8a>
    }
  }

  return HAL_OK;
 80013b8:	2000      	movs	r0, #0
}
 80013ba:	b002      	add	sp, #8
 80013bc:	bce0      	pop	{r5, r6, r7}
 80013be:	46ba      	mov	sl, r7
 80013c0:	46b1      	mov	r9, r6
 80013c2:	46a8      	mov	r8, r5
 80013c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	20000000 	.word	0x20000000
 80013cc:	ffffdfff 	.word	0xffffdfff

080013d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80013d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013d2:	46de      	mov	lr, fp
 80013d4:	4657      	mov	r7, sl
 80013d6:	464e      	mov	r6, r9
 80013d8:	4645      	mov	r5, r8
 80013da:	b5e0      	push	{r5, r6, r7, lr}
 80013dc:	b083      	sub	sp, #12
 80013de:	0007      	movs	r7, r0
 80013e0:	000d      	movs	r5, r1
 80013e2:	0016      	movs	r6, r2
 80013e4:	4698      	mov	r8, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80013e6:	466b      	mov	r3, sp
 80013e8:	2200      	movs	r2, #0
 80013ea:	70da      	strb	r2, [r3, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80013ec:	f7ff fa3a 	bl	8000864 <HAL_GetTick>
 80013f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80013f2:	1a18      	subs	r0, r3, r0
 80013f4:	4440      	add	r0, r8
 80013f6:	4681      	mov	r9, r0
  tmp_tickstart = HAL_GetTick();
 80013f8:	f7ff fa34 	bl	8000864 <HAL_GetTick>
 80013fc:	4682      	mov	sl, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	469b      	mov	fp, r3

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001402:	4b36      	ldr	r3, [pc, #216]	; (80014dc <SPI_WaitFifoStateUntilTimeout+0x10c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	009a      	lsls	r2, r3, #2
 8001408:	18d2      	adds	r2, r2, r3
 800140a:	00d3      	lsls	r3, r2, #3
 800140c:	1a9b      	subs	r3, r3, r2
 800140e:	0d1b      	lsrs	r3, r3, #20
 8001410:	464a      	mov	r2, r9
 8001412:	4353      	muls	r3, r2
 8001414:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8001416:	e002      	b.n	800141e <SPI_WaitFifoStateUntilTimeout+0x4e>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8001418:	4643      	mov	r3, r8
 800141a:	3301      	adds	r3, #1
 800141c:	d111      	bne.n	8001442 <SPI_WaitFifoStateUntilTimeout+0x72>
  while ((hspi->Instance->SR & Fifo) != State)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	689c      	ldr	r4, [r3, #8]
 8001422:	402c      	ands	r4, r5
 8001424:	42b4      	cmp	r4, r6
 8001426:	d050      	beq.n	80014ca <SPI_WaitFifoStateUntilTimeout+0xfa>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001428:	23c0      	movs	r3, #192	; 0xc0
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	429d      	cmp	r5, r3
 800142e:	d1f3      	bne.n	8001418 <SPI_WaitFifoStateUntilTimeout+0x48>
 8001430:	2e00      	cmp	r6, #0
 8001432:	d1f1      	bne.n	8001418 <SPI_WaitFifoStateUntilTimeout+0x48>
      tmpreg8 = *ptmpreg8;
 8001434:	465b      	mov	r3, fp
 8001436:	7b1b      	ldrb	r3, [r3, #12]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	466a      	mov	r2, sp
 800143c:	70d3      	strb	r3, [r2, #3]
      UNUSED(tmpreg8);
 800143e:	78d3      	ldrb	r3, [r2, #3]
 8001440:	e7ea      	b.n	8001418 <SPI_WaitFifoStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001442:	f7ff fa0f 	bl	8000864 <HAL_GetTick>
 8001446:	4653      	mov	r3, sl
 8001448:	1ac0      	subs	r0, r0, r3
 800144a:	4548      	cmp	r0, r9
 800144c:	d20b      	bcs.n	8001466 <SPI_WaitFifoStateUntilTimeout+0x96>
 800144e:	464b      	mov	r3, r9
 8001450:	2b00      	cmp	r3, #0
 8001452:	d008      	beq.n	8001466 <SPI_WaitFifoStateUntilTimeout+0x96>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001454:	9a01      	ldr	r2, [sp, #4]
 8001456:	2a00      	cmp	r2, #0
 8001458:	d000      	beq.n	800145c <SPI_WaitFifoStateUntilTimeout+0x8c>
 800145a:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 800145c:	9b01      	ldr	r3, [sp, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	9301      	str	r3, [sp, #4]
 8001462:	4691      	mov	r9, r2
 8001464:	e7db      	b.n	800141e <SPI_WaitFifoStateUntilTimeout+0x4e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	6853      	ldr	r3, [r2, #4]
 800146a:	21e0      	movs	r1, #224	; 0xe0
 800146c:	438b      	bics	r3, r1
 800146e:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	2382      	movs	r3, #130	; 0x82
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	429a      	cmp	r2, r3
 8001478:	d00c      	beq.n	8001494 <SPI_WaitFifoStateUntilTimeout+0xc4>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800147a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	019b      	lsls	r3, r3, #6
 8001480:	429a      	cmp	r2, r3
 8001482:	d016      	beq.n	80014b2 <SPI_WaitFifoStateUntilTimeout+0xe2>
        hspi->State = HAL_SPI_STATE_READY;
 8001484:	235d      	movs	r3, #93	; 0x5d
 8001486:	2201      	movs	r2, #1
 8001488:	54fa      	strb	r2, [r7, r3]
        __HAL_UNLOCK(hspi);
 800148a:	3b01      	subs	r3, #1
 800148c:	2200      	movs	r2, #0
 800148e:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 8001490:	2003      	movs	r0, #3
 8001492:	e01b      	b.n	80014cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	2280      	movs	r2, #128	; 0x80
 8001498:	0212      	lsls	r2, r2, #8
 800149a:	4293      	cmp	r3, r2
 800149c:	d003      	beq.n	80014a6 <SPI_WaitFifoStateUntilTimeout+0xd6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800149e:	2280      	movs	r2, #128	; 0x80
 80014a0:	00d2      	lsls	r2, r2, #3
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d1e9      	bne.n	800147a <SPI_WaitFifoStateUntilTimeout+0xaa>
          __HAL_SPI_DISABLE(hspi);
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	6813      	ldr	r3, [r2, #0]
 80014aa:	2140      	movs	r1, #64	; 0x40
 80014ac:	438b      	bics	r3, r1
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	e7e3      	b.n	800147a <SPI_WaitFifoStateUntilTimeout+0xaa>
          SPI_RESET_CRC(hspi);
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	6813      	ldr	r3, [r2, #0]
 80014b6:	490a      	ldr	r1, [pc, #40]	; (80014e0 <SPI_WaitFifoStateUntilTimeout+0x110>)
 80014b8:	400b      	ands	r3, r1
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	6811      	ldr	r1, [r2, #0]
 80014c0:	2380      	movs	r3, #128	; 0x80
 80014c2:	019b      	lsls	r3, r3, #6
 80014c4:	430b      	orrs	r3, r1
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	e7dc      	b.n	8001484 <SPI_WaitFifoStateUntilTimeout+0xb4>
    }
  }

  return HAL_OK;
 80014ca:	2000      	movs	r0, #0
}
 80014cc:	b003      	add	sp, #12
 80014ce:	bcf0      	pop	{r4, r5, r6, r7}
 80014d0:	46bb      	mov	fp, r7
 80014d2:	46b2      	mov	sl, r6
 80014d4:	46a9      	mov	r9, r5
 80014d6:	46a0      	mov	r8, r4
 80014d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	20000000 	.word	0x20000000
 80014e0:	ffffdfff 	.word	0xffffdfff

080014e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80014e4:	b570      	push	{r4, r5, r6, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	0004      	movs	r4, r0
 80014ea:	000d      	movs	r5, r1
 80014ec:	0016      	movs	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80014ee:	21c0      	movs	r1, #192	; 0xc0
 80014f0:	9200      	str	r2, [sp, #0]
 80014f2:	002b      	movs	r3, r5
 80014f4:	2200      	movs	r2, #0
 80014f6:	0149      	lsls	r1, r1, #5
 80014f8:	f7ff ff6a 	bl	80013d0 <SPI_WaitFifoStateUntilTimeout>
 80014fc:	2800      	cmp	r0, #0
 80014fe:	d118      	bne.n	8001532 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001500:	9600      	str	r6, [sp, #0]
 8001502:	002b      	movs	r3, r5
 8001504:	2200      	movs	r2, #0
 8001506:	2180      	movs	r1, #128	; 0x80
 8001508:	0020      	movs	r0, r4
 800150a:	f7ff feed 	bl	80012e8 <SPI_WaitFlagStateUntilTimeout>
 800150e:	2800      	cmp	r0, #0
 8001510:	d116      	bne.n	8001540 <SPI_EndRxTxTransaction+0x5c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001512:	21c0      	movs	r1, #192	; 0xc0
 8001514:	9600      	str	r6, [sp, #0]
 8001516:	002b      	movs	r3, r5
 8001518:	2200      	movs	r2, #0
 800151a:	00c9      	lsls	r1, r1, #3
 800151c:	0020      	movs	r0, r4
 800151e:	f7ff ff57 	bl	80013d0 <SPI_WaitFifoStateUntilTimeout>
 8001522:	2800      	cmp	r0, #0
 8001524:	d00a      	beq.n	800153c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001526:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001528:	2220      	movs	r2, #32
 800152a:	4313      	orrs	r3, r2
 800152c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800152e:	2003      	movs	r0, #3
 8001530:	e004      	b.n	800153c <SPI_EndRxTxTransaction+0x58>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001532:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001534:	2220      	movs	r2, #32
 8001536:	4313      	orrs	r3, r2
 8001538:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800153a:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 800153c:	b002      	add	sp, #8
 800153e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001540:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001542:	2220      	movs	r2, #32
 8001544:	4313      	orrs	r3, r2
 8001546:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8001548:	2003      	movs	r0, #3
 800154a:	e7f7      	b.n	800153c <SPI_EndRxTxTransaction+0x58>

0800154c <HAL_SPI_Init>:
{
 800154c:	b570      	push	{r4, r5, r6, lr}
 800154e:	1e04      	subs	r4, r0, #0
  if (hspi == NULL)
 8001550:	d100      	bne.n	8001554 <HAL_SPI_Init+0x8>
 8001552:	e078      	b.n	8001646 <HAL_SPI_Init+0xfa>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001554:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001556:	2b00      	cmp	r3, #0
 8001558:	d107      	bne.n	800156a <HAL_SPI_Init+0x1e>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800155a:	6842      	ldr	r2, [r0, #4]
 800155c:	3305      	adds	r3, #5
 800155e:	33ff      	adds	r3, #255	; 0xff
 8001560:	429a      	cmp	r2, r3
 8001562:	d005      	beq.n	8001570 <HAL_SPI_Init+0x24>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001564:	2300      	movs	r3, #0
 8001566:	61c3      	str	r3, [r0, #28]
 8001568:	e002      	b.n	8001570 <HAL_SPI_Init+0x24>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800156e:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001574:	335d      	adds	r3, #93	; 0x5d
 8001576:	5ce3      	ldrb	r3, [r4, r3]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d05a      	beq.n	8001632 <HAL_SPI_Init+0xe6>
  hspi->State = HAL_SPI_STATE_BUSY;
 800157c:	235d      	movs	r3, #93	; 0x5d
 800157e:	2202      	movs	r2, #2
 8001580:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8001582:	6822      	ldr	r2, [r4, #0]
 8001584:	6813      	ldr	r3, [r2, #0]
 8001586:	2140      	movs	r1, #64	; 0x40
 8001588:	438b      	bics	r3, r1
 800158a:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800158c:	68e3      	ldr	r3, [r4, #12]
 800158e:	22e0      	movs	r2, #224	; 0xe0
 8001590:	00d2      	lsls	r2, r2, #3
 8001592:	4293      	cmp	r3, r2
 8001594:	d954      	bls.n	8001640 <HAL_SPI_Init+0xf4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001596:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001598:	21f0      	movs	r1, #240	; 0xf0
 800159a:	0109      	lsls	r1, r1, #4
 800159c:	428b      	cmp	r3, r1
 800159e:	d005      	beq.n	80015ac <HAL_SPI_Init+0x60>
 80015a0:	21e0      	movs	r1, #224	; 0xe0
 80015a2:	00c9      	lsls	r1, r1, #3
 80015a4:	428b      	cmp	r3, r1
 80015a6:	d001      	beq.n	80015ac <HAL_SPI_Init+0x60>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80015ac:	6863      	ldr	r3, [r4, #4]
 80015ae:	2182      	movs	r1, #130	; 0x82
 80015b0:	0049      	lsls	r1, r1, #1
 80015b2:	400b      	ands	r3, r1
 80015b4:	68a1      	ldr	r1, [r4, #8]
 80015b6:	2084      	movs	r0, #132	; 0x84
 80015b8:	0200      	lsls	r0, r0, #8
 80015ba:	4001      	ands	r1, r0
 80015bc:	430b      	orrs	r3, r1
 80015be:	6920      	ldr	r0, [r4, #16]
 80015c0:	2102      	movs	r1, #2
 80015c2:	4001      	ands	r1, r0
 80015c4:	430b      	orrs	r3, r1
 80015c6:	6960      	ldr	r0, [r4, #20]
 80015c8:	2101      	movs	r1, #1
 80015ca:	4008      	ands	r0, r1
 80015cc:	4303      	orrs	r3, r0
 80015ce:	69a0      	ldr	r0, [r4, #24]
 80015d0:	2580      	movs	r5, #128	; 0x80
 80015d2:	00ad      	lsls	r5, r5, #2
 80015d4:	4028      	ands	r0, r5
 80015d6:	4303      	orrs	r3, r0
 80015d8:	69e5      	ldr	r5, [r4, #28]
 80015da:	2038      	movs	r0, #56	; 0x38
 80015dc:	4028      	ands	r0, r5
 80015de:	4303      	orrs	r3, r0
 80015e0:	6a25      	ldr	r5, [r4, #32]
 80015e2:	2080      	movs	r0, #128	; 0x80
 80015e4:	4028      	ands	r0, r5
 80015e6:	4303      	orrs	r3, r0
 80015e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80015ea:	2580      	movs	r5, #128	; 0x80
 80015ec:	01ad      	lsls	r5, r5, #6
 80015ee:	4028      	ands	r0, r5
 80015f0:	6825      	ldr	r5, [r4, #0]
 80015f2:	4303      	orrs	r3, r0
 80015f4:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80015f6:	8b60      	ldrh	r0, [r4, #26]
 80015f8:	2304      	movs	r3, #4
 80015fa:	4003      	ands	r3, r0
 80015fc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80015fe:	2010      	movs	r0, #16
 8001600:	4028      	ands	r0, r5
 8001602:	4303      	orrs	r3, r0
 8001604:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001606:	2008      	movs	r0, #8
 8001608:	4028      	ands	r0, r5
 800160a:	4303      	orrs	r3, r0
 800160c:	68e0      	ldr	r0, [r4, #12]
 800160e:	25f0      	movs	r5, #240	; 0xf0
 8001610:	012d      	lsls	r5, r5, #4
 8001612:	4028      	ands	r0, r5
 8001614:	4303      	orrs	r3, r0
 8001616:	6820      	ldr	r0, [r4, #0]
 8001618:	4313      	orrs	r3, r2
 800161a:	6043      	str	r3, [r0, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800161c:	6822      	ldr	r2, [r4, #0]
 800161e:	69d3      	ldr	r3, [r2, #28]
 8001620:	480a      	ldr	r0, [pc, #40]	; (800164c <HAL_SPI_Init+0x100>)
 8001622:	4003      	ands	r3, r0
 8001624:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001626:	2300      	movs	r3, #0
 8001628:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800162a:	335d      	adds	r3, #93	; 0x5d
 800162c:	54e1      	strb	r1, [r4, r3]
  return HAL_OK;
 800162e:	2000      	movs	r0, #0
}
 8001630:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8001632:	335c      	adds	r3, #92	; 0x5c
 8001634:	2200      	movs	r2, #0
 8001636:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 8001638:	0020      	movs	r0, r4
 800163a:	f7fe ffc9 	bl	80005d0 <HAL_SPI_MspInit>
 800163e:	e79d      	b.n	800157c <HAL_SPI_Init+0x30>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001640:	2280      	movs	r2, #128	; 0x80
 8001642:	0152      	lsls	r2, r2, #5
 8001644:	e7a8      	b.n	8001598 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8001646:	2001      	movs	r0, #1
 8001648:	e7f2      	b.n	8001630 <HAL_SPI_Init+0xe4>
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	fffff7ff 	.word	0xfffff7ff

08001650 <HAL_SPI_Transmit>:
{
 8001650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001652:	46ce      	mov	lr, r9
 8001654:	b500      	push	{lr}
 8001656:	b084      	sub	sp, #16
 8001658:	0004      	movs	r4, r0
 800165a:	9101      	str	r1, [sp, #4]
 800165c:	4691      	mov	r9, r2
 800165e:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 8001660:	235c      	movs	r3, #92	; 0x5c
 8001662:	5cc3      	ldrb	r3, [r0, r3]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d100      	bne.n	800166a <HAL_SPI_Transmit+0x1a>
 8001668:	e0cb      	b.n	8001802 <HAL_SPI_Transmit+0x1b2>
 800166a:	235c      	movs	r3, #92	; 0x5c
 800166c:	2201      	movs	r2, #1
 800166e:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8001670:	f7ff f8f8 	bl	8000864 <HAL_GetTick>
 8001674:	0006      	movs	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001676:	235d      	movs	r3, #93	; 0x5d
 8001678:	5ce3      	ldrb	r3, [r4, r3]
 800167a:	b2df      	uxtb	r7, r3
 800167c:	2b01      	cmp	r3, #1
 800167e:	d000      	beq.n	8001682 <HAL_SPI_Transmit+0x32>
 8001680:	e0b6      	b.n	80017f0 <HAL_SPI_Transmit+0x1a0>
  if ((pData == NULL) || (Size == 0U))
 8001682:	9901      	ldr	r1, [sp, #4]
 8001684:	2900      	cmp	r1, #0
 8001686:	d100      	bne.n	800168a <HAL_SPI_Transmit+0x3a>
 8001688:	e0b3      	b.n	80017f2 <HAL_SPI_Transmit+0x1a2>
 800168a:	464b      	mov	r3, r9
 800168c:	2b00      	cmp	r3, #0
 800168e:	d100      	bne.n	8001692 <HAL_SPI_Transmit+0x42>
 8001690:	e0af      	b.n	80017f2 <HAL_SPI_Transmit+0x1a2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001692:	235d      	movs	r3, #93	; 0x5d
 8001694:	2203      	movs	r2, #3
 8001696:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001698:	2300      	movs	r3, #0
 800169a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800169c:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800169e:	464a      	mov	r2, r9
 80016a0:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80016a2:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80016a4:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80016a6:	2244      	movs	r2, #68	; 0x44
 80016a8:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 80016aa:	3202      	adds	r2, #2
 80016ac:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 80016ae:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 80016b0:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80016b2:	68a2      	ldr	r2, [r4, #8]
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d01e      	beq.n	80016fa <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80016bc:	6822      	ldr	r2, [r4, #0]
 80016be:	6813      	ldr	r3, [r2, #0]
 80016c0:	065b      	lsls	r3, r3, #25
 80016c2:	d403      	bmi.n	80016cc <HAL_SPI_Transmit+0x7c>
    __HAL_SPI_ENABLE(hspi);
 80016c4:	6813      	ldr	r3, [r2, #0]
 80016c6:	2140      	movs	r1, #64	; 0x40
 80016c8:	430b      	orrs	r3, r1
 80016ca:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80016cc:	68e2      	ldr	r2, [r4, #12]
 80016ce:	23e0      	movs	r3, #224	; 0xe0
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d93e      	bls.n	8001754 <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80016d6:	6863      	ldr	r3, [r4, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d002      	beq.n	80016e2 <HAL_SPI_Transmit+0x92>
 80016dc:	464b      	mov	r3, r9
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d120      	bne.n	8001724 <HAL_SPI_Transmit+0xd4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80016e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80016e4:	6823      	ldr	r3, [r4, #0]
 80016e6:	8812      	ldrh	r2, [r2, #0]
 80016e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80016ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016ec:	3302      	adds	r3, #2
 80016ee:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80016f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80016f2:	3b01      	subs	r3, #1
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80016f8:	e014      	b.n	8001724 <HAL_SPI_Transmit+0xd4>
    __HAL_SPI_DISABLE(hspi);
 80016fa:	6822      	ldr	r2, [r4, #0]
 80016fc:	6813      	ldr	r3, [r2, #0]
 80016fe:	2140      	movs	r1, #64	; 0x40
 8001700:	438b      	bics	r3, r1
 8001702:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8001704:	6822      	ldr	r2, [r4, #0]
 8001706:	6811      	ldr	r1, [r2, #0]
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	01db      	lsls	r3, r3, #7
 800170c:	430b      	orrs	r3, r1
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	e7d4      	b.n	80016bc <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001712:	f7ff f8a7 	bl	8000864 <HAL_GetTick>
 8001716:	1b80      	subs	r0, r0, r6
 8001718:	42a8      	cmp	r0, r5
 800171a:	d301      	bcc.n	8001720 <HAL_SPI_Transmit+0xd0>
 800171c:	1c6b      	adds	r3, r5, #1
 800171e:	d114      	bne.n	800174a <HAL_SPI_Transmit+0xfa>
 8001720:	2d00      	cmp	r5, #0
 8001722:	d012      	beq.n	800174a <HAL_SPI_Transmit+0xfa>
    while (hspi->TxXferCount > 0U)
 8001724:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8001726:	b289      	uxth	r1, r1
 8001728:	2900      	cmp	r1, #0
 800172a:	d046      	beq.n	80017ba <HAL_SPI_Transmit+0x16a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800172c:	6822      	ldr	r2, [r4, #0]
 800172e:	6893      	ldr	r3, [r2, #8]
 8001730:	079b      	lsls	r3, r3, #30
 8001732:	d5ee      	bpl.n	8001712 <HAL_SPI_Transmit+0xc2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001734:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	60d3      	str	r3, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800173a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800173c:	3302      	adds	r3, #2
 800173e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001740:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001742:	3b01      	subs	r3, #1
 8001744:	b29b      	uxth	r3, r3
 8001746:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001748:	e7ec      	b.n	8001724 <HAL_SPI_Transmit+0xd4>
          hspi->State = HAL_SPI_STATE_READY;
 800174a:	235d      	movs	r3, #93	; 0x5d
 800174c:	2201      	movs	r2, #1
 800174e:	54e2      	strb	r2, [r4, r3]
          errorcode = HAL_TIMEOUT;
 8001750:	2703      	movs	r7, #3
          goto error;
 8001752:	e04e      	b.n	80017f2 <HAL_SPI_Transmit+0x1a2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001754:	6863      	ldr	r3, [r4, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <HAL_SPI_Transmit+0x110>
 800175a:	464b      	mov	r3, r9
 800175c:	2b01      	cmp	r3, #1
 800175e:	d114      	bne.n	800178a <HAL_SPI_Transmit+0x13a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001760:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001762:	6823      	ldr	r3, [r4, #0]
 8001764:	7812      	ldrb	r2, [r2, #0]
 8001766:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001768:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800176a:	3301      	adds	r3, #1
 800176c:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800176e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001770:	3b01      	subs	r3, #1
 8001772:	b29b      	uxth	r3, r3
 8001774:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001776:	e008      	b.n	800178a <HAL_SPI_Transmit+0x13a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001778:	f7ff f874 	bl	8000864 <HAL_GetTick>
 800177c:	1b80      	subs	r0, r0, r6
 800177e:	42a8      	cmp	r0, r5
 8001780:	d301      	bcc.n	8001786 <HAL_SPI_Transmit+0x136>
 8001782:	1c6b      	adds	r3, r5, #1
 8001784:	d114      	bne.n	80017b0 <HAL_SPI_Transmit+0x160>
 8001786:	2d00      	cmp	r5, #0
 8001788:	d012      	beq.n	80017b0 <HAL_SPI_Transmit+0x160>
    while (hspi->TxXferCount > 0U)
 800178a:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800178c:	b289      	uxth	r1, r1
 800178e:	2900      	cmp	r1, #0
 8001790:	d013      	beq.n	80017ba <HAL_SPI_Transmit+0x16a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001792:	6822      	ldr	r2, [r4, #0]
 8001794:	6893      	ldr	r3, [r2, #8]
 8001796:	079b      	lsls	r3, r3, #30
 8001798:	d5ee      	bpl.n	8001778 <HAL_SPI_Transmit+0x128>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800179a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80017a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80017a2:	3301      	adds	r3, #1
 80017a4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80017a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80017a8:	3b01      	subs	r3, #1
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80017ae:	e7ec      	b.n	800178a <HAL_SPI_Transmit+0x13a>
          hspi->State = HAL_SPI_STATE_READY;
 80017b0:	235d      	movs	r3, #93	; 0x5d
 80017b2:	2201      	movs	r2, #1
 80017b4:	54e2      	strb	r2, [r4, r3]
          errorcode = HAL_TIMEOUT;
 80017b6:	2703      	movs	r7, #3
          goto error;
 80017b8:	e01b      	b.n	80017f2 <HAL_SPI_Transmit+0x1a2>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80017ba:	0032      	movs	r2, r6
 80017bc:	0029      	movs	r1, r5
 80017be:	0020      	movs	r0, r4
 80017c0:	f7ff fe90 	bl	80014e4 <SPI_EndRxTxTransaction>
 80017c4:	2800      	cmp	r0, #0
 80017c6:	d001      	beq.n	80017cc <HAL_SPI_Transmit+0x17c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80017c8:	2320      	movs	r3, #32
 80017ca:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80017cc:	68a3      	ldr	r3, [r4, #8]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d106      	bne.n	80017e0 <HAL_SPI_Transmit+0x190>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80017d2:	9303      	str	r3, [sp, #12]
 80017d4:	6823      	ldr	r3, [r4, #0]
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	9203      	str	r2, [sp, #12]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	9303      	str	r3, [sp, #12]
 80017de:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80017e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d105      	bne.n	80017f2 <HAL_SPI_Transmit+0x1a2>
    hspi->State = HAL_SPI_STATE_READY;
 80017e6:	335d      	adds	r3, #93	; 0x5d
 80017e8:	2201      	movs	r2, #1
 80017ea:	54e2      	strb	r2, [r4, r3]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80017ec:	2700      	movs	r7, #0
 80017ee:	e000      	b.n	80017f2 <HAL_SPI_Transmit+0x1a2>
    errorcode = HAL_BUSY;
 80017f0:	2702      	movs	r7, #2
  __HAL_UNLOCK(hspi);
 80017f2:	235c      	movs	r3, #92	; 0x5c
 80017f4:	2200      	movs	r2, #0
 80017f6:	54e2      	strb	r2, [r4, r3]
}
 80017f8:	0038      	movs	r0, r7
 80017fa:	b004      	add	sp, #16
 80017fc:	bc80      	pop	{r7}
 80017fe:	46b9      	mov	r9, r7
 8001800:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 8001802:	2702      	movs	r7, #2
 8001804:	e7f8      	b.n	80017f8 <HAL_SPI_Transmit+0x1a8>

08001806 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001806:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001808:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800180a:	6a04      	ldr	r4, [r0, #32]
 800180c:	2501      	movs	r5, #1
 800180e:	43ac      	bics	r4, r5
 8001810:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001812:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001814:	35ef      	adds	r5, #239	; 0xef
 8001816:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001818:	0112      	lsls	r2, r2, #4
 800181a:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800181c:	240a      	movs	r4, #10
 800181e:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 8001820:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001822:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001824:	6203      	str	r3, [r0, #32]
}
 8001826:	bd30      	pop	{r4, r5, pc}

08001828 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001828:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800182a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800182c:	6a04      	ldr	r4, [r0, #32]
 800182e:	2510      	movs	r5, #16
 8001830:	43ac      	bics	r4, r5
 8001832:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001834:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001836:	4d05      	ldr	r5, [pc, #20]	; (800184c <TIM_TI2_ConfigInputStage+0x24>)
 8001838:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800183a:	0312      	lsls	r2, r2, #12
 800183c:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800183e:	24a0      	movs	r4, #160	; 0xa0
 8001840:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8001842:	0109      	lsls	r1, r1, #4
 8001844:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001846:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001848:	6201      	str	r1, [r0, #32]
}
 800184a:	bd30      	pop	{r4, r5, pc}
 800184c:	ffff0fff 	.word	0xffff0fff

08001850 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001850:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001852:	4a03      	ldr	r2, [pc, #12]	; (8001860 <TIM_ITRx_SetConfig+0x10>)
 8001854:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001856:	430b      	orrs	r3, r1
 8001858:	2207      	movs	r2, #7
 800185a:	4313      	orrs	r3, r2
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800185c:	6083      	str	r3, [r0, #8]
}
 800185e:	4770      	bx	lr
 8001860:	ffcfff8f 	.word	0xffcfff8f

08001864 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001864:	233d      	movs	r3, #61	; 0x3d
 8001866:	5cc3      	ldrb	r3, [r0, r3]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d12c      	bne.n	80018c6 <HAL_TIM_Base_Start_IT+0x62>
  htim->State = HAL_TIM_STATE_BUSY;
 800186c:	333c      	adds	r3, #60	; 0x3c
 800186e:	2202      	movs	r2, #2
 8001870:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001872:	6802      	ldr	r2, [r0, #0]
 8001874:	68d3      	ldr	r3, [r2, #12]
 8001876:	2101      	movs	r1, #1
 8001878:	430b      	orrs	r3, r1
 800187a:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800187c:	6803      	ldr	r3, [r0, #0]
 800187e:	4a15      	ldr	r2, [pc, #84]	; (80018d4 <HAL_TIM_Base_Start_IT+0x70>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d012      	beq.n	80018aa <HAL_TIM_Base_Start_IT+0x46>
 8001884:	2280      	movs	r2, #128	; 0x80
 8001886:	05d2      	lsls	r2, r2, #23
 8001888:	4293      	cmp	r3, r2
 800188a:	d00e      	beq.n	80018aa <HAL_TIM_Base_Start_IT+0x46>
 800188c:	4a12      	ldr	r2, [pc, #72]	; (80018d8 <HAL_TIM_Base_Start_IT+0x74>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d00b      	beq.n	80018aa <HAL_TIM_Base_Start_IT+0x46>
 8001892:	4a12      	ldr	r2, [pc, #72]	; (80018dc <HAL_TIM_Base_Start_IT+0x78>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d008      	beq.n	80018aa <HAL_TIM_Base_Start_IT+0x46>
 8001898:	4a11      	ldr	r2, [pc, #68]	; (80018e0 <HAL_TIM_Base_Start_IT+0x7c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d005      	beq.n	80018aa <HAL_TIM_Base_Start_IT+0x46>
    __HAL_TIM_ENABLE(htim);
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	2101      	movs	r1, #1
 80018a2:	430a      	orrs	r2, r1
 80018a4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80018a6:	2000      	movs	r0, #0
 80018a8:	e00e      	b.n	80018c8 <HAL_TIM_Base_Start_IT+0x64>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	490d      	ldr	r1, [pc, #52]	; (80018e4 <HAL_TIM_Base_Start_IT+0x80>)
 80018ae:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018b0:	2a06      	cmp	r2, #6
 80018b2:	d00a      	beq.n	80018ca <HAL_TIM_Base_Start_IT+0x66>
 80018b4:	3907      	subs	r1, #7
 80018b6:	428a      	cmp	r2, r1
 80018b8:	d009      	beq.n	80018ce <HAL_TIM_Base_Start_IT+0x6a>
      __HAL_TIM_ENABLE(htim);
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	2101      	movs	r1, #1
 80018be:	430a      	orrs	r2, r1
 80018c0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80018c2:	2000      	movs	r0, #0
 80018c4:	e000      	b.n	80018c8 <HAL_TIM_Base_Start_IT+0x64>
    return HAL_ERROR;
 80018c6:	2001      	movs	r0, #1
}
 80018c8:	4770      	bx	lr
  return HAL_OK;
 80018ca:	2000      	movs	r0, #0
 80018cc:	e7fc      	b.n	80018c8 <HAL_TIM_Base_Start_IT+0x64>
 80018ce:	2000      	movs	r0, #0
 80018d0:	e7fa      	b.n	80018c8 <HAL_TIM_Base_Start_IT+0x64>
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	40012c00 	.word	0x40012c00
 80018d8:	40000400 	.word	0x40000400
 80018dc:	40000800 	.word	0x40000800
 80018e0:	40014000 	.word	0x40014000
 80018e4:	00010007 	.word	0x00010007

080018e8 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80018e8:	4770      	bx	lr

080018ea <HAL_TIM_IC_CaptureCallback>:
}
 80018ea:	4770      	bx	lr

080018ec <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80018ec:	4770      	bx	lr

080018ee <HAL_TIM_TriggerCallback>:
}
 80018ee:	4770      	bx	lr

080018f0 <HAL_TIM_IRQHandler>:
{
 80018f0:	b570      	push	{r4, r5, r6, lr}
 80018f2:	0005      	movs	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 80018f4:	6803      	ldr	r3, [r0, #0]
 80018f6:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80018f8:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80018fa:	07a2      	lsls	r2, r4, #30
 80018fc:	d50e      	bpl.n	800191c <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80018fe:	07b2      	lsls	r2, r6, #30
 8001900:	d50c      	bpl.n	800191c <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001902:	2203      	movs	r2, #3
 8001904:	4252      	negs	r2, r2
 8001906:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001908:	2301      	movs	r3, #1
 800190a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800190c:	6803      	ldr	r3, [r0, #0]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	079b      	lsls	r3, r3, #30
 8001912:	d057      	beq.n	80019c4 <HAL_TIM_IRQHandler+0xd4>
          HAL_TIM_IC_CaptureCallback(htim);
 8001914:	f7ff ffe9 	bl	80018ea <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001918:	2300      	movs	r3, #0
 800191a:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800191c:	0763      	lsls	r3, r4, #29
 800191e:	d512      	bpl.n	8001946 <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001920:	0773      	lsls	r3, r6, #29
 8001922:	d510      	bpl.n	8001946 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001924:	682b      	ldr	r3, [r5, #0]
 8001926:	2205      	movs	r2, #5
 8001928:	4252      	negs	r2, r2
 800192a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800192c:	2302      	movs	r3, #2
 800192e:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001930:	682b      	ldr	r3, [r5, #0]
 8001932:	699a      	ldr	r2, [r3, #24]
 8001934:	23c0      	movs	r3, #192	; 0xc0
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	421a      	tst	r2, r3
 800193a:	d049      	beq.n	80019d0 <HAL_TIM_IRQHandler+0xe0>
        HAL_TIM_IC_CaptureCallback(htim);
 800193c:	0028      	movs	r0, r5
 800193e:	f7ff ffd4 	bl	80018ea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001942:	2300      	movs	r3, #0
 8001944:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001946:	0723      	lsls	r3, r4, #28
 8001948:	d510      	bpl.n	800196c <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800194a:	0733      	lsls	r3, r6, #28
 800194c:	d50e      	bpl.n	800196c <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800194e:	682b      	ldr	r3, [r5, #0]
 8001950:	2209      	movs	r2, #9
 8001952:	4252      	negs	r2, r2
 8001954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001956:	2304      	movs	r3, #4
 8001958:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800195a:	682b      	ldr	r3, [r5, #0]
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	079b      	lsls	r3, r3, #30
 8001960:	d03d      	beq.n	80019de <HAL_TIM_IRQHandler+0xee>
        HAL_TIM_IC_CaptureCallback(htim);
 8001962:	0028      	movs	r0, r5
 8001964:	f7ff ffc1 	bl	80018ea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001968:	2300      	movs	r3, #0
 800196a:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800196c:	06e3      	lsls	r3, r4, #27
 800196e:	d512      	bpl.n	8001996 <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001970:	06f3      	lsls	r3, r6, #27
 8001972:	d510      	bpl.n	8001996 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001974:	682b      	ldr	r3, [r5, #0]
 8001976:	2211      	movs	r2, #17
 8001978:	4252      	negs	r2, r2
 800197a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800197c:	2308      	movs	r3, #8
 800197e:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001980:	682b      	ldr	r3, [r5, #0]
 8001982:	69da      	ldr	r2, [r3, #28]
 8001984:	23c0      	movs	r3, #192	; 0xc0
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	421a      	tst	r2, r3
 800198a:	d02f      	beq.n	80019ec <HAL_TIM_IRQHandler+0xfc>
        HAL_TIM_IC_CaptureCallback(htim);
 800198c:	0028      	movs	r0, r5
 800198e:	f7ff ffac 	bl	80018ea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001992:	2300      	movs	r3, #0
 8001994:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001996:	07e3      	lsls	r3, r4, #31
 8001998:	d501      	bpl.n	800199e <HAL_TIM_IRQHandler+0xae>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800199a:	07f3      	lsls	r3, r6, #31
 800199c:	d42d      	bmi.n	80019fa <HAL_TIM_IRQHandler+0x10a>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800199e:	2382      	movs	r3, #130	; 0x82
 80019a0:	019b      	lsls	r3, r3, #6
 80019a2:	421c      	tst	r4, r3
 80019a4:	d001      	beq.n	80019aa <HAL_TIM_IRQHandler+0xba>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80019a6:	0633      	lsls	r3, r6, #24
 80019a8:	d42f      	bmi.n	8001a0a <HAL_TIM_IRQHandler+0x11a>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80019aa:	05e3      	lsls	r3, r4, #23
 80019ac:	d501      	bpl.n	80019b2 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80019ae:	0633      	lsls	r3, r6, #24
 80019b0:	d432      	bmi.n	8001a18 <HAL_TIM_IRQHandler+0x128>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80019b2:	0663      	lsls	r3, r4, #25
 80019b4:	d501      	bpl.n	80019ba <HAL_TIM_IRQHandler+0xca>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80019b6:	0673      	lsls	r3, r6, #25
 80019b8:	d435      	bmi.n	8001a26 <HAL_TIM_IRQHandler+0x136>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80019ba:	06a4      	lsls	r4, r4, #26
 80019bc:	d501      	bpl.n	80019c2 <HAL_TIM_IRQHandler+0xd2>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80019be:	06b6      	lsls	r6, r6, #26
 80019c0:	d439      	bmi.n	8001a36 <HAL_TIM_IRQHandler+0x146>
}
 80019c2:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019c4:	f7ff ff90 	bl	80018e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019c8:	0028      	movs	r0, r5
 80019ca:	f7ff ff8f 	bl	80018ec <HAL_TIM_PWM_PulseFinishedCallback>
 80019ce:	e7a3      	b.n	8001918 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019d0:	0028      	movs	r0, r5
 80019d2:	f7ff ff89 	bl	80018e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019d6:	0028      	movs	r0, r5
 80019d8:	f7ff ff88 	bl	80018ec <HAL_TIM_PWM_PulseFinishedCallback>
 80019dc:	e7b1      	b.n	8001942 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019de:	0028      	movs	r0, r5
 80019e0:	f7ff ff82 	bl	80018e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019e4:	0028      	movs	r0, r5
 80019e6:	f7ff ff81 	bl	80018ec <HAL_TIM_PWM_PulseFinishedCallback>
 80019ea:	e7bd      	b.n	8001968 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ec:	0028      	movs	r0, r5
 80019ee:	f7ff ff7b 	bl	80018e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019f2:	0028      	movs	r0, r5
 80019f4:	f7ff ff7a 	bl	80018ec <HAL_TIM_PWM_PulseFinishedCallback>
 80019f8:	e7cb      	b.n	8001992 <HAL_TIM_IRQHandler+0xa2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80019fa:	682b      	ldr	r3, [r5, #0]
 80019fc:	2202      	movs	r2, #2
 80019fe:	4252      	negs	r2, r2
 8001a00:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a02:	0028      	movs	r0, r5
 8001a04:	f7fe fcc2 	bl	800038c <HAL_TIM_PeriodElapsedCallback>
 8001a08:	e7c9      	b.n	800199e <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001a0a:	682b      	ldr	r3, [r5, #0]
 8001a0c:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <HAL_TIM_IRQHandler+0x158>)
 8001a0e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001a10:	0028      	movs	r0, r5
 8001a12:	f000 fa54 	bl	8001ebe <HAL_TIMEx_BreakCallback>
 8001a16:	e7c8      	b.n	80019aa <HAL_TIM_IRQHandler+0xba>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001a18:	682b      	ldr	r3, [r5, #0]
 8001a1a:	4a0c      	ldr	r2, [pc, #48]	; (8001a4c <HAL_TIM_IRQHandler+0x15c>)
 8001a1c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001a1e:	0028      	movs	r0, r5
 8001a20:	f000 fa4e 	bl	8001ec0 <HAL_TIMEx_Break2Callback>
 8001a24:	e7c5      	b.n	80019b2 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001a26:	682b      	ldr	r3, [r5, #0]
 8001a28:	2241      	movs	r2, #65	; 0x41
 8001a2a:	4252      	negs	r2, r2
 8001a2c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001a2e:	0028      	movs	r0, r5
 8001a30:	f7ff ff5d 	bl	80018ee <HAL_TIM_TriggerCallback>
 8001a34:	e7c1      	b.n	80019ba <HAL_TIM_IRQHandler+0xca>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001a36:	682b      	ldr	r3, [r5, #0]
 8001a38:	2221      	movs	r2, #33	; 0x21
 8001a3a:	4252      	negs	r2, r2
 8001a3c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001a3e:	0028      	movs	r0, r5
 8001a40:	f000 fa3c 	bl	8001ebc <HAL_TIMEx_CommutCallback>
}
 8001a44:	e7bd      	b.n	80019c2 <HAL_TIM_IRQHandler+0xd2>
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	ffffdf7f 	.word	0xffffdf7f
 8001a4c:	fffffeff 	.word	0xfffffeff

08001a50 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001a50:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a52:	4a27      	ldr	r2, [pc, #156]	; (8001af0 <TIM_Base_SetConfig+0xa0>)
 8001a54:	4290      	cmp	r0, r2
 8001a56:	d009      	beq.n	8001a6c <TIM_Base_SetConfig+0x1c>
 8001a58:	2280      	movs	r2, #128	; 0x80
 8001a5a:	05d2      	lsls	r2, r2, #23
 8001a5c:	4290      	cmp	r0, r2
 8001a5e:	d005      	beq.n	8001a6c <TIM_Base_SetConfig+0x1c>
 8001a60:	4a24      	ldr	r2, [pc, #144]	; (8001af4 <TIM_Base_SetConfig+0xa4>)
 8001a62:	4290      	cmp	r0, r2
 8001a64:	d002      	beq.n	8001a6c <TIM_Base_SetConfig+0x1c>
 8001a66:	4a24      	ldr	r2, [pc, #144]	; (8001af8 <TIM_Base_SetConfig+0xa8>)
 8001a68:	4290      	cmp	r0, r2
 8001a6a:	d103      	bne.n	8001a74 <TIM_Base_SetConfig+0x24>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a6c:	2270      	movs	r2, #112	; 0x70
 8001a6e:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8001a70:	684a      	ldr	r2, [r1, #4]
 8001a72:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a74:	4a1e      	ldr	r2, [pc, #120]	; (8001af0 <TIM_Base_SetConfig+0xa0>)
 8001a76:	4290      	cmp	r0, r2
 8001a78:	d015      	beq.n	8001aa6 <TIM_Base_SetConfig+0x56>
 8001a7a:	2280      	movs	r2, #128	; 0x80
 8001a7c:	05d2      	lsls	r2, r2, #23
 8001a7e:	4290      	cmp	r0, r2
 8001a80:	d011      	beq.n	8001aa6 <TIM_Base_SetConfig+0x56>
 8001a82:	4a1c      	ldr	r2, [pc, #112]	; (8001af4 <TIM_Base_SetConfig+0xa4>)
 8001a84:	4290      	cmp	r0, r2
 8001a86:	d00e      	beq.n	8001aa6 <TIM_Base_SetConfig+0x56>
 8001a88:	4a1b      	ldr	r2, [pc, #108]	; (8001af8 <TIM_Base_SetConfig+0xa8>)
 8001a8a:	4290      	cmp	r0, r2
 8001a8c:	d00b      	beq.n	8001aa6 <TIM_Base_SetConfig+0x56>
 8001a8e:	4a1b      	ldr	r2, [pc, #108]	; (8001afc <TIM_Base_SetConfig+0xac>)
 8001a90:	4290      	cmp	r0, r2
 8001a92:	d008      	beq.n	8001aa6 <TIM_Base_SetConfig+0x56>
 8001a94:	4a1a      	ldr	r2, [pc, #104]	; (8001b00 <TIM_Base_SetConfig+0xb0>)
 8001a96:	4290      	cmp	r0, r2
 8001a98:	d005      	beq.n	8001aa6 <TIM_Base_SetConfig+0x56>
 8001a9a:	4a1a      	ldr	r2, [pc, #104]	; (8001b04 <TIM_Base_SetConfig+0xb4>)
 8001a9c:	4290      	cmp	r0, r2
 8001a9e:	d002      	beq.n	8001aa6 <TIM_Base_SetConfig+0x56>
 8001aa0:	4a19      	ldr	r2, [pc, #100]	; (8001b08 <TIM_Base_SetConfig+0xb8>)
 8001aa2:	4290      	cmp	r0, r2
 8001aa4:	d103      	bne.n	8001aae <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001aa6:	4a19      	ldr	r2, [pc, #100]	; (8001b0c <TIM_Base_SetConfig+0xbc>)
 8001aa8:	401a      	ands	r2, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001aaa:	68cb      	ldr	r3, [r1, #12]
 8001aac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001aae:	2280      	movs	r2, #128	; 0x80
 8001ab0:	4393      	bics	r3, r2
 8001ab2:	694a      	ldr	r2, [r1, #20]
 8001ab4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001ab6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ab8:	688b      	ldr	r3, [r1, #8]
 8001aba:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001abc:	680b      	ldr	r3, [r1, #0]
 8001abe:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <TIM_Base_SetConfig+0xa0>)
 8001ac2:	4298      	cmp	r0, r3
 8001ac4:	d008      	beq.n	8001ad8 <TIM_Base_SetConfig+0x88>
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <TIM_Base_SetConfig+0xb0>)
 8001ac8:	4298      	cmp	r0, r3
 8001aca:	d005      	beq.n	8001ad8 <TIM_Base_SetConfig+0x88>
 8001acc:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <TIM_Base_SetConfig+0xb4>)
 8001ace:	4298      	cmp	r0, r3
 8001ad0:	d002      	beq.n	8001ad8 <TIM_Base_SetConfig+0x88>
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <TIM_Base_SetConfig+0xb8>)
 8001ad4:	4298      	cmp	r0, r3
 8001ad6:	d101      	bne.n	8001adc <TIM_Base_SetConfig+0x8c>
    TIMx->RCR = Structure->RepetitionCounter;
 8001ad8:	690b      	ldr	r3, [r1, #16]
 8001ada:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001adc:	2301      	movs	r3, #1
 8001ade:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001ae0:	6902      	ldr	r2, [r0, #16]
 8001ae2:	4213      	tst	r3, r2
 8001ae4:	d003      	beq.n	8001aee <TIM_Base_SetConfig+0x9e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001ae6:	6903      	ldr	r3, [r0, #16]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	4393      	bics	r3, r2
 8001aec:	6103      	str	r3, [r0, #16]
}
 8001aee:	4770      	bx	lr
 8001af0:	40012c00 	.word	0x40012c00
 8001af4:	40000400 	.word	0x40000400
 8001af8:	40000800 	.word	0x40000800
 8001afc:	40002000 	.word	0x40002000
 8001b00:	40014000 	.word	0x40014000
 8001b04:	40014400 	.word	0x40014400
 8001b08:	40014800 	.word	0x40014800
 8001b0c:	fffffcff 	.word	0xfffffcff

08001b10 <HAL_TIM_Base_Init>:
{
 8001b10:	b570      	push	{r4, r5, r6, lr}
 8001b12:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8001b14:	d02a      	beq.n	8001b6c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001b16:	233d      	movs	r3, #61	; 0x3d
 8001b18:	5cc3      	ldrb	r3, [r0, r3]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d020      	beq.n	8001b60 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8001b1e:	253d      	movs	r5, #61	; 0x3d
 8001b20:	2302      	movs	r3, #2
 8001b22:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b24:	0021      	movs	r1, r4
 8001b26:	c901      	ldmia	r1!, {r0}
 8001b28:	f7ff ff92 	bl	8001a50 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	2248      	movs	r2, #72	; 0x48
 8001b30:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b32:	3a0a      	subs	r2, #10
 8001b34:	54a3      	strb	r3, [r4, r2]
 8001b36:	3201      	adds	r2, #1
 8001b38:	54a3      	strb	r3, [r4, r2]
 8001b3a:	3201      	adds	r2, #1
 8001b3c:	54a3      	strb	r3, [r4, r2]
 8001b3e:	3201      	adds	r2, #1
 8001b40:	54a3      	strb	r3, [r4, r2]
 8001b42:	3201      	adds	r2, #1
 8001b44:	54a3      	strb	r3, [r4, r2]
 8001b46:	3201      	adds	r2, #1
 8001b48:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b4a:	3201      	adds	r2, #1
 8001b4c:	54a3      	strb	r3, [r4, r2]
 8001b4e:	3201      	adds	r2, #1
 8001b50:	54a3      	strb	r3, [r4, r2]
 8001b52:	3201      	adds	r2, #1
 8001b54:	54a3      	strb	r3, [r4, r2]
 8001b56:	3201      	adds	r2, #1
 8001b58:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8001b5a:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8001b5c:	2000      	movs	r0, #0
}
 8001b5e:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8001b60:	333c      	adds	r3, #60	; 0x3c
 8001b62:	2200      	movs	r2, #0
 8001b64:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8001b66:	f7fe fda3 	bl	80006b0 <HAL_TIM_Base_MspInit>
 8001b6a:	e7d8      	b.n	8001b1e <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	e7f6      	b.n	8001b5e <HAL_TIM_Base_Init+0x4e>

08001b70 <HAL_TIM_Encoder_Init>:
{
 8001b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b72:	46c6      	mov	lr, r8
 8001b74:	b500      	push	{lr}
 8001b76:	0004      	movs	r4, r0
 8001b78:	000d      	movs	r5, r1
  if (htim == NULL)
 8001b7a:	2800      	cmp	r0, #0
 8001b7c:	d04d      	beq.n	8001c1a <HAL_TIM_Encoder_Init+0xaa>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001b7e:	233d      	movs	r3, #61	; 0x3d
 8001b80:	5cc3      	ldrb	r3, [r0, r3]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d043      	beq.n	8001c0e <HAL_TIM_Encoder_Init+0x9e>
  htim->State = HAL_TIM_STATE_BUSY;
 8001b86:	263d      	movs	r6, #61	; 0x3d
 8001b88:	2302      	movs	r3, #2
 8001b8a:	55a3      	strb	r3, [r4, r6]
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001b8c:	6822      	ldr	r2, [r4, #0]
 8001b8e:	6893      	ldr	r3, [r2, #8]
 8001b90:	4923      	ldr	r1, [pc, #140]	; (8001c20 <HAL_TIM_Encoder_Init+0xb0>)
 8001b92:	400b      	ands	r3, r1
 8001b94:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b96:	0021      	movs	r1, r4
 8001b98:	c901      	ldmia	r1!, {r0}
 8001b9a:	f7ff ff59 	bl	8001a50 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8001b9e:	6821      	ldr	r1, [r4, #0]
 8001ba0:	688b      	ldr	r3, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8001ba2:	698a      	ldr	r2, [r1, #24]
  tmpccer = htim->Instance->CCER;
 8001ba4:	6a0f      	ldr	r7, [r1, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8001ba6:	6828      	ldr	r0, [r5, #0]
 8001ba8:	4318      	orrs	r0, r3
 8001baa:	4680      	mov	r8, r0
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001bac:	4b1d      	ldr	r3, [pc, #116]	; (8001c24 <HAL_TIM_Encoder_Init+0xb4>)
 8001bae:	401a      	ands	r2, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001bb0:	68ab      	ldr	r3, [r5, #8]
 8001bb2:	69a8      	ldr	r0, [r5, #24]
 8001bb4:	0200      	lsls	r0, r0, #8
 8001bb6:	4303      	orrs	r3, r0
 8001bb8:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001bba:	4a1b      	ldr	r2, [pc, #108]	; (8001c28 <HAL_TIM_Encoder_Init+0xb8>)
 8001bbc:	4013      	ands	r3, r2
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001bbe:	68ea      	ldr	r2, [r5, #12]
 8001bc0:	69e8      	ldr	r0, [r5, #28]
 8001bc2:	0200      	lsls	r0, r0, #8
 8001bc4:	4302      	orrs	r2, r0
 8001bc6:	431a      	orrs	r2, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001bc8:	692b      	ldr	r3, [r5, #16]
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	6a28      	ldr	r0, [r5, #32]
 8001bce:	0300      	lsls	r0, r0, #12
 8001bd0:	4303      	orrs	r3, r0
 8001bd2:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001bd4:	22aa      	movs	r2, #170	; 0xaa
 8001bd6:	4397      	bics	r7, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001bd8:	686a      	ldr	r2, [r5, #4]
 8001bda:	696d      	ldr	r5, [r5, #20]
 8001bdc:	012d      	lsls	r5, r5, #4
 8001bde:	432a      	orrs	r2, r5
 8001be0:	433a      	orrs	r2, r7
  htim->Instance->SMCR = tmpsmcr;
 8001be2:	4640      	mov	r0, r8
 8001be4:	6088      	str	r0, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8001be6:	6821      	ldr	r1, [r4, #0]
 8001be8:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 8001bea:	6823      	ldr	r3, [r4, #0]
 8001bec:	621a      	str	r2, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	2248      	movs	r2, #72	; 0x48
 8001bf2:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001bf4:	3a0a      	subs	r2, #10
 8001bf6:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001bf8:	3201      	adds	r2, #1
 8001bfa:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001bfc:	3205      	adds	r2, #5
 8001bfe:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001c00:	3201      	adds	r2, #1
 8001c02:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8001c04:	55a3      	strb	r3, [r4, r6]
  return HAL_OK;
 8001c06:	2000      	movs	r0, #0
}
 8001c08:	bc80      	pop	{r7}
 8001c0a:	46b8      	mov	r8, r7
 8001c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 8001c0e:	333c      	adds	r3, #60	; 0x3c
 8001c10:	2200      	movs	r2, #0
 8001c12:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Encoder_MspInit(htim);
 8001c14:	f7fe fd20 	bl	8000658 <HAL_TIM_Encoder_MspInit>
 8001c18:	e7b5      	b.n	8001b86 <HAL_TIM_Encoder_Init+0x16>
    return HAL_ERROR;
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	e7f4      	b.n	8001c08 <HAL_TIM_Encoder_Init+0x98>
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	fffebff8 	.word	0xfffebff8
 8001c24:	fffffcfc 	.word	0xfffffcfc
 8001c28:	ffff0303 	.word	0xffff0303

08001c2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001c2c:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001c2e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c30:	4d03      	ldr	r5, [pc, #12]	; (8001c40 <TIM_ETR_SetConfig+0x14>)
 8001c32:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	4313      	orrs	r3, r2
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c3c:	6083      	str	r3, [r0, #8]
}
 8001c3e:	bd30      	pop	{r4, r5, pc}
 8001c40:	ffff00ff 	.word	0xffff00ff

08001c44 <HAL_TIM_ConfigClockSource>:
{
 8001c44:	b510      	push	{r4, lr}
 8001c46:	0004      	movs	r4, r0
 8001c48:	0008      	movs	r0, r1
  __HAL_LOCK(htim);
 8001c4a:	233c      	movs	r3, #60	; 0x3c
 8001c4c:	5ce3      	ldrb	r3, [r4, r3]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d100      	bne.n	8001c54 <HAL_TIM_ConfigClockSource+0x10>
 8001c52:	e077      	b.n	8001d44 <HAL_TIM_ConfigClockSource+0x100>
 8001c54:	233c      	movs	r3, #60	; 0x3c
 8001c56:	2201      	movs	r2, #1
 8001c58:	54e2      	strb	r2, [r4, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	3201      	adds	r2, #1
 8001c5e:	54e2      	strb	r2, [r4, r3]
  tmpsmcr = htim->Instance->SMCR;
 8001c60:	6822      	ldr	r2, [r4, #0]
 8001c62:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c64:	4938      	ldr	r1, [pc, #224]	; (8001d48 <HAL_TIM_ConfigClockSource+0x104>)
 8001c66:	400b      	ands	r3, r1
  htim->Instance->SMCR = tmpsmcr;
 8001c68:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001c6a:	6801      	ldr	r1, [r0, #0]
 8001c6c:	2960      	cmp	r1, #96	; 0x60
 8001c6e:	d04f      	beq.n	8001d10 <HAL_TIM_ConfigClockSource+0xcc>
 8001c70:	d829      	bhi.n	8001cc6 <HAL_TIM_ConfigClockSource+0x82>
 8001c72:	2940      	cmp	r1, #64	; 0x40
 8001c74:	d057      	beq.n	8001d26 <HAL_TIM_ConfigClockSource+0xe2>
 8001c76:	d90c      	bls.n	8001c92 <HAL_TIM_ConfigClockSource+0x4e>
 8001c78:	2950      	cmp	r1, #80	; 0x50
 8001c7a:	d122      	bne.n	8001cc2 <HAL_TIM_ConfigClockSource+0x7e>
                               sClockSourceConfig->ClockPolarity,
 8001c7c:	6841      	ldr	r1, [r0, #4]
                               sClockSourceConfig->ClockFilter);
 8001c7e:	68c2      	ldr	r2, [r0, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c80:	6820      	ldr	r0, [r4, #0]
 8001c82:	f7ff fdc0 	bl	8001806 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c86:	6820      	ldr	r0, [r4, #0]
 8001c88:	2150      	movs	r1, #80	; 0x50
 8001c8a:	f7ff fde1 	bl	8001850 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001c8e:	2000      	movs	r0, #0
      break;
 8001c90:	e005      	b.n	8001c9e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8001c92:	2920      	cmp	r1, #32
 8001c94:	d00e      	beq.n	8001cb4 <HAL_TIM_ConfigClockSource+0x70>
 8001c96:	d909      	bls.n	8001cac <HAL_TIM_ConfigClockSource+0x68>
 8001c98:	2930      	cmp	r1, #48	; 0x30
 8001c9a:	d00b      	beq.n	8001cb4 <HAL_TIM_ConfigClockSource+0x70>
      status = HAL_ERROR;
 8001c9c:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8001c9e:	233d      	movs	r3, #61	; 0x3d
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	54e2      	strb	r2, [r4, r3]
}
 8001caa:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8001cac:	2900      	cmp	r1, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_TIM_ConfigClockSource+0x70>
 8001cb0:	2910      	cmp	r1, #16
 8001cb2:	d104      	bne.n	8001cbe <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001cb4:	6820      	ldr	r0, [r4, #0]
 8001cb6:	f7ff fdcb 	bl	8001850 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001cba:	2000      	movs	r0, #0
      break;
 8001cbc:	e7ef      	b.n	8001c9e <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	e7ed      	b.n	8001c9e <HAL_TIM_ConfigClockSource+0x5a>
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	e7eb      	b.n	8001c9e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8001cc6:	2280      	movs	r2, #128	; 0x80
 8001cc8:	0152      	lsls	r2, r2, #5
 8001cca:	4291      	cmp	r1, r2
 8001ccc:	d036      	beq.n	8001d3c <HAL_TIM_ConfigClockSource+0xf8>
 8001cce:	2280      	movs	r2, #128	; 0x80
 8001cd0:	0192      	lsls	r2, r2, #6
 8001cd2:	4291      	cmp	r1, r2
 8001cd4:	d10d      	bne.n	8001cf2 <HAL_TIM_ConfigClockSource+0xae>
                        sClockSourceConfig->ClockPrescaler,
 8001cd6:	6881      	ldr	r1, [r0, #8]
                        sClockSourceConfig->ClockPolarity,
 8001cd8:	6842      	ldr	r2, [r0, #4]
                        sClockSourceConfig->ClockFilter);
 8001cda:	68c3      	ldr	r3, [r0, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001cdc:	6820      	ldr	r0, [r4, #0]
 8001cde:	f7ff ffa5 	bl	8001c2c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ce2:	6822      	ldr	r2, [r4, #0]
 8001ce4:	6891      	ldr	r1, [r2, #8]
 8001ce6:	2380      	movs	r3, #128	; 0x80
 8001ce8:	01db      	lsls	r3, r3, #7
 8001cea:	430b      	orrs	r3, r1
 8001cec:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001cee:	2000      	movs	r0, #0
      break;
 8001cf0:	e7d5      	b.n	8001c9e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8001cf2:	2970      	cmp	r1, #112	; 0x70
 8001cf4:	d124      	bne.n	8001d40 <HAL_TIM_ConfigClockSource+0xfc>
                        sClockSourceConfig->ClockPrescaler,
 8001cf6:	6881      	ldr	r1, [r0, #8]
                        sClockSourceConfig->ClockPolarity,
 8001cf8:	6842      	ldr	r2, [r0, #4]
                        sClockSourceConfig->ClockFilter);
 8001cfa:	68c3      	ldr	r3, [r0, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001cfc:	6820      	ldr	r0, [r4, #0]
 8001cfe:	f7ff ff95 	bl	8001c2c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001d02:	6822      	ldr	r2, [r4, #0]
 8001d04:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d06:	2177      	movs	r1, #119	; 0x77
 8001d08:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8001d0a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001d0c:	2000      	movs	r0, #0
      break;
 8001d0e:	e7c6      	b.n	8001c9e <HAL_TIM_ConfigClockSource+0x5a>
                               sClockSourceConfig->ClockPolarity,
 8001d10:	6841      	ldr	r1, [r0, #4]
                               sClockSourceConfig->ClockFilter);
 8001d12:	68c2      	ldr	r2, [r0, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d14:	6820      	ldr	r0, [r4, #0]
 8001d16:	f7ff fd87 	bl	8001828 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d1a:	6820      	ldr	r0, [r4, #0]
 8001d1c:	2160      	movs	r1, #96	; 0x60
 8001d1e:	f7ff fd97 	bl	8001850 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001d22:	2000      	movs	r0, #0
      break;
 8001d24:	e7bb      	b.n	8001c9e <HAL_TIM_ConfigClockSource+0x5a>
                               sClockSourceConfig->ClockPolarity,
 8001d26:	6841      	ldr	r1, [r0, #4]
                               sClockSourceConfig->ClockFilter);
 8001d28:	68c2      	ldr	r2, [r0, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d2a:	6820      	ldr	r0, [r4, #0]
 8001d2c:	f7ff fd6b 	bl	8001806 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d30:	6820      	ldr	r0, [r4, #0]
 8001d32:	2140      	movs	r1, #64	; 0x40
 8001d34:	f7ff fd8c 	bl	8001850 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001d38:	2000      	movs	r0, #0
      break;
 8001d3a:	e7b0      	b.n	8001c9e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	e7ae      	b.n	8001c9e <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8001d40:	2001      	movs	r0, #1
 8001d42:	e7ac      	b.n	8001c9e <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8001d44:	2002      	movs	r0, #2
 8001d46:	e7b0      	b.n	8001caa <HAL_TIM_ConfigClockSource+0x66>
 8001d48:	ffce0088 	.word	0xffce0088

08001d4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001d4c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001d4e:	231f      	movs	r3, #31
 8001d50:	4019      	ands	r1, r3
 8001d52:	2401      	movs	r4, #1
 8001d54:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001d56:	6a03      	ldr	r3, [r0, #32]
 8001d58:	43a3      	bics	r3, r4
 8001d5a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001d5c:	6a03      	ldr	r3, [r0, #32]
 8001d5e:	408a      	lsls	r2, r1
 8001d60:	4313      	orrs	r3, r2
 8001d62:	6203      	str	r3, [r0, #32]
}
 8001d64:	bd10      	pop	{r4, pc}

08001d66 <HAL_TIM_Encoder_Start>:
{
 8001d66:	b570      	push	{r4, r5, r6, lr}
 8001d68:	0004      	movs	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001d6a:	233e      	movs	r3, #62	; 0x3e
 8001d6c:	5cc0      	ldrb	r0, [r0, r3]
 8001d6e:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001d70:	3301      	adds	r3, #1
 8001d72:	5ce3      	ldrb	r3, [r4, r3]
 8001d74:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001d76:	2244      	movs	r2, #68	; 0x44
 8001d78:	5ca2      	ldrb	r2, [r4, r2]
 8001d7a:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001d7c:	2545      	movs	r5, #69	; 0x45
 8001d7e:	5d65      	ldrb	r5, [r4, r5]
 8001d80:	b2ed      	uxtb	r5, r5
  if (Channel == TIM_CHANNEL_1)
 8001d82:	2900      	cmp	r1, #0
 8001d84:	d117      	bne.n	8001db6 <HAL_TIM_Encoder_Start+0x50>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001d86:	2801      	cmp	r0, #1
 8001d88:	d145      	bne.n	8001e16 <HAL_TIM_Encoder_Start+0xb0>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8001d8a:	2a01      	cmp	r2, #1
 8001d8c:	d144      	bne.n	8001e18 <HAL_TIM_Encoder_Start+0xb2>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d8e:	2302      	movs	r3, #2
 8001d90:	323d      	adds	r2, #61	; 0x3d
 8001d92:	54a3      	strb	r3, [r4, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d94:	3206      	adds	r2, #6
 8001d96:	54a3      	strb	r3, [r4, r2]
  switch (Channel)
 8001d98:	2900      	cmp	r1, #0
 8001d9a:	d02a      	beq.n	8001df2 <HAL_TIM_Encoder_Start+0x8c>
 8001d9c:	2904      	cmp	r1, #4
 8001d9e:	d034      	beq.n	8001e0a <HAL_TIM_Encoder_Start+0xa4>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001da0:	6820      	ldr	r0, [r4, #0]
 8001da2:	2201      	movs	r2, #1
 8001da4:	2100      	movs	r1, #0
 8001da6:	f7ff ffd1 	bl	8001d4c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001daa:	6820      	ldr	r0, [r4, #0]
 8001dac:	2201      	movs	r2, #1
 8001dae:	2104      	movs	r1, #4
 8001db0:	f7ff ffcc 	bl	8001d4c <TIM_CCxChannelCmd>
      break;
 8001db4:	e022      	b.n	8001dfc <HAL_TIM_Encoder_Start+0x96>
  else if (Channel == TIM_CHANNEL_2)
 8001db6:	2904      	cmp	r1, #4
 8001db8:	d011      	beq.n	8001dde <HAL_TIM_Encoder_Start+0x78>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001dba:	2801      	cmp	r0, #1
 8001dbc:	d131      	bne.n	8001e22 <HAL_TIM_Encoder_Start+0xbc>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d12a      	bne.n	8001e18 <HAL_TIM_Encoder_Start+0xb2>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001dc2:	2a01      	cmp	r2, #1
 8001dc4:	d12f      	bne.n	8001e26 <HAL_TIM_Encoder_Start+0xc0>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001dc6:	2d01      	cmp	r5, #1
 8001dc8:	d12f      	bne.n	8001e2a <HAL_TIM_Encoder_Start+0xc4>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001dca:	3301      	adds	r3, #1
 8001dcc:	323d      	adds	r2, #61	; 0x3d
 8001dce:	54a3      	strb	r3, [r4, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001dd0:	3201      	adds	r2, #1
 8001dd2:	54a3      	strb	r3, [r4, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001dd4:	3205      	adds	r2, #5
 8001dd6:	54a3      	strb	r3, [r4, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001dd8:	3201      	adds	r2, #1
 8001dda:	54a3      	strb	r3, [r4, r2]
 8001ddc:	e7dc      	b.n	8001d98 <HAL_TIM_Encoder_Start+0x32>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d11b      	bne.n	8001e1a <HAL_TIM_Encoder_Start+0xb4>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001de2:	2d01      	cmp	r5, #1
 8001de4:	d11b      	bne.n	8001e1e <HAL_TIM_Encoder_Start+0xb8>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001de6:	3301      	adds	r3, #1
 8001de8:	223f      	movs	r2, #63	; 0x3f
 8001dea:	54a3      	strb	r3, [r4, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001dec:	3206      	adds	r2, #6
 8001dee:	54a3      	strb	r3, [r4, r2]
 8001df0:	e7d2      	b.n	8001d98 <HAL_TIM_Encoder_Start+0x32>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001df2:	6820      	ldr	r0, [r4, #0]
 8001df4:	2201      	movs	r2, #1
 8001df6:	2100      	movs	r1, #0
 8001df8:	f7ff ffa8 	bl	8001d4c <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8001dfc:	6822      	ldr	r2, [r4, #0]
 8001dfe:	6813      	ldr	r3, [r2, #0]
 8001e00:	2101      	movs	r1, #1
 8001e02:	430b      	orrs	r3, r1
 8001e04:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001e06:	2000      	movs	r0, #0
 8001e08:	e006      	b.n	8001e18 <HAL_TIM_Encoder_Start+0xb2>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001e0a:	6820      	ldr	r0, [r4, #0]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	2104      	movs	r1, #4
 8001e10:	f7ff ff9c 	bl	8001d4c <TIM_CCxChannelCmd>
      break;
 8001e14:	e7f2      	b.n	8001dfc <HAL_TIM_Encoder_Start+0x96>
      return HAL_ERROR;
 8001e16:	2001      	movs	r0, #1
}
 8001e18:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	e7fc      	b.n	8001e18 <HAL_TIM_Encoder_Start+0xb2>
 8001e1e:	0018      	movs	r0, r3
 8001e20:	e7fa      	b.n	8001e18 <HAL_TIM_Encoder_Start+0xb2>
      return HAL_ERROR;
 8001e22:	2001      	movs	r0, #1
 8001e24:	e7f8      	b.n	8001e18 <HAL_TIM_Encoder_Start+0xb2>
 8001e26:	0018      	movs	r0, r3
 8001e28:	e7f6      	b.n	8001e18 <HAL_TIM_Encoder_Start+0xb2>
 8001e2a:	0010      	movs	r0, r2
 8001e2c:	e7f4      	b.n	8001e18 <HAL_TIM_Encoder_Start+0xb2>
	...

08001e30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001e30:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e32:	233c      	movs	r3, #60	; 0x3c
 8001e34:	5cc3      	ldrb	r3, [r0, r3]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d033      	beq.n	8001ea2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8001e3a:	233c      	movs	r3, #60	; 0x3c
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e40:	3301      	adds	r3, #1
 8001e42:	3201      	adds	r2, #1
 8001e44:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e46:	6802      	ldr	r2, [r0, #0]
 8001e48:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e4a:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001e4c:	4c16      	ldr	r4, [pc, #88]	; (8001ea8 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8001e4e:	42a2      	cmp	r2, r4
 8001e50:	d022      	beq.n	8001e98 <HAL_TIMEx_MasterConfigSynchronization+0x68>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e52:	2470      	movs	r4, #112	; 0x70
 8001e54:	43a3      	bics	r3, r4
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e56:	680c      	ldr	r4, [r1, #0]
 8001e58:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e5a:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e5c:	6803      	ldr	r3, [r0, #0]
 8001e5e:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d00c      	beq.n	8001e7e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8001e64:	2280      	movs	r2, #128	; 0x80
 8001e66:	05d2      	lsls	r2, r2, #23
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d008      	beq.n	8001e7e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8001e6c:	4a0f      	ldr	r2, [pc, #60]	; (8001eac <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d005      	beq.n	8001e7e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8001e72:	4a0f      	ldr	r2, [pc, #60]	; (8001eb0 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d002      	beq.n	8001e7e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8001e78:	4a0e      	ldr	r2, [pc, #56]	; (8001eb4 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d104      	bne.n	8001e88 <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e7e:	2280      	movs	r2, #128	; 0x80
 8001e80:	4395      	bics	r5, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e82:	688a      	ldr	r2, [r1, #8]
 8001e84:	432a      	orrs	r2, r5

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e88:	233d      	movs	r3, #61	; 0x3d
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	2200      	movs	r2, #0
 8001e92:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8001e94:	2000      	movs	r0, #0
}
 8001e96:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001e98:	4c07      	ldr	r4, [pc, #28]	; (8001eb8 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8001e9a:	4023      	ands	r3, r4
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001e9c:	684c      	ldr	r4, [r1, #4]
 8001e9e:	4323      	orrs	r3, r4
 8001ea0:	e7d7      	b.n	8001e52 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8001ea2:	2002      	movs	r0, #2
 8001ea4:	e7f7      	b.n	8001e96 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	40012c00 	.word	0x40012c00
 8001eac:	40000400 	.word	0x40000400
 8001eb0:	40000800 	.word	0x40000800
 8001eb4:	40014000 	.word	0x40014000
 8001eb8:	ff0fffff 	.word	0xff0fffff

08001ebc <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ebc:	4770      	bx	lr

08001ebe <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001ec0:	4770      	bx	lr
	...

08001ec4 <LL_TIM_Init>:
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001ec4:	6803      	ldr	r3, [r0, #0]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ec6:	4a23      	ldr	r2, [pc, #140]	; (8001f54 <LL_TIM_Init+0x90>)
 8001ec8:	4290      	cmp	r0, r2
 8001eca:	d009      	beq.n	8001ee0 <LL_TIM_Init+0x1c>
 8001ecc:	2280      	movs	r2, #128	; 0x80
 8001ece:	05d2      	lsls	r2, r2, #23
 8001ed0:	4290      	cmp	r0, r2
 8001ed2:	d005      	beq.n	8001ee0 <LL_TIM_Init+0x1c>
 8001ed4:	4a20      	ldr	r2, [pc, #128]	; (8001f58 <LL_TIM_Init+0x94>)
 8001ed6:	4290      	cmp	r0, r2
 8001ed8:	d002      	beq.n	8001ee0 <LL_TIM_Init+0x1c>
 8001eda:	4a20      	ldr	r2, [pc, #128]	; (8001f5c <LL_TIM_Init+0x98>)
 8001edc:	4290      	cmp	r0, r2
 8001ede:	d103      	bne.n	8001ee8 <LL_TIM_Init+0x24>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001ee0:	2270      	movs	r2, #112	; 0x70
 8001ee2:	4393      	bics	r3, r2
 8001ee4:	684a      	ldr	r2, [r1, #4]
 8001ee6:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ee8:	4a1a      	ldr	r2, [pc, #104]	; (8001f54 <LL_TIM_Init+0x90>)
 8001eea:	4290      	cmp	r0, r2
 8001eec:	d015      	beq.n	8001f1a <LL_TIM_Init+0x56>
 8001eee:	2280      	movs	r2, #128	; 0x80
 8001ef0:	05d2      	lsls	r2, r2, #23
 8001ef2:	4290      	cmp	r0, r2
 8001ef4:	d011      	beq.n	8001f1a <LL_TIM_Init+0x56>
 8001ef6:	4a18      	ldr	r2, [pc, #96]	; (8001f58 <LL_TIM_Init+0x94>)
 8001ef8:	4290      	cmp	r0, r2
 8001efa:	d00e      	beq.n	8001f1a <LL_TIM_Init+0x56>
 8001efc:	4a17      	ldr	r2, [pc, #92]	; (8001f5c <LL_TIM_Init+0x98>)
 8001efe:	4290      	cmp	r0, r2
 8001f00:	d00b      	beq.n	8001f1a <LL_TIM_Init+0x56>
 8001f02:	4a17      	ldr	r2, [pc, #92]	; (8001f60 <LL_TIM_Init+0x9c>)
 8001f04:	4290      	cmp	r0, r2
 8001f06:	d008      	beq.n	8001f1a <LL_TIM_Init+0x56>
 8001f08:	4a16      	ldr	r2, [pc, #88]	; (8001f64 <LL_TIM_Init+0xa0>)
 8001f0a:	4290      	cmp	r0, r2
 8001f0c:	d005      	beq.n	8001f1a <LL_TIM_Init+0x56>
 8001f0e:	4a16      	ldr	r2, [pc, #88]	; (8001f68 <LL_TIM_Init+0xa4>)
 8001f10:	4290      	cmp	r0, r2
 8001f12:	d002      	beq.n	8001f1a <LL_TIM_Init+0x56>
 8001f14:	4a15      	ldr	r2, [pc, #84]	; (8001f6c <LL_TIM_Init+0xa8>)
 8001f16:	4290      	cmp	r0, r2
 8001f18:	d103      	bne.n	8001f22 <LL_TIM_Init+0x5e>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001f1a:	4a15      	ldr	r2, [pc, #84]	; (8001f70 <LL_TIM_Init+0xac>)
 8001f1c:	401a      	ands	r2, r3
 8001f1e:	68cb      	ldr	r3, [r1, #12]
 8001f20:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001f22:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001f24:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001f26:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001f28:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001f2a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f2c:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <LL_TIM_Init+0x90>)
 8001f2e:	4298      	cmp	r0, r3
 8001f30:	d008      	beq.n	8001f44 <LL_TIM_Init+0x80>
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <LL_TIM_Init+0xa0>)
 8001f34:	4298      	cmp	r0, r3
 8001f36:	d005      	beq.n	8001f44 <LL_TIM_Init+0x80>
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <LL_TIM_Init+0xa4>)
 8001f3a:	4298      	cmp	r0, r3
 8001f3c:	d002      	beq.n	8001f44 <LL_TIM_Init+0x80>
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <LL_TIM_Init+0xa8>)
 8001f40:	4298      	cmp	r0, r3
 8001f42:	d101      	bne.n	8001f48 <LL_TIM_Init+0x84>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001f44:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001f46:	6303      	str	r3, [r0, #48]	; 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001f48:	6943      	ldr	r3, [r0, #20]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8001f50:	2000      	movs	r0, #0
 8001f52:	4770      	bx	lr
 8001f54:	40012c00 	.word	0x40012c00
 8001f58:	40000400 	.word	0x40000400
 8001f5c:	40000800 	.word	0x40000800
 8001f60:	40002000 	.word	0x40002000
 8001f64:	40014000 	.word	0x40014000
 8001f68:	40014400 	.word	0x40014400
 8001f6c:	40014800 	.word	0x40014800
 8001f70:	fffffcff 	.word	0xfffffcff

08001f74 <app_encoder_init>:
uint32_t cnt;

/*
 * Initialization function
 */
void app_encoder_init(void){
 8001f74:	b510      	push	{r4, lr}
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	05db      	lsls	r3, r3, #23
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001f82:	2202      	movs	r2, #2
 8001f84:	4252      	negs	r2, r2
 8001f86:	611a      	str	r2, [r3, #16]
	//HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);

	//TIM2 initialization
	LL_TIM_EnableIT_UPDATE(TIM2); //Enable interrupt generation when timer goes to max value and UPDATE event flag is set
	LL_TIM_ClearFlag_UPDATE(TIM2); //Clear update flag on TIMER7
	LL_TIM_SetCounter(TIM2, READ_REG(TIM2->ARR)/2); //Set TIM2 counter to begin in middle of range
 8001f88:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001f8a:	0840      	lsrs	r0, r0, #1
  WRITE_REG(TIMx->CNT, Counter);
 8001f8c:	6258      	str	r0, [r3, #36]	; 0x24
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <app_encoder_init+0x40>)
 8001f90:	68d8      	ldr	r0, [r3, #12]
 8001f92:	4308      	orrs	r0, r1
 8001f94:	60d8      	str	r0, [r3, #12]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001f96:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001f98:	4c07      	ldr	r4, [pc, #28]	; (8001fb8 <app_encoder_init+0x44>)
 8001f9a:	68e3      	ldr	r3, [r4, #12]
 8001f9c:	430b      	orrs	r3, r1
 8001f9e:	60e3      	str	r3, [r4, #12]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001fa0:	6122      	str	r2, [r4, #16]
	//TIM4 initialization
	LL_TIM_EnableIT_UPDATE(TIM4); //Enable interrupt generation when timer goes to max value and UPDATE event flag is set
	LL_TIM_ClearFlag_UPDATE(TIM4); //Clear update flag on TIMER4

	//Init 7 segment display
	max7219_Init( 7 );
 8001fa2:	2007      	movs	r0, #7
 8001fa4:	f000 f8ca 	bl	800213c <max7219_Init>
	max7219_Decode_On();
 8001fa8:	f000 f8d6 	bl	8002158 <max7219_Decode_On>

	arr = READ_REG(TIM4->ARR);
 8001fac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001fae:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <app_encoder_init+0x48>)
 8001fb0:	601a      	str	r2, [r3, #0]


}
 8001fb2:	bd10      	pop	{r4, pc}
 8001fb4:	40001400 	.word	0x40001400
 8001fb8:	40000800 	.word	0x40000800
 8001fbc:	20000178 	.word	0x20000178

08001fc0 <button_isr>:
/**
 * Button interrupt service routine
 */
void button_isr(void){
	//Mask unwanted button interrupts caused by debouncing
	EXTI->IMR1 &= ~(EXTI_IMR1_IM3);
 8001fc0:	490e      	ldr	r1, [pc, #56]	; (8001ffc <button_isr+0x3c>)
 8001fc2:	2280      	movs	r2, #128	; 0x80
 8001fc4:	588b      	ldr	r3, [r1, r2]
 8001fc6:	2008      	movs	r0, #8
 8001fc8:	4383      	bics	r3, r0
 8001fca:	508b      	str	r3, [r1, r2]
  WRITE_REG(TIMx->CNT, Counter);
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <button_isr+0x40>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	625a      	str	r2, [r3, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]

	//Zero TIM7 counter and start counting
	LL_TIM_SetCounter(TIM7, 0); //set counter register value of timer 7 to 0
	LL_TIM_EnableCounter(TIM7); //start counting of timer 7

	if (encoderPress > 1){
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <button_isr+0x44>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	dd07      	ble.n	8001ff2 <button_isr+0x32>
		encoderPress--;
 8001fe2:	4a08      	ldr	r2, [pc, #32]	; (8002004 <button_isr+0x44>)
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	6013      	str	r3, [r2, #0]
	else {
		encoderPress = 4;
	}

	//Erase btn (PC3) interrupt flag
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8001fe8:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <button_isr+0x3c>)
 8001fea:	2208      	movs	r2, #8
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
}
 8001ff0:	4770      	bx	lr
		encoderPress = 4;
 8001ff2:	4b04      	ldr	r3, [pc, #16]	; (8002004 <button_isr+0x44>)
 8001ff4:	2204      	movs	r2, #4
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	e7f6      	b.n	8001fe8 <button_isr+0x28>
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	40021800 	.word	0x40021800
 8002000:	40001400 	.word	0x40001400
 8002004:	2000000c 	.word	0x2000000c

08002008 <timer_delay>:
}

/*
 * General delay routine
 */
void timer_delay(uint32_t ms){
 8002008:	b510      	push	{r4, lr}
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800200a:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <timer_delay+0x40>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	2101      	movs	r1, #1
 8002010:	438a      	bics	r2, r1
 8002012:	601a      	str	r2, [r3, #0]
	// Disable TIM4 counter
	LL_TIM_DisableCounter(TIM7); //equals to LL_TIMDisableCounter(TIM4) => CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN) => TIM4->CR1 &= ~TIM_CR1_CEN

	//Clear update flag on TIMER4
	TIM7->SR = 0;
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]

	//Update ARR register
	TIM7->ARR = ms; //set number of "ms"
 8002018:	62d8      	str	r0, [r3, #44]	; 0x2c
	arr = READ_REG(TIM7->ARR);
 800201a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800201c:	480b      	ldr	r0, [pc, #44]	; (800204c <timer_delay+0x44>)
 800201e:	6004      	str	r4, [r0, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8002020:	625a      	str	r2, [r3, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	601a      	str	r2, [r3, #0]
}
 8002028:	e003      	b.n	8002032 <timer_delay+0x2a>
	// Enable TIM4 counter
	//TIM4->CR1 |= TIM_CR1_CEN; //start counting of timer 4 (TIM4->CR1 |= TIM_CR1_CEN)

	// Wait for the update event (counter reset)
    while (!(TIM7->SR & TIM_SR_UIF)) {
    	cnt = READ_REG(TIM7->CNT);
 800202a:	4b07      	ldr	r3, [pc, #28]	; (8002048 <timer_delay+0x40>)
 800202c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800202e:	4b08      	ldr	r3, [pc, #32]	; (8002050 <timer_delay+0x48>)
 8002030:	601a      	str	r2, [r3, #0]
    while (!(TIM7->SR & TIM_SR_UIF)) {
 8002032:	4b05      	ldr	r3, [pc, #20]	; (8002048 <timer_delay+0x40>)
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	07db      	lsls	r3, r3, #31
 8002038:	d5f7      	bpl.n	800202a <timer_delay+0x22>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800203a:	4a03      	ldr	r2, [pc, #12]	; (8002048 <timer_delay+0x40>)
 800203c:	6813      	ldr	r3, [r2, #0]
 800203e:	2101      	movs	r1, #1
 8002040:	438b      	bics	r3, r1
 8002042:	6013      	str	r3, [r2, #0]
    }

    // Disable TIM4 counter
    LL_TIM_DisableCounter(TIM7);

}
 8002044:	bd10      	pop	{r4, pc}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	40001400 	.word	0x40001400
 800204c:	20000178 	.word	0x20000178
 8002050:	2000017c 	.word	0x2000017c

08002054 <app_encoder_loop>:
void app_encoder_loop(void){
 8002054:	b510      	push	{r4, lr}
	timer_delay(5000);
 8002056:	4806      	ldr	r0, [pc, #24]	; (8002070 <app_encoder_loop+0x1c>)
 8002058:	f7ff ffd6 	bl	8002008 <timer_delay>
	if (g < 1000) {
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <app_encoder_loop+0x20>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	22fa      	movs	r2, #250	; 0xfa
 8002062:	0092      	lsls	r2, r2, #2
 8002064:	4293      	cmp	r3, r2
 8002066:	da02      	bge.n	800206e <app_encoder_loop+0x1a>
					g++;
 8002068:	4a02      	ldr	r2, [pc, #8]	; (8002074 <app_encoder_loop+0x20>)
 800206a:	3301      	adds	r3, #1
 800206c:	6013      	str	r3, [r2, #0]
}
 800206e:	bd10      	pop	{r4, pc}
 8002070:	00001388 	.word	0x00001388
 8002074:	20000180 	.word	0x20000180

08002078 <timer_delay_isr>:

void timer_delay_isr(void) {
 8002078:	b510      	push	{r4, lr}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800207a:	4b05      	ldr	r3, [pc, #20]	; (8002090 <timer_delay_isr+0x18>)
 800207c:	2202      	movs	r2, #2
 800207e:	4252      	negs	r2, r2
 8002080:	611a      	str	r2, [r3, #16]
	// Disable TIM4 counter
	//TIM4->CR1 &= ~TIM_CR1_CEN;
	LL_TIM_ClearFlag_UPDATE(TIM7); //Clear update flag on TIMER4
	HAL_GPIO_TogglePin(GPIOA, LED_Pin);
 8002082:	20a0      	movs	r0, #160	; 0xa0
 8002084:	2120      	movs	r1, #32
 8002086:	05c0      	lsls	r0, r0, #23
 8002088:	f7fe fd00 	bl	8000a8c <HAL_GPIO_TogglePin>
}
 800208c:	bd10      	pop	{r4, pc}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	40001400 	.word	0x40001400

08002094 <max7219_SendData>:
		max7219_SendData(i + 1, clear);
	}
}

void max7219_SendData(uint8_t addr, uint8_t data)
{
 8002094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002096:	46c6      	mov	lr, r8
 8002098:	b500      	push	{lr}
 800209a:	b082      	sub	sp, #8
 800209c:	2307      	movs	r3, #7
 800209e:	446b      	add	r3, sp
 80020a0:	4698      	mov	r8, r3
 80020a2:	7018      	strb	r0, [r3, #0]
 80020a4:	466b      	mov	r3, sp
 80020a6:	1d9e      	adds	r6, r3, #6
 80020a8:	7199      	strb	r1, [r3, #6]
	CS_SET();
 80020aa:	4d0f      	ldr	r5, [pc, #60]	; (80020e8 <max7219_SendData+0x54>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	2101      	movs	r1, #1
 80020b0:	0028      	movs	r0, r5
 80020b2:	f7fe fce5 	bl	8000a80 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 80020b6:	2701      	movs	r7, #1
 80020b8:	427f      	negs	r7, r7
 80020ba:	4c0c      	ldr	r4, [pc, #48]	; (80020ec <max7219_SendData+0x58>)
 80020bc:	003b      	movs	r3, r7
 80020be:	2201      	movs	r2, #1
 80020c0:	4641      	mov	r1, r8
 80020c2:	0020      	movs	r0, r4
 80020c4:	f7ff fac4 	bl	8001650 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 80020c8:	003b      	movs	r3, r7
 80020ca:	2201      	movs	r2, #1
 80020cc:	0031      	movs	r1, r6
 80020ce:	0020      	movs	r0, r4
 80020d0:	f7ff fabe 	bl	8001650 <HAL_SPI_Transmit>
	CS_RESET();
 80020d4:	2201      	movs	r2, #1
 80020d6:	2101      	movs	r1, #1
 80020d8:	0028      	movs	r0, r5
 80020da:	f7fe fcd1 	bl	8000a80 <HAL_GPIO_WritePin>
}
 80020de:	b002      	add	sp, #8
 80020e0:	bc80      	pop	{r7}
 80020e2:	46b8      	mov	r8, r7
 80020e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	50000400 	.word	0x50000400
 80020ec:	2000002c 	.word	0x2000002c

080020f0 <max7219_SetIntensivity>:
{
 80020f0:	b510      	push	{r4, lr}
 80020f2:	0001      	movs	r1, r0
	if (intensivity > 0x0F)
 80020f4:	280f      	cmp	r0, #15
 80020f6:	d900      	bls.n	80020fa <max7219_SetIntensivity+0xa>
}
 80020f8:	bd10      	pop	{r4, pc}
	max7219_SendData(REG_INTENSITY, intensivity);
 80020fa:	200a      	movs	r0, #10
 80020fc:	f7ff ffca 	bl	8002094 <max7219_SendData>
 8002100:	e7fa      	b.n	80020f8 <max7219_SetIntensivity+0x8>
	...

08002104 <max7219_Clean>:
{
 8002104:	b570      	push	{r4, r5, r6, lr}
	if(decodeMode == 0xFF)
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <max7219_Clean+0x28>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2bff      	cmp	r3, #255	; 0xff
 800210c:	d002      	beq.n	8002114 <max7219_Clean+0x10>
	uint8_t clear = 0x00;
 800210e:	2500      	movs	r5, #0
	for (int i = 0; i < 8; ++i)
 8002110:	2400      	movs	r4, #0
 8002112:	e007      	b.n	8002124 <max7219_Clean+0x20>
		clear = BLANK;
 8002114:	250f      	movs	r5, #15
 8002116:	e7fb      	b.n	8002110 <max7219_Clean+0xc>
		max7219_SendData(i + 1, clear);
 8002118:	1c60      	adds	r0, r4, #1
 800211a:	b2c0      	uxtb	r0, r0
 800211c:	0029      	movs	r1, r5
 800211e:	f7ff ffb9 	bl	8002094 <max7219_SendData>
	for (int i = 0; i < 8; ++i)
 8002122:	3401      	adds	r4, #1
 8002124:	2c07      	cmp	r4, #7
 8002126:	ddf7      	ble.n	8002118 <max7219_Clean+0x14>
}
 8002128:	bd70      	pop	{r4, r5, r6, pc}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	20000184 	.word	0x20000184

08002130 <max7219_Turn_On>:

void max7219_Turn_On(void)
{
 8002130:	b510      	push	{r4, lr}
	max7219_SendData(REG_SHUTDOWN, 0x01);
 8002132:	2101      	movs	r1, #1
 8002134:	200c      	movs	r0, #12
 8002136:	f7ff ffad 	bl	8002094 <max7219_SendData>
}
 800213a:	bd10      	pop	{r4, pc}

0800213c <max7219_Init>:
{
 800213c:	b510      	push	{r4, lr}
 800213e:	0004      	movs	r4, r0
	max7219_Turn_On();
 8002140:	f7ff fff6 	bl	8002130 <max7219_Turn_On>
	max7219_SendData(REG_SCAN_LIMIT, NUMBER_OF_DIGITS - 1);
 8002144:	2107      	movs	r1, #7
 8002146:	200b      	movs	r0, #11
 8002148:	f7ff ffa4 	bl	8002094 <max7219_SendData>
	max7219_SetIntensivity(intensivity);
 800214c:	0020      	movs	r0, r4
 800214e:	f7ff ffcf 	bl	80020f0 <max7219_SetIntensivity>
	max7219_Clean();
 8002152:	f7ff ffd7 	bl	8002104 <max7219_Clean>
}
 8002156:	bd10      	pop	{r4, pc}

08002158 <max7219_Decode_On>:
{
	max7219_SendData(REG_SHUTDOWN, 0x00);
}

void max7219_Decode_On(void)
{
 8002158:	b510      	push	{r4, lr}
	decodeMode = 0xFF;
 800215a:	4b04      	ldr	r3, [pc, #16]	; (800216c <max7219_Decode_On+0x14>)
 800215c:	22ff      	movs	r2, #255	; 0xff
 800215e:	701a      	strb	r2, [r3, #0]
	max7219_SendData(REG_DECODE_MODE, decodeMode);
 8002160:	21ff      	movs	r1, #255	; 0xff
 8002162:	2009      	movs	r0, #9
 8002164:	f7ff ff96 	bl	8002094 <max7219_SendData>
}
 8002168:	bd10      	pop	{r4, pc}
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	20000184 	.word	0x20000184

08002170 <memset>:
 8002170:	0003      	movs	r3, r0
 8002172:	1882      	adds	r2, r0, r2
 8002174:	4293      	cmp	r3, r2
 8002176:	d100      	bne.n	800217a <memset+0xa>
 8002178:	4770      	bx	lr
 800217a:	7019      	strb	r1, [r3, #0]
 800217c:	3301      	adds	r3, #1
 800217e:	e7f9      	b.n	8002174 <memset+0x4>

08002180 <__libc_init_array>:
 8002180:	b570      	push	{r4, r5, r6, lr}
 8002182:	2600      	movs	r6, #0
 8002184:	4c0c      	ldr	r4, [pc, #48]	; (80021b8 <__libc_init_array+0x38>)
 8002186:	4d0d      	ldr	r5, [pc, #52]	; (80021bc <__libc_init_array+0x3c>)
 8002188:	1b64      	subs	r4, r4, r5
 800218a:	10a4      	asrs	r4, r4, #2
 800218c:	42a6      	cmp	r6, r4
 800218e:	d109      	bne.n	80021a4 <__libc_init_array+0x24>
 8002190:	2600      	movs	r6, #0
 8002192:	f000 f819 	bl	80021c8 <_init>
 8002196:	4c0a      	ldr	r4, [pc, #40]	; (80021c0 <__libc_init_array+0x40>)
 8002198:	4d0a      	ldr	r5, [pc, #40]	; (80021c4 <__libc_init_array+0x44>)
 800219a:	1b64      	subs	r4, r4, r5
 800219c:	10a4      	asrs	r4, r4, #2
 800219e:	42a6      	cmp	r6, r4
 80021a0:	d105      	bne.n	80021ae <__libc_init_array+0x2e>
 80021a2:	bd70      	pop	{r4, r5, r6, pc}
 80021a4:	00b3      	lsls	r3, r6, #2
 80021a6:	58eb      	ldr	r3, [r5, r3]
 80021a8:	4798      	blx	r3
 80021aa:	3601      	adds	r6, #1
 80021ac:	e7ee      	b.n	800218c <__libc_init_array+0xc>
 80021ae:	00b3      	lsls	r3, r6, #2
 80021b0:	58eb      	ldr	r3, [r5, r3]
 80021b2:	4798      	blx	r3
 80021b4:	3601      	adds	r6, #1
 80021b6:	e7f2      	b.n	800219e <__libc_init_array+0x1e>
 80021b8:	08002240 	.word	0x08002240
 80021bc:	08002240 	.word	0x08002240
 80021c0:	08002244 	.word	0x08002244
 80021c4:	08002240 	.word	0x08002240

080021c8 <_init>:
 80021c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ce:	bc08      	pop	{r3}
 80021d0:	469e      	mov	lr, r3
 80021d2:	4770      	bx	lr

080021d4 <_fini>:
 80021d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021da:	bc08      	pop	{r3}
 80021dc:	469e      	mov	lr, r3
 80021de:	4770      	bx	lr
