
STM32G0_encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002214  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080022d0  080022d0  000122d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002340  08002340  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002340  08002340  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002340  08002340  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002340  08002340  00012340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002344  08002344  00012344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000014  0800235c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  0800235c  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000125fa  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026eb  00000000  00000000  00032679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000087b4  00000000  00000000  00034d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e40  00000000  00000000  0003d518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b85  00000000  00000000  0003e358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001dbf5  00000000  00000000  0003eedd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014ccf  00000000  00000000  0005cad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c1821  00000000  00000000  000717a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000024e0  00000000  00000000  00132fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  001354a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000014 	.word	0x20000014
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080022b8 	.word	0x080022b8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000018 	.word	0x20000018
 8000100:	080022b8 	.word	0x080022b8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f2:	46c6      	mov	lr, r8
 80003f4:	b500      	push	{lr}
 80003f6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f8:	2214      	movs	r2, #20
 80003fa:	2100      	movs	r1, #0
 80003fc:	a803      	add	r0, sp, #12
 80003fe:	f001 ff2f 	bl	8002260 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000402:	4b28      	ldr	r3, [pc, #160]	; (80004a4 <MX_GPIO_Init+0xb4>)
 8000404:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000406:	2204      	movs	r2, #4
 8000408:	4311      	orrs	r1, r2
 800040a:	6359      	str	r1, [r3, #52]	; 0x34
 800040c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800040e:	400a      	ands	r2, r1
 8000410:	9200      	str	r2, [sp, #0]
 8000412:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000416:	2401      	movs	r4, #1
 8000418:	4322      	orrs	r2, r4
 800041a:	635a      	str	r2, [r3, #52]	; 0x34
 800041c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800041e:	4022      	ands	r2, r4
 8000420:	9201      	str	r2, [sp, #4]
 8000422:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000424:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000426:	2202      	movs	r2, #2
 8000428:	4311      	orrs	r1, r2
 800042a:	6359      	str	r1, [r3, #52]	; 0x34
 800042c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800042e:	401a      	ands	r2, r3
 8000430:	9202      	str	r2, [sp, #8]
 8000432:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_MAX7219_Pin|DB_OUT_Pin, GPIO_PIN_RESET);
 8000434:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <MX_GPIO_Init+0xb8>)
 8000436:	4698      	mov	r8, r3
 8000438:	2200      	movs	r2, #0
 800043a:	2141      	movs	r1, #65	; 0x41
 800043c:	0018      	movs	r0, r3
 800043e:	f000 fb73 	bl	8000b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VCC_OUT_GPIO_Port, VCC_OUT_Pin, GPIO_PIN_SET);
 8000442:	2780      	movs	r7, #128	; 0x80
 8000444:	00ff      	lsls	r7, r7, #3
 8000446:	4e19      	ldr	r6, [pc, #100]	; (80004ac <MX_GPIO_Init+0xbc>)
 8000448:	2201      	movs	r2, #1
 800044a:	0039      	movs	r1, r7
 800044c:	0030      	movs	r0, r6
 800044e:	f000 fb6b 	bl	8000b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000452:	2308      	movs	r3, #8
 8000454:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000456:	2384      	movs	r3, #132	; 0x84
 8000458:	039b      	lsls	r3, r3, #14
 800045a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800045c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800045e:	a903      	add	r1, sp, #12
 8000460:	0030      	movs	r0, r6
 8000462:	f000 faa1 	bl	80009a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_MAX7219_Pin DB_OUT_Pin */
  GPIO_InitStruct.Pin = CS_MAX7219_Pin|DB_OUT_Pin;
 8000466:	2341      	movs	r3, #65	; 0x41
 8000468:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046a:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046c:	2500      	movs	r5, #0
 800046e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000470:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000472:	a903      	add	r1, sp, #12
 8000474:	4640      	mov	r0, r8
 8000476:	f000 fa97 	bl	80009a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCC_OUT_Pin */
  GPIO_InitStruct.Pin = VCC_OUT_Pin;
 800047a:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047c:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000480:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(VCC_OUT_GPIO_Port, &GPIO_InitStruct);
 8000482:	a903      	add	r1, sp, #12
 8000484:	0030      	movs	r0, r6
 8000486:	f000 fa8f 	bl	80009a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	2100      	movs	r1, #0
 800048e:	2006      	movs	r0, #6
 8000490:	f000 fa4e 	bl	8000930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000494:	2006      	movs	r0, #6
 8000496:	f000 fa7b 	bl	8000990 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800049a:	b008      	add	sp, #32
 800049c:	bc80      	pop	{r7}
 800049e:	46b8      	mov	r8, r7
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	40021000 	.word	0x40021000
 80004a8:	50000400 	.word	0x50000400
 80004ac:	50000800 	.word	0x50000800

080004b0 <MX_TIM7_Init>:
{
 80004b0:	b530      	push	{r4, r5, lr}
 80004b2:	b087      	sub	sp, #28
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80004b4:	ad01      	add	r5, sp, #4
 80004b6:	2214      	movs	r2, #20
 80004b8:	2100      	movs	r1, #0
 80004ba:	0028      	movs	r0, r5
 80004bc:	f001 fed0 	bl	8002260 <memset>
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 80004c0:	4a15      	ldr	r2, [pc, #84]	; (8000518 <MX_TIM7_Init+0x68>)
 80004c2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80004c4:	2320      	movs	r3, #32
 80004c6:	4319      	orrs	r1, r3
 80004c8:	63d1      	str	r1, [r2, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80004ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80004cc:	4013      	ands	r3, r2
 80004ce:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80004d0:	9b00      	ldr	r3, [sp, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004d2:	4b12      	ldr	r3, [pc, #72]	; (800051c <MX_TIM7_Init+0x6c>)
 80004d4:	21c4      	movs	r1, #196	; 0xc4
 80004d6:	0089      	lsls	r1, r1, #2
 80004d8:	585a      	ldr	r2, [r3, r1]
 80004da:	4811      	ldr	r0, [pc, #68]	; (8000520 <MX_TIM7_Init+0x70>)
 80004dc:	4002      	ands	r2, r0
 80004de:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004e0:	2280      	movs	r2, #128	; 0x80
 80004e2:	02d2      	lsls	r2, r2, #11
 80004e4:	601a      	str	r2, [r3, #0]
  TIM_InitStruct.Prescaler = 63999;
 80004e6:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <MX_TIM7_Init+0x74>)
 80004e8:	802b      	strh	r3, [r5, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80004ea:	2300      	movs	r3, #0
 80004ec:	606b      	str	r3, [r5, #4]
  TIM_InitStruct.Autoreload = 150;
 80004ee:	3396      	adds	r3, #150	; 0x96
 80004f0:	60ab      	str	r3, [r5, #8]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 80004f2:	4c0d      	ldr	r4, [pc, #52]	; (8000528 <MX_TIM7_Init+0x78>)
 80004f4:	0029      	movs	r1, r5
 80004f6:	0020      	movs	r0, r4
 80004f8:	f001 fc72 	bl	8001de0 <LL_TIM_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80004fc:	6823      	ldr	r3, [r4, #0]
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	4313      	orrs	r3, r2
 8000502:	6023      	str	r3, [r4, #0]
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000504:	6863      	ldr	r3, [r4, #4]
 8000506:	2170      	movs	r1, #112	; 0x70
 8000508:	438b      	bics	r3, r1
 800050a:	6063      	str	r3, [r4, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800050c:	68a3      	ldr	r3, [r4, #8]
 800050e:	4393      	bics	r3, r2
 8000510:	60a3      	str	r3, [r4, #8]
}
 8000512:	b007      	add	sp, #28
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	40021000 	.word	0x40021000
 800051c:	e000e100 	.word	0xe000e100
 8000520:	ff00ffff 	.word	0xff00ffff
 8000524:	fffff9ff 	.word	0xfffff9ff
 8000528:	40001400 	.word	0x40001400

0800052c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800052c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800052e:	6802      	ldr	r2, [r0, #0]
 8000530:	4b03      	ldr	r3, [pc, #12]	; (8000540 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000532:	429a      	cmp	r2, r3
 8000534:	d000      	beq.n	8000538 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000536:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8000538:	f000 f9dc 	bl	80008f4 <HAL_IncTick>
}
 800053c:	e7fb      	b.n	8000536 <HAL_TIM_PeriodElapsedCallback+0xa>
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	40001000 	.word	0x40001000

08000544 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000544:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000546:	e7fe      	b.n	8000546 <Error_Handler+0x2>

08000548 <MX_TIM2_Init>:
{
 8000548:	b500      	push	{lr}
 800054a:	b08d      	sub	sp, #52	; 0x34
  TIM_Encoder_InitTypeDef sConfig = {0};
 800054c:	2224      	movs	r2, #36	; 0x24
 800054e:	2100      	movs	r1, #0
 8000550:	a803      	add	r0, sp, #12
 8000552:	f001 fe85 	bl	8002260 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000556:	220c      	movs	r2, #12
 8000558:	2100      	movs	r1, #0
 800055a:	4668      	mov	r0, sp
 800055c:	f001 fe80 	bl	8002260 <memset>
  htim2.Instance = TIM2;
 8000560:	4813      	ldr	r0, [pc, #76]	; (80005b0 <MX_TIM2_Init+0x68>)
 8000562:	2380      	movs	r3, #128	; 0x80
 8000564:	05db      	lsls	r3, r3, #23
 8000566:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800056c:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 800056e:	4a11      	ldr	r2, [pc, #68]	; (80005b4 <MX_TIM2_Init+0x6c>)
 8000570:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000572:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000574:	3380      	adds	r3, #128	; 0x80
 8000576:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000578:	3b7d      	subs	r3, #125	; 0x7d
 800057a:	9303      	str	r3, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800057c:	2201      	movs	r2, #1
 800057e:	9205      	str	r2, [sp, #20]
  sConfig.IC1Filter = 10;
 8000580:	3307      	adds	r3, #7
 8000582:	9307      	str	r3, [sp, #28]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000584:	9209      	str	r2, [sp, #36]	; 0x24
  sConfig.IC2Filter = 10;
 8000586:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000588:	a903      	add	r1, sp, #12
 800058a:	f001 fb0f 	bl	8001bac <HAL_TIM_Encoder_Init>
 800058e:	2800      	cmp	r0, #0
 8000590:	d10a      	bne.n	80005a8 <MX_TIM2_Init+0x60>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000592:	2300      	movs	r3, #0
 8000594:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000596:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000598:	4805      	ldr	r0, [pc, #20]	; (80005b0 <MX_TIM2_Init+0x68>)
 800059a:	4669      	mov	r1, sp
 800059c:	f001 fbd6 	bl	8001d4c <HAL_TIMEx_MasterConfigSynchronization>
 80005a0:	2800      	cmp	r0, #0
 80005a2:	d103      	bne.n	80005ac <MX_TIM2_Init+0x64>
}
 80005a4:	b00d      	add	sp, #52	; 0x34
 80005a6:	bd00      	pop	{pc}
    Error_Handler();
 80005a8:	f7ff ffcc 	bl	8000544 <Error_Handler>
    Error_Handler();
 80005ac:	f7ff ffca 	bl	8000544 <Error_Handler>
 80005b0:	20000094 	.word	0x20000094
 80005b4:	0000ffff 	.word	0x0000ffff

080005b8 <MX_SPI1_Init>:
{
 80005b8:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 80005ba:	4811      	ldr	r0, [pc, #68]	; (8000600 <MX_SPI1_Init+0x48>)
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_SPI1_Init+0x4c>)
 80005be:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005c0:	2382      	movs	r3, #130	; 0x82
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005c6:	2300      	movs	r3, #0
 80005c8:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005ca:	22e0      	movs	r2, #224	; 0xe0
 80005cc:	00d2      	lsls	r2, r2, #3
 80005ce:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005d0:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005d2:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005d4:	2280      	movs	r2, #128	; 0x80
 80005d6:	0092      	lsls	r2, r2, #2
 80005d8:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80005da:	3af1      	subs	r2, #241	; 0xf1
 80005dc:	3aff      	subs	r2, #255	; 0xff
 80005de:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005e0:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005e2:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005e4:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80005e6:	3a09      	subs	r2, #9
 80005e8:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005ea:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005ec:	3308      	adds	r3, #8
 80005ee:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005f0:	f000 fff8 	bl	80015e4 <HAL_SPI_Init>
 80005f4:	2800      	cmp	r0, #0
 80005f6:	d100      	bne.n	80005fa <MX_SPI1_Init+0x42>
}
 80005f8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80005fa:	f7ff ffa3 	bl	8000544 <Error_Handler>
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	20000030 	.word	0x20000030
 8000604:	40013000 	.word	0x40013000

08000608 <SystemClock_Config>:
{
 8000608:	b500      	push	{lr}
 800060a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060c:	223c      	movs	r2, #60	; 0x3c
 800060e:	2100      	movs	r1, #0
 8000610:	a805      	add	r0, sp, #20
 8000612:	f001 fe25 	bl	8002260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000616:	2210      	movs	r2, #16
 8000618:	2100      	movs	r1, #0
 800061a:	a801      	add	r0, sp, #4
 800061c:	f001 fe20 	bl	8002260 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	2080      	movs	r0, #128	; 0x80
 8000622:	0080      	lsls	r0, r0, #2
 8000624:	f000 faa0 	bl	8000b68 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000628:	2302      	movs	r3, #2
 800062a:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062c:	2280      	movs	r2, #128	; 0x80
 800062e:	0052      	lsls	r2, r2, #1
 8000630:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000632:	2200      	movs	r2, #0
 8000634:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000636:	2140      	movs	r1, #64	; 0x40
 8000638:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800063e:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000640:	3306      	adds	r3, #6
 8000642:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	029b      	lsls	r3, r3, #10
 8000648:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800064a:	2380      	movs	r3, #128	; 0x80
 800064c:	049b      	lsls	r3, r3, #18
 800064e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000650:	2380      	movs	r3, #128	; 0x80
 8000652:	059b      	lsls	r3, r3, #22
 8000654:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000656:	a805      	add	r0, sp, #20
 8000658:	f000 fab0 	bl	8000bbc <HAL_RCC_OscConfig>
 800065c:	2800      	cmp	r0, #0
 800065e:	d10e      	bne.n	800067e <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	2307      	movs	r3, #7
 8000662:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000664:	3b05      	subs	r3, #5
 8000666:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066c:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800066e:	2102      	movs	r1, #2
 8000670:	a801      	add	r0, sp, #4
 8000672:	f000 fd8b 	bl	800118c <HAL_RCC_ClockConfig>
 8000676:	2800      	cmp	r0, #0
 8000678:	d103      	bne.n	8000682 <SystemClock_Config+0x7a>
}
 800067a:	b015      	add	sp, #84	; 0x54
 800067c:	bd00      	pop	{pc}
    Error_Handler();
 800067e:	f7ff ff61 	bl	8000544 <Error_Handler>
    Error_Handler();
 8000682:	f7ff ff5f 	bl	8000544 <Error_Handler>
	...

08000688 <main>:
{
 8000688:	b510      	push	{r4, lr}
  HAL_Init();
 800068a:	f000 f91f 	bl	80008cc <HAL_Init>
  SystemClock_Config();
 800068e:	f7ff ffbb 	bl	8000608 <SystemClock_Config>
  MX_GPIO_Init();
 8000692:	f7ff fead 	bl	80003f0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000696:	f7ff ff57 	bl	8000548 <MX_TIM2_Init>
  MX_TIM7_Init();
 800069a:	f7ff ff09 	bl	80004b0 <MX_TIM7_Init>
  MX_SPI1_Init();
 800069e:	f7ff ff8b 	bl	80005b8 <MX_SPI1_Init>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80006a2:	4804      	ldr	r0, [pc, #16]	; (80006b4 <main+0x2c>)
 80006a4:	213c      	movs	r1, #60	; 0x3c
 80006a6:	f001 faec 	bl	8001c82 <HAL_TIM_Encoder_Start>
  app_encoder_init();
 80006aa:	f001 fbf1 	bl	8001e90 <app_encoder_init>
	  app_encoder_loop();
 80006ae:	f001 fc01 	bl	8001eb4 <app_encoder_loop>
  while (1)
 80006b2:	e7fc      	b.n	80006ae <main+0x26>
 80006b4:	20000094 	.word	0x20000094

080006b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b8:	b500      	push	{lr}
 80006ba:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006bc:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <HAL_MspInit+0x34>)
 80006be:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80006c0:	2201      	movs	r2, #1
 80006c2:	4311      	orrs	r1, r2
 80006c4:	6419      	str	r1, [r3, #64]	; 0x40
 80006c6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80006c8:	400a      	ands	r2, r1
 80006ca:	9200      	str	r2, [sp, #0]
 80006cc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006d0:	2180      	movs	r1, #128	; 0x80
 80006d2:	0549      	lsls	r1, r1, #21
 80006d4:	430a      	orrs	r2, r1
 80006d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80006d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006da:	400b      	ands	r3, r1
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80006e0:	20c0      	movs	r0, #192	; 0xc0
 80006e2:	00c0      	lsls	r0, r0, #3
 80006e4:	f000 f918 	bl	8000918 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e8:	b003      	add	sp, #12
 80006ea:	bd00      	pop	{pc}
 80006ec:	40021000 	.word	0x40021000

080006f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006f0:	b510      	push	{r4, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	2214      	movs	r2, #20
 80006f8:	2100      	movs	r1, #0
 80006fa:	a803      	add	r0, sp, #12
 80006fc:	f001 fdb0 	bl	8002260 <memset>
  if(hspi->Instance==SPI1)
 8000700:	6822      	ldr	r2, [r4, #0]
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <HAL_SPI_MspInit+0x54>)
 8000704:	429a      	cmp	r2, r3
 8000706:	d001      	beq.n	800070c <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000708:	b008      	add	sp, #32
 800070a:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800070c:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <HAL_SPI_MspInit+0x58>)
 800070e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000710:	2180      	movs	r1, #128	; 0x80
 8000712:	0149      	lsls	r1, r1, #5
 8000714:	430a      	orrs	r2, r1
 8000716:	641a      	str	r2, [r3, #64]	; 0x40
 8000718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800071a:	400a      	ands	r2, r1
 800071c:	9201      	str	r2, [sp, #4]
 800071e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000720:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000722:	2201      	movs	r2, #1
 8000724:	4311      	orrs	r1, r2
 8000726:	6359      	str	r1, [r3, #52]	; 0x34
 8000728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800072a:	401a      	ands	r2, r3
 800072c:	9202      	str	r2, [sp, #8]
 800072e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000730:	23a0      	movs	r3, #160	; 0xa0
 8000732:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000734:	3b9e      	subs	r3, #158	; 0x9e
 8000736:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000738:	20a0      	movs	r0, #160	; 0xa0
 800073a:	a903      	add	r1, sp, #12
 800073c:	05c0      	lsls	r0, r0, #23
 800073e:	f000 f933 	bl	80009a8 <HAL_GPIO_Init>
}
 8000742:	e7e1      	b.n	8000708 <HAL_SPI_MspInit+0x18>
 8000744:	40013000 	.word	0x40013000
 8000748:	40021000 	.word	0x40021000

0800074c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800074c:	b510      	push	{r4, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	2214      	movs	r2, #20
 8000754:	2100      	movs	r1, #0
 8000756:	a803      	add	r0, sp, #12
 8000758:	f001 fd82 	bl	8002260 <memset>
  if(htim_encoder->Instance==TIM2)
 800075c:	6822      	ldr	r2, [r4, #0]
 800075e:	2380      	movs	r3, #128	; 0x80
 8000760:	05db      	lsls	r3, r3, #23
 8000762:	429a      	cmp	r2, r3
 8000764:	d001      	beq.n	800076a <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000766:	b008      	add	sp, #32
 8000768:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 800076a:	4a0d      	ldr	r2, [pc, #52]	; (80007a0 <HAL_TIM_Encoder_MspInit+0x54>)
 800076c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800076e:	2301      	movs	r3, #1
 8000770:	4319      	orrs	r1, r3
 8000772:	63d1      	str	r1, [r2, #60]	; 0x3c
 8000774:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000776:	4019      	ands	r1, r3
 8000778:	9101      	str	r1, [sp, #4]
 800077a:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800077e:	4319      	orrs	r1, r3
 8000780:	6351      	str	r1, [r2, #52]	; 0x34
 8000782:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000784:	4013      	ands	r3, r2
 8000786:	9302      	str	r3, [sp, #8]
 8000788:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800078a:	2303      	movs	r3, #3
 800078c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078e:	3b01      	subs	r3, #1
 8000790:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000792:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000794:	20a0      	movs	r0, #160	; 0xa0
 8000796:	a903      	add	r1, sp, #12
 8000798:	05c0      	lsls	r0, r0, #23
 800079a:	f000 f905 	bl	80009a8 <HAL_GPIO_Init>
}
 800079e:	e7e2      	b.n	8000766 <HAL_TIM_Encoder_MspInit+0x1a>
 80007a0:	40021000 	.word	0x40021000

080007a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a4:	b530      	push	{r4, r5, lr}
 80007a6:	b087      	sub	sp, #28
 80007a8:	0005      	movs	r5, r0
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80007aa:	4a20      	ldr	r2, [pc, #128]	; (800082c <HAL_InitTick+0x88>)
 80007ac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80007ae:	2310      	movs	r3, #16
 80007b0:	4319      	orrs	r1, r3
 80007b2:	63d1      	str	r1, [r2, #60]	; 0x3c
 80007b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80007b6:	4013      	ands	r3, r2
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	9b00      	ldr	r3, [sp, #0]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007bc:	a901      	add	r1, sp, #4
 80007be:	a802      	add	r0, sp, #8
 80007c0:	f000 fdc4 	bl	800134c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007c4:	9b05      	ldr	r3, [sp, #20]
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d117      	bne.n	80007fa <HAL_InitTick+0x56>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007ca:	f000 fdab 	bl	8001324 <HAL_RCC_GetPCLK1Freq>
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007ce:	4918      	ldr	r1, [pc, #96]	; (8000830 <HAL_InitTick+0x8c>)
 80007d0:	f7ff fc98 	bl	8000104 <__udivsi3>
 80007d4:	1e42      	subs	r2, r0, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80007d6:	4b17      	ldr	r3, [pc, #92]	; (8000834 <HAL_InitTick+0x90>)
 80007d8:	4917      	ldr	r1, [pc, #92]	; (8000838 <HAL_InitTick+0x94>)
 80007da:	0018      	movs	r0, r3
 80007dc:	6019      	str	r1, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80007de:	4b17      	ldr	r3, [pc, #92]	; (800083c <HAL_InitTick+0x98>)
 80007e0:	60c3      	str	r3, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80007e2:	6042      	str	r2, [r0, #4]
  htim6.Init.ClockDivision = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e8:	6083      	str	r3, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ea:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80007ec:	f001 f9ae 	bl	8001b4c <HAL_TIM_Base_Init>
 80007f0:	1e04      	subs	r4, r0, #0
  if (status == HAL_OK)
 80007f2:	d006      	beq.n	8000802 <HAL_InitTick+0x5e>
    }
  }

 /* Return function status */
  return status;
}
 80007f4:	0020      	movs	r0, r4
 80007f6:	b007      	add	sp, #28
 80007f8:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007fa:	f000 fd93 	bl	8001324 <HAL_RCC_GetPCLK1Freq>
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	e7e5      	b.n	80007ce <HAL_InitTick+0x2a>
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000802:	480c      	ldr	r0, [pc, #48]	; (8000834 <HAL_InitTick+0x90>)
 8000804:	f001 f84c 	bl	80018a0 <HAL_TIM_Base_Start_IT>
 8000808:	1e04      	subs	r4, r0, #0
    if (status == HAL_OK)
 800080a:	d1f3      	bne.n	80007f4 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 800080c:	2011      	movs	r0, #17
 800080e:	f000 f8bf 	bl	8000990 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000812:	2d03      	cmp	r5, #3
 8000814:	d901      	bls.n	800081a <HAL_InitTick+0x76>
        status = HAL_ERROR;
 8000816:	2401      	movs	r4, #1
 8000818:	e7ec      	b.n	80007f4 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, TickPriority, 0U);
 800081a:	2200      	movs	r2, #0
 800081c:	0029      	movs	r1, r5
 800081e:	2011      	movs	r0, #17
 8000820:	f000 f886 	bl	8000930 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <HAL_InitTick+0x9c>)
 8000826:	601d      	str	r5, [r3, #0]
 8000828:	e7e4      	b.n	80007f4 <HAL_InitTick+0x50>
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	40021000 	.word	0x40021000
 8000830:	000f4240 	.word	0x000f4240
 8000834:	200000e0 	.word	0x200000e0
 8000838:	40001000 	.word	0x40001000
 800083c:	000003e7 	.word	0x000003e7
 8000840:	20000008 	.word	0x20000008

08000844 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000844:	e7fe      	b.n	8000844 <NMI_Handler>

08000846 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <HardFault_Handler>

08000848 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000848:	4770      	bx	lr

0800084a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800084a:	4770      	bx	lr

0800084c <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800084c:	4770      	bx	lr

0800084e <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800084e:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */
  button_isr(); //button (press) interrupt routine
 8000850:	f001 fbb6 	bl	8001fc0 <button_isr>
  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000854:	2008      	movs	r0, #8
 8000856:	f000 f96f 	bl	8000b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800085a:	bd10      	pop	{r4, pc}

0800085c <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 800085c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800085e:	4802      	ldr	r0, [pc, #8]	; (8000868 <TIM6_DAC_LPTIM1_IRQHandler+0xc>)
 8000860:	f001 f864 	bl	800192c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8000864:	bd10      	pop	{r4, pc}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	200000e0 	.word	0x200000e0

0800086c <TIM7_LPTIM2_IRQHandler>:

/**
  * @brief This function handles TIM7 and LPTIM2 global Interrupt.
  */
void TIM7_LPTIM2_IRQHandler(void)
{
 800086c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 0 */
	button_timer_isr();
 800086e:	f001 fbcb 	bl	8002008 <button_timer_isr>
  /* USER CODE END TIM7_LPTIM2_IRQn 0 */

  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 1 */

  /* USER CODE END TIM7_LPTIM2_IRQn 1 */
}
 8000872:	bd10      	pop	{r4, pc}

08000874 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000874:	4770      	bx	lr
	...

08000878 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000878:	480d      	ldr	r0, [pc, #52]	; (80008b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800087a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800087c:	f7ff fffa 	bl	8000874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000880:	480c      	ldr	r0, [pc, #48]	; (80008b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000882:	490d      	ldr	r1, [pc, #52]	; (80008b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000884:	4a0d      	ldr	r2, [pc, #52]	; (80008bc <LoopForever+0xe>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000888:	e002      	b.n	8000890 <LoopCopyDataInit>

0800088a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800088c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088e:	3304      	adds	r3, #4

08000890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000894:	d3f9      	bcc.n	800088a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000898:	4c0a      	ldr	r4, [pc, #40]	; (80008c4 <LoopForever+0x16>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800089c:	e001      	b.n	80008a2 <LoopFillZerobss>

0800089e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a0:	3204      	adds	r2, #4

080008a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a4:	d3fb      	bcc.n	800089e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008a6:	f001 fce3 	bl	8002270 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80008aa:	f7ff feed 	bl	8000688 <main>

080008ae <LoopForever>:

LoopForever:
  b LoopForever
 80008ae:	e7fe      	b.n	80008ae <LoopForever>
  ldr   r0, =_estack
 80008b0:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80008b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80008bc:	08002348 	.word	0x08002348
  ldr r2, =_sbss
 80008c0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80008c4:	20000158 	.word	0x20000158

080008c8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c8:	e7fe      	b.n	80008c8 <ADC1_COMP_IRQHandler>
	...

080008cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008cc:	b510      	push	{r4, lr}
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ce:	4a08      	ldr	r2, [pc, #32]	; (80008f0 <HAL_Init+0x24>)
 80008d0:	6811      	ldr	r1, [r2, #0]
 80008d2:	2380      	movs	r3, #128	; 0x80
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	430b      	orrs	r3, r1
 80008d8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008da:	2003      	movs	r0, #3
 80008dc:	f7ff ff62 	bl	80007a4 <HAL_InitTick>
 80008e0:	1e04      	subs	r4, r0, #0
 80008e2:	d002      	beq.n	80008ea <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80008e4:	2401      	movs	r4, #1
  HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 80008e6:	0020      	movs	r0, r4
 80008e8:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 80008ea:	f7ff fee5 	bl	80006b8 <HAL_MspInit>
 80008ee:	e7fa      	b.n	80008e6 <HAL_Init+0x1a>
 80008f0:	40022000 	.word	0x40022000

080008f4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80008f4:	4b03      	ldr	r3, [pc, #12]	; (8000904 <HAL_IncTick+0x10>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4a03      	ldr	r2, [pc, #12]	; (8000908 <HAL_IncTick+0x14>)
 80008fa:	6811      	ldr	r1, [r2, #0]
 80008fc:	185b      	adds	r3, r3, r1
 80008fe:	6013      	str	r3, [r2, #0]
}
 8000900:	4770      	bx	lr
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	20000004 	.word	0x20000004
 8000908:	2000012c 	.word	0x2000012c

0800090c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800090c:	4b01      	ldr	r3, [pc, #4]	; (8000914 <HAL_GetTick+0x8>)
 800090e:	6818      	ldr	r0, [r3, #0]
}
 8000910:	4770      	bx	lr
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	2000012c 	.word	0x2000012c

08000918 <HAL_SYSCFG_StrobeDBattpinsConfig>:
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000918:	4a03      	ldr	r2, [pc, #12]	; (8000928 <HAL_SYSCFG_StrobeDBattpinsConfig+0x10>)
 800091a:	6813      	ldr	r3, [r2, #0]
 800091c:	4903      	ldr	r1, [pc, #12]	; (800092c <HAL_SYSCFG_StrobeDBattpinsConfig+0x14>)
 800091e:	400b      	ands	r3, r1
 8000920:	4303      	orrs	r3, r0
 8000922:	6013      	str	r3, [r2, #0]
}
 8000924:	4770      	bx	lr
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	40010000 	.word	0x40010000
 800092c:	fffff9ff 	.word	0xfffff9ff

08000930 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000930:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8000932:	2800      	cmp	r0, #0
 8000934:	db11      	blt.n	800095a <HAL_NVIC_SetPriority+0x2a>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000936:	0883      	lsrs	r3, r0, #2
 8000938:	4d13      	ldr	r5, [pc, #76]	; (8000988 <HAL_NVIC_SetPriority+0x58>)
 800093a:	33c0      	adds	r3, #192	; 0xc0
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	595c      	ldr	r4, [r3, r5]
 8000940:	2203      	movs	r2, #3
 8000942:	4010      	ands	r0, r2
 8000944:	00c0      	lsls	r0, r0, #3
 8000946:	32fc      	adds	r2, #252	; 0xfc
 8000948:	0016      	movs	r6, r2
 800094a:	4086      	lsls	r6, r0
 800094c:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800094e:	0189      	lsls	r1, r1, #6
 8000950:	400a      	ands	r2, r1
 8000952:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000954:	4322      	orrs	r2, r4
 8000956:	515a      	str	r2, [r3, r5]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8000958:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800095a:	230f      	movs	r3, #15
 800095c:	4003      	ands	r3, r0
 800095e:	3b08      	subs	r3, #8
 8000960:	089b      	lsrs	r3, r3, #2
 8000962:	3306      	adds	r3, #6
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	4a09      	ldr	r2, [pc, #36]	; (800098c <HAL_NVIC_SetPriority+0x5c>)
 8000968:	4694      	mov	ip, r2
 800096a:	4463      	add	r3, ip
 800096c:	685c      	ldr	r4, [r3, #4]
 800096e:	2203      	movs	r2, #3
 8000970:	4010      	ands	r0, r2
 8000972:	00c0      	lsls	r0, r0, #3
 8000974:	32fc      	adds	r2, #252	; 0xfc
 8000976:	0015      	movs	r5, r2
 8000978:	4085      	lsls	r5, r0
 800097a:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800097c:	0189      	lsls	r1, r1, #6
 800097e:	400a      	ands	r2, r1
 8000980:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000982:	4322      	orrs	r2, r4
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	e7e7      	b.n	8000958 <HAL_NVIC_SetPriority+0x28>
 8000988:	e000e100 	.word	0xe000e100
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000990:	2800      	cmp	r0, #0
 8000992:	db05      	blt.n	80009a0 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000994:	231f      	movs	r3, #31
 8000996:	4018      	ands	r0, r3
 8000998:	3b1e      	subs	r3, #30
 800099a:	4083      	lsls	r3, r0
 800099c:	4a01      	ldr	r2, [pc, #4]	; (80009a4 <HAL_NVIC_EnableIRQ+0x14>)
 800099e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80009a0:	4770      	bx	lr
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	e000e100 	.word	0xe000e100

080009a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00u;
 80009aa:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ac:	e059      	b.n	8000a62 <HAL_GPIO_Init+0xba>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009ae:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009b0:	005f      	lsls	r7, r3, #1
 80009b2:	2403      	movs	r4, #3
 80009b4:	40bc      	lsls	r4, r7
 80009b6:	43a6      	bics	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009b8:	68cc      	ldr	r4, [r1, #12]
 80009ba:	40bc      	lsls	r4, r7
 80009bc:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80009be:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009c0:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009c2:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009c4:	684e      	ldr	r6, [r1, #4]
 80009c6:	0936      	lsrs	r6, r6, #4
 80009c8:	2201      	movs	r2, #1
 80009ca:	4032      	ands	r2, r6
 80009cc:	409a      	lsls	r2, r3
 80009ce:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80009d0:	6042      	str	r2, [r0, #4]
 80009d2:	e056      	b.n	8000a82 <HAL_GPIO_Init+0xda>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009d4:	08de      	lsrs	r6, r3, #3
 80009d6:	3608      	adds	r6, #8
 80009d8:	00b6      	lsls	r6, r6, #2
 80009da:	5837      	ldr	r7, [r6, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009dc:	3205      	adds	r2, #5
 80009de:	401a      	ands	r2, r3
 80009e0:	0092      	lsls	r2, r2, #2
 80009e2:	240f      	movs	r4, #15
 80009e4:	4094      	lsls	r4, r2
 80009e6:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009e8:	690c      	ldr	r4, [r1, #16]
 80009ea:	4094      	lsls	r4, r2
 80009ec:	0022      	movs	r2, r4
 80009ee:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3u] = temp;
 80009f0:	5032      	str	r2, [r6, r0]
 80009f2:	e059      	b.n	8000aa8 <HAL_GPIO_Init+0x100>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80009f4:	2604      	movs	r6, #4
 80009f6:	e000      	b.n	80009fa <HAL_GPIO_Init+0x52>
 80009f8:	2600      	movs	r6, #0
 80009fa:	40a6      	lsls	r6, r4
 80009fc:	0034      	movs	r4, r6
 80009fe:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2u] = temp;
 8000a00:	4e44      	ldr	r6, [pc, #272]	; (8000b14 <HAL_GPIO_Init+0x16c>)
 8000a02:	3218      	adds	r2, #24
 8000a04:	0092      	lsls	r2, r2, #2
 8000a06:	5194      	str	r4, [r2, r6]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a08:	6837      	ldr	r7, [r6, #0]
        temp &= ~(iocurrent);
 8000a0a:	43ea      	mvns	r2, r5
 8000a0c:	003e      	movs	r6, r7
 8000a0e:	43ae      	bics	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a10:	684c      	ldr	r4, [r1, #4]
 8000a12:	02e4      	lsls	r4, r4, #11
 8000a14:	d501      	bpl.n	8000a1a <HAL_GPIO_Init+0x72>
        {
          temp |= iocurrent;
 8000a16:	003e      	movs	r6, r7
 8000a18:	432e      	orrs	r6, r5
        }
        EXTI->RTSR1 = temp;
 8000a1a:	4c3e      	ldr	r4, [pc, #248]	; (8000b14 <HAL_GPIO_Init+0x16c>)
 8000a1c:	6026      	str	r6, [r4, #0]

        temp = EXTI->FTSR1;
 8000a1e:	6867      	ldr	r7, [r4, #4]
        temp &= ~(iocurrent);
 8000a20:	003e      	movs	r6, r7
 8000a22:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a24:	684c      	ldr	r4, [r1, #4]
 8000a26:	02a4      	lsls	r4, r4, #10
 8000a28:	d501      	bpl.n	8000a2e <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 8000a2a:	003e      	movs	r6, r7
 8000a2c:	432e      	orrs	r6, r5
        }
        EXTI->FTSR1 = temp;
 8000a2e:	4c39      	ldr	r4, [pc, #228]	; (8000b14 <HAL_GPIO_Init+0x16c>)
 8000a30:	6066      	str	r6, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a32:	2684      	movs	r6, #132	; 0x84
 8000a34:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(iocurrent);
 8000a36:	003e      	movs	r6, r7
 8000a38:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a3a:	684c      	ldr	r4, [r1, #4]
 8000a3c:	03a4      	lsls	r4, r4, #14
 8000a3e:	d501      	bpl.n	8000a44 <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 8000a40:	003e      	movs	r6, r7
 8000a42:	432e      	orrs	r6, r5
        }
        EXTI->EMR1 = temp;
 8000a44:	4c33      	ldr	r4, [pc, #204]	; (8000b14 <HAL_GPIO_Init+0x16c>)
 8000a46:	2784      	movs	r7, #132	; 0x84
 8000a48:	51e6      	str	r6, [r4, r7]

        temp = EXTI->IMR1;
 8000a4a:	2680      	movs	r6, #128	; 0x80
 8000a4c:	59a6      	ldr	r6, [r4, r6]
        temp &= ~(iocurrent);
 8000a4e:	4032      	ands	r2, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a50:	684c      	ldr	r4, [r1, #4]
 8000a52:	03e4      	lsls	r4, r4, #15
 8000a54:	d501      	bpl.n	8000a5a <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 8000a56:	002a      	movs	r2, r5
 8000a58:	4332      	orrs	r2, r6
        }
        EXTI->IMR1 = temp;
 8000a5a:	4d2e      	ldr	r5, [pc, #184]	; (8000b14 <HAL_GPIO_Init+0x16c>)
 8000a5c:	2480      	movs	r4, #128	; 0x80
 8000a5e:	512a      	str	r2, [r5, r4]
      }
    }

    position++;
 8000a60:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a62:	680c      	ldr	r4, [r1, #0]
 8000a64:	0022      	movs	r2, r4
 8000a66:	40da      	lsrs	r2, r3
 8000a68:	d053      	beq.n	8000b12 <HAL_GPIO_Init+0x16a>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	409a      	lsls	r2, r3
 8000a6e:	0025      	movs	r5, r4
 8000a70:	4015      	ands	r5, r2
    if (iocurrent != 0x00u)
 8000a72:	4214      	tst	r4, r2
 8000a74:	d0f4      	beq.n	8000a60 <HAL_GPIO_Init+0xb8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a76:	684e      	ldr	r6, [r1, #4]
 8000a78:	2403      	movs	r4, #3
 8000a7a:	4034      	ands	r4, r6
 8000a7c:	3c01      	subs	r4, #1
 8000a7e:	2c01      	cmp	r4, #1
 8000a80:	d995      	bls.n	80009ae <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a82:	684c      	ldr	r4, [r1, #4]
 8000a84:	2203      	movs	r2, #3
 8000a86:	4022      	ands	r2, r4
 8000a88:	2a03      	cmp	r2, #3
 8000a8a:	d008      	beq.n	8000a9e <HAL_GPIO_Init+0xf6>
        temp = GPIOx->PUPDR;
 8000a8c:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a8e:	005e      	lsls	r6, r3, #1
 8000a90:	2203      	movs	r2, #3
 8000a92:	40b2      	lsls	r2, r6
 8000a94:	4394      	bics	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a96:	688a      	ldr	r2, [r1, #8]
 8000a98:	40b2      	lsls	r2, r6
 8000a9a:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000a9c:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a9e:	684c      	ldr	r4, [r1, #4]
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	4022      	ands	r2, r4
 8000aa4:	2a02      	cmp	r2, #2
 8000aa6:	d095      	beq.n	80009d4 <HAL_GPIO_Init+0x2c>
      temp = GPIOx->MODER;
 8000aa8:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000aaa:	005e      	lsls	r6, r3, #1
 8000aac:	2203      	movs	r2, #3
 8000aae:	0017      	movs	r7, r2
 8000ab0:	40b7      	lsls	r7, r6
 8000ab2:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ab4:	684f      	ldr	r7, [r1, #4]
 8000ab6:	403a      	ands	r2, r7
 8000ab8:	40b2      	lsls	r2, r6
 8000aba:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000abc:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000abe:	684c      	ldr	r4, [r1, #4]
 8000ac0:	22c0      	movs	r2, #192	; 0xc0
 8000ac2:	0292      	lsls	r2, r2, #10
 8000ac4:	4214      	tst	r4, r2
 8000ac6:	d0cb      	beq.n	8000a60 <HAL_GPIO_Init+0xb8>
        temp = EXTI->EXTICR[position >> 2u];
 8000ac8:	089a      	lsrs	r2, r3, #2
 8000aca:	0014      	movs	r4, r2
 8000acc:	3418      	adds	r4, #24
 8000ace:	00a4      	lsls	r4, r4, #2
 8000ad0:	4e10      	ldr	r6, [pc, #64]	; (8000b14 <HAL_GPIO_Init+0x16c>)
 8000ad2:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000ad4:	2403      	movs	r4, #3
 8000ad6:	401c      	ands	r4, r3
 8000ad8:	00e4      	lsls	r4, r4, #3
 8000ada:	260f      	movs	r6, #15
 8000adc:	40a6      	lsls	r6, r4
 8000ade:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ae0:	26a0      	movs	r6, #160	; 0xa0
 8000ae2:	05f6      	lsls	r6, r6, #23
 8000ae4:	42b0      	cmp	r0, r6
 8000ae6:	d087      	beq.n	80009f8 <HAL_GPIO_Init+0x50>
 8000ae8:	4e0b      	ldr	r6, [pc, #44]	; (8000b18 <HAL_GPIO_Init+0x170>)
 8000aea:	42b0      	cmp	r0, r6
 8000aec:	d00b      	beq.n	8000b06 <HAL_GPIO_Init+0x15e>
 8000aee:	4e0b      	ldr	r6, [pc, #44]	; (8000b1c <HAL_GPIO_Init+0x174>)
 8000af0:	42b0      	cmp	r0, r6
 8000af2:	d00a      	beq.n	8000b0a <HAL_GPIO_Init+0x162>
 8000af4:	4e0a      	ldr	r6, [pc, #40]	; (8000b20 <HAL_GPIO_Init+0x178>)
 8000af6:	42b0      	cmp	r0, r6
 8000af8:	d009      	beq.n	8000b0e <HAL_GPIO_Init+0x166>
 8000afa:	4e0a      	ldr	r6, [pc, #40]	; (8000b24 <HAL_GPIO_Init+0x17c>)
 8000afc:	42b0      	cmp	r0, r6
 8000afe:	d100      	bne.n	8000b02 <HAL_GPIO_Init+0x15a>
 8000b00:	e778      	b.n	80009f4 <HAL_GPIO_Init+0x4c>
 8000b02:	2605      	movs	r6, #5
 8000b04:	e779      	b.n	80009fa <HAL_GPIO_Init+0x52>
 8000b06:	2601      	movs	r6, #1
 8000b08:	e777      	b.n	80009fa <HAL_GPIO_Init+0x52>
 8000b0a:	2602      	movs	r6, #2
 8000b0c:	e775      	b.n	80009fa <HAL_GPIO_Init+0x52>
 8000b0e:	2603      	movs	r6, #3
 8000b10:	e773      	b.n	80009fa <HAL_GPIO_Init+0x52>
  }
}
 8000b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b14:	40021800 	.word	0x40021800
 8000b18:	50000400 	.word	0x50000400
 8000b1c:	50000800 	.word	0x50000800
 8000b20:	50000c00 	.word	0x50000c00
 8000b24:	50001000 	.word	0x50001000

08000b28 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b28:	2a00      	cmp	r2, #0
 8000b2a:	d001      	beq.n	8000b30 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b2c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b2e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b30:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000b32:	e7fc      	b.n	8000b2e <HAL_GPIO_WritePin+0x6>

08000b34 <HAL_GPIO_EXTI_Rising_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8000b34:	4770      	bx	lr

08000b36 <HAL_GPIO_EXTI_Falling_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8000b36:	4770      	bx	lr

08000b38 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000b38:	b510      	push	{r4, lr}
 8000b3a:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	4218      	tst	r0, r3
 8000b42:	d104      	bne.n	8000b4e <HAL_GPIO_EXTI_IRQHandler+0x16>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8000b44:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b46:	691b      	ldr	r3, [r3, #16]
 8000b48:	4223      	tst	r3, r4
 8000b4a:	d105      	bne.n	8000b58 <HAL_GPIO_EXTI_IRQHandler+0x20>
}
 8000b4c:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b50:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000b52:	f7ff ffef 	bl	8000b34 <HAL_GPIO_EXTI_Rising_Callback>
 8000b56:	e7f5      	b.n	8000b44 <HAL_GPIO_EXTI_IRQHandler+0xc>
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000b58:	4b02      	ldr	r3, [pc, #8]	; (8000b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b5a:	611c      	str	r4, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000b5c:	0020      	movs	r0, r4
 8000b5e:	f7ff ffea 	bl	8000b36 <HAL_GPIO_EXTI_Falling_Callback>
}
 8000b62:	e7f3      	b.n	8000b4c <HAL_GPIO_EXTI_IRQHandler+0x14>
 8000b64:	40021800 	.word	0x40021800

08000b68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b68:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000b6a:	4a10      	ldr	r2, [pc, #64]	; (8000bac <HAL_PWREx_ControlVoltageScaling+0x44>)
 8000b6c:	6813      	ldr	r3, [r2, #0]
 8000b6e:	4910      	ldr	r1, [pc, #64]	; (8000bb0 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8000b70:	400b      	ands	r3, r1
 8000b72:	4303      	orrs	r3, r0
 8000b74:	6013      	str	r3, [r2, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b76:	2380      	movs	r3, #128	; 0x80
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4298      	cmp	r0, r3
 8000b7c:	d001      	beq.n	8000b82 <HAL_PWREx_ControlVoltageScaling+0x1a>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000b7e:	2000      	movs	r0, #0
}
 8000b80:	bd10      	pop	{r4, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	0058      	lsls	r0, r3, #1
 8000b88:	18c0      	adds	r0, r0, r3
 8000b8a:	0040      	lsls	r0, r0, #1
 8000b8c:	490a      	ldr	r1, [pc, #40]	; (8000bb8 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8000b8e:	f7ff fab9 	bl	8000104 <__udivsi3>
 8000b92:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <HAL_PWREx_ControlVoltageScaling+0x44>)
 8000b96:	695b      	ldr	r3, [r3, #20]
 8000b98:	055b      	lsls	r3, r3, #21
 8000b9a:	d503      	bpl.n	8000ba4 <HAL_PWREx_ControlVoltageScaling+0x3c>
      if (wait_loop_index != 0U)
 8000b9c:	2800      	cmp	r0, #0
 8000b9e:	d003      	beq.n	8000ba8 <HAL_PWREx_ControlVoltageScaling+0x40>
        wait_loop_index--;
 8000ba0:	3801      	subs	r0, #1
 8000ba2:	e7f7      	b.n	8000b94 <HAL_PWREx_ControlVoltageScaling+0x2c>
  return HAL_OK;
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	e7eb      	b.n	8000b80 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8000ba8:	2003      	movs	r0, #3
 8000baa:	e7e9      	b.n	8000b80 <HAL_PWREx_ControlVoltageScaling+0x18>
 8000bac:	40007000 	.word	0x40007000
 8000bb0:	fffff9ff 	.word	0xfffff9ff
 8000bb4:	20000000 	.word	0x20000000
 8000bb8:	000f4240 	.word	0x000f4240

08000bbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bbc:	b570      	push	{r4, r5, r6, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bc2:	d100      	bne.n	8000bc6 <HAL_RCC_OscConfig+0xa>
 8000bc4:	e25e      	b.n	8001084 <HAL_RCC_OscConfig+0x4c8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bc6:	6803      	ldr	r3, [r0, #0]
 8000bc8:	07db      	lsls	r3, r3, #31
 8000bca:	d539      	bpl.n	8000c40 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000bcc:	4ac1      	ldr	r2, [pc, #772]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000bce:	6891      	ldr	r1, [r2, #8]
 8000bd0:	2338      	movs	r3, #56	; 0x38
 8000bd2:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000bd4:	68d1      	ldr	r1, [r2, #12]
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	400a      	ands	r2, r1

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000bda:	2b10      	cmp	r3, #16
 8000bdc:	d026      	beq.n	8000c2c <HAL_RCC_OscConfig+0x70>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000bde:	2b08      	cmp	r3, #8
 8000be0:	d026      	beq.n	8000c30 <HAL_RCC_OscConfig+0x74>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000be2:	6863      	ldr	r3, [r4, #4]
 8000be4:	2280      	movs	r2, #128	; 0x80
 8000be6:	0252      	lsls	r2, r2, #9
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d07f      	beq.n	8000cec <HAL_RCC_OscConfig+0x130>
 8000bec:	22a0      	movs	r2, #160	; 0xa0
 8000bee:	02d2      	lsls	r2, r2, #11
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d100      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x3a>
 8000bf4:	e081      	b.n	8000cfa <HAL_RCC_OscConfig+0x13e>
 8000bf6:	4bb7      	ldr	r3, [pc, #732]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	49b7      	ldr	r1, [pc, #732]	; (8000ed8 <HAL_RCC_OscConfig+0x31c>)
 8000bfc:	400a      	ands	r2, r1
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	49b6      	ldr	r1, [pc, #728]	; (8000edc <HAL_RCC_OscConfig+0x320>)
 8000c04:	400a      	ands	r2, r1
 8000c06:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c08:	6863      	ldr	r3, [r4, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d100      	bne.n	8000c10 <HAL_RCC_OscConfig+0x54>
 8000c0e:	e080      	b.n	8000d12 <HAL_RCC_OscConfig+0x156>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c10:	f7ff fe7c 	bl	800090c <HAL_GetTick>
 8000c14:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c16:	4baf      	ldr	r3, [pc, #700]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	039b      	lsls	r3, r3, #14
 8000c1c:	d410      	bmi.n	8000c40 <HAL_RCC_OscConfig+0x84>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c1e:	f7ff fe75 	bl	800090c <HAL_GetTick>
 8000c22:	1b40      	subs	r0, r0, r5
 8000c24:	2864      	cmp	r0, #100	; 0x64
 8000c26:	d9f6      	bls.n	8000c16 <HAL_RCC_OscConfig+0x5a>
          {
            return HAL_TIMEOUT;
 8000c28:	2003      	movs	r0, #3
 8000c2a:	e22c      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000c2c:	2a03      	cmp	r2, #3
 8000c2e:	d1d6      	bne.n	8000bde <HAL_RCC_OscConfig+0x22>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c30:	4ba8      	ldr	r3, [pc, #672]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	039b      	lsls	r3, r3, #14
 8000c36:	d503      	bpl.n	8000c40 <HAL_RCC_OscConfig+0x84>
 8000c38:	6863      	ldr	r3, [r4, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d100      	bne.n	8000c40 <HAL_RCC_OscConfig+0x84>
 8000c3e:	e224      	b.n	800108a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c40:	6823      	ldr	r3, [r4, #0]
 8000c42:	079b      	lsls	r3, r3, #30
 8000c44:	d531      	bpl.n	8000caa <HAL_RCC_OscConfig+0xee>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c46:	4aa3      	ldr	r2, [pc, #652]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000c48:	6891      	ldr	r1, [r2, #8]
 8000c4a:	2338      	movs	r3, #56	; 0x38
 8000c4c:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c4e:	68d1      	ldr	r1, [r2, #12]
 8000c50:	2203      	movs	r2, #3
 8000c52:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000c54:	2b10      	cmp	r3, #16
 8000c56:	d06a      	beq.n	8000d2e <HAL_RCC_OscConfig+0x172>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d16b      	bne.n	8000d34 <HAL_RCC_OscConfig+0x178>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c5c:	4a9d      	ldr	r2, [pc, #628]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000c5e:	6812      	ldr	r2, [r2, #0]
 8000c60:	0552      	lsls	r2, r2, #21
 8000c62:	d503      	bpl.n	8000c6c <HAL_RCC_OscConfig+0xb0>
 8000c64:	68e2      	ldr	r2, [r4, #12]
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	d100      	bne.n	8000c6c <HAL_RCC_OscConfig+0xb0>
 8000c6a:	e210      	b.n	800108e <HAL_RCC_OscConfig+0x4d2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c6c:	4899      	ldr	r0, [pc, #612]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000c6e:	6842      	ldr	r2, [r0, #4]
 8000c70:	499b      	ldr	r1, [pc, #620]	; (8000ee0 <HAL_RCC_OscConfig+0x324>)
 8000c72:	400a      	ands	r2, r1
 8000c74:	6961      	ldr	r1, [r4, #20]
 8000c76:	0209      	lsls	r1, r1, #8
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	6042      	str	r2, [r0, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d10d      	bne.n	8000c9c <HAL_RCC_OscConfig+0xe0>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000c80:	6803      	ldr	r3, [r0, #0]
 8000c82:	4998      	ldr	r1, [pc, #608]	; (8000ee4 <HAL_RCC_OscConfig+0x328>)
 8000c84:	400b      	ands	r3, r1
 8000c86:	6921      	ldr	r1, [r4, #16]
 8000c88:	430b      	orrs	r3, r1
 8000c8a:	6003      	str	r3, [r0, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000c8c:	6803      	ldr	r3, [r0, #0]
 8000c8e:	0adb      	lsrs	r3, r3, #11
 8000c90:	2207      	movs	r2, #7
 8000c92:	401a      	ands	r2, r3
 8000c94:	4b94      	ldr	r3, [pc, #592]	; (8000ee8 <HAL_RCC_OscConfig+0x32c>)
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	4a94      	ldr	r2, [pc, #592]	; (8000eec <HAL_RCC_OscConfig+0x330>)
 8000c9a:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000c9c:	4b94      	ldr	r3, [pc, #592]	; (8000ef0 <HAL_RCC_OscConfig+0x334>)
 8000c9e:	6818      	ldr	r0, [r3, #0]
 8000ca0:	f7ff fd80 	bl	80007a4 <HAL_InitTick>
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	d000      	beq.n	8000caa <HAL_RCC_OscConfig+0xee>
 8000ca8:	e1f3      	b.n	8001092 <HAL_RCC_OscConfig+0x4d6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000caa:	6823      	ldr	r3, [r4, #0]
 8000cac:	071b      	lsls	r3, r3, #28
 8000cae:	d400      	bmi.n	8000cb2 <HAL_RCC_OscConfig+0xf6>
 8000cb0:	e081      	b.n	8000db6 <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000cb2:	4b88      	ldr	r3, [pc, #544]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000cb4:	689a      	ldr	r2, [r3, #8]
 8000cb6:	2338      	movs	r3, #56	; 0x38
 8000cb8:	4013      	ands	r3, r2
 8000cba:	2b18      	cmp	r3, #24
 8000cbc:	d073      	beq.n	8000da6 <HAL_RCC_OscConfig+0x1ea>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cbe:	69a3      	ldr	r3, [r4, #24]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d100      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x10a>
 8000cc4:	e0b4      	b.n	8000e30 <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000cc6:	4a83      	ldr	r2, [pc, #524]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000cc8:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8000cca:	2101      	movs	r1, #1
 8000ccc:	430b      	orrs	r3, r1
 8000cce:	6613      	str	r3, [r2, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cd0:	f7ff fe1c 	bl	800090c <HAL_GetTick>
 8000cd4:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000cd6:	4b7f      	ldr	r3, [pc, #508]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cda:	079b      	lsls	r3, r3, #30
 8000cdc:	d46b      	bmi.n	8000db6 <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cde:	f7ff fe15 	bl	800090c <HAL_GetTick>
 8000ce2:	1b40      	subs	r0, r0, r5
 8000ce4:	2802      	cmp	r0, #2
 8000ce6:	d9f6      	bls.n	8000cd6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000ce8:	2003      	movs	r0, #3
 8000cea:	e1cc      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cec:	4a79      	ldr	r2, [pc, #484]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000cee:	6811      	ldr	r1, [r2, #0]
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	025b      	lsls	r3, r3, #9
 8000cf4:	430b      	orrs	r3, r1
 8000cf6:	6013      	str	r3, [r2, #0]
 8000cf8:	e786      	b.n	8000c08 <HAL_RCC_OscConfig+0x4c>
 8000cfa:	4b76      	ldr	r3, [pc, #472]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000cfc:	6819      	ldr	r1, [r3, #0]
 8000cfe:	2280      	movs	r2, #128	; 0x80
 8000d00:	02d2      	lsls	r2, r2, #11
 8000d02:	430a      	orrs	r2, r1
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	6819      	ldr	r1, [r3, #0]
 8000d08:	2280      	movs	r2, #128	; 0x80
 8000d0a:	0252      	lsls	r2, r2, #9
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	e77a      	b.n	8000c08 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000d12:	f7ff fdfb 	bl	800090c <HAL_GetTick>
 8000d16:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d18:	4b6e      	ldr	r3, [pc, #440]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	039b      	lsls	r3, r3, #14
 8000d1e:	d58f      	bpl.n	8000c40 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d20:	f7ff fdf4 	bl	800090c <HAL_GetTick>
 8000d24:	1b40      	subs	r0, r0, r5
 8000d26:	2864      	cmp	r0, #100	; 0x64
 8000d28:	d9f6      	bls.n	8000d18 <HAL_RCC_OscConfig+0x15c>
            return HAL_TIMEOUT;
 8000d2a:	2003      	movs	r0, #3
 8000d2c:	e1ab      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000d2e:	2a02      	cmp	r2, #2
 8000d30:	d192      	bne.n	8000c58 <HAL_RCC_OscConfig+0x9c>
 8000d32:	e793      	b.n	8000c5c <HAL_RCC_OscConfig+0xa0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d34:	68e3      	ldr	r3, [r4, #12]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d022      	beq.n	8000d80 <HAL_RCC_OscConfig+0x1c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000d3a:	4a66      	ldr	r2, [pc, #408]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000d3c:	6813      	ldr	r3, [r2, #0]
 8000d3e:	4969      	ldr	r1, [pc, #420]	; (8000ee4 <HAL_RCC_OscConfig+0x328>)
 8000d40:	400b      	ands	r3, r1
 8000d42:	6921      	ldr	r1, [r4, #16]
 8000d44:	430b      	orrs	r3, r1
 8000d46:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8000d48:	6811      	ldr	r1, [r2, #0]
 8000d4a:	2380      	movs	r3, #128	; 0x80
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	430b      	orrs	r3, r1
 8000d50:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000d52:	f7ff fddb 	bl	800090c <HAL_GetTick>
 8000d56:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d58:	4b5e      	ldr	r3, [pc, #376]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	055b      	lsls	r3, r3, #21
 8000d5e:	d406      	bmi.n	8000d6e <HAL_RCC_OscConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d60:	f7ff fdd4 	bl	800090c <HAL_GetTick>
 8000d64:	1b40      	subs	r0, r0, r5
 8000d66:	2802      	cmp	r0, #2
 8000d68:	d9f6      	bls.n	8000d58 <HAL_RCC_OscConfig+0x19c>
            return HAL_TIMEOUT;
 8000d6a:	2003      	movs	r0, #3
 8000d6c:	e18b      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d6e:	4959      	ldr	r1, [pc, #356]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000d70:	684b      	ldr	r3, [r1, #4]
 8000d72:	4a5b      	ldr	r2, [pc, #364]	; (8000ee0 <HAL_RCC_OscConfig+0x324>)
 8000d74:	4013      	ands	r3, r2
 8000d76:	6962      	ldr	r2, [r4, #20]
 8000d78:	0212      	lsls	r2, r2, #8
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	604b      	str	r3, [r1, #4]
 8000d7e:	e794      	b.n	8000caa <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 8000d80:	4a54      	ldr	r2, [pc, #336]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000d82:	6813      	ldr	r3, [r2, #0]
 8000d84:	495b      	ldr	r1, [pc, #364]	; (8000ef4 <HAL_RCC_OscConfig+0x338>)
 8000d86:	400b      	ands	r3, r1
 8000d88:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000d8a:	f7ff fdbf 	bl	800090c <HAL_GetTick>
 8000d8e:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d90:	4b50      	ldr	r3, [pc, #320]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	055b      	lsls	r3, r3, #21
 8000d96:	d588      	bpl.n	8000caa <HAL_RCC_OscConfig+0xee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d98:	f7ff fdb8 	bl	800090c <HAL_GetTick>
 8000d9c:	1b40      	subs	r0, r0, r5
 8000d9e:	2802      	cmp	r0, #2
 8000da0:	d9f6      	bls.n	8000d90 <HAL_RCC_OscConfig+0x1d4>
            return HAL_TIMEOUT;
 8000da2:	2003      	movs	r0, #3
 8000da4:	e16f      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000da6:	4b4b      	ldr	r3, [pc, #300]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000daa:	079b      	lsls	r3, r3, #30
 8000dac:	d503      	bpl.n	8000db6 <HAL_RCC_OscConfig+0x1fa>
 8000dae:	69a3      	ldr	r3, [r4, #24]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d100      	bne.n	8000db6 <HAL_RCC_OscConfig+0x1fa>
 8000db4:	e16f      	b.n	8001096 <HAL_RCC_OscConfig+0x4da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000db6:	6823      	ldr	r3, [r4, #0]
 8000db8:	075b      	lsls	r3, r3, #29
 8000dba:	d400      	bmi.n	8000dbe <HAL_RCC_OscConfig+0x202>
 8000dbc:	e0a2      	b.n	8000f04 <HAL_RCC_OscConfig+0x348>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000dbe:	4b45      	ldr	r3, [pc, #276]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000dc0:	689a      	ldr	r2, [r3, #8]
 8000dc2:	2338      	movs	r3, #56	; 0x38
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	2b20      	cmp	r3, #32
 8000dc8:	d045      	beq.n	8000e56 <HAL_RCC_OscConfig+0x29a>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000dca:	4b42      	ldr	r3, [pc, #264]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dce:	00db      	lsls	r3, r3, #3
 8000dd0:	d44a      	bmi.n	8000e68 <HAL_RCC_OscConfig+0x2ac>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	4b40      	ldr	r3, [pc, #256]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000dd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dd6:	2180      	movs	r1, #128	; 0x80
 8000dd8:	0549      	lsls	r1, r1, #21
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	63da      	str	r2, [r3, #60]	; 0x3c
 8000dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000de0:	400b      	ands	r3, r1
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8000de6:	2501      	movs	r5, #1
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000de8:	4b43      	ldr	r3, [pc, #268]	; (8000ef8 <HAL_RCC_OscConfig+0x33c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	05db      	lsls	r3, r3, #23
 8000dee:	d53d      	bpl.n	8000e6c <HAL_RCC_OscConfig+0x2b0>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000df0:	68a3      	ldr	r3, [r4, #8]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d04e      	beq.n	8000e94 <HAL_RCC_OscConfig+0x2d8>
 8000df6:	2b05      	cmp	r3, #5
 8000df8:	d052      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x2e4>
 8000dfa:	4b36      	ldr	r3, [pc, #216]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000dfc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000dfe:	2101      	movs	r1, #1
 8000e00:	438a      	bics	r2, r1
 8000e02:	65da      	str	r2, [r3, #92]	; 0x5c
 8000e04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e06:	3103      	adds	r1, #3
 8000e08:	438a      	bics	r2, r1
 8000e0a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e0c:	68a3      	ldr	r3, [r4, #8]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d050      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e12:	f7ff fd7b 	bl	800090c <HAL_GetTick>
 8000e16:	0006      	movs	r6, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000e18:	4b2e      	ldr	r3, [pc, #184]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e1c:	079b      	lsls	r3, r3, #30
 8000e1e:	d46f      	bmi.n	8000f00 <HAL_RCC_OscConfig+0x344>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e20:	f7ff fd74 	bl	800090c <HAL_GetTick>
 8000e24:	1b80      	subs	r0, r0, r6
 8000e26:	4b35      	ldr	r3, [pc, #212]	; (8000efc <HAL_RCC_OscConfig+0x340>)
 8000e28:	4298      	cmp	r0, r3
 8000e2a:	d9f5      	bls.n	8000e18 <HAL_RCC_OscConfig+0x25c>
          {
            return HAL_TIMEOUT;
 8000e2c:	2003      	movs	r0, #3
 8000e2e:	e12a      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_LSI_DISABLE();
 8000e30:	4a28      	ldr	r2, [pc, #160]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000e32:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8000e34:	2101      	movs	r1, #1
 8000e36:	438b      	bics	r3, r1
 8000e38:	6613      	str	r3, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 8000e3a:	f7ff fd67 	bl	800090c <HAL_GetTick>
 8000e3e:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000e40:	4b24      	ldr	r3, [pc, #144]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e44:	079b      	lsls	r3, r3, #30
 8000e46:	d5b6      	bpl.n	8000db6 <HAL_RCC_OscConfig+0x1fa>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e48:	f7ff fd60 	bl	800090c <HAL_GetTick>
 8000e4c:	1b40      	subs	r0, r0, r5
 8000e4e:	2802      	cmp	r0, #2
 8000e50:	d9f6      	bls.n	8000e40 <HAL_RCC_OscConfig+0x284>
            return HAL_TIMEOUT;
 8000e52:	2003      	movs	r0, #3
 8000e54:	e117      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000e56:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e5a:	079b      	lsls	r3, r3, #30
 8000e5c:	d552      	bpl.n	8000f04 <HAL_RCC_OscConfig+0x348>
 8000e5e:	68a3      	ldr	r3, [r4, #8]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d14f      	bne.n	8000f04 <HAL_RCC_OscConfig+0x348>
        return HAL_ERROR;
 8000e64:	2001      	movs	r0, #1
 8000e66:	e10e      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
    FlagStatus       pwrclkchanged = RESET;
 8000e68:	2500      	movs	r5, #0
 8000e6a:	e7bd      	b.n	8000de8 <HAL_RCC_OscConfig+0x22c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000e6c:	4a22      	ldr	r2, [pc, #136]	; (8000ef8 <HAL_RCC_OscConfig+0x33c>)
 8000e6e:	6811      	ldr	r1, [r2, #0]
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	430b      	orrs	r3, r1
 8000e76:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000e78:	f7ff fd48 	bl	800090c <HAL_GetTick>
 8000e7c:	0006      	movs	r6, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <HAL_RCC_OscConfig+0x33c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	05db      	lsls	r3, r3, #23
 8000e84:	d4b4      	bmi.n	8000df0 <HAL_RCC_OscConfig+0x234>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e86:	f7ff fd41 	bl	800090c <HAL_GetTick>
 8000e8a:	1b80      	subs	r0, r0, r6
 8000e8c:	2802      	cmp	r0, #2
 8000e8e:	d9f6      	bls.n	8000e7e <HAL_RCC_OscConfig+0x2c2>
            return HAL_TIMEOUT;
 8000e90:	2003      	movs	r0, #3
 8000e92:	e0f8      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e94:	4a0f      	ldr	r2, [pc, #60]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000e96:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8000e98:	2101      	movs	r1, #1
 8000e9a:	430b      	orrs	r3, r1
 8000e9c:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000e9e:	e7b5      	b.n	8000e0c <HAL_RCC_OscConfig+0x250>
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000ea2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000ea4:	2104      	movs	r1, #4
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	65da      	str	r2, [r3, #92]	; 0x5c
 8000eaa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000eac:	3903      	subs	r1, #3
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	65da      	str	r2, [r3, #92]	; 0x5c
 8000eb2:	e7ab      	b.n	8000e0c <HAL_RCC_OscConfig+0x250>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eb4:	f7ff fd2a 	bl	800090c <HAL_GetTick>
 8000eb8:	0006      	movs	r6, r0

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_RCC_OscConfig+0x318>)
 8000ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ebe:	079b      	lsls	r3, r3, #30
 8000ec0:	d51e      	bpl.n	8000f00 <HAL_RCC_OscConfig+0x344>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ec2:	f7ff fd23 	bl	800090c <HAL_GetTick>
 8000ec6:	1b80      	subs	r0, r0, r6
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <HAL_RCC_OscConfig+0x340>)
 8000eca:	4298      	cmp	r0, r3
 8000ecc:	d9f5      	bls.n	8000eba <HAL_RCC_OscConfig+0x2fe>
          {
            return HAL_TIMEOUT;
 8000ece:	2003      	movs	r0, #3
 8000ed0:	e0d9      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	fffeffff 	.word	0xfffeffff
 8000edc:	fffbffff 	.word	0xfffbffff
 8000ee0:	ffff80ff 	.word	0xffff80ff
 8000ee4:	ffffc7ff 	.word	0xffffc7ff
 8000ee8:	00f42400 	.word	0x00f42400
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	fffffeff 	.word	0xfffffeff
 8000ef8:	40007000 	.word	0x40007000
 8000efc:	00001388 	.word	0x00001388
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8000f00:	2d01      	cmp	r5, #1
 8000f02:	d019      	beq.n	8000f38 <HAL_RCC_OscConfig+0x37c>
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000f04:	6823      	ldr	r3, [r4, #0]
 8000f06:	069b      	lsls	r3, r3, #26
 8000f08:	d52f      	bpl.n	8000f6a <HAL_RCC_OscConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000f0a:	69e3      	ldr	r3, [r4, #28]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d019      	beq.n	8000f44 <HAL_RCC_OscConfig+0x388>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000f10:	4a6a      	ldr	r2, [pc, #424]	; (80010bc <HAL_RCC_OscConfig+0x500>)
 8000f12:	6811      	ldr	r1, [r2, #0]
 8000f14:	2380      	movs	r3, #128	; 0x80
 8000f16:	03db      	lsls	r3, r3, #15
 8000f18:	430b      	orrs	r3, r1
 8000f1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f1c:	f7ff fcf6 	bl	800090c <HAL_GetTick>
 8000f20:	0005      	movs	r5, r0

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8000f22:	4b66      	ldr	r3, [pc, #408]	; (80010bc <HAL_RCC_OscConfig+0x500>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	021b      	lsls	r3, r3, #8
 8000f28:	d41f      	bmi.n	8000f6a <HAL_RCC_OscConfig+0x3ae>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f2a:	f7ff fcef 	bl	800090c <HAL_GetTick>
 8000f2e:	1b40      	subs	r0, r0, r5
 8000f30:	2802      	cmp	r0, #2
 8000f32:	d9f6      	bls.n	8000f22 <HAL_RCC_OscConfig+0x366>
        {
          return HAL_TIMEOUT;
 8000f34:	2003      	movs	r0, #3
 8000f36:	e0a6      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_PWR_CLK_DISABLE();
 8000f38:	4a60      	ldr	r2, [pc, #384]	; (80010bc <HAL_RCC_OscConfig+0x500>)
 8000f3a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000f3c:	4960      	ldr	r1, [pc, #384]	; (80010c0 <HAL_RCC_OscConfig+0x504>)
 8000f3e:	400b      	ands	r3, r1
 8000f40:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000f42:	e7df      	b.n	8000f04 <HAL_RCC_OscConfig+0x348>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000f44:	4a5d      	ldr	r2, [pc, #372]	; (80010bc <HAL_RCC_OscConfig+0x500>)
 8000f46:	6813      	ldr	r3, [r2, #0]
 8000f48:	495e      	ldr	r1, [pc, #376]	; (80010c4 <HAL_RCC_OscConfig+0x508>)
 8000f4a:	400b      	ands	r3, r1
 8000f4c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f4e:	f7ff fcdd 	bl	800090c <HAL_GetTick>
 8000f52:	0005      	movs	r5, r0

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8000f54:	4b59      	ldr	r3, [pc, #356]	; (80010bc <HAL_RCC_OscConfig+0x500>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	021b      	lsls	r3, r3, #8
 8000f5a:	d506      	bpl.n	8000f6a <HAL_RCC_OscConfig+0x3ae>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f5c:	f7ff fcd6 	bl	800090c <HAL_GetTick>
 8000f60:	1b40      	subs	r0, r0, r5
 8000f62:	2802      	cmp	r0, #2
 8000f64:	d9f6      	bls.n	8000f54 <HAL_RCC_OscConfig+0x398>
        {
          return HAL_TIMEOUT;
 8000f66:	2003      	movs	r0, #3
 8000f68:	e08d      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000f6a:	6a23      	ldr	r3, [r4, #32]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d100      	bne.n	8000f72 <HAL_RCC_OscConfig+0x3b6>
 8000f70:	e093      	b.n	800109a <HAL_RCC_OscConfig+0x4de>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f72:	4a52      	ldr	r2, [pc, #328]	; (80010bc <HAL_RCC_OscConfig+0x500>)
 8000f74:	6891      	ldr	r1, [r2, #8]
 8000f76:	2238      	movs	r2, #56	; 0x38
 8000f78:	400a      	ands	r2, r1
 8000f7a:	2a10      	cmp	r2, #16
 8000f7c:	d05a      	beq.n	8001034 <HAL_RCC_OscConfig+0x478>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d012      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x3ec>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f82:	4a4e      	ldr	r2, [pc, #312]	; (80010bc <HAL_RCC_OscConfig+0x500>)
 8000f84:	6813      	ldr	r3, [r2, #0]
 8000f86:	4950      	ldr	r1, [pc, #320]	; (80010c8 <HAL_RCC_OscConfig+0x50c>)
 8000f88:	400b      	ands	r3, r1
 8000f8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f8c:	f7ff fcbe 	bl	800090c <HAL_GetTick>
 8000f90:	0004      	movs	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f92:	4b4a      	ldr	r3, [pc, #296]	; (80010bc <HAL_RCC_OscConfig+0x500>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	019b      	lsls	r3, r3, #6
 8000f98:	d545      	bpl.n	8001026 <HAL_RCC_OscConfig+0x46a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f9a:	f7ff fcb7 	bl	800090c <HAL_GetTick>
 8000f9e:	1b00      	subs	r0, r0, r4
 8000fa0:	2802      	cmp	r0, #2
 8000fa2:	d9f6      	bls.n	8000f92 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	e06e      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_PLL_DISABLE();
 8000fa8:	4a44      	ldr	r2, [pc, #272]	; (80010bc <HAL_RCC_OscConfig+0x500>)
 8000faa:	6813      	ldr	r3, [r2, #0]
 8000fac:	4946      	ldr	r1, [pc, #280]	; (80010c8 <HAL_RCC_OscConfig+0x50c>)
 8000fae:	400b      	ands	r3, r1
 8000fb0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000fb2:	f7ff fcab 	bl	800090c <HAL_GetTick>
 8000fb6:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000fb8:	4b40      	ldr	r3, [pc, #256]	; (80010bc <HAL_RCC_OscConfig+0x500>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	019b      	lsls	r3, r3, #6
 8000fbe:	d506      	bpl.n	8000fce <HAL_RCC_OscConfig+0x412>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fc0:	f7ff fca4 	bl	800090c <HAL_GetTick>
 8000fc4:	1b40      	subs	r0, r0, r5
 8000fc6:	2802      	cmp	r0, #2
 8000fc8:	d9f6      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x3fc>
            return HAL_TIMEOUT;
 8000fca:	2003      	movs	r0, #3
 8000fcc:	e05b      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fce:	4a3b      	ldr	r2, [pc, #236]	; (80010bc <HAL_RCC_OscConfig+0x500>)
 8000fd0:	68d3      	ldr	r3, [r2, #12]
 8000fd2:	493e      	ldr	r1, [pc, #248]	; (80010cc <HAL_RCC_OscConfig+0x510>)
 8000fd4:	4019      	ands	r1, r3
 8000fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000fd8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000fda:	4303      	orrs	r3, r0
 8000fdc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000fde:	0200      	lsls	r0, r0, #8
 8000fe0:	4303      	orrs	r3, r0
 8000fe2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000fe4:	4303      	orrs	r3, r0
 8000fe6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8000fe8:	4303      	orrs	r3, r0
 8000fea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000fec:	4303      	orrs	r3, r0
 8000fee:	430b      	orrs	r3, r1
 8000ff0:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8000ff2:	6811      	ldr	r1, [r2, #0]
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	045b      	lsls	r3, r3, #17
 8000ff8:	430b      	orrs	r3, r1
 8000ffa:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8000ffc:	68d1      	ldr	r1, [r2, #12]
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	055b      	lsls	r3, r3, #21
 8001002:	430b      	orrs	r3, r1
 8001004:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8001006:	f7ff fc81 	bl	800090c <HAL_GetTick>
 800100a:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800100c:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <HAL_RCC_OscConfig+0x500>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	019b      	lsls	r3, r3, #6
 8001012:	d406      	bmi.n	8001022 <HAL_RCC_OscConfig+0x466>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001014:	f7ff fc7a 	bl	800090c <HAL_GetTick>
 8001018:	1b00      	subs	r0, r0, r4
 800101a:	2802      	cmp	r0, #2
 800101c:	d9f6      	bls.n	800100c <HAL_RCC_OscConfig+0x450>
            return HAL_TIMEOUT;
 800101e:	2003      	movs	r0, #3
 8001020:	e031      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001022:	2000      	movs	r0, #0
 8001024:	e02f      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001026:	4a25      	ldr	r2, [pc, #148]	; (80010bc <HAL_RCC_OscConfig+0x500>)
 8001028:	68d3      	ldr	r3, [r2, #12]
 800102a:	4929      	ldr	r1, [pc, #164]	; (80010d0 <HAL_RCC_OscConfig+0x514>)
 800102c:	400b      	ands	r3, r1
 800102e:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8001030:	2000      	movs	r0, #0
 8001032:	e028      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001034:	2b01      	cmp	r3, #1
 8001036:	d032      	beq.n	800109e <HAL_RCC_OscConfig+0x4e2>
        temp_pllckcfg = RCC->PLLCFGR;
 8001038:	4b20      	ldr	r3, [pc, #128]	; (80010bc <HAL_RCC_OscConfig+0x500>)
 800103a:	68da      	ldr	r2, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800103c:	2303      	movs	r3, #3
 800103e:	4013      	ands	r3, r2
 8001040:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001042:	428b      	cmp	r3, r1
 8001044:	d12d      	bne.n	80010a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001046:	2370      	movs	r3, #112	; 0x70
 8001048:	4013      	ands	r3, r2
 800104a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800104c:	428b      	cmp	r3, r1
 800104e:	d12a      	bne.n	80010a6 <HAL_RCC_OscConfig+0x4ea>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001050:	21fe      	movs	r1, #254	; 0xfe
 8001052:	01c9      	lsls	r1, r1, #7
 8001054:	4011      	ands	r1, r2
 8001056:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001058:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800105a:	4299      	cmp	r1, r3
 800105c:	d125      	bne.n	80010aa <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800105e:	23f8      	movs	r3, #248	; 0xf8
 8001060:	039b      	lsls	r3, r3, #14
 8001062:	4013      	ands	r3, r2
 8001064:	6b21      	ldr	r1, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001066:	428b      	cmp	r3, r1
 8001068:	d121      	bne.n	80010ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800106a:	23e0      	movs	r3, #224	; 0xe0
 800106c:	051b      	lsls	r3, r3, #20
 800106e:	4013      	ands	r3, r2
 8001070:	6b61      	ldr	r1, [r4, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001072:	428b      	cmp	r3, r1
 8001074:	d11d      	bne.n	80010b2 <HAL_RCC_OscConfig+0x4f6>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001076:	0f52      	lsrs	r2, r2, #29
 8001078:	0752      	lsls	r2, r2, #29
 800107a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800107c:	429a      	cmp	r2, r3
 800107e:	d11a      	bne.n	80010b6 <HAL_RCC_OscConfig+0x4fa>
  return HAL_OK;
 8001080:	2000      	movs	r0, #0
 8001082:	e000      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
    return HAL_ERROR;
 8001084:	2001      	movs	r0, #1
}
 8001086:	b002      	add	sp, #8
 8001088:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800108a:	2001      	movs	r0, #1
 800108c:	e7fb      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
        return HAL_ERROR;
 800108e:	2001      	movs	r0, #1
 8001090:	e7f9      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
          return HAL_ERROR;
 8001092:	2001      	movs	r0, #1
 8001094:	e7f7      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
        return HAL_ERROR;
 8001096:	2001      	movs	r0, #1
 8001098:	e7f5      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
  return HAL_OK;
 800109a:	2000      	movs	r0, #0
 800109c:	e7f3      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
        return HAL_ERROR;
 800109e:	2001      	movs	r0, #1
 80010a0:	e7f1      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
          return HAL_ERROR;
 80010a2:	2001      	movs	r0, #1
 80010a4:	e7ef      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
 80010a6:	2001      	movs	r0, #1
 80010a8:	e7ed      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
 80010aa:	2001      	movs	r0, #1
 80010ac:	e7eb      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
 80010ae:	2001      	movs	r0, #1
 80010b0:	e7e9      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
 80010b2:	2001      	movs	r0, #1
 80010b4:	e7e7      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
 80010b6:	2001      	movs	r0, #1
 80010b8:	e7e5      	b.n	8001086 <HAL_RCC_OscConfig+0x4ca>
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	40021000 	.word	0x40021000
 80010c0:	efffffff 	.word	0xefffffff
 80010c4:	ffbfffff 	.word	0xffbfffff
 80010c8:	feffffff 	.word	0xfeffffff
 80010cc:	11c1808c 	.word	0x11c1808c
 80010d0:	eefefffc 	.word	0xeefefffc

080010d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010d4:	b510      	push	{r4, lr}
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010d6:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <HAL_RCC_GetSysClockFreq+0xac>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	2238      	movs	r2, #56	; 0x38
 80010dc:	421a      	tst	r2, r3
 80010de:	d107      	bne.n	80010f0 <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80010e0:	4b27      	ldr	r3, [pc, #156]	; (8001180 <HAL_RCC_GetSysClockFreq+0xac>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	0ad2      	lsrs	r2, r2, #11
 80010e6:	2307      	movs	r3, #7
 80010e8:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80010ea:	4826      	ldr	r0, [pc, #152]	; (8001184 <HAL_RCC_GetSysClockFreq+0xb0>)
 80010ec:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 80010ee:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010f0:	4b23      	ldr	r3, [pc, #140]	; (8001180 <HAL_RCC_GetSysClockFreq+0xac>)
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	2338      	movs	r3, #56	; 0x38
 80010f6:	4013      	ands	r3, r2
 80010f8:	2b08      	cmp	r3, #8
 80010fa:	d03b      	beq.n	8001174 <HAL_RCC_GetSysClockFreq+0xa0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010fc:	4b20      	ldr	r3, [pc, #128]	; (8001180 <HAL_RCC_GetSysClockFreq+0xac>)
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	2338      	movs	r3, #56	; 0x38
 8001102:	4013      	ands	r3, r2
 8001104:	2b10      	cmp	r3, #16
 8001106:	d00d      	beq.n	8001124 <HAL_RCC_GetSysClockFreq+0x50>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001108:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <HAL_RCC_GetSysClockFreq+0xac>)
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	2338      	movs	r3, #56	; 0x38
 800110e:	4013      	ands	r3, r2
 8001110:	2b20      	cmp	r3, #32
 8001112:	d031      	beq.n	8001178 <HAL_RCC_GetSysClockFreq+0xa4>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001114:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <HAL_RCC_GetSysClockFreq+0xac>)
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	2338      	movs	r3, #56	; 0x38
 800111a:	4013      	ands	r3, r2
 800111c:	2b18      	cmp	r3, #24
 800111e:	d026      	beq.n	800116e <HAL_RCC_GetSysClockFreq+0x9a>
    sysclockfreq = 0U;
 8001120:	2000      	movs	r0, #0
  return sysclockfreq;
 8001122:	e7e4      	b.n	80010ee <HAL_RCC_GetSysClockFreq+0x1a>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001124:	4a16      	ldr	r2, [pc, #88]	; (8001180 <HAL_RCC_GetSysClockFreq+0xac>)
 8001126:	68d1      	ldr	r1, [r2, #12]
 8001128:	3b0d      	subs	r3, #13
 800112a:	400b      	ands	r3, r1
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800112c:	68d2      	ldr	r2, [r2, #12]
 800112e:	0912      	lsrs	r2, r2, #4
 8001130:	2107      	movs	r1, #7
 8001132:	4011      	ands	r1, r2
 8001134:	3101      	adds	r1, #1
    switch (pllsource)
 8001136:	2b03      	cmp	r3, #3
 8001138:	d00f      	beq.n	800115a <HAL_RCC_GetSysClockFreq+0x86>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800113a:	4812      	ldr	r0, [pc, #72]	; (8001184 <HAL_RCC_GetSysClockFreq+0xb0>)
 800113c:	f7fe ffe2 	bl	8000104 <__udivsi3>
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <HAL_RCC_GetSysClockFreq+0xac>)
 8001142:	68da      	ldr	r2, [r3, #12]
 8001144:	0a12      	lsrs	r2, r2, #8
 8001146:	237f      	movs	r3, #127	; 0x7f
 8001148:	4013      	ands	r3, r2
 800114a:	4358      	muls	r0, r3
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <HAL_RCC_GetSysClockFreq+0xac>)
 800114e:	68d9      	ldr	r1, [r3, #12]
 8001150:	0f49      	lsrs	r1, r1, #29
 8001152:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8001154:	f7fe ffd6 	bl	8000104 <__udivsi3>
 8001158:	e7c9      	b.n	80010ee <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800115a:	480b      	ldr	r0, [pc, #44]	; (8001188 <HAL_RCC_GetSysClockFreq+0xb4>)
 800115c:	f7fe ffd2 	bl	8000104 <__udivsi3>
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <HAL_RCC_GetSysClockFreq+0xac>)
 8001162:	68da      	ldr	r2, [r3, #12]
 8001164:	0a12      	lsrs	r2, r2, #8
 8001166:	237f      	movs	r3, #127	; 0x7f
 8001168:	4013      	ands	r3, r2
 800116a:	4358      	muls	r0, r3
        break;
 800116c:	e7ee      	b.n	800114c <HAL_RCC_GetSysClockFreq+0x78>
    sysclockfreq = LSI_VALUE;
 800116e:	20fa      	movs	r0, #250	; 0xfa
 8001170:	01c0      	lsls	r0, r0, #7
 8001172:	e7bc      	b.n	80010ee <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = HSE_VALUE;
 8001174:	4804      	ldr	r0, [pc, #16]	; (8001188 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001176:	e7ba      	b.n	80010ee <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = LSE_VALUE;
 8001178:	2080      	movs	r0, #128	; 0x80
 800117a:	0200      	lsls	r0, r0, #8
 800117c:	e7b7      	b.n	80010ee <HAL_RCC_GetSysClockFreq+0x1a>
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	40021000 	.word	0x40021000
 8001184:	00f42400 	.word	0x00f42400
 8001188:	007a1200 	.word	0x007a1200

0800118c <HAL_RCC_ClockConfig>:
{
 800118c:	b570      	push	{r4, r5, r6, lr}
 800118e:	0004      	movs	r4, r0
 8001190:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001192:	2800      	cmp	r0, #0
 8001194:	d100      	bne.n	8001198 <HAL_RCC_ClockConfig+0xc>
 8001196:	e0aa      	b.n	80012ee <HAL_RCC_ClockConfig+0x162>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001198:	4b57      	ldr	r3, [pc, #348]	; (80012f8 <HAL_RCC_ClockConfig+0x16c>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	2307      	movs	r3, #7
 800119e:	4013      	ands	r3, r2
 80011a0:	428b      	cmp	r3, r1
 80011a2:	d321      	bcc.n	80011e8 <HAL_RCC_ClockConfig+0x5c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011a4:	6823      	ldr	r3, [r4, #0]
 80011a6:	079a      	lsls	r2, r3, #30
 80011a8:	d50e      	bpl.n	80011c8 <HAL_RCC_ClockConfig+0x3c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011aa:	075b      	lsls	r3, r3, #29
 80011ac:	d505      	bpl.n	80011ba <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80011ae:	4a53      	ldr	r2, [pc, #332]	; (80012fc <HAL_RCC_ClockConfig+0x170>)
 80011b0:	6891      	ldr	r1, [r2, #8]
 80011b2:	23e0      	movs	r3, #224	; 0xe0
 80011b4:	01db      	lsls	r3, r3, #7
 80011b6:	430b      	orrs	r3, r1
 80011b8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011ba:	4a50      	ldr	r2, [pc, #320]	; (80012fc <HAL_RCC_ClockConfig+0x170>)
 80011bc:	6893      	ldr	r3, [r2, #8]
 80011be:	4950      	ldr	r1, [pc, #320]	; (8001300 <HAL_RCC_ClockConfig+0x174>)
 80011c0:	400b      	ands	r3, r1
 80011c2:	68a1      	ldr	r1, [r4, #8]
 80011c4:	430b      	orrs	r3, r1
 80011c6:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011c8:	6823      	ldr	r3, [r4, #0]
 80011ca:	07db      	lsls	r3, r3, #31
 80011cc:	d554      	bpl.n	8001278 <HAL_RCC_ClockConfig+0xec>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ce:	6863      	ldr	r3, [r4, #4]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d020      	beq.n	8001216 <HAL_RCC_ClockConfig+0x8a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d03b      	beq.n	8001250 <HAL_RCC_ClockConfig+0xc4>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d13f      	bne.n	800125c <HAL_RCC_ClockConfig+0xd0>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011dc:	4a47      	ldr	r2, [pc, #284]	; (80012fc <HAL_RCC_ClockConfig+0x170>)
 80011de:	6812      	ldr	r2, [r2, #0]
 80011e0:	0552      	lsls	r2, r2, #21
 80011e2:	d41c      	bmi.n	800121e <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 80011e4:	2001      	movs	r0, #1
 80011e6:	e06a      	b.n	80012be <HAL_RCC_ClockConfig+0x132>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011e8:	4a43      	ldr	r2, [pc, #268]	; (80012f8 <HAL_RCC_ClockConfig+0x16c>)
 80011ea:	6813      	ldr	r3, [r2, #0]
 80011ec:	2107      	movs	r1, #7
 80011ee:	438b      	bics	r3, r1
 80011f0:	432b      	orrs	r3, r5
 80011f2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80011f4:	f7ff fb8a 	bl	800090c <HAL_GetTick>
 80011f8:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011fa:	4b3f      	ldr	r3, [pc, #252]	; (80012f8 <HAL_RCC_ClockConfig+0x16c>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	2307      	movs	r3, #7
 8001200:	4013      	ands	r3, r2
 8001202:	42ab      	cmp	r3, r5
 8001204:	d0ce      	beq.n	80011a4 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001206:	f7ff fb81 	bl	800090c <HAL_GetTick>
 800120a:	1b80      	subs	r0, r0, r6
 800120c:	4a3d      	ldr	r2, [pc, #244]	; (8001304 <HAL_RCC_ClockConfig+0x178>)
 800120e:	4290      	cmp	r0, r2
 8001210:	d9f3      	bls.n	80011fa <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 8001212:	2003      	movs	r0, #3
 8001214:	e053      	b.n	80012be <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001216:	4a39      	ldr	r2, [pc, #228]	; (80012fc <HAL_RCC_ClockConfig+0x170>)
 8001218:	6812      	ldr	r2, [r2, #0]
 800121a:	0392      	lsls	r2, r2, #14
 800121c:	d569      	bpl.n	80012f2 <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800121e:	4937      	ldr	r1, [pc, #220]	; (80012fc <HAL_RCC_ClockConfig+0x170>)
 8001220:	688a      	ldr	r2, [r1, #8]
 8001222:	2007      	movs	r0, #7
 8001224:	4382      	bics	r2, r0
 8001226:	4313      	orrs	r3, r2
 8001228:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800122a:	f7ff fb6f 	bl	800090c <HAL_GetTick>
 800122e:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001230:	4b32      	ldr	r3, [pc, #200]	; (80012fc <HAL_RCC_ClockConfig+0x170>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	2238      	movs	r2, #56	; 0x38
 8001236:	401a      	ands	r2, r3
 8001238:	6863      	ldr	r3, [r4, #4]
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	429a      	cmp	r2, r3
 800123e:	d01b      	beq.n	8001278 <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001240:	f7ff fb64 	bl	800090c <HAL_GetTick>
 8001244:	1b80      	subs	r0, r0, r6
 8001246:	4b2f      	ldr	r3, [pc, #188]	; (8001304 <HAL_RCC_ClockConfig+0x178>)
 8001248:	4298      	cmp	r0, r3
 800124a:	d9f1      	bls.n	8001230 <HAL_RCC_ClockConfig+0xa4>
        return HAL_TIMEOUT;
 800124c:	2003      	movs	r0, #3
 800124e:	e036      	b.n	80012be <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001250:	4a2a      	ldr	r2, [pc, #168]	; (80012fc <HAL_RCC_ClockConfig+0x170>)
 8001252:	6812      	ldr	r2, [r2, #0]
 8001254:	0192      	lsls	r2, r2, #6
 8001256:	d4e2      	bmi.n	800121e <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8001258:	2001      	movs	r0, #1
 800125a:	e030      	b.n	80012be <HAL_RCC_ClockConfig+0x132>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800125c:	2b03      	cmp	r3, #3
 800125e:	d005      	beq.n	800126c <HAL_RCC_ClockConfig+0xe0>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001260:	4a26      	ldr	r2, [pc, #152]	; (80012fc <HAL_RCC_ClockConfig+0x170>)
 8001262:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001264:	0792      	lsls	r2, r2, #30
 8001266:	d4da      	bmi.n	800121e <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8001268:	2001      	movs	r0, #1
 800126a:	e028      	b.n	80012be <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800126c:	4a23      	ldr	r2, [pc, #140]	; (80012fc <HAL_RCC_ClockConfig+0x170>)
 800126e:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001270:	0792      	lsls	r2, r2, #30
 8001272:	d4d4      	bmi.n	800121e <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8001274:	2001      	movs	r0, #1
 8001276:	e022      	b.n	80012be <HAL_RCC_ClockConfig+0x132>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <HAL_RCC_ClockConfig+0x16c>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	2307      	movs	r3, #7
 800127e:	4013      	ands	r3, r2
 8001280:	42ab      	cmp	r3, r5
 8001282:	d81d      	bhi.n	80012c0 <HAL_RCC_ClockConfig+0x134>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001284:	6823      	ldr	r3, [r4, #0]
 8001286:	075b      	lsls	r3, r3, #29
 8001288:	d506      	bpl.n	8001298 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800128a:	4a1c      	ldr	r2, [pc, #112]	; (80012fc <HAL_RCC_ClockConfig+0x170>)
 800128c:	6893      	ldr	r3, [r2, #8]
 800128e:	491e      	ldr	r1, [pc, #120]	; (8001308 <HAL_RCC_ClockConfig+0x17c>)
 8001290:	400b      	ands	r3, r1
 8001292:	68e1      	ldr	r1, [r4, #12]
 8001294:	430b      	orrs	r3, r1
 8001296:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001298:	f7ff ff1c 	bl	80010d4 <HAL_RCC_GetSysClockFreq>
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <HAL_RCC_ClockConfig+0x170>)
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	0a12      	lsrs	r2, r2, #8
 80012a2:	230f      	movs	r3, #15
 80012a4:	4013      	ands	r3, r2
 80012a6:	4a19      	ldr	r2, [pc, #100]	; (800130c <HAL_RCC_ClockConfig+0x180>)
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	589a      	ldr	r2, [r3, r2]
 80012ac:	231f      	movs	r3, #31
 80012ae:	4013      	ands	r3, r2
 80012b0:	40d8      	lsrs	r0, r3
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <HAL_RCC_ClockConfig+0x184>)
 80012b4:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80012b6:	4b17      	ldr	r3, [pc, #92]	; (8001314 <HAL_RCC_ClockConfig+0x188>)
 80012b8:	6818      	ldr	r0, [r3, #0]
 80012ba:	f7ff fa73 	bl	80007a4 <HAL_InitTick>
}
 80012be:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012c0:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <HAL_RCC_ClockConfig+0x16c>)
 80012c2:	6813      	ldr	r3, [r2, #0]
 80012c4:	2107      	movs	r1, #7
 80012c6:	438b      	bics	r3, r1
 80012c8:	432b      	orrs	r3, r5
 80012ca:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80012cc:	f7ff fb1e 	bl	800090c <HAL_GetTick>
 80012d0:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <HAL_RCC_ClockConfig+0x16c>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	2307      	movs	r3, #7
 80012d8:	4013      	ands	r3, r2
 80012da:	42ab      	cmp	r3, r5
 80012dc:	d0d2      	beq.n	8001284 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012de:	f7ff fb15 	bl	800090c <HAL_GetTick>
 80012e2:	1b80      	subs	r0, r0, r6
 80012e4:	4b07      	ldr	r3, [pc, #28]	; (8001304 <HAL_RCC_ClockConfig+0x178>)
 80012e6:	4298      	cmp	r0, r3
 80012e8:	d9f3      	bls.n	80012d2 <HAL_RCC_ClockConfig+0x146>
        return HAL_TIMEOUT;
 80012ea:	2003      	movs	r0, #3
 80012ec:	e7e7      	b.n	80012be <HAL_RCC_ClockConfig+0x132>
    return HAL_ERROR;
 80012ee:	2001      	movs	r0, #1
 80012f0:	e7e5      	b.n	80012be <HAL_RCC_ClockConfig+0x132>
        return HAL_ERROR;
 80012f2:	2001      	movs	r0, #1
 80012f4:	e7e3      	b.n	80012be <HAL_RCC_ClockConfig+0x132>
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	40022000 	.word	0x40022000
 80012fc:	40021000 	.word	0x40021000
 8001300:	fffff0ff 	.word	0xfffff0ff
 8001304:	00001388 	.word	0x00001388
 8001308:	ffff8fff 	.word	0xffff8fff
 800130c:	080022d0 	.word	0x080022d0
 8001310:	20000000 	.word	0x20000000
 8001314:	20000008 	.word	0x20000008

08001318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001318:	4b01      	ldr	r3, [pc, #4]	; (8001320 <HAL_RCC_GetHCLKFreq+0x8>)
 800131a:	6818      	ldr	r0, [r3, #0]
}
 800131c:	4770      	bx	lr
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	20000000 	.word	0x20000000

08001324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001324:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001326:	f7ff fff7 	bl	8001318 <HAL_RCC_GetHCLKFreq>
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_RCC_GetPCLK1Freq+0x20>)
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	0b12      	lsrs	r2, r2, #12
 8001330:	2307      	movs	r3, #7
 8001332:	4013      	ands	r3, r2
 8001334:	4a04      	ldr	r2, [pc, #16]	; (8001348 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	589a      	ldr	r2, [r3, r2]
 800133a:	231f      	movs	r3, #31
 800133c:	4013      	ands	r3, r2
 800133e:	40d8      	lsrs	r0, r3
}
 8001340:	bd10      	pop	{r4, pc}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	40021000 	.word	0x40021000
 8001348:	08002310 	.word	0x08002310

0800134c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800134c:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800134e:	2307      	movs	r3, #7
 8001350:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001352:	4a09      	ldr	r2, [pc, #36]	; (8001378 <HAL_RCC_GetClockConfig+0x2c>)
 8001354:	6894      	ldr	r4, [r2, #8]
 8001356:	401c      	ands	r4, r3
 8001358:	6044      	str	r4, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800135a:	6894      	ldr	r4, [r2, #8]
 800135c:	25f0      	movs	r5, #240	; 0xf0
 800135e:	012d      	lsls	r5, r5, #4
 8001360:	402c      	ands	r4, r5
 8001362:	6084      	str	r4, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8001364:	6892      	ldr	r2, [r2, #8]
 8001366:	24e0      	movs	r4, #224	; 0xe0
 8001368:	01e4      	lsls	r4, r4, #7
 800136a:	4022      	ands	r2, r4
 800136c:	60c2      	str	r2, [r0, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800136e:	4a03      	ldr	r2, [pc, #12]	; (800137c <HAL_RCC_GetClockConfig+0x30>)
 8001370:	6812      	ldr	r2, [r2, #0]
 8001372:	4013      	ands	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
}
 8001376:	bd30      	pop	{r4, r5, pc}
 8001378:	40021000 	.word	0x40021000
 800137c:	40022000 	.word	0x40022000

08001380 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001382:	46d6      	mov	lr, sl
 8001384:	464f      	mov	r7, r9
 8001386:	4646      	mov	r6, r8
 8001388:	b5c0      	push	{r6, r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	0006      	movs	r6, r0
 800138e:	000d      	movs	r5, r1
 8001390:	4690      	mov	r8, r2
 8001392:	001f      	movs	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001394:	f7ff faba 	bl	800090c <HAL_GetTick>
 8001398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800139a:	1a18      	subs	r0, r3, r0
 800139c:	4681      	mov	r9, r0
 800139e:	44b9      	add	r9, r7
  tmp_tickstart = HAL_GetTick();
 80013a0:	f7ff fab4 	bl	800090c <HAL_GetTick>
 80013a4:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80013a6:	4b2e      	ldr	r3, [pc, #184]	; (8001460 <SPI_WaitFlagStateUntilTimeout+0xe0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	015b      	lsls	r3, r3, #5
 80013ac:	0d1b      	lsrs	r3, r3, #20
 80013ae:	464a      	mov	r2, r9
 80013b0:	4353      	muls	r3, r2
 80013b2:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80013b4:	6833      	ldr	r3, [r6, #0]
 80013b6:	689c      	ldr	r4, [r3, #8]
 80013b8:	402c      	ands	r4, r5
 80013ba:	1b64      	subs	r4, r4, r5
 80013bc:	4263      	negs	r3, r4
 80013be:	415c      	adcs	r4, r3
 80013c0:	4544      	cmp	r4, r8
 80013c2:	d045      	beq.n	8001450 <SPI_WaitFlagStateUntilTimeout+0xd0>
  {
    if (Timeout != HAL_MAX_DELAY)
 80013c4:	1c7b      	adds	r3, r7, #1
 80013c6:	d0f5      	beq.n	80013b4 <SPI_WaitFlagStateUntilTimeout+0x34>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80013c8:	f7ff faa0 	bl	800090c <HAL_GetTick>
 80013cc:	4653      	mov	r3, sl
 80013ce:	1ac0      	subs	r0, r0, r3
 80013d0:	4548      	cmp	r0, r9
 80013d2:	d20b      	bcs.n	80013ec <SPI_WaitFlagStateUntilTimeout+0x6c>
 80013d4:	464b      	mov	r3, r9
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d008      	beq.n	80013ec <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80013da:	9a01      	ldr	r2, [sp, #4]
 80013dc:	2a00      	cmp	r2, #0
 80013de:	d000      	beq.n	80013e2 <SPI_WaitFlagStateUntilTimeout+0x62>
 80013e0:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 80013e2:	9b01      	ldr	r3, [sp, #4]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	4691      	mov	r9, r2
 80013ea:	e7e3      	b.n	80013b4 <SPI_WaitFlagStateUntilTimeout+0x34>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80013ec:	6832      	ldr	r2, [r6, #0]
 80013ee:	6853      	ldr	r3, [r2, #4]
 80013f0:	21e0      	movs	r1, #224	; 0xe0
 80013f2:	438b      	bics	r3, r1
 80013f4:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80013f6:	6872      	ldr	r2, [r6, #4]
 80013f8:	2382      	movs	r3, #130	; 0x82
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d00c      	beq.n	800141a <SPI_WaitFlagStateUntilTimeout+0x9a>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001400:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8001402:	2380      	movs	r3, #128	; 0x80
 8001404:	019b      	lsls	r3, r3, #6
 8001406:	429a      	cmp	r2, r3
 8001408:	d016      	beq.n	8001438 <SPI_WaitFlagStateUntilTimeout+0xb8>
        hspi->State = HAL_SPI_STATE_READY;
 800140a:	235d      	movs	r3, #93	; 0x5d
 800140c:	2201      	movs	r2, #1
 800140e:	54f2      	strb	r2, [r6, r3]
        __HAL_UNLOCK(hspi);
 8001410:	3b01      	subs	r3, #1
 8001412:	2200      	movs	r2, #0
 8001414:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8001416:	2003      	movs	r0, #3
 8001418:	e01b      	b.n	8001452 <SPI_WaitFlagStateUntilTimeout+0xd2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800141a:	68b3      	ldr	r3, [r6, #8]
 800141c:	2280      	movs	r2, #128	; 0x80
 800141e:	0212      	lsls	r2, r2, #8
 8001420:	4293      	cmp	r3, r2
 8001422:	d003      	beq.n	800142c <SPI_WaitFlagStateUntilTimeout+0xac>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001424:	2280      	movs	r2, #128	; 0x80
 8001426:	00d2      	lsls	r2, r2, #3
 8001428:	4293      	cmp	r3, r2
 800142a:	d1e9      	bne.n	8001400 <SPI_WaitFlagStateUntilTimeout+0x80>
          __HAL_SPI_DISABLE(hspi);
 800142c:	6832      	ldr	r2, [r6, #0]
 800142e:	6813      	ldr	r3, [r2, #0]
 8001430:	2140      	movs	r1, #64	; 0x40
 8001432:	438b      	bics	r3, r1
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e7e3      	b.n	8001400 <SPI_WaitFlagStateUntilTimeout+0x80>
          SPI_RESET_CRC(hspi);
 8001438:	6832      	ldr	r2, [r6, #0]
 800143a:	6813      	ldr	r3, [r2, #0]
 800143c:	4909      	ldr	r1, [pc, #36]	; (8001464 <SPI_WaitFlagStateUntilTimeout+0xe4>)
 800143e:	400b      	ands	r3, r1
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	6832      	ldr	r2, [r6, #0]
 8001444:	6811      	ldr	r1, [r2, #0]
 8001446:	2380      	movs	r3, #128	; 0x80
 8001448:	019b      	lsls	r3, r3, #6
 800144a:	430b      	orrs	r3, r1
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	e7dc      	b.n	800140a <SPI_WaitFlagStateUntilTimeout+0x8a>
    }
  }

  return HAL_OK;
 8001450:	2000      	movs	r0, #0
}
 8001452:	b002      	add	sp, #8
 8001454:	bce0      	pop	{r5, r6, r7}
 8001456:	46ba      	mov	sl, r7
 8001458:	46b1      	mov	r9, r6
 800145a:	46a8      	mov	r8, r5
 800145c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	20000000 	.word	0x20000000
 8001464:	ffffdfff 	.word	0xffffdfff

08001468 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146a:	46de      	mov	lr, fp
 800146c:	4657      	mov	r7, sl
 800146e:	464e      	mov	r6, r9
 8001470:	4645      	mov	r5, r8
 8001472:	b5e0      	push	{r5, r6, r7, lr}
 8001474:	b083      	sub	sp, #12
 8001476:	0007      	movs	r7, r0
 8001478:	000d      	movs	r5, r1
 800147a:	0016      	movs	r6, r2
 800147c:	4698      	mov	r8, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800147e:	466b      	mov	r3, sp
 8001480:	2200      	movs	r2, #0
 8001482:	70da      	strb	r2, [r3, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001484:	f7ff fa42 	bl	800090c <HAL_GetTick>
 8001488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800148a:	1a18      	subs	r0, r3, r0
 800148c:	4440      	add	r0, r8
 800148e:	4681      	mov	r9, r0
  tmp_tickstart = HAL_GetTick();
 8001490:	f7ff fa3c 	bl	800090c <HAL_GetTick>
 8001494:	4682      	mov	sl, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	469b      	mov	fp, r3

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800149a:	4b36      	ldr	r3, [pc, #216]	; (8001574 <SPI_WaitFifoStateUntilTimeout+0x10c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	009a      	lsls	r2, r3, #2
 80014a0:	18d2      	adds	r2, r2, r3
 80014a2:	00d3      	lsls	r3, r2, #3
 80014a4:	1a9b      	subs	r3, r3, r2
 80014a6:	0d1b      	lsrs	r3, r3, #20
 80014a8:	464a      	mov	r2, r9
 80014aa:	4353      	muls	r3, r2
 80014ac:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 80014ae:	e002      	b.n	80014b6 <SPI_WaitFifoStateUntilTimeout+0x4e>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 80014b0:	4643      	mov	r3, r8
 80014b2:	3301      	adds	r3, #1
 80014b4:	d111      	bne.n	80014da <SPI_WaitFifoStateUntilTimeout+0x72>
  while ((hspi->Instance->SR & Fifo) != State)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	689c      	ldr	r4, [r3, #8]
 80014ba:	402c      	ands	r4, r5
 80014bc:	42b4      	cmp	r4, r6
 80014be:	d050      	beq.n	8001562 <SPI_WaitFifoStateUntilTimeout+0xfa>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80014c0:	23c0      	movs	r3, #192	; 0xc0
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	429d      	cmp	r5, r3
 80014c6:	d1f3      	bne.n	80014b0 <SPI_WaitFifoStateUntilTimeout+0x48>
 80014c8:	2e00      	cmp	r6, #0
 80014ca:	d1f1      	bne.n	80014b0 <SPI_WaitFifoStateUntilTimeout+0x48>
      tmpreg8 = *ptmpreg8;
 80014cc:	465b      	mov	r3, fp
 80014ce:	7b1b      	ldrb	r3, [r3, #12]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	466a      	mov	r2, sp
 80014d4:	70d3      	strb	r3, [r2, #3]
      UNUSED(tmpreg8);
 80014d6:	78d3      	ldrb	r3, [r2, #3]
 80014d8:	e7ea      	b.n	80014b0 <SPI_WaitFifoStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80014da:	f7ff fa17 	bl	800090c <HAL_GetTick>
 80014de:	4653      	mov	r3, sl
 80014e0:	1ac0      	subs	r0, r0, r3
 80014e2:	4548      	cmp	r0, r9
 80014e4:	d20b      	bcs.n	80014fe <SPI_WaitFifoStateUntilTimeout+0x96>
 80014e6:	464b      	mov	r3, r9
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d008      	beq.n	80014fe <SPI_WaitFifoStateUntilTimeout+0x96>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80014ec:	9a01      	ldr	r2, [sp, #4]
 80014ee:	2a00      	cmp	r2, #0
 80014f0:	d000      	beq.n	80014f4 <SPI_WaitFifoStateUntilTimeout+0x8c>
 80014f2:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 80014f4:	9b01      	ldr	r3, [sp, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	9301      	str	r3, [sp, #4]
 80014fa:	4691      	mov	r9, r2
 80014fc:	e7db      	b.n	80014b6 <SPI_WaitFifoStateUntilTimeout+0x4e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	6853      	ldr	r3, [r2, #4]
 8001502:	21e0      	movs	r1, #224	; 0xe0
 8001504:	438b      	bics	r3, r1
 8001506:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	2382      	movs	r3, #130	; 0x82
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	429a      	cmp	r2, r3
 8001510:	d00c      	beq.n	800152c <SPI_WaitFifoStateUntilTimeout+0xc4>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001512:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001514:	2380      	movs	r3, #128	; 0x80
 8001516:	019b      	lsls	r3, r3, #6
 8001518:	429a      	cmp	r2, r3
 800151a:	d016      	beq.n	800154a <SPI_WaitFifoStateUntilTimeout+0xe2>
        hspi->State = HAL_SPI_STATE_READY;
 800151c:	235d      	movs	r3, #93	; 0x5d
 800151e:	2201      	movs	r2, #1
 8001520:	54fa      	strb	r2, [r7, r3]
        __HAL_UNLOCK(hspi);
 8001522:	3b01      	subs	r3, #1
 8001524:	2200      	movs	r2, #0
 8001526:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 8001528:	2003      	movs	r0, #3
 800152a:	e01b      	b.n	8001564 <SPI_WaitFifoStateUntilTimeout+0xfc>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	2280      	movs	r2, #128	; 0x80
 8001530:	0212      	lsls	r2, r2, #8
 8001532:	4293      	cmp	r3, r2
 8001534:	d003      	beq.n	800153e <SPI_WaitFifoStateUntilTimeout+0xd6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001536:	2280      	movs	r2, #128	; 0x80
 8001538:	00d2      	lsls	r2, r2, #3
 800153a:	4293      	cmp	r3, r2
 800153c:	d1e9      	bne.n	8001512 <SPI_WaitFifoStateUntilTimeout+0xaa>
          __HAL_SPI_DISABLE(hspi);
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	6813      	ldr	r3, [r2, #0]
 8001542:	2140      	movs	r1, #64	; 0x40
 8001544:	438b      	bics	r3, r1
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	e7e3      	b.n	8001512 <SPI_WaitFifoStateUntilTimeout+0xaa>
          SPI_RESET_CRC(hspi);
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	6813      	ldr	r3, [r2, #0]
 800154e:	490a      	ldr	r1, [pc, #40]	; (8001578 <SPI_WaitFifoStateUntilTimeout+0x110>)
 8001550:	400b      	ands	r3, r1
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	6811      	ldr	r1, [r2, #0]
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	019b      	lsls	r3, r3, #6
 800155c:	430b      	orrs	r3, r1
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	e7dc      	b.n	800151c <SPI_WaitFifoStateUntilTimeout+0xb4>
    }
  }

  return HAL_OK;
 8001562:	2000      	movs	r0, #0
}
 8001564:	b003      	add	sp, #12
 8001566:	bcf0      	pop	{r4, r5, r6, r7}
 8001568:	46bb      	mov	fp, r7
 800156a:	46b2      	mov	sl, r6
 800156c:	46a9      	mov	r9, r5
 800156e:	46a0      	mov	r8, r4
 8001570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	20000000 	.word	0x20000000
 8001578:	ffffdfff 	.word	0xffffdfff

0800157c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800157c:	b570      	push	{r4, r5, r6, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	0004      	movs	r4, r0
 8001582:	000d      	movs	r5, r1
 8001584:	0016      	movs	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001586:	21c0      	movs	r1, #192	; 0xc0
 8001588:	9200      	str	r2, [sp, #0]
 800158a:	002b      	movs	r3, r5
 800158c:	2200      	movs	r2, #0
 800158e:	0149      	lsls	r1, r1, #5
 8001590:	f7ff ff6a 	bl	8001468 <SPI_WaitFifoStateUntilTimeout>
 8001594:	2800      	cmp	r0, #0
 8001596:	d118      	bne.n	80015ca <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001598:	9600      	str	r6, [sp, #0]
 800159a:	002b      	movs	r3, r5
 800159c:	2200      	movs	r2, #0
 800159e:	2180      	movs	r1, #128	; 0x80
 80015a0:	0020      	movs	r0, r4
 80015a2:	f7ff feed 	bl	8001380 <SPI_WaitFlagStateUntilTimeout>
 80015a6:	2800      	cmp	r0, #0
 80015a8:	d116      	bne.n	80015d8 <SPI_EndRxTxTransaction+0x5c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80015aa:	21c0      	movs	r1, #192	; 0xc0
 80015ac:	9600      	str	r6, [sp, #0]
 80015ae:	002b      	movs	r3, r5
 80015b0:	2200      	movs	r2, #0
 80015b2:	00c9      	lsls	r1, r1, #3
 80015b4:	0020      	movs	r0, r4
 80015b6:	f7ff ff57 	bl	8001468 <SPI_WaitFifoStateUntilTimeout>
 80015ba:	2800      	cmp	r0, #0
 80015bc:	d00a      	beq.n	80015d4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80015be:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80015c0:	2220      	movs	r2, #32
 80015c2:	4313      	orrs	r3, r2
 80015c4:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80015c6:	2003      	movs	r0, #3
 80015c8:	e004      	b.n	80015d4 <SPI_EndRxTxTransaction+0x58>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80015ca:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80015cc:	2220      	movs	r2, #32
 80015ce:	4313      	orrs	r3, r2
 80015d0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80015d2:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 80015d4:	b002      	add	sp, #8
 80015d6:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80015d8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80015da:	2220      	movs	r2, #32
 80015dc:	4313      	orrs	r3, r2
 80015de:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80015e0:	2003      	movs	r0, #3
 80015e2:	e7f7      	b.n	80015d4 <SPI_EndRxTxTransaction+0x58>

080015e4 <HAL_SPI_Init>:
{
 80015e4:	b570      	push	{r4, r5, r6, lr}
 80015e6:	1e04      	subs	r4, r0, #0
  if (hspi == NULL)
 80015e8:	d100      	bne.n	80015ec <HAL_SPI_Init+0x8>
 80015ea:	e078      	b.n	80016de <HAL_SPI_Init+0xfa>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80015ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d107      	bne.n	8001602 <HAL_SPI_Init+0x1e>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80015f2:	6842      	ldr	r2, [r0, #4]
 80015f4:	3305      	adds	r3, #5
 80015f6:	33ff      	adds	r3, #255	; 0xff
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d005      	beq.n	8001608 <HAL_SPI_Init+0x24>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61c3      	str	r3, [r0, #28]
 8001600:	e002      	b.n	8001608 <HAL_SPI_Init+0x24>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001606:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800160c:	335d      	adds	r3, #93	; 0x5d
 800160e:	5ce3      	ldrb	r3, [r4, r3]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d05a      	beq.n	80016ca <HAL_SPI_Init+0xe6>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001614:	235d      	movs	r3, #93	; 0x5d
 8001616:	2202      	movs	r2, #2
 8001618:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 800161a:	6822      	ldr	r2, [r4, #0]
 800161c:	6813      	ldr	r3, [r2, #0]
 800161e:	2140      	movs	r1, #64	; 0x40
 8001620:	438b      	bics	r3, r1
 8001622:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001624:	68e3      	ldr	r3, [r4, #12]
 8001626:	22e0      	movs	r2, #224	; 0xe0
 8001628:	00d2      	lsls	r2, r2, #3
 800162a:	4293      	cmp	r3, r2
 800162c:	d954      	bls.n	80016d8 <HAL_SPI_Init+0xf4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800162e:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001630:	21f0      	movs	r1, #240	; 0xf0
 8001632:	0109      	lsls	r1, r1, #4
 8001634:	428b      	cmp	r3, r1
 8001636:	d005      	beq.n	8001644 <HAL_SPI_Init+0x60>
 8001638:	21e0      	movs	r1, #224	; 0xe0
 800163a:	00c9      	lsls	r1, r1, #3
 800163c:	428b      	cmp	r3, r1
 800163e:	d001      	beq.n	8001644 <HAL_SPI_Init+0x60>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001640:	2300      	movs	r3, #0
 8001642:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001644:	6863      	ldr	r3, [r4, #4]
 8001646:	2182      	movs	r1, #130	; 0x82
 8001648:	0049      	lsls	r1, r1, #1
 800164a:	400b      	ands	r3, r1
 800164c:	68a1      	ldr	r1, [r4, #8]
 800164e:	2084      	movs	r0, #132	; 0x84
 8001650:	0200      	lsls	r0, r0, #8
 8001652:	4001      	ands	r1, r0
 8001654:	430b      	orrs	r3, r1
 8001656:	6920      	ldr	r0, [r4, #16]
 8001658:	2102      	movs	r1, #2
 800165a:	4001      	ands	r1, r0
 800165c:	430b      	orrs	r3, r1
 800165e:	6960      	ldr	r0, [r4, #20]
 8001660:	2101      	movs	r1, #1
 8001662:	4008      	ands	r0, r1
 8001664:	4303      	orrs	r3, r0
 8001666:	69a0      	ldr	r0, [r4, #24]
 8001668:	2580      	movs	r5, #128	; 0x80
 800166a:	00ad      	lsls	r5, r5, #2
 800166c:	4028      	ands	r0, r5
 800166e:	4303      	orrs	r3, r0
 8001670:	69e5      	ldr	r5, [r4, #28]
 8001672:	2038      	movs	r0, #56	; 0x38
 8001674:	4028      	ands	r0, r5
 8001676:	4303      	orrs	r3, r0
 8001678:	6a25      	ldr	r5, [r4, #32]
 800167a:	2080      	movs	r0, #128	; 0x80
 800167c:	4028      	ands	r0, r5
 800167e:	4303      	orrs	r3, r0
 8001680:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001682:	2580      	movs	r5, #128	; 0x80
 8001684:	01ad      	lsls	r5, r5, #6
 8001686:	4028      	ands	r0, r5
 8001688:	6825      	ldr	r5, [r4, #0]
 800168a:	4303      	orrs	r3, r0
 800168c:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800168e:	8b60      	ldrh	r0, [r4, #26]
 8001690:	2304      	movs	r3, #4
 8001692:	4003      	ands	r3, r0
 8001694:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001696:	2010      	movs	r0, #16
 8001698:	4028      	ands	r0, r5
 800169a:	4303      	orrs	r3, r0
 800169c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800169e:	2008      	movs	r0, #8
 80016a0:	4028      	ands	r0, r5
 80016a2:	4303      	orrs	r3, r0
 80016a4:	68e0      	ldr	r0, [r4, #12]
 80016a6:	25f0      	movs	r5, #240	; 0xf0
 80016a8:	012d      	lsls	r5, r5, #4
 80016aa:	4028      	ands	r0, r5
 80016ac:	4303      	orrs	r3, r0
 80016ae:	6820      	ldr	r0, [r4, #0]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	6043      	str	r3, [r0, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80016b4:	6822      	ldr	r2, [r4, #0]
 80016b6:	69d3      	ldr	r3, [r2, #28]
 80016b8:	480a      	ldr	r0, [pc, #40]	; (80016e4 <HAL_SPI_Init+0x100>)
 80016ba:	4003      	ands	r3, r0
 80016bc:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016be:	2300      	movs	r3, #0
 80016c0:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80016c2:	335d      	adds	r3, #93	; 0x5d
 80016c4:	54e1      	strb	r1, [r4, r3]
  return HAL_OK;
 80016c6:	2000      	movs	r0, #0
}
 80016c8:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 80016ca:	335c      	adds	r3, #92	; 0x5c
 80016cc:	2200      	movs	r2, #0
 80016ce:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 80016d0:	0020      	movs	r0, r4
 80016d2:	f7ff f80d 	bl	80006f0 <HAL_SPI_MspInit>
 80016d6:	e79d      	b.n	8001614 <HAL_SPI_Init+0x30>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80016d8:	2280      	movs	r2, #128	; 0x80
 80016da:	0152      	lsls	r2, r2, #5
 80016dc:	e7a8      	b.n	8001630 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 80016de:	2001      	movs	r0, #1
 80016e0:	e7f2      	b.n	80016c8 <HAL_SPI_Init+0xe4>
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	fffff7ff 	.word	0xfffff7ff

080016e8 <HAL_SPI_Transmit>:
{
 80016e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ea:	46ce      	mov	lr, r9
 80016ec:	b500      	push	{lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	0004      	movs	r4, r0
 80016f2:	9101      	str	r1, [sp, #4]
 80016f4:	4691      	mov	r9, r2
 80016f6:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 80016f8:	235c      	movs	r3, #92	; 0x5c
 80016fa:	5cc3      	ldrb	r3, [r0, r3]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d100      	bne.n	8001702 <HAL_SPI_Transmit+0x1a>
 8001700:	e0cb      	b.n	800189a <HAL_SPI_Transmit+0x1b2>
 8001702:	235c      	movs	r3, #92	; 0x5c
 8001704:	2201      	movs	r2, #1
 8001706:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8001708:	f7ff f900 	bl	800090c <HAL_GetTick>
 800170c:	0006      	movs	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800170e:	235d      	movs	r3, #93	; 0x5d
 8001710:	5ce3      	ldrb	r3, [r4, r3]
 8001712:	b2df      	uxtb	r7, r3
 8001714:	2b01      	cmp	r3, #1
 8001716:	d000      	beq.n	800171a <HAL_SPI_Transmit+0x32>
 8001718:	e0b6      	b.n	8001888 <HAL_SPI_Transmit+0x1a0>
  if ((pData == NULL) || (Size == 0U))
 800171a:	9901      	ldr	r1, [sp, #4]
 800171c:	2900      	cmp	r1, #0
 800171e:	d100      	bne.n	8001722 <HAL_SPI_Transmit+0x3a>
 8001720:	e0b3      	b.n	800188a <HAL_SPI_Transmit+0x1a2>
 8001722:	464b      	mov	r3, r9
 8001724:	2b00      	cmp	r3, #0
 8001726:	d100      	bne.n	800172a <HAL_SPI_Transmit+0x42>
 8001728:	e0af      	b.n	800188a <HAL_SPI_Transmit+0x1a2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800172a:	235d      	movs	r3, #93	; 0x5d
 800172c:	2203      	movs	r2, #3
 800172e:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001730:	2300      	movs	r3, #0
 8001732:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001734:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001736:	464a      	mov	r2, r9
 8001738:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800173a:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800173c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800173e:	2244      	movs	r2, #68	; 0x44
 8001740:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 8001742:	3202      	adds	r2, #2
 8001744:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 8001746:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001748:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800174a:	68a2      	ldr	r2, [r4, #8]
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	021b      	lsls	r3, r3, #8
 8001750:	429a      	cmp	r2, r3
 8001752:	d01e      	beq.n	8001792 <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001754:	6822      	ldr	r2, [r4, #0]
 8001756:	6813      	ldr	r3, [r2, #0]
 8001758:	065b      	lsls	r3, r3, #25
 800175a:	d403      	bmi.n	8001764 <HAL_SPI_Transmit+0x7c>
    __HAL_SPI_ENABLE(hspi);
 800175c:	6813      	ldr	r3, [r2, #0]
 800175e:	2140      	movs	r1, #64	; 0x40
 8001760:	430b      	orrs	r3, r1
 8001762:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001764:	68e2      	ldr	r2, [r4, #12]
 8001766:	23e0      	movs	r3, #224	; 0xe0
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	429a      	cmp	r2, r3
 800176c:	d93e      	bls.n	80017ec <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800176e:	6863      	ldr	r3, [r4, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d002      	beq.n	800177a <HAL_SPI_Transmit+0x92>
 8001774:	464b      	mov	r3, r9
 8001776:	2b01      	cmp	r3, #1
 8001778:	d120      	bne.n	80017bc <HAL_SPI_Transmit+0xd4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800177a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800177c:	6823      	ldr	r3, [r4, #0]
 800177e:	8812      	ldrh	r2, [r2, #0]
 8001780:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001782:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001784:	3302      	adds	r3, #2
 8001786:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8001788:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800178a:	3b01      	subs	r3, #1
 800178c:	b29b      	uxth	r3, r3
 800178e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001790:	e014      	b.n	80017bc <HAL_SPI_Transmit+0xd4>
    __HAL_SPI_DISABLE(hspi);
 8001792:	6822      	ldr	r2, [r4, #0]
 8001794:	6813      	ldr	r3, [r2, #0]
 8001796:	2140      	movs	r1, #64	; 0x40
 8001798:	438b      	bics	r3, r1
 800179a:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800179c:	6822      	ldr	r2, [r4, #0]
 800179e:	6811      	ldr	r1, [r2, #0]
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	01db      	lsls	r3, r3, #7
 80017a4:	430b      	orrs	r3, r1
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	e7d4      	b.n	8001754 <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80017aa:	f7ff f8af 	bl	800090c <HAL_GetTick>
 80017ae:	1b80      	subs	r0, r0, r6
 80017b0:	42a8      	cmp	r0, r5
 80017b2:	d301      	bcc.n	80017b8 <HAL_SPI_Transmit+0xd0>
 80017b4:	1c6b      	adds	r3, r5, #1
 80017b6:	d114      	bne.n	80017e2 <HAL_SPI_Transmit+0xfa>
 80017b8:	2d00      	cmp	r5, #0
 80017ba:	d012      	beq.n	80017e2 <HAL_SPI_Transmit+0xfa>
    while (hspi->TxXferCount > 0U)
 80017bc:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80017be:	b289      	uxth	r1, r1
 80017c0:	2900      	cmp	r1, #0
 80017c2:	d046      	beq.n	8001852 <HAL_SPI_Transmit+0x16a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80017c4:	6822      	ldr	r2, [r4, #0]
 80017c6:	6893      	ldr	r3, [r2, #8]
 80017c8:	079b      	lsls	r3, r3, #30
 80017ca:	d5ee      	bpl.n	80017aa <HAL_SPI_Transmit+0xc2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80017cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	60d3      	str	r3, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80017d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80017d4:	3302      	adds	r3, #2
 80017d6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80017d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80017da:	3b01      	subs	r3, #1
 80017dc:	b29b      	uxth	r3, r3
 80017de:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80017e0:	e7ec      	b.n	80017bc <HAL_SPI_Transmit+0xd4>
          hspi->State = HAL_SPI_STATE_READY;
 80017e2:	235d      	movs	r3, #93	; 0x5d
 80017e4:	2201      	movs	r2, #1
 80017e6:	54e2      	strb	r2, [r4, r3]
          errorcode = HAL_TIMEOUT;
 80017e8:	2703      	movs	r7, #3
          goto error;
 80017ea:	e04e      	b.n	800188a <HAL_SPI_Transmit+0x1a2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80017ec:	6863      	ldr	r3, [r4, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d002      	beq.n	80017f8 <HAL_SPI_Transmit+0x110>
 80017f2:	464b      	mov	r3, r9
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d114      	bne.n	8001822 <HAL_SPI_Transmit+0x13a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80017f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80017fa:	6823      	ldr	r3, [r4, #0]
 80017fc:	7812      	ldrb	r2, [r2, #0]
 80017fe:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001800:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001802:	3301      	adds	r3, #1
 8001804:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8001806:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001808:	3b01      	subs	r3, #1
 800180a:	b29b      	uxth	r3, r3
 800180c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800180e:	e008      	b.n	8001822 <HAL_SPI_Transmit+0x13a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001810:	f7ff f87c 	bl	800090c <HAL_GetTick>
 8001814:	1b80      	subs	r0, r0, r6
 8001816:	42a8      	cmp	r0, r5
 8001818:	d301      	bcc.n	800181e <HAL_SPI_Transmit+0x136>
 800181a:	1c6b      	adds	r3, r5, #1
 800181c:	d114      	bne.n	8001848 <HAL_SPI_Transmit+0x160>
 800181e:	2d00      	cmp	r5, #0
 8001820:	d012      	beq.n	8001848 <HAL_SPI_Transmit+0x160>
    while (hspi->TxXferCount > 0U)
 8001822:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8001824:	b289      	uxth	r1, r1
 8001826:	2900      	cmp	r1, #0
 8001828:	d013      	beq.n	8001852 <HAL_SPI_Transmit+0x16a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800182a:	6822      	ldr	r2, [r4, #0]
 800182c:	6893      	ldr	r3, [r2, #8]
 800182e:	079b      	lsls	r3, r3, #30
 8001830:	d5ee      	bpl.n	8001810 <HAL_SPI_Transmit+0x128>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001832:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001838:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800183a:	3301      	adds	r3, #1
 800183c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800183e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001840:	3b01      	subs	r3, #1
 8001842:	b29b      	uxth	r3, r3
 8001844:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001846:	e7ec      	b.n	8001822 <HAL_SPI_Transmit+0x13a>
          hspi->State = HAL_SPI_STATE_READY;
 8001848:	235d      	movs	r3, #93	; 0x5d
 800184a:	2201      	movs	r2, #1
 800184c:	54e2      	strb	r2, [r4, r3]
          errorcode = HAL_TIMEOUT;
 800184e:	2703      	movs	r7, #3
          goto error;
 8001850:	e01b      	b.n	800188a <HAL_SPI_Transmit+0x1a2>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001852:	0032      	movs	r2, r6
 8001854:	0029      	movs	r1, r5
 8001856:	0020      	movs	r0, r4
 8001858:	f7ff fe90 	bl	800157c <SPI_EndRxTxTransaction>
 800185c:	2800      	cmp	r0, #0
 800185e:	d001      	beq.n	8001864 <HAL_SPI_Transmit+0x17c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001860:	2320      	movs	r3, #32
 8001862:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001864:	68a3      	ldr	r3, [r4, #8]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d106      	bne.n	8001878 <HAL_SPI_Transmit+0x190>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800186a:	9303      	str	r3, [sp, #12]
 800186c:	6823      	ldr	r3, [r4, #0]
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	9203      	str	r2, [sp, #12]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	9303      	str	r3, [sp, #12]
 8001876:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001878:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800187a:	2b00      	cmp	r3, #0
 800187c:	d105      	bne.n	800188a <HAL_SPI_Transmit+0x1a2>
    hspi->State = HAL_SPI_STATE_READY;
 800187e:	335d      	adds	r3, #93	; 0x5d
 8001880:	2201      	movs	r2, #1
 8001882:	54e2      	strb	r2, [r4, r3]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001884:	2700      	movs	r7, #0
 8001886:	e000      	b.n	800188a <HAL_SPI_Transmit+0x1a2>
    errorcode = HAL_BUSY;
 8001888:	2702      	movs	r7, #2
  __HAL_UNLOCK(hspi);
 800188a:	235c      	movs	r3, #92	; 0x5c
 800188c:	2200      	movs	r2, #0
 800188e:	54e2      	strb	r2, [r4, r3]
}
 8001890:	0038      	movs	r0, r7
 8001892:	b004      	add	sp, #16
 8001894:	bc80      	pop	{r7}
 8001896:	46b9      	mov	r9, r7
 8001898:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 800189a:	2702      	movs	r7, #2
 800189c:	e7f8      	b.n	8001890 <HAL_SPI_Transmit+0x1a8>

0800189e <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800189e:	4770      	bx	lr

080018a0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018a0:	233d      	movs	r3, #61	; 0x3d
 80018a2:	5cc3      	ldrb	r3, [r0, r3]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d12c      	bne.n	8001902 <HAL_TIM_Base_Start_IT+0x62>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018a8:	333c      	adds	r3, #60	; 0x3c
 80018aa:	2202      	movs	r2, #2
 80018ac:	54c2      	strb	r2, [r0, r3]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018ae:	6802      	ldr	r2, [r0, #0]
 80018b0:	68d3      	ldr	r3, [r2, #12]
 80018b2:	2101      	movs	r1, #1
 80018b4:	430b      	orrs	r3, r1
 80018b6:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018b8:	6803      	ldr	r3, [r0, #0]
 80018ba:	4a15      	ldr	r2, [pc, #84]	; (8001910 <HAL_TIM_Base_Start_IT+0x70>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d012      	beq.n	80018e6 <HAL_TIM_Base_Start_IT+0x46>
 80018c0:	2280      	movs	r2, #128	; 0x80
 80018c2:	05d2      	lsls	r2, r2, #23
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d00e      	beq.n	80018e6 <HAL_TIM_Base_Start_IT+0x46>
 80018c8:	4a12      	ldr	r2, [pc, #72]	; (8001914 <HAL_TIM_Base_Start_IT+0x74>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d00b      	beq.n	80018e6 <HAL_TIM_Base_Start_IT+0x46>
 80018ce:	4a12      	ldr	r2, [pc, #72]	; (8001918 <HAL_TIM_Base_Start_IT+0x78>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d008      	beq.n	80018e6 <HAL_TIM_Base_Start_IT+0x46>
 80018d4:	4a11      	ldr	r2, [pc, #68]	; (800191c <HAL_TIM_Base_Start_IT+0x7c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d005      	beq.n	80018e6 <HAL_TIM_Base_Start_IT+0x46>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	2101      	movs	r1, #1
 80018de:	430a      	orrs	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018e2:	2000      	movs	r0, #0
 80018e4:	e00e      	b.n	8001904 <HAL_TIM_Base_Start_IT+0x64>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	490d      	ldr	r1, [pc, #52]	; (8001920 <HAL_TIM_Base_Start_IT+0x80>)
 80018ea:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018ec:	2a06      	cmp	r2, #6
 80018ee:	d00a      	beq.n	8001906 <HAL_TIM_Base_Start_IT+0x66>
 80018f0:	3907      	subs	r1, #7
 80018f2:	428a      	cmp	r2, r1
 80018f4:	d009      	beq.n	800190a <HAL_TIM_Base_Start_IT+0x6a>
      __HAL_TIM_ENABLE(htim);
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	2101      	movs	r1, #1
 80018fa:	430a      	orrs	r2, r1
 80018fc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80018fe:	2000      	movs	r0, #0
 8001900:	e000      	b.n	8001904 <HAL_TIM_Base_Start_IT+0x64>
    return HAL_ERROR;
 8001902:	2001      	movs	r0, #1
}
 8001904:	4770      	bx	lr
  return HAL_OK;
 8001906:	2000      	movs	r0, #0
 8001908:	e7fc      	b.n	8001904 <HAL_TIM_Base_Start_IT+0x64>
 800190a:	2000      	movs	r0, #0
 800190c:	e7fa      	b.n	8001904 <HAL_TIM_Base_Start_IT+0x64>
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	40012c00 	.word	0x40012c00
 8001914:	40000400 	.word	0x40000400
 8001918:	40000800 	.word	0x40000800
 800191c:	40014000 	.word	0x40014000
 8001920:	00010007 	.word	0x00010007

08001924 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001924:	4770      	bx	lr

08001926 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001926:	4770      	bx	lr

08001928 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001928:	4770      	bx	lr

0800192a <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800192a:	4770      	bx	lr

0800192c <HAL_TIM_IRQHandler>:
{
 800192c:	b570      	push	{r4, r5, r6, lr}
 800192e:	0005      	movs	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 8001930:	6803      	ldr	r3, [r0, #0]
 8001932:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001934:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001936:	07a2      	lsls	r2, r4, #30
 8001938:	d50e      	bpl.n	8001958 <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800193a:	07b2      	lsls	r2, r6, #30
 800193c:	d50c      	bpl.n	8001958 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800193e:	2203      	movs	r2, #3
 8001940:	4252      	negs	r2, r2
 8001942:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001944:	2301      	movs	r3, #1
 8001946:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001948:	6803      	ldr	r3, [r0, #0]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	079b      	lsls	r3, r3, #30
 800194e:	d057      	beq.n	8001a00 <HAL_TIM_IRQHandler+0xd4>
          HAL_TIM_IC_CaptureCallback(htim);
 8001950:	f7ff ffe9 	bl	8001926 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001954:	2300      	movs	r3, #0
 8001956:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001958:	0763      	lsls	r3, r4, #29
 800195a:	d512      	bpl.n	8001982 <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800195c:	0773      	lsls	r3, r6, #29
 800195e:	d510      	bpl.n	8001982 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001960:	682b      	ldr	r3, [r5, #0]
 8001962:	2205      	movs	r2, #5
 8001964:	4252      	negs	r2, r2
 8001966:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001968:	2302      	movs	r3, #2
 800196a:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800196c:	682b      	ldr	r3, [r5, #0]
 800196e:	699a      	ldr	r2, [r3, #24]
 8001970:	23c0      	movs	r3, #192	; 0xc0
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	421a      	tst	r2, r3
 8001976:	d049      	beq.n	8001a0c <HAL_TIM_IRQHandler+0xe0>
        HAL_TIM_IC_CaptureCallback(htim);
 8001978:	0028      	movs	r0, r5
 800197a:	f7ff ffd4 	bl	8001926 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800197e:	2300      	movs	r3, #0
 8001980:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001982:	0723      	lsls	r3, r4, #28
 8001984:	d510      	bpl.n	80019a8 <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001986:	0733      	lsls	r3, r6, #28
 8001988:	d50e      	bpl.n	80019a8 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800198a:	682b      	ldr	r3, [r5, #0]
 800198c:	2209      	movs	r2, #9
 800198e:	4252      	negs	r2, r2
 8001990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001992:	2304      	movs	r3, #4
 8001994:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001996:	682b      	ldr	r3, [r5, #0]
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	079b      	lsls	r3, r3, #30
 800199c:	d03d      	beq.n	8001a1a <HAL_TIM_IRQHandler+0xee>
        HAL_TIM_IC_CaptureCallback(htim);
 800199e:	0028      	movs	r0, r5
 80019a0:	f7ff ffc1 	bl	8001926 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019a4:	2300      	movs	r3, #0
 80019a6:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80019a8:	06e3      	lsls	r3, r4, #27
 80019aa:	d512      	bpl.n	80019d2 <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80019ac:	06f3      	lsls	r3, r6, #27
 80019ae:	d510      	bpl.n	80019d2 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80019b0:	682b      	ldr	r3, [r5, #0]
 80019b2:	2211      	movs	r2, #17
 80019b4:	4252      	negs	r2, r2
 80019b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019b8:	2308      	movs	r3, #8
 80019ba:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019bc:	682b      	ldr	r3, [r5, #0]
 80019be:	69da      	ldr	r2, [r3, #28]
 80019c0:	23c0      	movs	r3, #192	; 0xc0
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	421a      	tst	r2, r3
 80019c6:	d02f      	beq.n	8001a28 <HAL_TIM_IRQHandler+0xfc>
        HAL_TIM_IC_CaptureCallback(htim);
 80019c8:	0028      	movs	r0, r5
 80019ca:	f7ff ffac 	bl	8001926 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ce:	2300      	movs	r3, #0
 80019d0:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80019d2:	07e3      	lsls	r3, r4, #31
 80019d4:	d501      	bpl.n	80019da <HAL_TIM_IRQHandler+0xae>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80019d6:	07f3      	lsls	r3, r6, #31
 80019d8:	d42d      	bmi.n	8001a36 <HAL_TIM_IRQHandler+0x10a>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80019da:	2382      	movs	r3, #130	; 0x82
 80019dc:	019b      	lsls	r3, r3, #6
 80019de:	421c      	tst	r4, r3
 80019e0:	d001      	beq.n	80019e6 <HAL_TIM_IRQHandler+0xba>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80019e2:	0633      	lsls	r3, r6, #24
 80019e4:	d42f      	bmi.n	8001a46 <HAL_TIM_IRQHandler+0x11a>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80019e6:	05e3      	lsls	r3, r4, #23
 80019e8:	d501      	bpl.n	80019ee <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80019ea:	0633      	lsls	r3, r6, #24
 80019ec:	d432      	bmi.n	8001a54 <HAL_TIM_IRQHandler+0x128>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80019ee:	0663      	lsls	r3, r4, #25
 80019f0:	d501      	bpl.n	80019f6 <HAL_TIM_IRQHandler+0xca>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80019f2:	0673      	lsls	r3, r6, #25
 80019f4:	d435      	bmi.n	8001a62 <HAL_TIM_IRQHandler+0x136>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80019f6:	06a4      	lsls	r4, r4, #26
 80019f8:	d501      	bpl.n	80019fe <HAL_TIM_IRQHandler+0xd2>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80019fa:	06b6      	lsls	r6, r6, #26
 80019fc:	d439      	bmi.n	8001a72 <HAL_TIM_IRQHandler+0x146>
}
 80019fe:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a00:	f7ff ff90 	bl	8001924 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a04:	0028      	movs	r0, r5
 8001a06:	f7ff ff8f 	bl	8001928 <HAL_TIM_PWM_PulseFinishedCallback>
 8001a0a:	e7a3      	b.n	8001954 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a0c:	0028      	movs	r0, r5
 8001a0e:	f7ff ff89 	bl	8001924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a12:	0028      	movs	r0, r5
 8001a14:	f7ff ff88 	bl	8001928 <HAL_TIM_PWM_PulseFinishedCallback>
 8001a18:	e7b1      	b.n	800197e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a1a:	0028      	movs	r0, r5
 8001a1c:	f7ff ff82 	bl	8001924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a20:	0028      	movs	r0, r5
 8001a22:	f7ff ff81 	bl	8001928 <HAL_TIM_PWM_PulseFinishedCallback>
 8001a26:	e7bd      	b.n	80019a4 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a28:	0028      	movs	r0, r5
 8001a2a:	f7ff ff7b 	bl	8001924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a2e:	0028      	movs	r0, r5
 8001a30:	f7ff ff7a 	bl	8001928 <HAL_TIM_PWM_PulseFinishedCallback>
 8001a34:	e7cb      	b.n	80019ce <HAL_TIM_IRQHandler+0xa2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001a36:	682b      	ldr	r3, [r5, #0]
 8001a38:	2202      	movs	r2, #2
 8001a3a:	4252      	negs	r2, r2
 8001a3c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a3e:	0028      	movs	r0, r5
 8001a40:	f7fe fd74 	bl	800052c <HAL_TIM_PeriodElapsedCallback>
 8001a44:	e7c9      	b.n	80019da <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001a46:	682b      	ldr	r3, [r5, #0]
 8001a48:	4a0e      	ldr	r2, [pc, #56]	; (8001a84 <HAL_TIM_IRQHandler+0x158>)
 8001a4a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001a4c:	0028      	movs	r0, r5
 8001a4e:	f000 f9c4 	bl	8001dda <HAL_TIMEx_BreakCallback>
 8001a52:	e7c8      	b.n	80019e6 <HAL_TIM_IRQHandler+0xba>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001a54:	682b      	ldr	r3, [r5, #0]
 8001a56:	4a0c      	ldr	r2, [pc, #48]	; (8001a88 <HAL_TIM_IRQHandler+0x15c>)
 8001a58:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001a5a:	0028      	movs	r0, r5
 8001a5c:	f000 f9be 	bl	8001ddc <HAL_TIMEx_Break2Callback>
 8001a60:	e7c5      	b.n	80019ee <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001a62:	682b      	ldr	r3, [r5, #0]
 8001a64:	2241      	movs	r2, #65	; 0x41
 8001a66:	4252      	negs	r2, r2
 8001a68:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001a6a:	0028      	movs	r0, r5
 8001a6c:	f7ff ff5d 	bl	800192a <HAL_TIM_TriggerCallback>
 8001a70:	e7c1      	b.n	80019f6 <HAL_TIM_IRQHandler+0xca>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001a72:	682b      	ldr	r3, [r5, #0]
 8001a74:	2221      	movs	r2, #33	; 0x21
 8001a76:	4252      	negs	r2, r2
 8001a78:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001a7a:	0028      	movs	r0, r5
 8001a7c:	f000 f9ac 	bl	8001dd8 <HAL_TIMEx_CommutCallback>
}
 8001a80:	e7bd      	b.n	80019fe <HAL_TIM_IRQHandler+0xd2>
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	ffffdf7f 	.word	0xffffdf7f
 8001a88:	fffffeff 	.word	0xfffffeff

08001a8c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a8c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a8e:	4a27      	ldr	r2, [pc, #156]	; (8001b2c <TIM_Base_SetConfig+0xa0>)
 8001a90:	4290      	cmp	r0, r2
 8001a92:	d009      	beq.n	8001aa8 <TIM_Base_SetConfig+0x1c>
 8001a94:	2280      	movs	r2, #128	; 0x80
 8001a96:	05d2      	lsls	r2, r2, #23
 8001a98:	4290      	cmp	r0, r2
 8001a9a:	d005      	beq.n	8001aa8 <TIM_Base_SetConfig+0x1c>
 8001a9c:	4a24      	ldr	r2, [pc, #144]	; (8001b30 <TIM_Base_SetConfig+0xa4>)
 8001a9e:	4290      	cmp	r0, r2
 8001aa0:	d002      	beq.n	8001aa8 <TIM_Base_SetConfig+0x1c>
 8001aa2:	4a24      	ldr	r2, [pc, #144]	; (8001b34 <TIM_Base_SetConfig+0xa8>)
 8001aa4:	4290      	cmp	r0, r2
 8001aa6:	d103      	bne.n	8001ab0 <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001aa8:	2270      	movs	r2, #112	; 0x70
 8001aaa:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8001aac:	684a      	ldr	r2, [r1, #4]
 8001aae:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ab0:	4a1e      	ldr	r2, [pc, #120]	; (8001b2c <TIM_Base_SetConfig+0xa0>)
 8001ab2:	4290      	cmp	r0, r2
 8001ab4:	d015      	beq.n	8001ae2 <TIM_Base_SetConfig+0x56>
 8001ab6:	2280      	movs	r2, #128	; 0x80
 8001ab8:	05d2      	lsls	r2, r2, #23
 8001aba:	4290      	cmp	r0, r2
 8001abc:	d011      	beq.n	8001ae2 <TIM_Base_SetConfig+0x56>
 8001abe:	4a1c      	ldr	r2, [pc, #112]	; (8001b30 <TIM_Base_SetConfig+0xa4>)
 8001ac0:	4290      	cmp	r0, r2
 8001ac2:	d00e      	beq.n	8001ae2 <TIM_Base_SetConfig+0x56>
 8001ac4:	4a1b      	ldr	r2, [pc, #108]	; (8001b34 <TIM_Base_SetConfig+0xa8>)
 8001ac6:	4290      	cmp	r0, r2
 8001ac8:	d00b      	beq.n	8001ae2 <TIM_Base_SetConfig+0x56>
 8001aca:	4a1b      	ldr	r2, [pc, #108]	; (8001b38 <TIM_Base_SetConfig+0xac>)
 8001acc:	4290      	cmp	r0, r2
 8001ace:	d008      	beq.n	8001ae2 <TIM_Base_SetConfig+0x56>
 8001ad0:	4a1a      	ldr	r2, [pc, #104]	; (8001b3c <TIM_Base_SetConfig+0xb0>)
 8001ad2:	4290      	cmp	r0, r2
 8001ad4:	d005      	beq.n	8001ae2 <TIM_Base_SetConfig+0x56>
 8001ad6:	4a1a      	ldr	r2, [pc, #104]	; (8001b40 <TIM_Base_SetConfig+0xb4>)
 8001ad8:	4290      	cmp	r0, r2
 8001ada:	d002      	beq.n	8001ae2 <TIM_Base_SetConfig+0x56>
 8001adc:	4a19      	ldr	r2, [pc, #100]	; (8001b44 <TIM_Base_SetConfig+0xb8>)
 8001ade:	4290      	cmp	r0, r2
 8001ae0:	d103      	bne.n	8001aea <TIM_Base_SetConfig+0x5e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ae2:	4a19      	ldr	r2, [pc, #100]	; (8001b48 <TIM_Base_SetConfig+0xbc>)
 8001ae4:	401a      	ands	r2, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ae6:	68cb      	ldr	r3, [r1, #12]
 8001ae8:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001aea:	2280      	movs	r2, #128	; 0x80
 8001aec:	4393      	bics	r3, r2
 8001aee:	694a      	ldr	r2, [r1, #20]
 8001af0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001af2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001af4:	688b      	ldr	r3, [r1, #8]
 8001af6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001af8:	680b      	ldr	r3, [r1, #0]
 8001afa:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <TIM_Base_SetConfig+0xa0>)
 8001afe:	4298      	cmp	r0, r3
 8001b00:	d008      	beq.n	8001b14 <TIM_Base_SetConfig+0x88>
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <TIM_Base_SetConfig+0xb0>)
 8001b04:	4298      	cmp	r0, r3
 8001b06:	d005      	beq.n	8001b14 <TIM_Base_SetConfig+0x88>
 8001b08:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <TIM_Base_SetConfig+0xb4>)
 8001b0a:	4298      	cmp	r0, r3
 8001b0c:	d002      	beq.n	8001b14 <TIM_Base_SetConfig+0x88>
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <TIM_Base_SetConfig+0xb8>)
 8001b10:	4298      	cmp	r0, r3
 8001b12:	d101      	bne.n	8001b18 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b14:	690b      	ldr	r3, [r1, #16]
 8001b16:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001b1c:	6902      	ldr	r2, [r0, #16]
 8001b1e:	4213      	tst	r3, r2
 8001b20:	d003      	beq.n	8001b2a <TIM_Base_SetConfig+0x9e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001b22:	6903      	ldr	r3, [r0, #16]
 8001b24:	2201      	movs	r2, #1
 8001b26:	4393      	bics	r3, r2
 8001b28:	6103      	str	r3, [r0, #16]
  }
}
 8001b2a:	4770      	bx	lr
 8001b2c:	40012c00 	.word	0x40012c00
 8001b30:	40000400 	.word	0x40000400
 8001b34:	40000800 	.word	0x40000800
 8001b38:	40002000 	.word	0x40002000
 8001b3c:	40014000 	.word	0x40014000
 8001b40:	40014400 	.word	0x40014400
 8001b44:	40014800 	.word	0x40014800
 8001b48:	fffffcff 	.word	0xfffffcff

08001b4c <HAL_TIM_Base_Init>:
{
 8001b4c:	b570      	push	{r4, r5, r6, lr}
 8001b4e:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8001b50:	d02a      	beq.n	8001ba8 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001b52:	233d      	movs	r3, #61	; 0x3d
 8001b54:	5cc3      	ldrb	r3, [r0, r3]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d020      	beq.n	8001b9c <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8001b5a:	253d      	movs	r5, #61	; 0x3d
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b60:	0021      	movs	r1, r4
 8001b62:	c901      	ldmia	r1!, {r0}
 8001b64:	f7ff ff92 	bl	8001a8c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	2248      	movs	r2, #72	; 0x48
 8001b6c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b6e:	3a0a      	subs	r2, #10
 8001b70:	54a3      	strb	r3, [r4, r2]
 8001b72:	3201      	adds	r2, #1
 8001b74:	54a3      	strb	r3, [r4, r2]
 8001b76:	3201      	adds	r2, #1
 8001b78:	54a3      	strb	r3, [r4, r2]
 8001b7a:	3201      	adds	r2, #1
 8001b7c:	54a3      	strb	r3, [r4, r2]
 8001b7e:	3201      	adds	r2, #1
 8001b80:	54a3      	strb	r3, [r4, r2]
 8001b82:	3201      	adds	r2, #1
 8001b84:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b86:	3201      	adds	r2, #1
 8001b88:	54a3      	strb	r3, [r4, r2]
 8001b8a:	3201      	adds	r2, #1
 8001b8c:	54a3      	strb	r3, [r4, r2]
 8001b8e:	3201      	adds	r2, #1
 8001b90:	54a3      	strb	r3, [r4, r2]
 8001b92:	3201      	adds	r2, #1
 8001b94:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8001b96:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8001b98:	2000      	movs	r0, #0
}
 8001b9a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8001b9c:	333c      	adds	r3, #60	; 0x3c
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8001ba2:	f7ff fe7c 	bl	800189e <HAL_TIM_Base_MspInit>
 8001ba6:	e7d8      	b.n	8001b5a <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8001ba8:	2001      	movs	r0, #1
 8001baa:	e7f6      	b.n	8001b9a <HAL_TIM_Base_Init+0x4e>

08001bac <HAL_TIM_Encoder_Init>:
{
 8001bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bae:	46c6      	mov	lr, r8
 8001bb0:	b500      	push	{lr}
 8001bb2:	0004      	movs	r4, r0
 8001bb4:	000d      	movs	r5, r1
  if (htim == NULL)
 8001bb6:	2800      	cmp	r0, #0
 8001bb8:	d04d      	beq.n	8001c56 <HAL_TIM_Encoder_Init+0xaa>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001bba:	233d      	movs	r3, #61	; 0x3d
 8001bbc:	5cc3      	ldrb	r3, [r0, r3]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d043      	beq.n	8001c4a <HAL_TIM_Encoder_Init+0x9e>
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc2:	263d      	movs	r6, #61	; 0x3d
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	55a3      	strb	r3, [r4, r6]
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001bc8:	6822      	ldr	r2, [r4, #0]
 8001bca:	6893      	ldr	r3, [r2, #8]
 8001bcc:	4923      	ldr	r1, [pc, #140]	; (8001c5c <HAL_TIM_Encoder_Init+0xb0>)
 8001bce:	400b      	ands	r3, r1
 8001bd0:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bd2:	0021      	movs	r1, r4
 8001bd4:	c901      	ldmia	r1!, {r0}
 8001bd6:	f7ff ff59 	bl	8001a8c <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8001bda:	6821      	ldr	r1, [r4, #0]
 8001bdc:	688b      	ldr	r3, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8001bde:	698a      	ldr	r2, [r1, #24]
  tmpccer = htim->Instance->CCER;
 8001be0:	6a0f      	ldr	r7, [r1, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8001be2:	6828      	ldr	r0, [r5, #0]
 8001be4:	4318      	orrs	r0, r3
 8001be6:	4680      	mov	r8, r0
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001be8:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <HAL_TIM_Encoder_Init+0xb4>)
 8001bea:	401a      	ands	r2, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001bec:	68ab      	ldr	r3, [r5, #8]
 8001bee:	69a8      	ldr	r0, [r5, #24]
 8001bf0:	0200      	lsls	r0, r0, #8
 8001bf2:	4303      	orrs	r3, r0
 8001bf4:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001bf6:	4a1b      	ldr	r2, [pc, #108]	; (8001c64 <HAL_TIM_Encoder_Init+0xb8>)
 8001bf8:	4013      	ands	r3, r2
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001bfa:	68ea      	ldr	r2, [r5, #12]
 8001bfc:	69e8      	ldr	r0, [r5, #28]
 8001bfe:	0200      	lsls	r0, r0, #8
 8001c00:	4302      	orrs	r2, r0
 8001c02:	431a      	orrs	r2, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001c04:	692b      	ldr	r3, [r5, #16]
 8001c06:	011b      	lsls	r3, r3, #4
 8001c08:	6a28      	ldr	r0, [r5, #32]
 8001c0a:	0300      	lsls	r0, r0, #12
 8001c0c:	4303      	orrs	r3, r0
 8001c0e:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001c10:	22aa      	movs	r2, #170	; 0xaa
 8001c12:	4397      	bics	r7, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001c14:	686a      	ldr	r2, [r5, #4]
 8001c16:	696d      	ldr	r5, [r5, #20]
 8001c18:	012d      	lsls	r5, r5, #4
 8001c1a:	432a      	orrs	r2, r5
 8001c1c:	433a      	orrs	r2, r7
  htim->Instance->SMCR = tmpsmcr;
 8001c1e:	4640      	mov	r0, r8
 8001c20:	6088      	str	r0, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8001c22:	6821      	ldr	r1, [r4, #0]
 8001c24:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 8001c26:	6823      	ldr	r3, [r4, #0]
 8001c28:	621a      	str	r2, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	2248      	movs	r2, #72	; 0x48
 8001c2e:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001c30:	3a0a      	subs	r2, #10
 8001c32:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001c34:	3201      	adds	r2, #1
 8001c36:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001c38:	3205      	adds	r2, #5
 8001c3a:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001c3c:	3201      	adds	r2, #1
 8001c3e:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8001c40:	55a3      	strb	r3, [r4, r6]
  return HAL_OK;
 8001c42:	2000      	movs	r0, #0
}
 8001c44:	bc80      	pop	{r7}
 8001c46:	46b8      	mov	r8, r7
 8001c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 8001c4a:	333c      	adds	r3, #60	; 0x3c
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Encoder_MspInit(htim);
 8001c50:	f7fe fd7c 	bl	800074c <HAL_TIM_Encoder_MspInit>
 8001c54:	e7b5      	b.n	8001bc2 <HAL_TIM_Encoder_Init+0x16>
    return HAL_ERROR;
 8001c56:	2001      	movs	r0, #1
 8001c58:	e7f4      	b.n	8001c44 <HAL_TIM_Encoder_Init+0x98>
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	fffebff8 	.word	0xfffebff8
 8001c60:	fffffcfc 	.word	0xfffffcfc
 8001c64:	ffff0303 	.word	0xffff0303

08001c68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001c68:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001c6a:	231f      	movs	r3, #31
 8001c6c:	4019      	ands	r1, r3
 8001c6e:	2401      	movs	r4, #1
 8001c70:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001c72:	6a03      	ldr	r3, [r0, #32]
 8001c74:	43a3      	bics	r3, r4
 8001c76:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001c78:	6a03      	ldr	r3, [r0, #32]
 8001c7a:	408a      	lsls	r2, r1
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	6203      	str	r3, [r0, #32]
}
 8001c80:	bd10      	pop	{r4, pc}

08001c82 <HAL_TIM_Encoder_Start>:
{
 8001c82:	b570      	push	{r4, r5, r6, lr}
 8001c84:	0004      	movs	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001c86:	233e      	movs	r3, #62	; 0x3e
 8001c88:	5cc0      	ldrb	r0, [r0, r3]
 8001c8a:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	5ce3      	ldrb	r3, [r4, r3]
 8001c90:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001c92:	2244      	movs	r2, #68	; 0x44
 8001c94:	5ca2      	ldrb	r2, [r4, r2]
 8001c96:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001c98:	2545      	movs	r5, #69	; 0x45
 8001c9a:	5d65      	ldrb	r5, [r4, r5]
 8001c9c:	b2ed      	uxtb	r5, r5
  if (Channel == TIM_CHANNEL_1)
 8001c9e:	2900      	cmp	r1, #0
 8001ca0:	d117      	bne.n	8001cd2 <HAL_TIM_Encoder_Start+0x50>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001ca2:	2801      	cmp	r0, #1
 8001ca4:	d145      	bne.n	8001d32 <HAL_TIM_Encoder_Start+0xb0>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8001ca6:	2a01      	cmp	r2, #1
 8001ca8:	d144      	bne.n	8001d34 <HAL_TIM_Encoder_Start+0xb2>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001caa:	2302      	movs	r3, #2
 8001cac:	323d      	adds	r2, #61	; 0x3d
 8001cae:	54a3      	strb	r3, [r4, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001cb0:	3206      	adds	r2, #6
 8001cb2:	54a3      	strb	r3, [r4, r2]
  switch (Channel)
 8001cb4:	2900      	cmp	r1, #0
 8001cb6:	d02a      	beq.n	8001d0e <HAL_TIM_Encoder_Start+0x8c>
 8001cb8:	2904      	cmp	r1, #4
 8001cba:	d034      	beq.n	8001d26 <HAL_TIM_Encoder_Start+0xa4>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001cbc:	6820      	ldr	r0, [r4, #0]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	f7ff ffd1 	bl	8001c68 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001cc6:	6820      	ldr	r0, [r4, #0]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	2104      	movs	r1, #4
 8001ccc:	f7ff ffcc 	bl	8001c68 <TIM_CCxChannelCmd>
      break;
 8001cd0:	e022      	b.n	8001d18 <HAL_TIM_Encoder_Start+0x96>
  else if (Channel == TIM_CHANNEL_2)
 8001cd2:	2904      	cmp	r1, #4
 8001cd4:	d011      	beq.n	8001cfa <HAL_TIM_Encoder_Start+0x78>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001cd6:	2801      	cmp	r0, #1
 8001cd8:	d131      	bne.n	8001d3e <HAL_TIM_Encoder_Start+0xbc>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d12a      	bne.n	8001d34 <HAL_TIM_Encoder_Start+0xb2>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001cde:	2a01      	cmp	r2, #1
 8001ce0:	d12f      	bne.n	8001d42 <HAL_TIM_Encoder_Start+0xc0>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001ce2:	2d01      	cmp	r5, #1
 8001ce4:	d12f      	bne.n	8001d46 <HAL_TIM_Encoder_Start+0xc4>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	323d      	adds	r2, #61	; 0x3d
 8001cea:	54a3      	strb	r3, [r4, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001cec:	3201      	adds	r2, #1
 8001cee:	54a3      	strb	r3, [r4, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001cf0:	3205      	adds	r2, #5
 8001cf2:	54a3      	strb	r3, [r4, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001cf4:	3201      	adds	r2, #1
 8001cf6:	54a3      	strb	r3, [r4, r2]
 8001cf8:	e7dc      	b.n	8001cb4 <HAL_TIM_Encoder_Start+0x32>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d11b      	bne.n	8001d36 <HAL_TIM_Encoder_Start+0xb4>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001cfe:	2d01      	cmp	r5, #1
 8001d00:	d11b      	bne.n	8001d3a <HAL_TIM_Encoder_Start+0xb8>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d02:	3301      	adds	r3, #1
 8001d04:	223f      	movs	r2, #63	; 0x3f
 8001d06:	54a3      	strb	r3, [r4, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d08:	3206      	adds	r2, #6
 8001d0a:	54a3      	strb	r3, [r4, r2]
 8001d0c:	e7d2      	b.n	8001cb4 <HAL_TIM_Encoder_Start+0x32>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001d0e:	6820      	ldr	r0, [r4, #0]
 8001d10:	2201      	movs	r2, #1
 8001d12:	2100      	movs	r1, #0
 8001d14:	f7ff ffa8 	bl	8001c68 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8001d18:	6822      	ldr	r2, [r4, #0]
 8001d1a:	6813      	ldr	r3, [r2, #0]
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	430b      	orrs	r3, r1
 8001d20:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001d22:	2000      	movs	r0, #0
 8001d24:	e006      	b.n	8001d34 <HAL_TIM_Encoder_Start+0xb2>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001d26:	6820      	ldr	r0, [r4, #0]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	2104      	movs	r1, #4
 8001d2c:	f7ff ff9c 	bl	8001c68 <TIM_CCxChannelCmd>
      break;
 8001d30:	e7f2      	b.n	8001d18 <HAL_TIM_Encoder_Start+0x96>
      return HAL_ERROR;
 8001d32:	2001      	movs	r0, #1
}
 8001d34:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001d36:	2001      	movs	r0, #1
 8001d38:	e7fc      	b.n	8001d34 <HAL_TIM_Encoder_Start+0xb2>
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	e7fa      	b.n	8001d34 <HAL_TIM_Encoder_Start+0xb2>
      return HAL_ERROR;
 8001d3e:	2001      	movs	r0, #1
 8001d40:	e7f8      	b.n	8001d34 <HAL_TIM_Encoder_Start+0xb2>
 8001d42:	0018      	movs	r0, r3
 8001d44:	e7f6      	b.n	8001d34 <HAL_TIM_Encoder_Start+0xb2>
 8001d46:	0010      	movs	r0, r2
 8001d48:	e7f4      	b.n	8001d34 <HAL_TIM_Encoder_Start+0xb2>
	...

08001d4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d4c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d4e:	233c      	movs	r3, #60	; 0x3c
 8001d50:	5cc3      	ldrb	r3, [r0, r3]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d033      	beq.n	8001dbe <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8001d56:	233c      	movs	r3, #60	; 0x3c
 8001d58:	2201      	movs	r2, #1
 8001d5a:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	3201      	adds	r2, #1
 8001d60:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d62:	6802      	ldr	r2, [r0, #0]
 8001d64:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d66:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001d68:	4c16      	ldr	r4, [pc, #88]	; (8001dc4 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8001d6a:	42a2      	cmp	r2, r4
 8001d6c:	d022      	beq.n	8001db4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d6e:	2470      	movs	r4, #112	; 0x70
 8001d70:	43a3      	bics	r3, r4
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d72:	680c      	ldr	r4, [r1, #0]
 8001d74:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d76:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d78:	6803      	ldr	r3, [r0, #0]
 8001d7a:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d00c      	beq.n	8001d9a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8001d80:	2280      	movs	r2, #128	; 0x80
 8001d82:	05d2      	lsls	r2, r2, #23
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d008      	beq.n	8001d9a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8001d88:	4a0f      	ldr	r2, [pc, #60]	; (8001dc8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d005      	beq.n	8001d9a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8001d8e:	4a0f      	ldr	r2, [pc, #60]	; (8001dcc <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d002      	beq.n	8001d9a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8001d94:	4a0e      	ldr	r2, [pc, #56]	; (8001dd0 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d104      	bne.n	8001da4 <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d9a:	2280      	movs	r2, #128	; 0x80
 8001d9c:	4395      	bics	r5, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d9e:	688a      	ldr	r2, [r1, #8]
 8001da0:	432a      	orrs	r2, r5

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001da2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001da4:	233d      	movs	r3, #61	; 0x3d
 8001da6:	2201      	movs	r2, #1
 8001da8:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8001daa:	3b01      	subs	r3, #1
 8001dac:	2200      	movs	r2, #0
 8001dae:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8001db0:	2000      	movs	r0, #0
}
 8001db2:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001db4:	4c07      	ldr	r4, [pc, #28]	; (8001dd4 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8001db6:	4023      	ands	r3, r4
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001db8:	684c      	ldr	r4, [r1, #4]
 8001dba:	4323      	orrs	r3, r4
 8001dbc:	e7d7      	b.n	8001d6e <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8001dbe:	2002      	movs	r0, #2
 8001dc0:	e7f7      	b.n	8001db2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	40012c00 	.word	0x40012c00
 8001dc8:	40000400 	.word	0x40000400
 8001dcc:	40000800 	.word	0x40000800
 8001dd0:	40014000 	.word	0x40014000
 8001dd4:	ff0fffff 	.word	0xff0fffff

08001dd8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001dd8:	4770      	bx	lr

08001dda <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001dda:	4770      	bx	lr

08001ddc <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001ddc:	4770      	bx	lr
	...

08001de0 <LL_TIM_Init>:
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001de0:	6803      	ldr	r3, [r0, #0]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001de2:	4a23      	ldr	r2, [pc, #140]	; (8001e70 <LL_TIM_Init+0x90>)
 8001de4:	4290      	cmp	r0, r2
 8001de6:	d009      	beq.n	8001dfc <LL_TIM_Init+0x1c>
 8001de8:	2280      	movs	r2, #128	; 0x80
 8001dea:	05d2      	lsls	r2, r2, #23
 8001dec:	4290      	cmp	r0, r2
 8001dee:	d005      	beq.n	8001dfc <LL_TIM_Init+0x1c>
 8001df0:	4a20      	ldr	r2, [pc, #128]	; (8001e74 <LL_TIM_Init+0x94>)
 8001df2:	4290      	cmp	r0, r2
 8001df4:	d002      	beq.n	8001dfc <LL_TIM_Init+0x1c>
 8001df6:	4a20      	ldr	r2, [pc, #128]	; (8001e78 <LL_TIM_Init+0x98>)
 8001df8:	4290      	cmp	r0, r2
 8001dfa:	d103      	bne.n	8001e04 <LL_TIM_Init+0x24>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001dfc:	2270      	movs	r2, #112	; 0x70
 8001dfe:	4393      	bics	r3, r2
 8001e00:	684a      	ldr	r2, [r1, #4]
 8001e02:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e04:	4a1a      	ldr	r2, [pc, #104]	; (8001e70 <LL_TIM_Init+0x90>)
 8001e06:	4290      	cmp	r0, r2
 8001e08:	d015      	beq.n	8001e36 <LL_TIM_Init+0x56>
 8001e0a:	2280      	movs	r2, #128	; 0x80
 8001e0c:	05d2      	lsls	r2, r2, #23
 8001e0e:	4290      	cmp	r0, r2
 8001e10:	d011      	beq.n	8001e36 <LL_TIM_Init+0x56>
 8001e12:	4a18      	ldr	r2, [pc, #96]	; (8001e74 <LL_TIM_Init+0x94>)
 8001e14:	4290      	cmp	r0, r2
 8001e16:	d00e      	beq.n	8001e36 <LL_TIM_Init+0x56>
 8001e18:	4a17      	ldr	r2, [pc, #92]	; (8001e78 <LL_TIM_Init+0x98>)
 8001e1a:	4290      	cmp	r0, r2
 8001e1c:	d00b      	beq.n	8001e36 <LL_TIM_Init+0x56>
 8001e1e:	4a17      	ldr	r2, [pc, #92]	; (8001e7c <LL_TIM_Init+0x9c>)
 8001e20:	4290      	cmp	r0, r2
 8001e22:	d008      	beq.n	8001e36 <LL_TIM_Init+0x56>
 8001e24:	4a16      	ldr	r2, [pc, #88]	; (8001e80 <LL_TIM_Init+0xa0>)
 8001e26:	4290      	cmp	r0, r2
 8001e28:	d005      	beq.n	8001e36 <LL_TIM_Init+0x56>
 8001e2a:	4a16      	ldr	r2, [pc, #88]	; (8001e84 <LL_TIM_Init+0xa4>)
 8001e2c:	4290      	cmp	r0, r2
 8001e2e:	d002      	beq.n	8001e36 <LL_TIM_Init+0x56>
 8001e30:	4a15      	ldr	r2, [pc, #84]	; (8001e88 <LL_TIM_Init+0xa8>)
 8001e32:	4290      	cmp	r0, r2
 8001e34:	d103      	bne.n	8001e3e <LL_TIM_Init+0x5e>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001e36:	4a15      	ldr	r2, [pc, #84]	; (8001e8c <LL_TIM_Init+0xac>)
 8001e38:	401a      	ands	r2, r3
 8001e3a:	68cb      	ldr	r3, [r1, #12]
 8001e3c:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001e3e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001e40:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001e42:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001e44:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001e46:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <LL_TIM_Init+0x90>)
 8001e4a:	4298      	cmp	r0, r3
 8001e4c:	d008      	beq.n	8001e60 <LL_TIM_Init+0x80>
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <LL_TIM_Init+0xa0>)
 8001e50:	4298      	cmp	r0, r3
 8001e52:	d005      	beq.n	8001e60 <LL_TIM_Init+0x80>
 8001e54:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <LL_TIM_Init+0xa4>)
 8001e56:	4298      	cmp	r0, r3
 8001e58:	d002      	beq.n	8001e60 <LL_TIM_Init+0x80>
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <LL_TIM_Init+0xa8>)
 8001e5c:	4298      	cmp	r0, r3
 8001e5e:	d101      	bne.n	8001e64 <LL_TIM_Init+0x84>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001e60:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001e62:	6303      	str	r3, [r0, #48]	; 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001e64:	6943      	ldr	r3, [r0, #20]
 8001e66:	2201      	movs	r2, #1
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	4770      	bx	lr
 8001e70:	40012c00 	.word	0x40012c00
 8001e74:	40000400 	.word	0x40000400
 8001e78:	40000800 	.word	0x40000800
 8001e7c:	40002000 	.word	0x40002000
 8001e80:	40014000 	.word	0x40014000
 8001e84:	40014400 	.word	0x40014400
 8001e88:	40014800 	.word	0x40014800
 8001e8c:	fffffcff 	.word	0xfffffcff

08001e90 <app_encoder_init>:
float result3;

/*
 * Initialization function
 */
void app_encoder_init(void){
 8001e90:	b510      	push	{r4, lr}
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001e92:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <app_encoder_init+0x20>)
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	2101      	movs	r1, #1
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	4252      	negs	r2, r2
 8001ea0:	611a      	str	r2, [r3, #16]
	//TIM7 initialization
	LL_TIM_EnableIT_UPDATE(TIM7); //Enable interrupt generation when timer goes to max value and UPDATE event flag is set
	LL_TIM_ClearFlag_UPDATE(TIM7); //Clear update flag on TIMER6

	//Init 7 segment display
	max7219_Init( 7 );
 8001ea2:	2007      	movs	r0, #7
 8001ea4:	f000 f918 	bl	80020d8 <max7219_Init>
	max7219_Decode_On();
 8001ea8:	f000 f924 	bl	80020f4 <max7219_Decode_On>
}
 8001eac:	bd10      	pop	{r4, pc}
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	40001400 	.word	0x40001400

08001eb4 <app_encoder_loop>:

/*
 * Loop function
 */
void app_encoder_loop(void){
 8001eb4:	b510      	push	{r4, lr}
	encoderVal = (TIM2 -> CNT) >> 2;
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	05db      	lsls	r3, r3, #23
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	089b      	lsrs	r3, r3, #2
 8001ebe:	4a35      	ldr	r2, [pc, #212]	; (8001f94 <app_encoder_loop+0xe0>)
 8001ec0:	6013      	str	r3, [r2, #0]

	if (encoderVal != encoderValPrev){
 8001ec2:	4a35      	ldr	r2, [pc, #212]	; (8001f98 <app_encoder_loop+0xe4>)
 8001ec4:	6811      	ldr	r1, [r2, #0]
 8001ec6:	428b      	cmp	r3, r1
 8001ec8:	d03a      	beq.n	8001f40 <app_encoder_loop+0x8c>
			switch (encoderPress) {
 8001eca:	4a34      	ldr	r2, [pc, #208]	; (8001f9c <app_encoder_loop+0xe8>)
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	2a03      	cmp	r2, #3
 8001ed0:	d027      	beq.n	8001f22 <app_encoder_loop+0x6e>
 8001ed2:	dc07      	bgt.n	8001ee4 <app_encoder_loop+0x30>
 8001ed4:	2a01      	cmp	r2, #1
 8001ed6:	d00c      	beq.n	8001ef2 <app_encoder_loop+0x3e>
 8001ed8:	2a02      	cmp	r2, #2
 8001eda:	d10d      	bne.n	8001ef8 <app_encoder_loop+0x44>
				case 1:
					val = 1;
					break;
				case 2:
					val = 10;
 8001edc:	4a30      	ldr	r2, [pc, #192]	; (8001fa0 <app_encoder_loop+0xec>)
 8001ede:	200a      	movs	r0, #10
 8001ee0:	6010      	str	r0, [r2, #0]
					break;
 8001ee2:	e009      	b.n	8001ef8 <app_encoder_loop+0x44>
			switch (encoderPress) {
 8001ee4:	2a04      	cmp	r2, #4
 8001ee6:	d107      	bne.n	8001ef8 <app_encoder_loop+0x44>
				case 3:
					val = 100;
					break;
				case 4:
					val = 1000;
 8001ee8:	4a2d      	ldr	r2, [pc, #180]	; (8001fa0 <app_encoder_loop+0xec>)
 8001eea:	20fa      	movs	r0, #250	; 0xfa
 8001eec:	0080      	lsls	r0, r0, #2
 8001eee:	6010      	str	r0, [r2, #0]
					break;
 8001ef0:	e002      	b.n	8001ef8 <app_encoder_loop+0x44>
					val = 1;
 8001ef2:	4a2b      	ldr	r2, [pc, #172]	; (8001fa0 <app_encoder_loop+0xec>)
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	6010      	str	r0, [r2, #0]
			}

			//Get direction of encoder turning
			if (encoderVal > encoderValPrev) {
 8001ef8:	428b      	cmp	r3, r1
 8001efa:	dd16      	ble.n	8001f2a <app_encoder_loop+0x76>
				voltageTemp += val;
 8001efc:	4929      	ldr	r1, [pc, #164]	; (8001fa4 <app_encoder_loop+0xf0>)
 8001efe:	4a28      	ldr	r2, [pc, #160]	; (8001fa0 <app_encoder_loop+0xec>)
 8001f00:	680b      	ldr	r3, [r1, #0]
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	189b      	adds	r3, r3, r2
 8001f06:	600b      	str	r3, [r1, #0]
			} else {
				voltageTemp -= val;
			}

			//If required temp value within limits, assign it to voltage
			if (voltageMin <= voltageTemp && voltageTemp <= voltageMax) {
 8001f08:	4b27      	ldr	r3, [pc, #156]	; (8001fa8 <app_encoder_loop+0xf4>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <app_encoder_loop+0xf0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	dc11      	bgt.n	8001f38 <app_encoder_loop+0x84>
 8001f14:	4a25      	ldr	r2, [pc, #148]	; (8001fac <app_encoder_loop+0xf8>)
 8001f16:	6812      	ldr	r2, [r2, #0]
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	dc0d      	bgt.n	8001f38 <app_encoder_loop+0x84>
				voltage = voltageTemp;
 8001f1c:	4a24      	ldr	r2, [pc, #144]	; (8001fb0 <app_encoder_loop+0xfc>)
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	e00e      	b.n	8001f40 <app_encoder_loop+0x8c>
					val = 100;
 8001f22:	4a1f      	ldr	r2, [pc, #124]	; (8001fa0 <app_encoder_loop+0xec>)
 8001f24:	2064      	movs	r0, #100	; 0x64
 8001f26:	6010      	str	r0, [r2, #0]
					break;
 8001f28:	e7e6      	b.n	8001ef8 <app_encoder_loop+0x44>
				voltageTemp -= val;
 8001f2a:	491e      	ldr	r1, [pc, #120]	; (8001fa4 <app_encoder_loop+0xf0>)
 8001f2c:	4a1c      	ldr	r2, [pc, #112]	; (8001fa0 <app_encoder_loop+0xec>)
 8001f2e:	680b      	ldr	r3, [r1, #0]
 8001f30:	6812      	ldr	r2, [r2, #0]
 8001f32:	1a9b      	subs	r3, r3, r2
 8001f34:	600b      	str	r3, [r1, #0]
 8001f36:	e7e7      	b.n	8001f08 <app_encoder_loop+0x54>
			} else {
				voltageTemp = voltage;
 8001f38:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <app_encoder_loop+0xf0>)
 8001f3a:	4a1d      	ldr	r2, [pc, #116]	; (8001fb0 <app_encoder_loop+0xfc>)
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	601a      	str	r2, [r3, #0]
			}
		}

	if (g < 1000) {
 8001f40:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <app_encoder_loop+0x100>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	22fa      	movs	r2, #250	; 0xfa
 8001f46:	0092      	lsls	r2, r2, #2
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	da02      	bge.n	8001f52 <app_encoder_loop+0x9e>
		g++;
 8001f4c:	4a19      	ldr	r2, [pc, #100]	; (8001fb4 <app_encoder_loop+0x100>)
 8001f4e:	3301      	adds	r3, #1
 8001f50:	6013      	str	r3, [r2, #0]
	}

	// Get number of int numbers of voltage
	integer_part = (int)voltage;
 8001f52:	4b17      	ldr	r3, [pc, #92]	; (8001fb0 <app_encoder_loop+0xfc>)
 8001f54:	681c      	ldr	r4, [r3, #0]
 8001f56:	4b18      	ldr	r3, [pc, #96]	; (8001fb8 <app_encoder_loop+0x104>)
 8001f58:	601c      	str	r4, [r3, #0]
	num_digits = 0;
 8001f5a:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <app_encoder_loop+0x108>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]

	while (integer_part) {
 8001f60:	e008      	b.n	8001f74 <app_encoder_loop+0xc0>
		integer_part = integer_part/10;
 8001f62:	210a      	movs	r1, #10
 8001f64:	f7fe f958 	bl	8000218 <__divsi3>
 8001f68:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <app_encoder_loop+0x104>)
 8001f6a:	6018      	str	r0, [r3, #0]
		num_digits++;
 8001f6c:	4a13      	ldr	r2, [pc, #76]	; (8001fbc <app_encoder_loop+0x108>)
 8001f6e:	6813      	ldr	r3, [r2, #0]
 8001f70:	3301      	adds	r3, #1
 8001f72:	6013      	str	r3, [r2, #0]
	while (integer_part) {
 8001f74:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <app_encoder_loop+0x104>)
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	2800      	cmp	r0, #0
 8001f7a:	d1f2      	bne.n	8001f62 <app_encoder_loop+0xae>
	}

	//Print the voltage to the display
	max7219_PrintItos(num_digits, voltage, 3);
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <app_encoder_loop+0x108>)
 8001f7e:	7818      	ldrb	r0, [r3, #0]
 8001f80:	2203      	movs	r2, #3
 8001f82:	0021      	movs	r1, r4
 8001f84:	f000 f8f8 	bl	8002178 <max7219_PrintItos>
	for (int i= 4; i > num_digits; i--) {
		max7219_PrintItos(i, 0, 0);
	}
	*/

	encoderValPrev = encoderVal;
 8001f88:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <app_encoder_loop+0xe4>)
 8001f8a:	4a02      	ldr	r2, [pc, #8]	; (8001f94 <app_encoder_loop+0xe0>)
 8001f8c:	6812      	ldr	r2, [r2, #0]
 8001f8e:	601a      	str	r2, [r3, #0]
}
 8001f90:	bd10      	pop	{r4, pc}
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	20000130 	.word	0x20000130
 8001f98:	20000134 	.word	0x20000134
 8001f9c:	2000000c 	.word	0x2000000c
 8001fa0:	20000144 	.word	0x20000144
 8001fa4:	20000150 	.word	0x20000150
 8001fa8:	2000014c 	.word	0x2000014c
 8001fac:	20000010 	.word	0x20000010
 8001fb0:	20000148 	.word	0x20000148
 8001fb4:	20000138 	.word	0x20000138
 8001fb8:	2000013c 	.word	0x2000013c
 8001fbc:	20000140 	.word	0x20000140

08001fc0 <button_isr>:
/**
 * Button interrupt service routine
 */
void button_isr(void){
	//Mask unwanted button interrupts caused by debouncing
	EXTI->IMR1 &= ~(EXTI_IMR1_IM3);
 8001fc0:	490e      	ldr	r1, [pc, #56]	; (8001ffc <button_isr+0x3c>)
 8001fc2:	2280      	movs	r2, #128	; 0x80
 8001fc4:	588b      	ldr	r3, [r1, r2]
 8001fc6:	2008      	movs	r0, #8
 8001fc8:	4383      	bics	r3, r0
 8001fca:	508b      	str	r3, [r1, r2]
  WRITE_REG(TIMx->CNT, Counter);
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <button_isr+0x40>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	625a      	str	r2, [r3, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]

	//Zero TIM6 counter and start counting
	LL_TIM_SetCounter(TIM7, 0); //set counter register value of timer 7 to 0
	LL_TIM_EnableCounter(TIM7); //start counting of timer 7

	if (encoderPress > 0){
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <button_isr+0x44>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	dd07      	ble.n	8001ff2 <button_isr+0x32>
		encoderPress--;
 8001fe2:	4a08      	ldr	r2, [pc, #32]	; (8002004 <button_isr+0x44>)
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	6013      	str	r3, [r2, #0]
	else {
		encoderPress = 3;
	}

	//Erase btn (PC3) interrupt flag
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8001fe8:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <button_isr+0x3c>)
 8001fea:	2208      	movs	r2, #8
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
}
 8001ff0:	4770      	bx	lr
		encoderPress = 3;
 8001ff2:	4b04      	ldr	r3, [pc, #16]	; (8002004 <button_isr+0x44>)
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	e7f6      	b.n	8001fe8 <button_isr+0x28>
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	40021800 	.word	0x40021800
 8002000:	40001400 	.word	0x40001400
 8002004:	2000000c 	.word	0x2000000c

08002008 <button_timer_isr>:

/*
 * Timer interrupt routine
 */
void button_timer_isr(void){
	EXTI->IMR1 |= EXTI_IMR1_IM3; //unmask interrupt mask register on exti line 3
 8002008:	4904      	ldr	r1, [pc, #16]	; (800201c <button_timer_isr+0x14>)
 800200a:	2280      	movs	r2, #128	; 0x80
 800200c:	588b      	ldr	r3, [r1, r2]
 800200e:	2008      	movs	r0, #8
 8002010:	4303      	orrs	r3, r0
 8002012:	508b      	str	r3, [r1, r2]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002014:	4b02      	ldr	r3, [pc, #8]	; (8002020 <button_timer_isr+0x18>)
 8002016:	3a82      	subs	r2, #130	; 0x82
 8002018:	611a      	str	r2, [r3, #16]
	LL_TIM_ClearFlag_UPDATE(TIM7); //Clear update flag on TIMER7
}
 800201a:	4770      	bx	lr
 800201c:	40021800 	.word	0x40021800
 8002020:	40001400 	.word	0x40001400

08002024 <getSymbol>:
	return position;
}

static uint16_t getSymbol(uint8_t number)
{
	return SYMBOLS[number];
 8002024:	4b01      	ldr	r3, [pc, #4]	; (800202c <getSymbol+0x8>)
 8002026:	5c18      	ldrb	r0, [r3, r0]
}
 8002028:	4770      	bx	lr
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	08002330 	.word	0x08002330

08002030 <max7219_SendData>:
{
 8002030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002032:	46c6      	mov	lr, r8
 8002034:	b500      	push	{lr}
 8002036:	b082      	sub	sp, #8
 8002038:	2307      	movs	r3, #7
 800203a:	446b      	add	r3, sp
 800203c:	4698      	mov	r8, r3
 800203e:	7018      	strb	r0, [r3, #0]
 8002040:	466b      	mov	r3, sp
 8002042:	1d9e      	adds	r6, r3, #6
 8002044:	7199      	strb	r1, [r3, #6]
	CS_SET();
 8002046:	4d0f      	ldr	r5, [pc, #60]	; (8002084 <max7219_SendData+0x54>)
 8002048:	2200      	movs	r2, #0
 800204a:	2101      	movs	r1, #1
 800204c:	0028      	movs	r0, r5
 800204e:	f7fe fd6b 	bl	8000b28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 8002052:	2701      	movs	r7, #1
 8002054:	427f      	negs	r7, r7
 8002056:	4c0c      	ldr	r4, [pc, #48]	; (8002088 <max7219_SendData+0x58>)
 8002058:	003b      	movs	r3, r7
 800205a:	2201      	movs	r2, #1
 800205c:	4641      	mov	r1, r8
 800205e:	0020      	movs	r0, r4
 8002060:	f7ff fb42 	bl	80016e8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 8002064:	003b      	movs	r3, r7
 8002066:	2201      	movs	r2, #1
 8002068:	0031      	movs	r1, r6
 800206a:	0020      	movs	r0, r4
 800206c:	f7ff fb3c 	bl	80016e8 <HAL_SPI_Transmit>
	CS_RESET();
 8002070:	2201      	movs	r2, #1
 8002072:	2101      	movs	r1, #1
 8002074:	0028      	movs	r0, r5
 8002076:	f7fe fd57 	bl	8000b28 <HAL_GPIO_WritePin>
}
 800207a:	b002      	add	sp, #8
 800207c:	bc80      	pop	{r7}
 800207e:	46b8      	mov	r8, r7
 8002080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	50000400 	.word	0x50000400
 8002088:	20000030 	.word	0x20000030

0800208c <max7219_SetIntensivity>:
{
 800208c:	b510      	push	{r4, lr}
 800208e:	0001      	movs	r1, r0
	if (intensivity > 0x0F)
 8002090:	280f      	cmp	r0, #15
 8002092:	d900      	bls.n	8002096 <max7219_SetIntensivity+0xa>
}
 8002094:	bd10      	pop	{r4, pc}
	max7219_SendData(REG_INTENSITY, intensivity);
 8002096:	200a      	movs	r0, #10
 8002098:	f7ff ffca 	bl	8002030 <max7219_SendData>
 800209c:	e7fa      	b.n	8002094 <max7219_SetIntensivity+0x8>
	...

080020a0 <max7219_Clean>:
{
 80020a0:	b570      	push	{r4, r5, r6, lr}
	if(decodeMode == 0xFF)
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <max7219_Clean+0x28>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2bff      	cmp	r3, #255	; 0xff
 80020a8:	d002      	beq.n	80020b0 <max7219_Clean+0x10>
	uint8_t clear = 0x00;
 80020aa:	2500      	movs	r5, #0
	for (int i = 0; i < 8; ++i)
 80020ac:	2400      	movs	r4, #0
 80020ae:	e007      	b.n	80020c0 <max7219_Clean+0x20>
		clear = BLANK;
 80020b0:	250f      	movs	r5, #15
 80020b2:	e7fb      	b.n	80020ac <max7219_Clean+0xc>
		max7219_SendData(i + 1, clear);
 80020b4:	1c60      	adds	r0, r4, #1
 80020b6:	b2c0      	uxtb	r0, r0
 80020b8:	0029      	movs	r1, r5
 80020ba:	f7ff ffb9 	bl	8002030 <max7219_SendData>
	for (int i = 0; i < 8; ++i)
 80020be:	3401      	adds	r4, #1
 80020c0:	2c07      	cmp	r4, #7
 80020c2:	ddf7      	ble.n	80020b4 <max7219_Clean+0x14>
}
 80020c4:	bd70      	pop	{r4, r5, r6, pc}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	20000154 	.word	0x20000154

080020cc <max7219_Turn_On>:
{
 80020cc:	b510      	push	{r4, lr}
	max7219_SendData(REG_SHUTDOWN, 0x01);
 80020ce:	2101      	movs	r1, #1
 80020d0:	200c      	movs	r0, #12
 80020d2:	f7ff ffad 	bl	8002030 <max7219_SendData>
}
 80020d6:	bd10      	pop	{r4, pc}

080020d8 <max7219_Init>:
{
 80020d8:	b510      	push	{r4, lr}
 80020da:	0004      	movs	r4, r0
	max7219_Turn_On();
 80020dc:	f7ff fff6 	bl	80020cc <max7219_Turn_On>
	max7219_SendData(REG_SCAN_LIMIT, NUMBER_OF_DIGITS - 1);
 80020e0:	2107      	movs	r1, #7
 80020e2:	200b      	movs	r0, #11
 80020e4:	f7ff ffa4 	bl	8002030 <max7219_SendData>
	max7219_SetIntensivity(intensivity);
 80020e8:	0020      	movs	r0, r4
 80020ea:	f7ff ffcf 	bl	800208c <max7219_SetIntensivity>
	max7219_Clean();
 80020ee:	f7ff ffd7 	bl	80020a0 <max7219_Clean>
}
 80020f2:	bd10      	pop	{r4, pc}

080020f4 <max7219_Decode_On>:
{
 80020f4:	b510      	push	{r4, lr}
	decodeMode = 0xFF;
 80020f6:	4b04      	ldr	r3, [pc, #16]	; (8002108 <max7219_Decode_On+0x14>)
 80020f8:	22ff      	movs	r2, #255	; 0xff
 80020fa:	701a      	strb	r2, [r3, #0]
	max7219_SendData(REG_DECODE_MODE, decodeMode);
 80020fc:	21ff      	movs	r1, #255	; 0xff
 80020fe:	2009      	movs	r0, #9
 8002100:	f7ff ff96 	bl	8002030 <max7219_SendData>
}
 8002104:	bd10      	pop	{r4, pc}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	20000154 	.word	0x20000154

0800210c <max7219_PrintDigit>:
{
 800210c:	b510      	push	{r4, lr}
 800210e:	0004      	movs	r4, r0
	if(position > NUMBER_OF_DIGITS)
 8002110:	2808      	cmp	r0, #8
 8002112:	d807      	bhi.n	8002124 <max7219_PrintDigit+0x18>
	if(point)
 8002114:	2a00      	cmp	r2, #0
 8002116:	d018      	beq.n	800214a <max7219_PrintDigit+0x3e>
		if(decodeMode == 0x00)
 8002118:	4b16      	ldr	r3, [pc, #88]	; (8002174 <max7219_PrintDigit+0x68>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d002      	beq.n	8002126 <max7219_PrintDigit+0x1a>
		else if(decodeMode == 0xFF)
 8002120:	2bff      	cmp	r3, #255	; 0xff
 8002122:	d00b      	beq.n	800213c <max7219_PrintDigit+0x30>
}
 8002124:	bd10      	pop	{r4, pc}
			max7219_SendData(position, getSymbol(numeric) | (1 << 7));
 8002126:	0008      	movs	r0, r1
 8002128:	f7ff ff7c 	bl	8002024 <getSymbol>
 800212c:	2180      	movs	r1, #128	; 0x80
 800212e:	4249      	negs	r1, r1
 8002130:	4301      	orrs	r1, r0
 8002132:	b2c9      	uxtb	r1, r1
 8002134:	0020      	movs	r0, r4
 8002136:	f7ff ff7b 	bl	8002030 <max7219_SendData>
 800213a:	e7f3      	b.n	8002124 <max7219_PrintDigit+0x18>
			max7219_SendData(position, numeric | (1 << 7));
 800213c:	3b80      	subs	r3, #128	; 0x80
 800213e:	3bff      	subs	r3, #255	; 0xff
 8002140:	4319      	orrs	r1, r3
 8002142:	b2c9      	uxtb	r1, r1
 8002144:	f7ff ff74 	bl	8002030 <max7219_SendData>
 8002148:	e7ec      	b.n	8002124 <max7219_PrintDigit+0x18>
		if(decodeMode == 0x00)
 800214a:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <max7219_PrintDigit+0x68>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d006      	beq.n	8002160 <max7219_PrintDigit+0x54>
		else if(decodeMode == 0xFF)
 8002152:	2bff      	cmp	r3, #255	; 0xff
 8002154:	d1e6      	bne.n	8002124 <max7219_PrintDigit+0x18>
			max7219_SendData(position, numeric & (~(1 << 7)));
 8002156:	3b80      	subs	r3, #128	; 0x80
 8002158:	4019      	ands	r1, r3
 800215a:	f7ff ff69 	bl	8002030 <max7219_SendData>
 800215e:	e7e1      	b.n	8002124 <max7219_PrintDigit+0x18>
			max7219_SendData(position, getSymbol(numeric) & (~(1 << 7)));
 8002160:	0008      	movs	r0, r1
 8002162:	f7ff ff5f 	bl	8002024 <getSymbol>
 8002166:	217f      	movs	r1, #127	; 0x7f
 8002168:	4001      	ands	r1, r0
 800216a:	0020      	movs	r0, r4
 800216c:	f7ff ff60 	bl	8002030 <max7219_SendData>
 8002170:	e7d8      	b.n	8002124 <max7219_PrintDigit+0x18>
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	20000154 	.word	0x20000154

08002178 <max7219_PrintItos>:
{
 8002178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800217a:	46ce      	mov	lr, r9
 800217c:	4647      	mov	r7, r8
 800217e:	b580      	push	{r7, lr}
 8002180:	0007      	movs	r7, r0
 8002182:	4688      	mov	r8, r1
 8002184:	4691      	mov	r9, r2
	max7219_SendData(REG_DECODE_MODE, 0xFF);
 8002186:	21ff      	movs	r1, #255	; 0xff
 8002188:	2009      	movs	r0, #9
 800218a:	f7ff ff51 	bl	8002030 <max7219_SendData>
	if (value < 0)
 800218e:	4643      	mov	r3, r8
 8002190:	2b00      	cmp	r3, #0
 8002192:	db02      	blt.n	800219a <max7219_PrintItos+0x22>
	uint8_t num_digits = 0;
 8002194:	2500      	movs	r5, #0
	i = 1;
 8002196:	2401      	movs	r4, #1
	while ((value / i) > 9)
 8002198:	e011      	b.n	80021be <max7219_PrintItos+0x46>
		if(position > 0)
 800219a:	2f00      	cmp	r7, #0
 800219c:	d103      	bne.n	80021a6 <max7219_PrintItos+0x2e>
		value = -value;
 800219e:	4643      	mov	r3, r8
 80021a0:	425b      	negs	r3, r3
 80021a2:	4698      	mov	r8, r3
 80021a4:	e7f6      	b.n	8002194 <max7219_PrintItos+0x1c>
			max7219_SendData(position, MINUS);
 80021a6:	210a      	movs	r1, #10
 80021a8:	0038      	movs	r0, r7
 80021aa:	f7ff ff41 	bl	8002030 <max7219_SendData>
			position--;
 80021ae:	3f01      	subs	r7, #1
 80021b0:	b2ff      	uxtb	r7, r7
 80021b2:	e7f4      	b.n	800219e <max7219_PrintItos+0x26>
		i *= 10;
 80021b4:	00a3      	lsls	r3, r4, #2
 80021b6:	191c      	adds	r4, r3, r4
 80021b8:	0064      	lsls	r4, r4, #1
		num_digits++;
 80021ba:	3501      	adds	r5, #1
 80021bc:	b2ed      	uxtb	r5, r5
	while ((value / i) > 9)
 80021be:	0021      	movs	r1, r4
 80021c0:	4640      	mov	r0, r8
 80021c2:	f7fe f829 	bl	8000218 <__divsi3>
 80021c6:	2809      	cmp	r0, #9
 80021c8:	dcf4      	bgt.n	80021b4 <max7219_PrintItos+0x3c>
	num_digits++;
 80021ca:	3501      	adds	r5, #1
 80021cc:	b2ee      	uxtb	r6, r5
	for (int j= 4; j > num_digits; j--) {
 80021ce:	2504      	movs	r5, #4
 80021d0:	e005      	b.n	80021de <max7219_PrintItos+0x66>
			max7219_PrintDigit(j, 0, true);
 80021d2:	b2e8      	uxtb	r0, r5
 80021d4:	2201      	movs	r2, #1
 80021d6:	2100      	movs	r1, #0
 80021d8:	f7ff ff98 	bl	800210c <max7219_PrintDigit>
	for (int j= 4; j > num_digits; j--) {
 80021dc:	3d01      	subs	r5, #1
 80021de:	42ae      	cmp	r6, r5
 80021e0:	da1c      	bge.n	800221c <max7219_PrintItos+0xa4>
		if(j == decimal_position) {
 80021e2:	45a9      	cmp	r9, r5
 80021e4:	d0f5      	beq.n	80021d2 <max7219_PrintItos+0x5a>
			max7219_SendData(j, 0);
 80021e6:	b2e8      	uxtb	r0, r5
 80021e8:	2100      	movs	r1, #0
 80021ea:	f7ff ff21 	bl	8002030 <max7219_SendData>
 80021ee:	e7f5      	b.n	80021dc <max7219_PrintItos+0x64>
				max7219_PrintDigit(position, (value % (i * 10)) / i, true);
 80021f0:	00a1      	lsls	r1, r4, #2
 80021f2:	1909      	adds	r1, r1, r4
 80021f4:	0049      	lsls	r1, r1, #1
 80021f6:	4640      	mov	r0, r8
 80021f8:	f7fe f8f4 	bl	80003e4 <__aeabi_idivmod>
 80021fc:	0008      	movs	r0, r1
 80021fe:	0021      	movs	r1, r4
 8002200:	f7fe f80a 	bl	8000218 <__divsi3>
 8002204:	b2c1      	uxtb	r1, r0
 8002206:	2201      	movs	r2, #1
 8002208:	0038      	movs	r0, r7
 800220a:	f7ff ff7f 	bl	800210c <max7219_PrintDigit>
			position--;
 800220e:	3f01      	subs	r7, #1
 8002210:	b2ff      	uxtb	r7, r7
		i /= 10;
 8002212:	210a      	movs	r1, #10
 8002214:	0020      	movs	r0, r4
 8002216:	f7fd ffff 	bl	8000218 <__divsi3>
 800221a:	0004      	movs	r4, r0
	while (i > 0)
 800221c:	2c00      	cmp	r4, #0
 800221e:	dd12      	ble.n	8002246 <max7219_PrintItos+0xce>
		if(position > 0)
 8002220:	2f00      	cmp	r7, #0
 8002222:	d0f6      	beq.n	8002212 <max7219_PrintItos+0x9a>
			if(position == decimal_position) {
 8002224:	454f      	cmp	r7, r9
 8002226:	d0e3      	beq.n	80021f0 <max7219_PrintItos+0x78>
				max7219_SendData(position, (value % (i * 10)) / i);
 8002228:	00a1      	lsls	r1, r4, #2
 800222a:	1909      	adds	r1, r1, r4
 800222c:	0049      	lsls	r1, r1, #1
 800222e:	4640      	mov	r0, r8
 8002230:	f7fe f8d8 	bl	80003e4 <__aeabi_idivmod>
 8002234:	0008      	movs	r0, r1
 8002236:	0021      	movs	r1, r4
 8002238:	f7fd ffee 	bl	8000218 <__divsi3>
 800223c:	b2c1      	uxtb	r1, r0
 800223e:	0038      	movs	r0, r7
 8002240:	f7ff fef6 	bl	8002030 <max7219_SendData>
 8002244:	e7e3      	b.n	800220e <max7219_PrintItos+0x96>
	max7219_SendData(REG_DECODE_MODE, decodeMode);
 8002246:	4b05      	ldr	r3, [pc, #20]	; (800225c <max7219_PrintItos+0xe4>)
 8002248:	7819      	ldrb	r1, [r3, #0]
 800224a:	2009      	movs	r0, #9
 800224c:	f7ff fef0 	bl	8002030 <max7219_SendData>
}
 8002250:	0038      	movs	r0, r7
 8002252:	bcc0      	pop	{r6, r7}
 8002254:	46b9      	mov	r9, r7
 8002256:	46b0      	mov	r8, r6
 8002258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	20000154 	.word	0x20000154

08002260 <memset>:
 8002260:	0003      	movs	r3, r0
 8002262:	1882      	adds	r2, r0, r2
 8002264:	4293      	cmp	r3, r2
 8002266:	d100      	bne.n	800226a <memset+0xa>
 8002268:	4770      	bx	lr
 800226a:	7019      	strb	r1, [r3, #0]
 800226c:	3301      	adds	r3, #1
 800226e:	e7f9      	b.n	8002264 <memset+0x4>

08002270 <__libc_init_array>:
 8002270:	b570      	push	{r4, r5, r6, lr}
 8002272:	2600      	movs	r6, #0
 8002274:	4c0c      	ldr	r4, [pc, #48]	; (80022a8 <__libc_init_array+0x38>)
 8002276:	4d0d      	ldr	r5, [pc, #52]	; (80022ac <__libc_init_array+0x3c>)
 8002278:	1b64      	subs	r4, r4, r5
 800227a:	10a4      	asrs	r4, r4, #2
 800227c:	42a6      	cmp	r6, r4
 800227e:	d109      	bne.n	8002294 <__libc_init_array+0x24>
 8002280:	2600      	movs	r6, #0
 8002282:	f000 f819 	bl	80022b8 <_init>
 8002286:	4c0a      	ldr	r4, [pc, #40]	; (80022b0 <__libc_init_array+0x40>)
 8002288:	4d0a      	ldr	r5, [pc, #40]	; (80022b4 <__libc_init_array+0x44>)
 800228a:	1b64      	subs	r4, r4, r5
 800228c:	10a4      	asrs	r4, r4, #2
 800228e:	42a6      	cmp	r6, r4
 8002290:	d105      	bne.n	800229e <__libc_init_array+0x2e>
 8002292:	bd70      	pop	{r4, r5, r6, pc}
 8002294:	00b3      	lsls	r3, r6, #2
 8002296:	58eb      	ldr	r3, [r5, r3]
 8002298:	4798      	blx	r3
 800229a:	3601      	adds	r6, #1
 800229c:	e7ee      	b.n	800227c <__libc_init_array+0xc>
 800229e:	00b3      	lsls	r3, r6, #2
 80022a0:	58eb      	ldr	r3, [r5, r3]
 80022a2:	4798      	blx	r3
 80022a4:	3601      	adds	r6, #1
 80022a6:	e7f2      	b.n	800228e <__libc_init_array+0x1e>
 80022a8:	08002340 	.word	0x08002340
 80022ac:	08002340 	.word	0x08002340
 80022b0:	08002344 	.word	0x08002344
 80022b4:	08002340 	.word	0x08002340

080022b8 <_init>:
 80022b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022be:	bc08      	pop	{r3}
 80022c0:	469e      	mov	lr, r3
 80022c2:	4770      	bx	lr

080022c4 <_fini>:
 80022c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ca:	bc08      	pop	{r3}
 80022cc:	469e      	mov	lr, r3
 80022ce:	4770      	bx	lr
