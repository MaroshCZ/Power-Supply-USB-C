
STM32G0_encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015bc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08001678  08001678  00011678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016d8  080016d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080016d8  080016d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016d8  080016d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016d8  080016d8  000116d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016dc  080016dc  000116dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080016e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  080016ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  080016ec  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cb47  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d26  00000000  00000000  0002cbbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00006083  00000000  00000000  0002e8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ae8  00000000  00000000  00034968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000087d  00000000  00000000  00035450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001aecb  00000000  00000000  00035ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f3b6  00000000  00000000  00050b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b180e  00000000  00000000  0005ff4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001afc  00000000  00000000  0011175c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00113258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001660 	.word	0x08001660

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08001660 	.word	0x08001660

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	46c6      	mov	lr, r8
 8000220:	b500      	push	{lr}
 8000222:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000224:	2214      	movs	r2, #20
 8000226:	2100      	movs	r1, #0
 8000228:	a803      	add	r0, sp, #12
 800022a:	f001 f9ed 	bl	8001608 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800022e:	4b28      	ldr	r3, [pc, #160]	; (80002d0 <MX_GPIO_Init+0xb4>)
 8000230:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000232:	2204      	movs	r2, #4
 8000234:	4311      	orrs	r1, r2
 8000236:	6359      	str	r1, [r3, #52]	; 0x34
 8000238:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800023a:	400a      	ands	r2, r1
 800023c:	9200      	str	r2, [sp, #0]
 800023e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000242:	2501      	movs	r5, #1
 8000244:	432a      	orrs	r2, r5
 8000246:	635a      	str	r2, [r3, #52]	; 0x34
 8000248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800024a:	402a      	ands	r2, r5
 800024c:	9201      	str	r2, [sp, #4]
 800024e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000250:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000252:	2202      	movs	r2, #2
 8000254:	4311      	orrs	r1, r2
 8000256:	6359      	str	r1, [r3, #52]	; 0x34
 8000258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800025a:	401a      	ands	r2, r3
 800025c:	9202      	str	r2, [sp, #8]
 800025e:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DB_OUT_GPIO_Port, DB_OUT_Pin, GPIO_PIN_RESET);
 8000260:	4b1c      	ldr	r3, [pc, #112]	; (80002d4 <MX_GPIO_Init+0xb8>)
 8000262:	4698      	mov	r8, r3
 8000264:	2200      	movs	r2, #0
 8000266:	2140      	movs	r1, #64	; 0x40
 8000268:	0018      	movs	r0, r3
 800026a:	f000 fae7 	bl	800083c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VCC_OUT_GPIO_Port, VCC_OUT_Pin, GPIO_PIN_SET);
 800026e:	2780      	movs	r7, #128	; 0x80
 8000270:	00ff      	lsls	r7, r7, #3
 8000272:	4e19      	ldr	r6, [pc, #100]	; (80002d8 <MX_GPIO_Init+0xbc>)
 8000274:	2201      	movs	r2, #1
 8000276:	0039      	movs	r1, r7
 8000278:	0030      	movs	r0, r6
 800027a:	f000 fadf 	bl	800083c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800027e:	2308      	movs	r3, #8
 8000280:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000282:	2388      	movs	r3, #136	; 0x88
 8000284:	035b      	lsls	r3, r3, #13
 8000286:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000288:	2400      	movs	r4, #0
 800028a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800028c:	a903      	add	r1, sp, #12
 800028e:	0030      	movs	r0, r6
 8000290:	f000 fa14 	bl	80006bc <HAL_GPIO_Init>

  /*Configure GPIO pin : DB_OUT_Pin */
  GPIO_InitStruct.Pin = DB_OUT_Pin;
 8000294:	2340      	movs	r3, #64	; 0x40
 8000296:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000298:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800029c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(DB_OUT_GPIO_Port, &GPIO_InitStruct);
 800029e:	a903      	add	r1, sp, #12
 80002a0:	4640      	mov	r0, r8
 80002a2:	f000 fa0b 	bl	80006bc <HAL_GPIO_Init>

  /*Configure GPIO pin : VCC_OUT_Pin */
  GPIO_InitStruct.Pin = VCC_OUT_Pin;
 80002a6:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a8:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002aa:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ac:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(VCC_OUT_GPIO_Port, &GPIO_InitStruct);
 80002ae:	a903      	add	r1, sp, #12
 80002b0:	0030      	movs	r0, r6
 80002b2:	f000 fa03 	bl	80006bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 2, 0);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2102      	movs	r1, #2
 80002ba:	2006      	movs	r0, #6
 80002bc:	f000 f9c2 	bl	8000644 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80002c0:	2006      	movs	r0, #6
 80002c2:	f000 f9ef 	bl	80006a4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002c6:	b008      	add	sp, #32
 80002c8:	bc80      	pop	{r7}
 80002ca:	46b8      	mov	r8, r7
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	40021000 	.word	0x40021000
 80002d4:	50000400 	.word	0x50000400
 80002d8:	50000800 	.word	0x50000800

080002dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002dc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80002de:	6802      	ldr	r2, [r0, #0]
 80002e0:	4b03      	ldr	r3, [pc, #12]	; (80002f0 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d000      	beq.n	80002e8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80002e6:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 80002e8:	f000 f97c 	bl	80005e4 <HAL_IncTick>
}
 80002ec:	e7fb      	b.n	80002e6 <HAL_TIM_PeriodElapsedCallback+0xa>
 80002ee:	46c0      	nop			; (mov r8, r8)
 80002f0:	40001000 	.word	0x40001000

080002f4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002f4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002f6:	e7fe      	b.n	80002f6 <Error_Handler+0x2>

080002f8 <MX_TIM2_Init>:
{
 80002f8:	b500      	push	{lr}
 80002fa:	b08d      	sub	sp, #52	; 0x34
  TIM_Encoder_InitTypeDef sConfig = {0};
 80002fc:	2224      	movs	r2, #36	; 0x24
 80002fe:	2100      	movs	r1, #0
 8000300:	a803      	add	r0, sp, #12
 8000302:	f001 f981 	bl	8001608 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000306:	220c      	movs	r2, #12
 8000308:	2100      	movs	r1, #0
 800030a:	4668      	mov	r0, sp
 800030c:	f001 f97c 	bl	8001608 <memset>
  htim2.Instance = TIM2;
 8000310:	4813      	ldr	r0, [pc, #76]	; (8000360 <MX_TIM2_Init+0x68>)
 8000312:	2380      	movs	r3, #128	; 0x80
 8000314:	05db      	lsls	r3, r3, #23
 8000316:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 0;
 8000318:	2300      	movs	r3, #0
 800031a:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800031c:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 800031e:	4a11      	ldr	r2, [pc, #68]	; (8000364 <MX_TIM2_Init+0x6c>)
 8000320:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000322:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000324:	3380      	adds	r3, #128	; 0x80
 8000326:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000328:	3b7d      	subs	r3, #125	; 0x7d
 800032a:	9303      	str	r3, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800032c:	2201      	movs	r2, #1
 800032e:	9205      	str	r2, [sp, #20]
  sConfig.IC1Filter = 10;
 8000330:	3307      	adds	r3, #7
 8000332:	9307      	str	r3, [sp, #28]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000334:	9209      	str	r2, [sp, #36]	; 0x24
  sConfig.IC2Filter = 10;
 8000336:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000338:	a903      	add	r1, sp, #12
 800033a:	f001 f833 	bl	80013a4 <HAL_TIM_Encoder_Init>
 800033e:	2800      	cmp	r0, #0
 8000340:	d10a      	bne.n	8000358 <MX_TIM2_Init+0x60>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000342:	2300      	movs	r3, #0
 8000344:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000346:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000348:	4805      	ldr	r0, [pc, #20]	; (8000360 <MX_TIM2_Init+0x68>)
 800034a:	4669      	mov	r1, sp
 800034c:	f001 f8fa 	bl	8001544 <HAL_TIMEx_MasterConfigSynchronization>
 8000350:	2800      	cmp	r0, #0
 8000352:	d103      	bne.n	800035c <MX_TIM2_Init+0x64>
}
 8000354:	b00d      	add	sp, #52	; 0x34
 8000356:	bd00      	pop	{pc}
    Error_Handler();
 8000358:	f7ff ffcc 	bl	80002f4 <Error_Handler>
    Error_Handler();
 800035c:	f7ff ffca 	bl	80002f4 <Error_Handler>
 8000360:	20000028 	.word	0x20000028
 8000364:	0000ffff 	.word	0x0000ffff

08000368 <SystemClock_Config>:
{
 8000368:	b500      	push	{lr}
 800036a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036c:	223c      	movs	r2, #60	; 0x3c
 800036e:	2100      	movs	r1, #0
 8000370:	a805      	add	r0, sp, #20
 8000372:	f001 f949 	bl	8001608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000376:	2210      	movs	r2, #16
 8000378:	2100      	movs	r1, #0
 800037a:	a801      	add	r0, sp, #4
 800037c:	f001 f944 	bl	8001608 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000380:	2080      	movs	r0, #128	; 0x80
 8000382:	0080      	lsls	r0, r0, #2
 8000384:	f000 fa7a 	bl	800087c <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000388:	2302      	movs	r3, #2
 800038a:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800038c:	2280      	movs	r2, #128	; 0x80
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000392:	2200      	movs	r2, #0
 8000394:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000396:	2140      	movs	r1, #64	; 0x40
 8000398:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800039a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800039c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800039e:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 80003a0:	3306      	adds	r3, #6
 80003a2:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003a4:	2380      	movs	r3, #128	; 0x80
 80003a6:	029b      	lsls	r3, r3, #10
 80003a8:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003aa:	2380      	movs	r3, #128	; 0x80
 80003ac:	049b      	lsls	r3, r3, #18
 80003ae:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003b0:	2380      	movs	r3, #128	; 0x80
 80003b2:	059b      	lsls	r3, r3, #22
 80003b4:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b6:	a805      	add	r0, sp, #20
 80003b8:	f000 fa8a 	bl	80008d0 <HAL_RCC_OscConfig>
 80003bc:	2800      	cmp	r0, #0
 80003be:	d10e      	bne.n	80003de <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c0:	2307      	movs	r3, #7
 80003c2:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c4:	3b05      	subs	r3, #5
 80003c6:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c8:	2300      	movs	r3, #0
 80003ca:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003cc:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003ce:	2102      	movs	r1, #2
 80003d0:	a801      	add	r0, sp, #4
 80003d2:	f000 fd65 	bl	8000ea0 <HAL_RCC_ClockConfig>
 80003d6:	2800      	cmp	r0, #0
 80003d8:	d103      	bne.n	80003e2 <SystemClock_Config+0x7a>
}
 80003da:	b015      	add	sp, #84	; 0x54
 80003dc:	bd00      	pop	{pc}
    Error_Handler();
 80003de:	f7ff ff89 	bl	80002f4 <Error_Handler>
    Error_Handler();
 80003e2:	f7ff ff87 	bl	80002f4 <Error_Handler>
	...

080003e8 <main>:
{
 80003e8:	b510      	push	{r4, lr}
  HAL_Init();
 80003ea:	f000 f8e7 	bl	80005bc <HAL_Init>
  SystemClock_Config();
 80003ee:	f7ff ffbb 	bl	8000368 <SystemClock_Config>
  MX_GPIO_Init();
 80003f2:	f7ff ff13 	bl	800021c <MX_GPIO_Init>
  MX_TIM2_Init();
 80003f6:	f7ff ff7f 	bl	80002f8 <MX_TIM2_Init>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80003fa:	4804      	ldr	r0, [pc, #16]	; (800040c <main+0x24>)
 80003fc:	213c      	movs	r1, #60	; 0x3c
 80003fe:	f001 f83c 	bl	800147a <HAL_TIM_Encoder_Start>
  app_encoder_init();
 8000402:	f001 f8e8 	bl	80015d6 <app_encoder_init>
	  app_encoder_loop();
 8000406:	f001 f8e7 	bl	80015d8 <app_encoder_loop>
  while (1)
 800040a:	e7fc      	b.n	8000406 <main+0x1e>
 800040c:	20000028 	.word	0x20000028

08000410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000410:	b500      	push	{lr}
 8000412:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000414:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <HAL_MspInit+0x34>)
 8000416:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000418:	2201      	movs	r2, #1
 800041a:	4311      	orrs	r1, r2
 800041c:	6419      	str	r1, [r3, #64]	; 0x40
 800041e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000420:	400a      	ands	r2, r1
 8000422:	9200      	str	r2, [sp, #0]
 8000424:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000426:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000428:	2180      	movs	r1, #128	; 0x80
 800042a:	0549      	lsls	r1, r1, #21
 800042c:	430a      	orrs	r2, r1
 800042e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000432:	400b      	ands	r3, r1
 8000434:	9301      	str	r3, [sp, #4]
 8000436:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000438:	20c0      	movs	r0, #192	; 0xc0
 800043a:	00c0      	lsls	r0, r0, #3
 800043c:	f000 f8f6 	bl	800062c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000440:	b003      	add	sp, #12
 8000442:	bd00      	pop	{pc}
 8000444:	40021000 	.word	0x40021000

08000448 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000448:	b510      	push	{r4, lr}
 800044a:	b088      	sub	sp, #32
 800044c:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	2214      	movs	r2, #20
 8000450:	2100      	movs	r1, #0
 8000452:	a803      	add	r0, sp, #12
 8000454:	f001 f8d8 	bl	8001608 <memset>
  if(htim_encoder->Instance==TIM2)
 8000458:	6822      	ldr	r2, [r4, #0]
 800045a:	2380      	movs	r3, #128	; 0x80
 800045c:	05db      	lsls	r3, r3, #23
 800045e:	429a      	cmp	r2, r3
 8000460:	d001      	beq.n	8000466 <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000462:	b008      	add	sp, #32
 8000464:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000466:	4a0d      	ldr	r2, [pc, #52]	; (800049c <HAL_TIM_Encoder_MspInit+0x54>)
 8000468:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800046a:	2301      	movs	r3, #1
 800046c:	4319      	orrs	r1, r3
 800046e:	63d1      	str	r1, [r2, #60]	; 0x3c
 8000470:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000472:	4019      	ands	r1, r3
 8000474:	9101      	str	r1, [sp, #4]
 8000476:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000478:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800047a:	4319      	orrs	r1, r3
 800047c:	6351      	str	r1, [r2, #52]	; 0x34
 800047e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000480:	4013      	ands	r3, r2
 8000482:	9302      	str	r3, [sp, #8]
 8000484:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000486:	2303      	movs	r3, #3
 8000488:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800048a:	3b01      	subs	r3, #1
 800048c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800048e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000490:	20a0      	movs	r0, #160	; 0xa0
 8000492:	a903      	add	r1, sp, #12
 8000494:	05c0      	lsls	r0, r0, #23
 8000496:	f000 f911 	bl	80006bc <HAL_GPIO_Init>
}
 800049a:	e7e2      	b.n	8000462 <HAL_TIM_Encoder_MspInit+0x1a>
 800049c:	40021000 	.word	0x40021000

080004a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004a0:	b530      	push	{r4, r5, lr}
 80004a2:	b087      	sub	sp, #28
 80004a4:	0005      	movs	r5, r0
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80004a6:	4a20      	ldr	r2, [pc, #128]	; (8000528 <HAL_InitTick+0x88>)
 80004a8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80004aa:	2310      	movs	r3, #16
 80004ac:	4319      	orrs	r1, r3
 80004ae:	63d1      	str	r1, [r2, #60]	; 0x3c
 80004b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80004b2:	4013      	ands	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	9b00      	ldr	r3, [sp, #0]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004b8:	a901      	add	r1, sp, #4
 80004ba:	a802      	add	r0, sp, #8
 80004bc:	f000 fdd0 	bl	8001060 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80004c0:	9b05      	ldr	r3, [sp, #20]
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d117      	bne.n	80004f6 <HAL_InitTick+0x56>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80004c6:	f000 fdb7 	bl	8001038 <HAL_RCC_GetPCLK1Freq>
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004ca:	4918      	ldr	r1, [pc, #96]	; (800052c <HAL_InitTick+0x8c>)
 80004cc:	f7ff fe1a 	bl	8000104 <__udivsi3>
 80004d0:	1e42      	subs	r2, r0, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80004d2:	4b17      	ldr	r3, [pc, #92]	; (8000530 <HAL_InitTick+0x90>)
 80004d4:	4917      	ldr	r1, [pc, #92]	; (8000534 <HAL_InitTick+0x94>)
 80004d6:	0018      	movs	r0, r3
 80004d8:	6019      	str	r1, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80004da:	4b17      	ldr	r3, [pc, #92]	; (8000538 <HAL_InitTick+0x98>)
 80004dc:	60c3      	str	r3, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80004de:	6042      	str	r2, [r0, #4]
  htim6.Init.ClockDivision = 0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004e4:	6083      	str	r3, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004e6:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80004e8:	f000 ff2c 	bl	8001344 <HAL_TIM_Base_Init>
 80004ec:	1e04      	subs	r4, r0, #0
  if (status == HAL_OK)
 80004ee:	d006      	beq.n	80004fe <HAL_InitTick+0x5e>
    }
  }

 /* Return function status */
  return status;
}
 80004f0:	0020      	movs	r0, r4
 80004f2:	b007      	add	sp, #28
 80004f4:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80004f6:	f000 fd9f 	bl	8001038 <HAL_RCC_GetPCLK1Freq>
 80004fa:	0040      	lsls	r0, r0, #1
 80004fc:	e7e5      	b.n	80004ca <HAL_InitTick+0x2a>
    status = HAL_TIM_Base_Start_IT(&htim6);
 80004fe:	480c      	ldr	r0, [pc, #48]	; (8000530 <HAL_InitTick+0x90>)
 8000500:	f000 fdca 	bl	8001098 <HAL_TIM_Base_Start_IT>
 8000504:	1e04      	subs	r4, r0, #0
    if (status == HAL_OK)
 8000506:	d1f3      	bne.n	80004f0 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8000508:	2011      	movs	r0, #17
 800050a:	f000 f8cb 	bl	80006a4 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800050e:	2d03      	cmp	r5, #3
 8000510:	d901      	bls.n	8000516 <HAL_InitTick+0x76>
        status = HAL_ERROR;
 8000512:	2401      	movs	r4, #1
 8000514:	e7ec      	b.n	80004f0 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, TickPriority, 0U);
 8000516:	2200      	movs	r2, #0
 8000518:	0029      	movs	r1, r5
 800051a:	2011      	movs	r0, #17
 800051c:	f000 f892 	bl	8000644 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <HAL_InitTick+0x9c>)
 8000522:	601d      	str	r5, [r3, #0]
 8000524:	e7e4      	b.n	80004f0 <HAL_InitTick+0x50>
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	40021000 	.word	0x40021000
 800052c:	000f4240 	.word	0x000f4240
 8000530:	20000074 	.word	0x20000074
 8000534:	40001000 	.word	0x40001000
 8000538:	000003e7 	.word	0x000003e7
 800053c:	20000008 	.word	0x20000008

08000540 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000540:	e7fe      	b.n	8000540 <NMI_Handler>

08000542 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000542:	e7fe      	b.n	8000542 <HardFault_Handler>

08000544 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000544:	4770      	bx	lr

08000546 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000546:	4770      	bx	lr

08000548 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000548:	4770      	bx	lr

0800054a <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800054a:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800054c:	2008      	movs	r0, #8
 800054e:	f000 f97d 	bl	800084c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000552:	bd10      	pop	{r4, pc}

08000554 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8000554:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000556:	4802      	ldr	r0, [pc, #8]	; (8000560 <TIM6_DAC_LPTIM1_IRQHandler+0xc>)
 8000558:	f000 fde4 	bl	8001124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 800055c:	bd10      	pop	{r4, pc}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	20000074 	.word	0x20000074

08000564 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000564:	4770      	bx	lr
	...

08000568 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000568:	480d      	ldr	r0, [pc, #52]	; (80005a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800056a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800056c:	f7ff fffa 	bl	8000564 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000570:	480c      	ldr	r0, [pc, #48]	; (80005a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000572:	490d      	ldr	r1, [pc, #52]	; (80005a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000574:	4a0d      	ldr	r2, [pc, #52]	; (80005ac <LoopForever+0xe>)
  movs r3, #0
 8000576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000578:	e002      	b.n	8000580 <LoopCopyDataInit>

0800057a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800057a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800057c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800057e:	3304      	adds	r3, #4

08000580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000584:	d3f9      	bcc.n	800057a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000586:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000588:	4c0a      	ldr	r4, [pc, #40]	; (80005b4 <LoopForever+0x16>)
  movs r3, #0
 800058a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800058c:	e001      	b.n	8000592 <LoopFillZerobss>

0800058e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800058e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000590:	3204      	adds	r2, #4

08000592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000594:	d3fb      	bcc.n	800058e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000596:	f001 f83f 	bl	8001618 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800059a:	f7ff ff25 	bl	80003e8 <main>

0800059e <LoopForever>:

LoopForever:
  b LoopForever
 800059e:	e7fe      	b.n	800059e <LoopForever>
  ldr   r0, =_estack
 80005a0:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80005a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005ac:	080016e0 	.word	0x080016e0
  ldr r2, =_sbss
 80005b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005b4:	200000cc 	.word	0x200000cc

080005b8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b8:	e7fe      	b.n	80005b8 <ADC1_COMP_IRQHandler>
	...

080005bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005bc:	b510      	push	{r4, lr}
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005be:	4a08      	ldr	r2, [pc, #32]	; (80005e0 <HAL_Init+0x24>)
 80005c0:	6811      	ldr	r1, [r2, #0]
 80005c2:	2380      	movs	r3, #128	; 0x80
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	430b      	orrs	r3, r1
 80005c8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005ca:	2003      	movs	r0, #3
 80005cc:	f7ff ff68 	bl	80004a0 <HAL_InitTick>
 80005d0:	1e04      	subs	r4, r0, #0
 80005d2:	d002      	beq.n	80005da <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80005d4:	2401      	movs	r4, #1
  HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 80005d6:	0020      	movs	r0, r4
 80005d8:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 80005da:	f7ff ff19 	bl	8000410 <HAL_MspInit>
 80005de:	e7fa      	b.n	80005d6 <HAL_Init+0x1a>
 80005e0:	40022000 	.word	0x40022000

080005e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <HAL_IncTick+0x10>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	4a03      	ldr	r2, [pc, #12]	; (80005f8 <HAL_IncTick+0x14>)
 80005ea:	6811      	ldr	r1, [r2, #0]
 80005ec:	185b      	adds	r3, r3, r1
 80005ee:	6013      	str	r3, [r2, #0]
}
 80005f0:	4770      	bx	lr
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	20000004 	.word	0x20000004
 80005f8:	200000c0 	.word	0x200000c0

080005fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005fc:	4b01      	ldr	r3, [pc, #4]	; (8000604 <HAL_GetTick+0x8>)
 80005fe:	6818      	ldr	r0, [r3, #0]
}
 8000600:	4770      	bx	lr
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	200000c0 	.word	0x200000c0

08000608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800060c:	f7ff fff6 	bl	80005fc <HAL_GetTick>
 8000610:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000612:	1c63      	adds	r3, r4, #1
 8000614:	d002      	beq.n	800061c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000616:	4b04      	ldr	r3, [pc, #16]	; (8000628 <HAL_Delay+0x20>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800061c:	f7ff ffee 	bl	80005fc <HAL_GetTick>
 8000620:	1b40      	subs	r0, r0, r5
 8000622:	42a0      	cmp	r0, r4
 8000624:	d3fa      	bcc.n	800061c <HAL_Delay+0x14>
  {
  }
}
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	20000004 	.word	0x20000004

0800062c <HAL_SYSCFG_StrobeDBattpinsConfig>:
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800062c:	4a03      	ldr	r2, [pc, #12]	; (800063c <HAL_SYSCFG_StrobeDBattpinsConfig+0x10>)
 800062e:	6813      	ldr	r3, [r2, #0]
 8000630:	4903      	ldr	r1, [pc, #12]	; (8000640 <HAL_SYSCFG_StrobeDBattpinsConfig+0x14>)
 8000632:	400b      	ands	r3, r1
 8000634:	4303      	orrs	r3, r0
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	4770      	bx	lr
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	40010000 	.word	0x40010000
 8000640:	fffff9ff 	.word	0xfffff9ff

08000644 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000644:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000646:	2800      	cmp	r0, #0
 8000648:	db11      	blt.n	800066e <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800064a:	0883      	lsrs	r3, r0, #2
 800064c:	4d13      	ldr	r5, [pc, #76]	; (800069c <HAL_NVIC_SetPriority+0x58>)
 800064e:	33c0      	adds	r3, #192	; 0xc0
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	595c      	ldr	r4, [r3, r5]
 8000654:	2203      	movs	r2, #3
 8000656:	4010      	ands	r0, r2
 8000658:	00c0      	lsls	r0, r0, #3
 800065a:	32fc      	adds	r2, #252	; 0xfc
 800065c:	0016      	movs	r6, r2
 800065e:	4086      	lsls	r6, r0
 8000660:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000662:	0189      	lsls	r1, r1, #6
 8000664:	400a      	ands	r2, r1
 8000666:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000668:	4322      	orrs	r2, r4
 800066a:	515a      	str	r2, [r3, r5]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 800066c:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800066e:	230f      	movs	r3, #15
 8000670:	4003      	ands	r3, r0
 8000672:	3b08      	subs	r3, #8
 8000674:	089b      	lsrs	r3, r3, #2
 8000676:	3306      	adds	r3, #6
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	4a09      	ldr	r2, [pc, #36]	; (80006a0 <HAL_NVIC_SetPriority+0x5c>)
 800067c:	4694      	mov	ip, r2
 800067e:	4463      	add	r3, ip
 8000680:	685c      	ldr	r4, [r3, #4]
 8000682:	2203      	movs	r2, #3
 8000684:	4010      	ands	r0, r2
 8000686:	00c0      	lsls	r0, r0, #3
 8000688:	32fc      	adds	r2, #252	; 0xfc
 800068a:	0015      	movs	r5, r2
 800068c:	4085      	lsls	r5, r0
 800068e:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000690:	0189      	lsls	r1, r1, #6
 8000692:	400a      	ands	r2, r1
 8000694:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000696:	4322      	orrs	r2, r4
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	e7e7      	b.n	800066c <HAL_NVIC_SetPriority+0x28>
 800069c:	e000e100 	.word	0xe000e100
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006a4:	2800      	cmp	r0, #0
 80006a6:	db05      	blt.n	80006b4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a8:	231f      	movs	r3, #31
 80006aa:	4018      	ands	r0, r3
 80006ac:	3b1e      	subs	r3, #30
 80006ae:	4083      	lsls	r3, r0
 80006b0:	4a01      	ldr	r2, [pc, #4]	; (80006b8 <HAL_NVIC_EnableIRQ+0x14>)
 80006b2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80006b4:	4770      	bx	lr
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	e000e100 	.word	0xe000e100

080006bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00u;
 80006be:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006c0:	e059      	b.n	8000776 <HAL_GPIO_Init+0xba>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80006c2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80006c4:	005f      	lsls	r7, r3, #1
 80006c6:	2403      	movs	r4, #3
 80006c8:	40bc      	lsls	r4, r7
 80006ca:	43a6      	bics	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80006cc:	68cc      	ldr	r4, [r1, #12]
 80006ce:	40bc      	lsls	r4, r7
 80006d0:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80006d2:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80006d4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80006d6:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80006d8:	684e      	ldr	r6, [r1, #4]
 80006da:	0936      	lsrs	r6, r6, #4
 80006dc:	2201      	movs	r2, #1
 80006de:	4032      	ands	r2, r6
 80006e0:	409a      	lsls	r2, r3
 80006e2:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80006e4:	6042      	str	r2, [r0, #4]
 80006e6:	e056      	b.n	8000796 <HAL_GPIO_Init+0xda>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80006e8:	08de      	lsrs	r6, r3, #3
 80006ea:	3608      	adds	r6, #8
 80006ec:	00b6      	lsls	r6, r6, #2
 80006ee:	5837      	ldr	r7, [r6, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80006f0:	3205      	adds	r2, #5
 80006f2:	401a      	ands	r2, r3
 80006f4:	0092      	lsls	r2, r2, #2
 80006f6:	240f      	movs	r4, #15
 80006f8:	4094      	lsls	r4, r2
 80006fa:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80006fc:	690c      	ldr	r4, [r1, #16]
 80006fe:	4094      	lsls	r4, r2
 8000700:	0022      	movs	r2, r4
 8000702:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3u] = temp;
 8000704:	5032      	str	r2, [r6, r0]
 8000706:	e059      	b.n	80007bc <HAL_GPIO_Init+0x100>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000708:	2604      	movs	r6, #4
 800070a:	e000      	b.n	800070e <HAL_GPIO_Init+0x52>
 800070c:	2600      	movs	r6, #0
 800070e:	40a6      	lsls	r6, r4
 8000710:	0034      	movs	r4, r6
 8000712:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2u] = temp;
 8000714:	4e44      	ldr	r6, [pc, #272]	; (8000828 <HAL_GPIO_Init+0x16c>)
 8000716:	3218      	adds	r2, #24
 8000718:	0092      	lsls	r2, r2, #2
 800071a:	5194      	str	r4, [r2, r6]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800071c:	6837      	ldr	r7, [r6, #0]
        temp &= ~(iocurrent);
 800071e:	43ea      	mvns	r2, r5
 8000720:	003e      	movs	r6, r7
 8000722:	43ae      	bics	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000724:	684c      	ldr	r4, [r1, #4]
 8000726:	02e4      	lsls	r4, r4, #11
 8000728:	d501      	bpl.n	800072e <HAL_GPIO_Init+0x72>
        {
          temp |= iocurrent;
 800072a:	003e      	movs	r6, r7
 800072c:	432e      	orrs	r6, r5
        }
        EXTI->RTSR1 = temp;
 800072e:	4c3e      	ldr	r4, [pc, #248]	; (8000828 <HAL_GPIO_Init+0x16c>)
 8000730:	6026      	str	r6, [r4, #0]

        temp = EXTI->FTSR1;
 8000732:	6867      	ldr	r7, [r4, #4]
        temp &= ~(iocurrent);
 8000734:	003e      	movs	r6, r7
 8000736:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000738:	684c      	ldr	r4, [r1, #4]
 800073a:	02a4      	lsls	r4, r4, #10
 800073c:	d501      	bpl.n	8000742 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 800073e:	003e      	movs	r6, r7
 8000740:	432e      	orrs	r6, r5
        }
        EXTI->FTSR1 = temp;
 8000742:	4c39      	ldr	r4, [pc, #228]	; (8000828 <HAL_GPIO_Init+0x16c>)
 8000744:	6066      	str	r6, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000746:	2684      	movs	r6, #132	; 0x84
 8000748:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(iocurrent);
 800074a:	003e      	movs	r6, r7
 800074c:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800074e:	684c      	ldr	r4, [r1, #4]
 8000750:	03a4      	lsls	r4, r4, #14
 8000752:	d501      	bpl.n	8000758 <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 8000754:	003e      	movs	r6, r7
 8000756:	432e      	orrs	r6, r5
        }
        EXTI->EMR1 = temp;
 8000758:	4c33      	ldr	r4, [pc, #204]	; (8000828 <HAL_GPIO_Init+0x16c>)
 800075a:	2784      	movs	r7, #132	; 0x84
 800075c:	51e6      	str	r6, [r4, r7]

        temp = EXTI->IMR1;
 800075e:	2680      	movs	r6, #128	; 0x80
 8000760:	59a6      	ldr	r6, [r4, r6]
        temp &= ~(iocurrent);
 8000762:	4032      	ands	r2, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000764:	684c      	ldr	r4, [r1, #4]
 8000766:	03e4      	lsls	r4, r4, #15
 8000768:	d501      	bpl.n	800076e <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 800076a:	002a      	movs	r2, r5
 800076c:	4332      	orrs	r2, r6
        }
        EXTI->IMR1 = temp;
 800076e:	4d2e      	ldr	r5, [pc, #184]	; (8000828 <HAL_GPIO_Init+0x16c>)
 8000770:	2480      	movs	r4, #128	; 0x80
 8000772:	512a      	str	r2, [r5, r4]
      }
    }

    position++;
 8000774:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000776:	680c      	ldr	r4, [r1, #0]
 8000778:	0022      	movs	r2, r4
 800077a:	40da      	lsrs	r2, r3
 800077c:	d053      	beq.n	8000826 <HAL_GPIO_Init+0x16a>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800077e:	2201      	movs	r2, #1
 8000780:	409a      	lsls	r2, r3
 8000782:	0025      	movs	r5, r4
 8000784:	4015      	ands	r5, r2
    if (iocurrent != 0x00u)
 8000786:	4214      	tst	r4, r2
 8000788:	d0f4      	beq.n	8000774 <HAL_GPIO_Init+0xb8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800078a:	684e      	ldr	r6, [r1, #4]
 800078c:	2403      	movs	r4, #3
 800078e:	4034      	ands	r4, r6
 8000790:	3c01      	subs	r4, #1
 8000792:	2c01      	cmp	r4, #1
 8000794:	d995      	bls.n	80006c2 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000796:	684c      	ldr	r4, [r1, #4]
 8000798:	2203      	movs	r2, #3
 800079a:	4022      	ands	r2, r4
 800079c:	2a03      	cmp	r2, #3
 800079e:	d008      	beq.n	80007b2 <HAL_GPIO_Init+0xf6>
        temp = GPIOx->PUPDR;
 80007a0:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80007a2:	005e      	lsls	r6, r3, #1
 80007a4:	2203      	movs	r2, #3
 80007a6:	40b2      	lsls	r2, r6
 80007a8:	4394      	bics	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80007aa:	688a      	ldr	r2, [r1, #8]
 80007ac:	40b2      	lsls	r2, r6
 80007ae:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80007b0:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007b2:	684c      	ldr	r4, [r1, #4]
 80007b4:	2203      	movs	r2, #3
 80007b6:	4022      	ands	r2, r4
 80007b8:	2a02      	cmp	r2, #2
 80007ba:	d095      	beq.n	80006e8 <HAL_GPIO_Init+0x2c>
      temp = GPIOx->MODER;
 80007bc:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80007be:	005e      	lsls	r6, r3, #1
 80007c0:	2203      	movs	r2, #3
 80007c2:	0017      	movs	r7, r2
 80007c4:	40b7      	lsls	r7, r6
 80007c6:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80007c8:	684f      	ldr	r7, [r1, #4]
 80007ca:	403a      	ands	r2, r7
 80007cc:	40b2      	lsls	r2, r6
 80007ce:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80007d0:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80007d2:	684c      	ldr	r4, [r1, #4]
 80007d4:	22c0      	movs	r2, #192	; 0xc0
 80007d6:	0292      	lsls	r2, r2, #10
 80007d8:	4214      	tst	r4, r2
 80007da:	d0cb      	beq.n	8000774 <HAL_GPIO_Init+0xb8>
        temp = EXTI->EXTICR[position >> 2u];
 80007dc:	089a      	lsrs	r2, r3, #2
 80007de:	0014      	movs	r4, r2
 80007e0:	3418      	adds	r4, #24
 80007e2:	00a4      	lsls	r4, r4, #2
 80007e4:	4e10      	ldr	r6, [pc, #64]	; (8000828 <HAL_GPIO_Init+0x16c>)
 80007e6:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80007e8:	2403      	movs	r4, #3
 80007ea:	401c      	ands	r4, r3
 80007ec:	00e4      	lsls	r4, r4, #3
 80007ee:	260f      	movs	r6, #15
 80007f0:	40a6      	lsls	r6, r4
 80007f2:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80007f4:	26a0      	movs	r6, #160	; 0xa0
 80007f6:	05f6      	lsls	r6, r6, #23
 80007f8:	42b0      	cmp	r0, r6
 80007fa:	d087      	beq.n	800070c <HAL_GPIO_Init+0x50>
 80007fc:	4e0b      	ldr	r6, [pc, #44]	; (800082c <HAL_GPIO_Init+0x170>)
 80007fe:	42b0      	cmp	r0, r6
 8000800:	d00b      	beq.n	800081a <HAL_GPIO_Init+0x15e>
 8000802:	4e0b      	ldr	r6, [pc, #44]	; (8000830 <HAL_GPIO_Init+0x174>)
 8000804:	42b0      	cmp	r0, r6
 8000806:	d00a      	beq.n	800081e <HAL_GPIO_Init+0x162>
 8000808:	4e0a      	ldr	r6, [pc, #40]	; (8000834 <HAL_GPIO_Init+0x178>)
 800080a:	42b0      	cmp	r0, r6
 800080c:	d009      	beq.n	8000822 <HAL_GPIO_Init+0x166>
 800080e:	4e0a      	ldr	r6, [pc, #40]	; (8000838 <HAL_GPIO_Init+0x17c>)
 8000810:	42b0      	cmp	r0, r6
 8000812:	d100      	bne.n	8000816 <HAL_GPIO_Init+0x15a>
 8000814:	e778      	b.n	8000708 <HAL_GPIO_Init+0x4c>
 8000816:	2605      	movs	r6, #5
 8000818:	e779      	b.n	800070e <HAL_GPIO_Init+0x52>
 800081a:	2601      	movs	r6, #1
 800081c:	e777      	b.n	800070e <HAL_GPIO_Init+0x52>
 800081e:	2602      	movs	r6, #2
 8000820:	e775      	b.n	800070e <HAL_GPIO_Init+0x52>
 8000822:	2603      	movs	r6, #3
 8000824:	e773      	b.n	800070e <HAL_GPIO_Init+0x52>
  }
}
 8000826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000828:	40021800 	.word	0x40021800
 800082c:	50000400 	.word	0x50000400
 8000830:	50000800 	.word	0x50000800
 8000834:	50000c00 	.word	0x50000c00
 8000838:	50001000 	.word	0x50001000

0800083c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800083c:	2a00      	cmp	r2, #0
 800083e:	d001      	beq.n	8000844 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000840:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000842:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000844:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000846:	e7fc      	b.n	8000842 <HAL_GPIO_WritePin+0x6>

08000848 <HAL_GPIO_EXTI_Rising_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8000848:	4770      	bx	lr

0800084a <HAL_GPIO_EXTI_Falling_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800084a:	4770      	bx	lr

0800084c <HAL_GPIO_EXTI_IRQHandler>:
{
 800084c:	b510      	push	{r4, lr}
 800084e:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	4218      	tst	r0, r3
 8000856:	d104      	bne.n	8000862 <HAL_GPIO_EXTI_IRQHandler+0x16>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800085a:	691b      	ldr	r3, [r3, #16]
 800085c:	4223      	tst	r3, r4
 800085e:	d105      	bne.n	800086c <HAL_GPIO_EXTI_IRQHandler+0x20>
}
 8000860:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000864:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000866:	f7ff ffef 	bl	8000848 <HAL_GPIO_EXTI_Rising_Callback>
 800086a:	e7f5      	b.n	8000858 <HAL_GPIO_EXTI_IRQHandler+0xc>
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800086c:	4b02      	ldr	r3, [pc, #8]	; (8000878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800086e:	611c      	str	r4, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000870:	0020      	movs	r0, r4
 8000872:	f7ff ffea 	bl	800084a <HAL_GPIO_EXTI_Falling_Callback>
}
 8000876:	e7f3      	b.n	8000860 <HAL_GPIO_EXTI_IRQHandler+0x14>
 8000878:	40021800 	.word	0x40021800

0800087c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800087c:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800087e:	4a10      	ldr	r2, [pc, #64]	; (80008c0 <HAL_PWREx_ControlVoltageScaling+0x44>)
 8000880:	6813      	ldr	r3, [r2, #0]
 8000882:	4910      	ldr	r1, [pc, #64]	; (80008c4 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8000884:	400b      	ands	r3, r1
 8000886:	4303      	orrs	r3, r0
 8000888:	6013      	str	r3, [r2, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800088a:	2380      	movs	r3, #128	; 0x80
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	4298      	cmp	r0, r3
 8000890:	d001      	beq.n	8000896 <HAL_PWREx_ControlVoltageScaling+0x1a>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000892:	2000      	movs	r0, #0
}
 8000894:	bd10      	pop	{r4, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	0058      	lsls	r0, r3, #1
 800089c:	18c0      	adds	r0, r0, r3
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	490a      	ldr	r1, [pc, #40]	; (80008cc <HAL_PWREx_ControlVoltageScaling+0x50>)
 80008a2:	f7ff fc2f 	bl	8000104 <__udivsi3>
 80008a6:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <HAL_PWREx_ControlVoltageScaling+0x44>)
 80008aa:	695b      	ldr	r3, [r3, #20]
 80008ac:	055b      	lsls	r3, r3, #21
 80008ae:	d503      	bpl.n	80008b8 <HAL_PWREx_ControlVoltageScaling+0x3c>
      if (wait_loop_index != 0U)
 80008b0:	2800      	cmp	r0, #0
 80008b2:	d003      	beq.n	80008bc <HAL_PWREx_ControlVoltageScaling+0x40>
        wait_loop_index--;
 80008b4:	3801      	subs	r0, #1
 80008b6:	e7f7      	b.n	80008a8 <HAL_PWREx_ControlVoltageScaling+0x2c>
  return HAL_OK;
 80008b8:	2000      	movs	r0, #0
 80008ba:	e7eb      	b.n	8000894 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 80008bc:	2003      	movs	r0, #3
 80008be:	e7e9      	b.n	8000894 <HAL_PWREx_ControlVoltageScaling+0x18>
 80008c0:	40007000 	.word	0x40007000
 80008c4:	fffff9ff 	.word	0xfffff9ff
 80008c8:	20000000 	.word	0x20000000
 80008cc:	000f4240 	.word	0x000f4240

080008d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008d0:	b570      	push	{r4, r5, r6, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80008d6:	d100      	bne.n	80008da <HAL_RCC_OscConfig+0xa>
 80008d8:	e25e      	b.n	8000d98 <HAL_RCC_OscConfig+0x4c8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008da:	6803      	ldr	r3, [r0, #0]
 80008dc:	07db      	lsls	r3, r3, #31
 80008de:	d539      	bpl.n	8000954 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80008e0:	4ac1      	ldr	r2, [pc, #772]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 80008e2:	6891      	ldr	r1, [r2, #8]
 80008e4:	2338      	movs	r3, #56	; 0x38
 80008e6:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80008e8:	68d1      	ldr	r1, [r2, #12]
 80008ea:	2203      	movs	r2, #3
 80008ec:	400a      	ands	r2, r1

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80008ee:	2b10      	cmp	r3, #16
 80008f0:	d026      	beq.n	8000940 <HAL_RCC_OscConfig+0x70>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80008f2:	2b08      	cmp	r3, #8
 80008f4:	d026      	beq.n	8000944 <HAL_RCC_OscConfig+0x74>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008f6:	6863      	ldr	r3, [r4, #4]
 80008f8:	2280      	movs	r2, #128	; 0x80
 80008fa:	0252      	lsls	r2, r2, #9
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d07f      	beq.n	8000a00 <HAL_RCC_OscConfig+0x130>
 8000900:	22a0      	movs	r2, #160	; 0xa0
 8000902:	02d2      	lsls	r2, r2, #11
 8000904:	4293      	cmp	r3, r2
 8000906:	d100      	bne.n	800090a <HAL_RCC_OscConfig+0x3a>
 8000908:	e081      	b.n	8000a0e <HAL_RCC_OscConfig+0x13e>
 800090a:	4bb7      	ldr	r3, [pc, #732]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	49b7      	ldr	r1, [pc, #732]	; (8000bec <HAL_RCC_OscConfig+0x31c>)
 8000910:	400a      	ands	r2, r1
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	49b6      	ldr	r1, [pc, #728]	; (8000bf0 <HAL_RCC_OscConfig+0x320>)
 8000918:	400a      	ands	r2, r1
 800091a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800091c:	6863      	ldr	r3, [r4, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d100      	bne.n	8000924 <HAL_RCC_OscConfig+0x54>
 8000922:	e080      	b.n	8000a26 <HAL_RCC_OscConfig+0x156>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000924:	f7ff fe6a 	bl	80005fc <HAL_GetTick>
 8000928:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800092a:	4baf      	ldr	r3, [pc, #700]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	039b      	lsls	r3, r3, #14
 8000930:	d410      	bmi.n	8000954 <HAL_RCC_OscConfig+0x84>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000932:	f7ff fe63 	bl	80005fc <HAL_GetTick>
 8000936:	1b40      	subs	r0, r0, r5
 8000938:	2864      	cmp	r0, #100	; 0x64
 800093a:	d9f6      	bls.n	800092a <HAL_RCC_OscConfig+0x5a>
          {
            return HAL_TIMEOUT;
 800093c:	2003      	movs	r0, #3
 800093e:	e22c      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000940:	2a03      	cmp	r2, #3
 8000942:	d1d6      	bne.n	80008f2 <HAL_RCC_OscConfig+0x22>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000944:	4ba8      	ldr	r3, [pc, #672]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	039b      	lsls	r3, r3, #14
 800094a:	d503      	bpl.n	8000954 <HAL_RCC_OscConfig+0x84>
 800094c:	6863      	ldr	r3, [r4, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d100      	bne.n	8000954 <HAL_RCC_OscConfig+0x84>
 8000952:	e224      	b.n	8000d9e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000954:	6823      	ldr	r3, [r4, #0]
 8000956:	079b      	lsls	r3, r3, #30
 8000958:	d531      	bpl.n	80009be <HAL_RCC_OscConfig+0xee>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800095a:	4aa3      	ldr	r2, [pc, #652]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 800095c:	6891      	ldr	r1, [r2, #8]
 800095e:	2338      	movs	r3, #56	; 0x38
 8000960:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000962:	68d1      	ldr	r1, [r2, #12]
 8000964:	2203      	movs	r2, #3
 8000966:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000968:	2b10      	cmp	r3, #16
 800096a:	d06a      	beq.n	8000a42 <HAL_RCC_OscConfig+0x172>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800096c:	2b00      	cmp	r3, #0
 800096e:	d16b      	bne.n	8000a48 <HAL_RCC_OscConfig+0x178>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000970:	4a9d      	ldr	r2, [pc, #628]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 8000972:	6812      	ldr	r2, [r2, #0]
 8000974:	0552      	lsls	r2, r2, #21
 8000976:	d503      	bpl.n	8000980 <HAL_RCC_OscConfig+0xb0>
 8000978:	68e2      	ldr	r2, [r4, #12]
 800097a:	2a00      	cmp	r2, #0
 800097c:	d100      	bne.n	8000980 <HAL_RCC_OscConfig+0xb0>
 800097e:	e210      	b.n	8000da2 <HAL_RCC_OscConfig+0x4d2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000980:	4899      	ldr	r0, [pc, #612]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 8000982:	6842      	ldr	r2, [r0, #4]
 8000984:	499b      	ldr	r1, [pc, #620]	; (8000bf4 <HAL_RCC_OscConfig+0x324>)
 8000986:	400a      	ands	r2, r1
 8000988:	6961      	ldr	r1, [r4, #20]
 800098a:	0209      	lsls	r1, r1, #8
 800098c:	430a      	orrs	r2, r1
 800098e:	6042      	str	r2, [r0, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000990:	2b00      	cmp	r3, #0
 8000992:	d10d      	bne.n	80009b0 <HAL_RCC_OscConfig+0xe0>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000994:	6803      	ldr	r3, [r0, #0]
 8000996:	4998      	ldr	r1, [pc, #608]	; (8000bf8 <HAL_RCC_OscConfig+0x328>)
 8000998:	400b      	ands	r3, r1
 800099a:	6921      	ldr	r1, [r4, #16]
 800099c:	430b      	orrs	r3, r1
 800099e:	6003      	str	r3, [r0, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80009a0:	6803      	ldr	r3, [r0, #0]
 80009a2:	0adb      	lsrs	r3, r3, #11
 80009a4:	2207      	movs	r2, #7
 80009a6:	401a      	ands	r2, r3
 80009a8:	4b94      	ldr	r3, [pc, #592]	; (8000bfc <HAL_RCC_OscConfig+0x32c>)
 80009aa:	40d3      	lsrs	r3, r2
 80009ac:	4a94      	ldr	r2, [pc, #592]	; (8000c00 <HAL_RCC_OscConfig+0x330>)
 80009ae:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80009b0:	4b94      	ldr	r3, [pc, #592]	; (8000c04 <HAL_RCC_OscConfig+0x334>)
 80009b2:	6818      	ldr	r0, [r3, #0]
 80009b4:	f7ff fd74 	bl	80004a0 <HAL_InitTick>
 80009b8:	2800      	cmp	r0, #0
 80009ba:	d000      	beq.n	80009be <HAL_RCC_OscConfig+0xee>
 80009bc:	e1f3      	b.n	8000da6 <HAL_RCC_OscConfig+0x4d6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009be:	6823      	ldr	r3, [r4, #0]
 80009c0:	071b      	lsls	r3, r3, #28
 80009c2:	d400      	bmi.n	80009c6 <HAL_RCC_OscConfig+0xf6>
 80009c4:	e081      	b.n	8000aca <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80009c6:	4b88      	ldr	r3, [pc, #544]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 80009c8:	689a      	ldr	r2, [r3, #8]
 80009ca:	2338      	movs	r3, #56	; 0x38
 80009cc:	4013      	ands	r3, r2
 80009ce:	2b18      	cmp	r3, #24
 80009d0:	d073      	beq.n	8000aba <HAL_RCC_OscConfig+0x1ea>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009d2:	69a3      	ldr	r3, [r4, #24]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d100      	bne.n	80009da <HAL_RCC_OscConfig+0x10a>
 80009d8:	e0b4      	b.n	8000b44 <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80009da:	4a83      	ldr	r2, [pc, #524]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 80009dc:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80009de:	2101      	movs	r1, #1
 80009e0:	430b      	orrs	r3, r1
 80009e2:	6613      	str	r3, [r2, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80009e4:	f7ff fe0a 	bl	80005fc <HAL_GetTick>
 80009e8:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80009ea:	4b7f      	ldr	r3, [pc, #508]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 80009ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ee:	079b      	lsls	r3, r3, #30
 80009f0:	d46b      	bmi.n	8000aca <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009f2:	f7ff fe03 	bl	80005fc <HAL_GetTick>
 80009f6:	1b40      	subs	r0, r0, r5
 80009f8:	2802      	cmp	r0, #2
 80009fa:	d9f6      	bls.n	80009ea <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80009fc:	2003      	movs	r0, #3
 80009fe:	e1cc      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a00:	4a79      	ldr	r2, [pc, #484]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 8000a02:	6811      	ldr	r1, [r2, #0]
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	025b      	lsls	r3, r3, #9
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	6013      	str	r3, [r2, #0]
 8000a0c:	e786      	b.n	800091c <HAL_RCC_OscConfig+0x4c>
 8000a0e:	4b76      	ldr	r3, [pc, #472]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 8000a10:	6819      	ldr	r1, [r3, #0]
 8000a12:	2280      	movs	r2, #128	; 0x80
 8000a14:	02d2      	lsls	r2, r2, #11
 8000a16:	430a      	orrs	r2, r1
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	6819      	ldr	r1, [r3, #0]
 8000a1c:	2280      	movs	r2, #128	; 0x80
 8000a1e:	0252      	lsls	r2, r2, #9
 8000a20:	430a      	orrs	r2, r1
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	e77a      	b.n	800091c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000a26:	f7ff fde9 	bl	80005fc <HAL_GetTick>
 8000a2a:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000a2c:	4b6e      	ldr	r3, [pc, #440]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	039b      	lsls	r3, r3, #14
 8000a32:	d58f      	bpl.n	8000954 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a34:	f7ff fde2 	bl	80005fc <HAL_GetTick>
 8000a38:	1b40      	subs	r0, r0, r5
 8000a3a:	2864      	cmp	r0, #100	; 0x64
 8000a3c:	d9f6      	bls.n	8000a2c <HAL_RCC_OscConfig+0x15c>
            return HAL_TIMEOUT;
 8000a3e:	2003      	movs	r0, #3
 8000a40:	e1ab      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000a42:	2a02      	cmp	r2, #2
 8000a44:	d192      	bne.n	800096c <HAL_RCC_OscConfig+0x9c>
 8000a46:	e793      	b.n	8000970 <HAL_RCC_OscConfig+0xa0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a48:	68e3      	ldr	r3, [r4, #12]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d022      	beq.n	8000a94 <HAL_RCC_OscConfig+0x1c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000a4e:	4a66      	ldr	r2, [pc, #408]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 8000a50:	6813      	ldr	r3, [r2, #0]
 8000a52:	4969      	ldr	r1, [pc, #420]	; (8000bf8 <HAL_RCC_OscConfig+0x328>)
 8000a54:	400b      	ands	r3, r1
 8000a56:	6921      	ldr	r1, [r4, #16]
 8000a58:	430b      	orrs	r3, r1
 8000a5a:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8000a5c:	6811      	ldr	r1, [r2, #0]
 8000a5e:	2380      	movs	r3, #128	; 0x80
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	430b      	orrs	r3, r1
 8000a64:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000a66:	f7ff fdc9 	bl	80005fc <HAL_GetTick>
 8000a6a:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000a6c:	4b5e      	ldr	r3, [pc, #376]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	055b      	lsls	r3, r3, #21
 8000a72:	d406      	bmi.n	8000a82 <HAL_RCC_OscConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a74:	f7ff fdc2 	bl	80005fc <HAL_GetTick>
 8000a78:	1b40      	subs	r0, r0, r5
 8000a7a:	2802      	cmp	r0, #2
 8000a7c:	d9f6      	bls.n	8000a6c <HAL_RCC_OscConfig+0x19c>
            return HAL_TIMEOUT;
 8000a7e:	2003      	movs	r0, #3
 8000a80:	e18b      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a82:	4959      	ldr	r1, [pc, #356]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 8000a84:	684b      	ldr	r3, [r1, #4]
 8000a86:	4a5b      	ldr	r2, [pc, #364]	; (8000bf4 <HAL_RCC_OscConfig+0x324>)
 8000a88:	4013      	ands	r3, r2
 8000a8a:	6962      	ldr	r2, [r4, #20]
 8000a8c:	0212      	lsls	r2, r2, #8
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	604b      	str	r3, [r1, #4]
 8000a92:	e794      	b.n	80009be <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 8000a94:	4a54      	ldr	r2, [pc, #336]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 8000a96:	6813      	ldr	r3, [r2, #0]
 8000a98:	495b      	ldr	r1, [pc, #364]	; (8000c08 <HAL_RCC_OscConfig+0x338>)
 8000a9a:	400b      	ands	r3, r1
 8000a9c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000a9e:	f7ff fdad 	bl	80005fc <HAL_GetTick>
 8000aa2:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000aa4:	4b50      	ldr	r3, [pc, #320]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	055b      	lsls	r3, r3, #21
 8000aaa:	d588      	bpl.n	80009be <HAL_RCC_OscConfig+0xee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000aac:	f7ff fda6 	bl	80005fc <HAL_GetTick>
 8000ab0:	1b40      	subs	r0, r0, r5
 8000ab2:	2802      	cmp	r0, #2
 8000ab4:	d9f6      	bls.n	8000aa4 <HAL_RCC_OscConfig+0x1d4>
            return HAL_TIMEOUT;
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	e16f      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000aba:	4b4b      	ldr	r3, [pc, #300]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 8000abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000abe:	079b      	lsls	r3, r3, #30
 8000ac0:	d503      	bpl.n	8000aca <HAL_RCC_OscConfig+0x1fa>
 8000ac2:	69a3      	ldr	r3, [r4, #24]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d100      	bne.n	8000aca <HAL_RCC_OscConfig+0x1fa>
 8000ac8:	e16f      	b.n	8000daa <HAL_RCC_OscConfig+0x4da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000aca:	6823      	ldr	r3, [r4, #0]
 8000acc:	075b      	lsls	r3, r3, #29
 8000ace:	d400      	bmi.n	8000ad2 <HAL_RCC_OscConfig+0x202>
 8000ad0:	e0a2      	b.n	8000c18 <HAL_RCC_OscConfig+0x348>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000ad2:	4b45      	ldr	r3, [pc, #276]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 8000ad4:	689a      	ldr	r2, [r3, #8]
 8000ad6:	2338      	movs	r3, #56	; 0x38
 8000ad8:	4013      	ands	r3, r2
 8000ada:	2b20      	cmp	r3, #32
 8000adc:	d045      	beq.n	8000b6a <HAL_RCC_OscConfig+0x29a>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000ade:	4b42      	ldr	r3, [pc, #264]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 8000ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ae2:	00db      	lsls	r3, r3, #3
 8000ae4:	d44a      	bmi.n	8000b7c <HAL_RCC_OscConfig+0x2ac>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	4b40      	ldr	r3, [pc, #256]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 8000ae8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000aea:	2180      	movs	r1, #128	; 0x80
 8000aec:	0549      	lsls	r1, r1, #21
 8000aee:	430a      	orrs	r2, r1
 8000af0:	63da      	str	r2, [r3, #60]	; 0x3c
 8000af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000af4:	400b      	ands	r3, r1
 8000af6:	9301      	str	r3, [sp, #4]
 8000af8:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8000afa:	2501      	movs	r5, #1
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000afc:	4b43      	ldr	r3, [pc, #268]	; (8000c0c <HAL_RCC_OscConfig+0x33c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	05db      	lsls	r3, r3, #23
 8000b02:	d53d      	bpl.n	8000b80 <HAL_RCC_OscConfig+0x2b0>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b04:	68a3      	ldr	r3, [r4, #8]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d04e      	beq.n	8000ba8 <HAL_RCC_OscConfig+0x2d8>
 8000b0a:	2b05      	cmp	r3, #5
 8000b0c:	d052      	beq.n	8000bb4 <HAL_RCC_OscConfig+0x2e4>
 8000b0e:	4b36      	ldr	r3, [pc, #216]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 8000b10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000b12:	2101      	movs	r1, #1
 8000b14:	438a      	bics	r2, r1
 8000b16:	65da      	str	r2, [r3, #92]	; 0x5c
 8000b18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000b1a:	3103      	adds	r1, #3
 8000b1c:	438a      	bics	r2, r1
 8000b1e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b20:	68a3      	ldr	r3, [r4, #8]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d050      	beq.n	8000bc8 <HAL_RCC_OscConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b26:	f7ff fd69 	bl	80005fc <HAL_GetTick>
 8000b2a:	0006      	movs	r6, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000b2c:	4b2e      	ldr	r3, [pc, #184]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 8000b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b30:	079b      	lsls	r3, r3, #30
 8000b32:	d46f      	bmi.n	8000c14 <HAL_RCC_OscConfig+0x344>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b34:	f7ff fd62 	bl	80005fc <HAL_GetTick>
 8000b38:	1b80      	subs	r0, r0, r6
 8000b3a:	4b35      	ldr	r3, [pc, #212]	; (8000c10 <HAL_RCC_OscConfig+0x340>)
 8000b3c:	4298      	cmp	r0, r3
 8000b3e:	d9f5      	bls.n	8000b2c <HAL_RCC_OscConfig+0x25c>
          {
            return HAL_TIMEOUT;
 8000b40:	2003      	movs	r0, #3
 8000b42:	e12a      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_LSI_DISABLE();
 8000b44:	4a28      	ldr	r2, [pc, #160]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 8000b46:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8000b48:	2101      	movs	r1, #1
 8000b4a:	438b      	bics	r3, r1
 8000b4c:	6613      	str	r3, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 8000b4e:	f7ff fd55 	bl	80005fc <HAL_GetTick>
 8000b52:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000b54:	4b24      	ldr	r3, [pc, #144]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 8000b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b58:	079b      	lsls	r3, r3, #30
 8000b5a:	d5b6      	bpl.n	8000aca <HAL_RCC_OscConfig+0x1fa>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b5c:	f7ff fd4e 	bl	80005fc <HAL_GetTick>
 8000b60:	1b40      	subs	r0, r0, r5
 8000b62:	2802      	cmp	r0, #2
 8000b64:	d9f6      	bls.n	8000b54 <HAL_RCC_OscConfig+0x284>
            return HAL_TIMEOUT;
 8000b66:	2003      	movs	r0, #3
 8000b68:	e117      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000b6a:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 8000b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b6e:	079b      	lsls	r3, r3, #30
 8000b70:	d552      	bpl.n	8000c18 <HAL_RCC_OscConfig+0x348>
 8000b72:	68a3      	ldr	r3, [r4, #8]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d14f      	bne.n	8000c18 <HAL_RCC_OscConfig+0x348>
        return HAL_ERROR;
 8000b78:	2001      	movs	r0, #1
 8000b7a:	e10e      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
    FlagStatus       pwrclkchanged = RESET;
 8000b7c:	2500      	movs	r5, #0
 8000b7e:	e7bd      	b.n	8000afc <HAL_RCC_OscConfig+0x22c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000b80:	4a22      	ldr	r2, [pc, #136]	; (8000c0c <HAL_RCC_OscConfig+0x33c>)
 8000b82:	6811      	ldr	r1, [r2, #0]
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	430b      	orrs	r3, r1
 8000b8a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000b8c:	f7ff fd36 	bl	80005fc <HAL_GetTick>
 8000b90:	0006      	movs	r6, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000b92:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <HAL_RCC_OscConfig+0x33c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	05db      	lsls	r3, r3, #23
 8000b98:	d4b4      	bmi.n	8000b04 <HAL_RCC_OscConfig+0x234>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b9a:	f7ff fd2f 	bl	80005fc <HAL_GetTick>
 8000b9e:	1b80      	subs	r0, r0, r6
 8000ba0:	2802      	cmp	r0, #2
 8000ba2:	d9f6      	bls.n	8000b92 <HAL_RCC_OscConfig+0x2c2>
            return HAL_TIMEOUT;
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	e0f8      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ba8:	4a0f      	ldr	r2, [pc, #60]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 8000baa:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8000bac:	2101      	movs	r1, #1
 8000bae:	430b      	orrs	r3, r1
 8000bb0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bb2:	e7b5      	b.n	8000b20 <HAL_RCC_OscConfig+0x250>
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 8000bb6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000bb8:	2104      	movs	r1, #4
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	65da      	str	r2, [r3, #92]	; 0x5c
 8000bbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000bc0:	3903      	subs	r1, #3
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	65da      	str	r2, [r3, #92]	; 0x5c
 8000bc6:	e7ab      	b.n	8000b20 <HAL_RCC_OscConfig+0x250>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bc8:	f7ff fd18 	bl	80005fc <HAL_GetTick>
 8000bcc:	0006      	movs	r6, r0

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_RCC_OscConfig+0x318>)
 8000bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bd2:	079b      	lsls	r3, r3, #30
 8000bd4:	d51e      	bpl.n	8000c14 <HAL_RCC_OscConfig+0x344>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bd6:	f7ff fd11 	bl	80005fc <HAL_GetTick>
 8000bda:	1b80      	subs	r0, r0, r6
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <HAL_RCC_OscConfig+0x340>)
 8000bde:	4298      	cmp	r0, r3
 8000be0:	d9f5      	bls.n	8000bce <HAL_RCC_OscConfig+0x2fe>
          {
            return HAL_TIMEOUT;
 8000be2:	2003      	movs	r0, #3
 8000be4:	e0d9      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	40021000 	.word	0x40021000
 8000bec:	fffeffff 	.word	0xfffeffff
 8000bf0:	fffbffff 	.word	0xfffbffff
 8000bf4:	ffff80ff 	.word	0xffff80ff
 8000bf8:	ffffc7ff 	.word	0xffffc7ff
 8000bfc:	00f42400 	.word	0x00f42400
 8000c00:	20000000 	.word	0x20000000
 8000c04:	20000008 	.word	0x20000008
 8000c08:	fffffeff 	.word	0xfffffeff
 8000c0c:	40007000 	.word	0x40007000
 8000c10:	00001388 	.word	0x00001388
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8000c14:	2d01      	cmp	r5, #1
 8000c16:	d019      	beq.n	8000c4c <HAL_RCC_OscConfig+0x37c>
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000c18:	6823      	ldr	r3, [r4, #0]
 8000c1a:	069b      	lsls	r3, r3, #26
 8000c1c:	d52f      	bpl.n	8000c7e <HAL_RCC_OscConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000c1e:	69e3      	ldr	r3, [r4, #28]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d019      	beq.n	8000c58 <HAL_RCC_OscConfig+0x388>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000c24:	4a6a      	ldr	r2, [pc, #424]	; (8000dd0 <HAL_RCC_OscConfig+0x500>)
 8000c26:	6811      	ldr	r1, [r2, #0]
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	03db      	lsls	r3, r3, #15
 8000c2c:	430b      	orrs	r3, r1
 8000c2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c30:	f7ff fce4 	bl	80005fc <HAL_GetTick>
 8000c34:	0005      	movs	r5, r0

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8000c36:	4b66      	ldr	r3, [pc, #408]	; (8000dd0 <HAL_RCC_OscConfig+0x500>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	021b      	lsls	r3, r3, #8
 8000c3c:	d41f      	bmi.n	8000c7e <HAL_RCC_OscConfig+0x3ae>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000c3e:	f7ff fcdd 	bl	80005fc <HAL_GetTick>
 8000c42:	1b40      	subs	r0, r0, r5
 8000c44:	2802      	cmp	r0, #2
 8000c46:	d9f6      	bls.n	8000c36 <HAL_RCC_OscConfig+0x366>
        {
          return HAL_TIMEOUT;
 8000c48:	2003      	movs	r0, #3
 8000c4a:	e0a6      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_PWR_CLK_DISABLE();
 8000c4c:	4a60      	ldr	r2, [pc, #384]	; (8000dd0 <HAL_RCC_OscConfig+0x500>)
 8000c4e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000c50:	4960      	ldr	r1, [pc, #384]	; (8000dd4 <HAL_RCC_OscConfig+0x504>)
 8000c52:	400b      	ands	r3, r1
 8000c54:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000c56:	e7df      	b.n	8000c18 <HAL_RCC_OscConfig+0x348>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000c58:	4a5d      	ldr	r2, [pc, #372]	; (8000dd0 <HAL_RCC_OscConfig+0x500>)
 8000c5a:	6813      	ldr	r3, [r2, #0]
 8000c5c:	495e      	ldr	r1, [pc, #376]	; (8000dd8 <HAL_RCC_OscConfig+0x508>)
 8000c5e:	400b      	ands	r3, r1
 8000c60:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c62:	f7ff fccb 	bl	80005fc <HAL_GetTick>
 8000c66:	0005      	movs	r5, r0

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8000c68:	4b59      	ldr	r3, [pc, #356]	; (8000dd0 <HAL_RCC_OscConfig+0x500>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	021b      	lsls	r3, r3, #8
 8000c6e:	d506      	bpl.n	8000c7e <HAL_RCC_OscConfig+0x3ae>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000c70:	f7ff fcc4 	bl	80005fc <HAL_GetTick>
 8000c74:	1b40      	subs	r0, r0, r5
 8000c76:	2802      	cmp	r0, #2
 8000c78:	d9f6      	bls.n	8000c68 <HAL_RCC_OscConfig+0x398>
        {
          return HAL_TIMEOUT;
 8000c7a:	2003      	movs	r0, #3
 8000c7c:	e08d      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000c7e:	6a23      	ldr	r3, [r4, #32]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d100      	bne.n	8000c86 <HAL_RCC_OscConfig+0x3b6>
 8000c84:	e093      	b.n	8000dae <HAL_RCC_OscConfig+0x4de>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c86:	4a52      	ldr	r2, [pc, #328]	; (8000dd0 <HAL_RCC_OscConfig+0x500>)
 8000c88:	6891      	ldr	r1, [r2, #8]
 8000c8a:	2238      	movs	r2, #56	; 0x38
 8000c8c:	400a      	ands	r2, r1
 8000c8e:	2a10      	cmp	r2, #16
 8000c90:	d05a      	beq.n	8000d48 <HAL_RCC_OscConfig+0x478>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d012      	beq.n	8000cbc <HAL_RCC_OscConfig+0x3ec>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c96:	4a4e      	ldr	r2, [pc, #312]	; (8000dd0 <HAL_RCC_OscConfig+0x500>)
 8000c98:	6813      	ldr	r3, [r2, #0]
 8000c9a:	4950      	ldr	r1, [pc, #320]	; (8000ddc <HAL_RCC_OscConfig+0x50c>)
 8000c9c:	400b      	ands	r3, r1
 8000c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ca0:	f7ff fcac 	bl	80005fc <HAL_GetTick>
 8000ca4:	0004      	movs	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000ca6:	4b4a      	ldr	r3, [pc, #296]	; (8000dd0 <HAL_RCC_OscConfig+0x500>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	019b      	lsls	r3, r3, #6
 8000cac:	d545      	bpl.n	8000d3a <HAL_RCC_OscConfig+0x46a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cae:	f7ff fca5 	bl	80005fc <HAL_GetTick>
 8000cb2:	1b00      	subs	r0, r0, r4
 8000cb4:	2802      	cmp	r0, #2
 8000cb6:	d9f6      	bls.n	8000ca6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8000cb8:	2003      	movs	r0, #3
 8000cba:	e06e      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_PLL_DISABLE();
 8000cbc:	4a44      	ldr	r2, [pc, #272]	; (8000dd0 <HAL_RCC_OscConfig+0x500>)
 8000cbe:	6813      	ldr	r3, [r2, #0]
 8000cc0:	4946      	ldr	r1, [pc, #280]	; (8000ddc <HAL_RCC_OscConfig+0x50c>)
 8000cc2:	400b      	ands	r3, r1
 8000cc4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000cc6:	f7ff fc99 	bl	80005fc <HAL_GetTick>
 8000cca:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000ccc:	4b40      	ldr	r3, [pc, #256]	; (8000dd0 <HAL_RCC_OscConfig+0x500>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	019b      	lsls	r3, r3, #6
 8000cd2:	d506      	bpl.n	8000ce2 <HAL_RCC_OscConfig+0x412>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cd4:	f7ff fc92 	bl	80005fc <HAL_GetTick>
 8000cd8:	1b40      	subs	r0, r0, r5
 8000cda:	2802      	cmp	r0, #2
 8000cdc:	d9f6      	bls.n	8000ccc <HAL_RCC_OscConfig+0x3fc>
            return HAL_TIMEOUT;
 8000cde:	2003      	movs	r0, #3
 8000ce0:	e05b      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ce2:	4a3b      	ldr	r2, [pc, #236]	; (8000dd0 <HAL_RCC_OscConfig+0x500>)
 8000ce4:	68d3      	ldr	r3, [r2, #12]
 8000ce6:	493e      	ldr	r1, [pc, #248]	; (8000de0 <HAL_RCC_OscConfig+0x510>)
 8000ce8:	4019      	ands	r1, r3
 8000cea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000cec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000cee:	4303      	orrs	r3, r0
 8000cf0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000cf2:	0200      	lsls	r0, r0, #8
 8000cf4:	4303      	orrs	r3, r0
 8000cf6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000cf8:	4303      	orrs	r3, r0
 8000cfa:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8000cfc:	4303      	orrs	r3, r0
 8000cfe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000d00:	4303      	orrs	r3, r0
 8000d02:	430b      	orrs	r3, r1
 8000d04:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8000d06:	6811      	ldr	r1, [r2, #0]
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	045b      	lsls	r3, r3, #17
 8000d0c:	430b      	orrs	r3, r1
 8000d0e:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8000d10:	68d1      	ldr	r1, [r2, #12]
 8000d12:	2380      	movs	r3, #128	; 0x80
 8000d14:	055b      	lsls	r3, r3, #21
 8000d16:	430b      	orrs	r3, r1
 8000d18:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8000d1a:	f7ff fc6f 	bl	80005fc <HAL_GetTick>
 8000d1e:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000d20:	4b2b      	ldr	r3, [pc, #172]	; (8000dd0 <HAL_RCC_OscConfig+0x500>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	019b      	lsls	r3, r3, #6
 8000d26:	d406      	bmi.n	8000d36 <HAL_RCC_OscConfig+0x466>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d28:	f7ff fc68 	bl	80005fc <HAL_GetTick>
 8000d2c:	1b00      	subs	r0, r0, r4
 8000d2e:	2802      	cmp	r0, #2
 8000d30:	d9f6      	bls.n	8000d20 <HAL_RCC_OscConfig+0x450>
            return HAL_TIMEOUT;
 8000d32:	2003      	movs	r0, #3
 8000d34:	e031      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000d36:	2000      	movs	r0, #0
 8000d38:	e02f      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8000d3a:	4a25      	ldr	r2, [pc, #148]	; (8000dd0 <HAL_RCC_OscConfig+0x500>)
 8000d3c:	68d3      	ldr	r3, [r2, #12]
 8000d3e:	4929      	ldr	r1, [pc, #164]	; (8000de4 <HAL_RCC_OscConfig+0x514>)
 8000d40:	400b      	ands	r3, r1
 8000d42:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8000d44:	2000      	movs	r0, #0
 8000d46:	e028      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d032      	beq.n	8000db2 <HAL_RCC_OscConfig+0x4e2>
        temp_pllckcfg = RCC->PLLCFGR;
 8000d4c:	4b20      	ldr	r3, [pc, #128]	; (8000dd0 <HAL_RCC_OscConfig+0x500>)
 8000d4e:	68da      	ldr	r2, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d50:	2303      	movs	r3, #3
 8000d52:	4013      	ands	r3, r2
 8000d54:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d12d      	bne.n	8000db6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000d5a:	2370      	movs	r3, #112	; 0x70
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d60:	428b      	cmp	r3, r1
 8000d62:	d12a      	bne.n	8000dba <HAL_RCC_OscConfig+0x4ea>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000d64:	21fe      	movs	r1, #254	; 0xfe
 8000d66:	01c9      	lsls	r1, r1, #7
 8000d68:	4011      	ands	r1, r2
 8000d6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000d6c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d125      	bne.n	8000dbe <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000d72:	23f8      	movs	r3, #248	; 0xf8
 8000d74:	039b      	lsls	r3, r3, #14
 8000d76:	4013      	ands	r3, r2
 8000d78:	6b21      	ldr	r1, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d121      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8000d7e:	23e0      	movs	r3, #224	; 0xe0
 8000d80:	051b      	lsls	r3, r3, #20
 8000d82:	4013      	ands	r3, r2
 8000d84:	6b61      	ldr	r1, [r4, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d11d      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x4f6>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8000d8a:	0f52      	lsrs	r2, r2, #29
 8000d8c:	0752      	lsls	r2, r2, #29
 8000d8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d11a      	bne.n	8000dca <HAL_RCC_OscConfig+0x4fa>
  return HAL_OK;
 8000d94:	2000      	movs	r0, #0
 8000d96:	e000      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
    return HAL_ERROR;
 8000d98:	2001      	movs	r0, #1
}
 8000d9a:	b002      	add	sp, #8
 8000d9c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000d9e:	2001      	movs	r0, #1
 8000da0:	e7fb      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
        return HAL_ERROR;
 8000da2:	2001      	movs	r0, #1
 8000da4:	e7f9      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
          return HAL_ERROR;
 8000da6:	2001      	movs	r0, #1
 8000da8:	e7f7      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
        return HAL_ERROR;
 8000daa:	2001      	movs	r0, #1
 8000dac:	e7f5      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
  return HAL_OK;
 8000dae:	2000      	movs	r0, #0
 8000db0:	e7f3      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
        return HAL_ERROR;
 8000db2:	2001      	movs	r0, #1
 8000db4:	e7f1      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
          return HAL_ERROR;
 8000db6:	2001      	movs	r0, #1
 8000db8:	e7ef      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
 8000dba:	2001      	movs	r0, #1
 8000dbc:	e7ed      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	e7eb      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	e7e9      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	e7e7      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
 8000dca:	2001      	movs	r0, #1
 8000dcc:	e7e5      	b.n	8000d9a <HAL_RCC_OscConfig+0x4ca>
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	efffffff 	.word	0xefffffff
 8000dd8:	ffbfffff 	.word	0xffbfffff
 8000ddc:	feffffff 	.word	0xfeffffff
 8000de0:	11c1808c 	.word	0x11c1808c
 8000de4:	eefefffc 	.word	0xeefefffc

08000de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000de8:	b510      	push	{r4, lr}
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dea:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <HAL_RCC_GetSysClockFreq+0xac>)
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	2238      	movs	r2, #56	; 0x38
 8000df0:	421a      	tst	r2, r3
 8000df2:	d107      	bne.n	8000e04 <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8000df4:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <HAL_RCC_GetSysClockFreq+0xac>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	0ad2      	lsrs	r2, r2, #11
 8000dfa:	2307      	movs	r3, #7
 8000dfc:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8000dfe:	4826      	ldr	r0, [pc, #152]	; (8000e98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000e00:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8000e02:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e04:	4b23      	ldr	r3, [pc, #140]	; (8000e94 <HAL_RCC_GetSysClockFreq+0xac>)
 8000e06:	689a      	ldr	r2, [r3, #8]
 8000e08:	2338      	movs	r3, #56	; 0x38
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	2b08      	cmp	r3, #8
 8000e0e:	d03b      	beq.n	8000e88 <HAL_RCC_GetSysClockFreq+0xa0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e10:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <HAL_RCC_GetSysClockFreq+0xac>)
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	2338      	movs	r3, #56	; 0x38
 8000e16:	4013      	ands	r3, r2
 8000e18:	2b10      	cmp	r3, #16
 8000e1a:	d00d      	beq.n	8000e38 <HAL_RCC_GetSysClockFreq+0x50>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <HAL_RCC_GetSysClockFreq+0xac>)
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	2338      	movs	r3, #56	; 0x38
 8000e22:	4013      	ands	r3, r2
 8000e24:	2b20      	cmp	r3, #32
 8000e26:	d031      	beq.n	8000e8c <HAL_RCC_GetSysClockFreq+0xa4>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000e28:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <HAL_RCC_GetSysClockFreq+0xac>)
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	2338      	movs	r3, #56	; 0x38
 8000e2e:	4013      	ands	r3, r2
 8000e30:	2b18      	cmp	r3, #24
 8000e32:	d026      	beq.n	8000e82 <HAL_RCC_GetSysClockFreq+0x9a>
    sysclockfreq = 0U;
 8000e34:	2000      	movs	r0, #0
  return sysclockfreq;
 8000e36:	e7e4      	b.n	8000e02 <HAL_RCC_GetSysClockFreq+0x1a>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000e38:	4a16      	ldr	r2, [pc, #88]	; (8000e94 <HAL_RCC_GetSysClockFreq+0xac>)
 8000e3a:	68d1      	ldr	r1, [r2, #12]
 8000e3c:	3b0d      	subs	r3, #13
 8000e3e:	400b      	ands	r3, r1
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000e40:	68d2      	ldr	r2, [r2, #12]
 8000e42:	0912      	lsrs	r2, r2, #4
 8000e44:	2107      	movs	r1, #7
 8000e46:	4011      	ands	r1, r2
 8000e48:	3101      	adds	r1, #1
    switch (pllsource)
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	d00f      	beq.n	8000e6e <HAL_RCC_GetSysClockFreq+0x86>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8000e4e:	4812      	ldr	r0, [pc, #72]	; (8000e98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000e50:	f7ff f958 	bl	8000104 <__udivsi3>
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <HAL_RCC_GetSysClockFreq+0xac>)
 8000e56:	68da      	ldr	r2, [r3, #12]
 8000e58:	0a12      	lsrs	r2, r2, #8
 8000e5a:	237f      	movs	r3, #127	; 0x7f
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	4358      	muls	r0, r3
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <HAL_RCC_GetSysClockFreq+0xac>)
 8000e62:	68d9      	ldr	r1, [r3, #12]
 8000e64:	0f49      	lsrs	r1, r1, #29
 8000e66:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8000e68:	f7ff f94c 	bl	8000104 <__udivsi3>
 8000e6c:	e7c9      	b.n	8000e02 <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000e6e:	480b      	ldr	r0, [pc, #44]	; (8000e9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e70:	f7ff f948 	bl	8000104 <__udivsi3>
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <HAL_RCC_GetSysClockFreq+0xac>)
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	0a12      	lsrs	r2, r2, #8
 8000e7a:	237f      	movs	r3, #127	; 0x7f
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	4358      	muls	r0, r3
        break;
 8000e80:	e7ee      	b.n	8000e60 <HAL_RCC_GetSysClockFreq+0x78>
    sysclockfreq = LSI_VALUE;
 8000e82:	20fa      	movs	r0, #250	; 0xfa
 8000e84:	01c0      	lsls	r0, r0, #7
 8000e86:	e7bc      	b.n	8000e02 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = HSE_VALUE;
 8000e88:	4804      	ldr	r0, [pc, #16]	; (8000e9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e8a:	e7ba      	b.n	8000e02 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = LSE_VALUE;
 8000e8c:	2080      	movs	r0, #128	; 0x80
 8000e8e:	0200      	lsls	r0, r0, #8
 8000e90:	e7b7      	b.n	8000e02 <HAL_RCC_GetSysClockFreq+0x1a>
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	40021000 	.word	0x40021000
 8000e98:	00f42400 	.word	0x00f42400
 8000e9c:	007a1200 	.word	0x007a1200

08000ea0 <HAL_RCC_ClockConfig>:
{
 8000ea0:	b570      	push	{r4, r5, r6, lr}
 8000ea2:	0004      	movs	r4, r0
 8000ea4:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000ea6:	2800      	cmp	r0, #0
 8000ea8:	d100      	bne.n	8000eac <HAL_RCC_ClockConfig+0xc>
 8000eaa:	e0aa      	b.n	8001002 <HAL_RCC_ClockConfig+0x162>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000eac:	4b57      	ldr	r3, [pc, #348]	; (800100c <HAL_RCC_ClockConfig+0x16c>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	2307      	movs	r3, #7
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d321      	bcc.n	8000efc <HAL_RCC_ClockConfig+0x5c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000eb8:	6823      	ldr	r3, [r4, #0]
 8000eba:	079a      	lsls	r2, r3, #30
 8000ebc:	d50e      	bpl.n	8000edc <HAL_RCC_ClockConfig+0x3c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ebe:	075b      	lsls	r3, r3, #29
 8000ec0:	d505      	bpl.n	8000ece <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000ec2:	4a53      	ldr	r2, [pc, #332]	; (8001010 <HAL_RCC_ClockConfig+0x170>)
 8000ec4:	6891      	ldr	r1, [r2, #8]
 8000ec6:	23e0      	movs	r3, #224	; 0xe0
 8000ec8:	01db      	lsls	r3, r3, #7
 8000eca:	430b      	orrs	r3, r1
 8000ecc:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ece:	4a50      	ldr	r2, [pc, #320]	; (8001010 <HAL_RCC_ClockConfig+0x170>)
 8000ed0:	6893      	ldr	r3, [r2, #8]
 8000ed2:	4950      	ldr	r1, [pc, #320]	; (8001014 <HAL_RCC_ClockConfig+0x174>)
 8000ed4:	400b      	ands	r3, r1
 8000ed6:	68a1      	ldr	r1, [r4, #8]
 8000ed8:	430b      	orrs	r3, r1
 8000eda:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000edc:	6823      	ldr	r3, [r4, #0]
 8000ede:	07db      	lsls	r3, r3, #31
 8000ee0:	d554      	bpl.n	8000f8c <HAL_RCC_ClockConfig+0xec>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ee2:	6863      	ldr	r3, [r4, #4]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d020      	beq.n	8000f2a <HAL_RCC_ClockConfig+0x8a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d03b      	beq.n	8000f64 <HAL_RCC_ClockConfig+0xc4>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d13f      	bne.n	8000f70 <HAL_RCC_ClockConfig+0xd0>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ef0:	4a47      	ldr	r2, [pc, #284]	; (8001010 <HAL_RCC_ClockConfig+0x170>)
 8000ef2:	6812      	ldr	r2, [r2, #0]
 8000ef4:	0552      	lsls	r2, r2, #21
 8000ef6:	d41c      	bmi.n	8000f32 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8000ef8:	2001      	movs	r0, #1
 8000efa:	e06a      	b.n	8000fd2 <HAL_RCC_ClockConfig+0x132>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000efc:	4a43      	ldr	r2, [pc, #268]	; (800100c <HAL_RCC_ClockConfig+0x16c>)
 8000efe:	6813      	ldr	r3, [r2, #0]
 8000f00:	2107      	movs	r1, #7
 8000f02:	438b      	bics	r3, r1
 8000f04:	432b      	orrs	r3, r5
 8000f06:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8000f08:	f7ff fb78 	bl	80005fc <HAL_GetTick>
 8000f0c:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f0e:	4b3f      	ldr	r3, [pc, #252]	; (800100c <HAL_RCC_ClockConfig+0x16c>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	2307      	movs	r3, #7
 8000f14:	4013      	ands	r3, r2
 8000f16:	42ab      	cmp	r3, r5
 8000f18:	d0ce      	beq.n	8000eb8 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f1a:	f7ff fb6f 	bl	80005fc <HAL_GetTick>
 8000f1e:	1b80      	subs	r0, r0, r6
 8000f20:	4a3d      	ldr	r2, [pc, #244]	; (8001018 <HAL_RCC_ClockConfig+0x178>)
 8000f22:	4290      	cmp	r0, r2
 8000f24:	d9f3      	bls.n	8000f0e <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 8000f26:	2003      	movs	r0, #3
 8000f28:	e053      	b.n	8000fd2 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f2a:	4a39      	ldr	r2, [pc, #228]	; (8001010 <HAL_RCC_ClockConfig+0x170>)
 8000f2c:	6812      	ldr	r2, [r2, #0]
 8000f2e:	0392      	lsls	r2, r2, #14
 8000f30:	d569      	bpl.n	8001006 <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000f32:	4937      	ldr	r1, [pc, #220]	; (8001010 <HAL_RCC_ClockConfig+0x170>)
 8000f34:	688a      	ldr	r2, [r1, #8]
 8000f36:	2007      	movs	r0, #7
 8000f38:	4382      	bics	r2, r0
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8000f3e:	f7ff fb5d 	bl	80005fc <HAL_GetTick>
 8000f42:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f44:	4b32      	ldr	r3, [pc, #200]	; (8001010 <HAL_RCC_ClockConfig+0x170>)
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	2238      	movs	r2, #56	; 0x38
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	6863      	ldr	r3, [r4, #4]
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d01b      	beq.n	8000f8c <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f54:	f7ff fb52 	bl	80005fc <HAL_GetTick>
 8000f58:	1b80      	subs	r0, r0, r6
 8000f5a:	4b2f      	ldr	r3, [pc, #188]	; (8001018 <HAL_RCC_ClockConfig+0x178>)
 8000f5c:	4298      	cmp	r0, r3
 8000f5e:	d9f1      	bls.n	8000f44 <HAL_RCC_ClockConfig+0xa4>
        return HAL_TIMEOUT;
 8000f60:	2003      	movs	r0, #3
 8000f62:	e036      	b.n	8000fd2 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f64:	4a2a      	ldr	r2, [pc, #168]	; (8001010 <HAL_RCC_ClockConfig+0x170>)
 8000f66:	6812      	ldr	r2, [r2, #0]
 8000f68:	0192      	lsls	r2, r2, #6
 8000f6a:	d4e2      	bmi.n	8000f32 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	e030      	b.n	8000fd2 <HAL_RCC_ClockConfig+0x132>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8000f70:	2b03      	cmp	r3, #3
 8000f72:	d005      	beq.n	8000f80 <HAL_RCC_ClockConfig+0xe0>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000f74:	4a26      	ldr	r2, [pc, #152]	; (8001010 <HAL_RCC_ClockConfig+0x170>)
 8000f76:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000f78:	0792      	lsls	r2, r2, #30
 8000f7a:	d4da      	bmi.n	8000f32 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	e028      	b.n	8000fd2 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f80:	4a23      	ldr	r2, [pc, #140]	; (8001010 <HAL_RCC_ClockConfig+0x170>)
 8000f82:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8000f84:	0792      	lsls	r2, r2, #30
 8000f86:	d4d4      	bmi.n	8000f32 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8000f88:	2001      	movs	r0, #1
 8000f8a:	e022      	b.n	8000fd2 <HAL_RCC_ClockConfig+0x132>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	; (800100c <HAL_RCC_ClockConfig+0x16c>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	2307      	movs	r3, #7
 8000f92:	4013      	ands	r3, r2
 8000f94:	42ab      	cmp	r3, r5
 8000f96:	d81d      	bhi.n	8000fd4 <HAL_RCC_ClockConfig+0x134>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f98:	6823      	ldr	r3, [r4, #0]
 8000f9a:	075b      	lsls	r3, r3, #29
 8000f9c:	d506      	bpl.n	8000fac <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000f9e:	4a1c      	ldr	r2, [pc, #112]	; (8001010 <HAL_RCC_ClockConfig+0x170>)
 8000fa0:	6893      	ldr	r3, [r2, #8]
 8000fa2:	491e      	ldr	r1, [pc, #120]	; (800101c <HAL_RCC_ClockConfig+0x17c>)
 8000fa4:	400b      	ands	r3, r1
 8000fa6:	68e1      	ldr	r1, [r4, #12]
 8000fa8:	430b      	orrs	r3, r1
 8000faa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8000fac:	f7ff ff1c 	bl	8000de8 <HAL_RCC_GetSysClockFreq>
 8000fb0:	4b17      	ldr	r3, [pc, #92]	; (8001010 <HAL_RCC_ClockConfig+0x170>)
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	0a12      	lsrs	r2, r2, #8
 8000fb6:	230f      	movs	r3, #15
 8000fb8:	4013      	ands	r3, r2
 8000fba:	4a19      	ldr	r2, [pc, #100]	; (8001020 <HAL_RCC_ClockConfig+0x180>)
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	589a      	ldr	r2, [r3, r2]
 8000fc0:	231f      	movs	r3, #31
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	40d8      	lsrs	r0, r3
 8000fc6:	4b17      	ldr	r3, [pc, #92]	; (8001024 <HAL_RCC_ClockConfig+0x184>)
 8000fc8:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8000fca:	4b17      	ldr	r3, [pc, #92]	; (8001028 <HAL_RCC_ClockConfig+0x188>)
 8000fcc:	6818      	ldr	r0, [r3, #0]
 8000fce:	f7ff fa67 	bl	80004a0 <HAL_InitTick>
}
 8000fd2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fd4:	4a0d      	ldr	r2, [pc, #52]	; (800100c <HAL_RCC_ClockConfig+0x16c>)
 8000fd6:	6813      	ldr	r3, [r2, #0]
 8000fd8:	2107      	movs	r1, #7
 8000fda:	438b      	bics	r3, r1
 8000fdc:	432b      	orrs	r3, r5
 8000fde:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8000fe0:	f7ff fb0c 	bl	80005fc <HAL_GetTick>
 8000fe4:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <HAL_RCC_ClockConfig+0x16c>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	2307      	movs	r3, #7
 8000fec:	4013      	ands	r3, r2
 8000fee:	42ab      	cmp	r3, r5
 8000ff0:	d0d2      	beq.n	8000f98 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ff2:	f7ff fb03 	bl	80005fc <HAL_GetTick>
 8000ff6:	1b80      	subs	r0, r0, r6
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <HAL_RCC_ClockConfig+0x178>)
 8000ffa:	4298      	cmp	r0, r3
 8000ffc:	d9f3      	bls.n	8000fe6 <HAL_RCC_ClockConfig+0x146>
        return HAL_TIMEOUT;
 8000ffe:	2003      	movs	r0, #3
 8001000:	e7e7      	b.n	8000fd2 <HAL_RCC_ClockConfig+0x132>
    return HAL_ERROR;
 8001002:	2001      	movs	r0, #1
 8001004:	e7e5      	b.n	8000fd2 <HAL_RCC_ClockConfig+0x132>
        return HAL_ERROR;
 8001006:	2001      	movs	r0, #1
 8001008:	e7e3      	b.n	8000fd2 <HAL_RCC_ClockConfig+0x132>
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	40022000 	.word	0x40022000
 8001010:	40021000 	.word	0x40021000
 8001014:	fffff0ff 	.word	0xfffff0ff
 8001018:	00001388 	.word	0x00001388
 800101c:	ffff8fff 	.word	0xffff8fff
 8001020:	08001678 	.word	0x08001678
 8001024:	20000000 	.word	0x20000000
 8001028:	20000008 	.word	0x20000008

0800102c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800102c:	4b01      	ldr	r3, [pc, #4]	; (8001034 <HAL_RCC_GetHCLKFreq+0x8>)
 800102e:	6818      	ldr	r0, [r3, #0]
}
 8001030:	4770      	bx	lr
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	20000000 	.word	0x20000000

08001038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001038:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800103a:	f7ff fff7 	bl	800102c <HAL_RCC_GetHCLKFreq>
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	0b12      	lsrs	r2, r2, #12
 8001044:	2307      	movs	r3, #7
 8001046:	4013      	ands	r3, r2
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <HAL_RCC_GetPCLK1Freq+0x24>)
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	589a      	ldr	r2, [r3, r2]
 800104e:	231f      	movs	r3, #31
 8001050:	4013      	ands	r3, r2
 8001052:	40d8      	lsrs	r0, r3
}
 8001054:	bd10      	pop	{r4, pc}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	40021000 	.word	0x40021000
 800105c:	080016b8 	.word	0x080016b8

08001060 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001060:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001062:	2307      	movs	r3, #7
 8001064:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001066:	4a09      	ldr	r2, [pc, #36]	; (800108c <HAL_RCC_GetClockConfig+0x2c>)
 8001068:	6894      	ldr	r4, [r2, #8]
 800106a:	401c      	ands	r4, r3
 800106c:	6044      	str	r4, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800106e:	6894      	ldr	r4, [r2, #8]
 8001070:	25f0      	movs	r5, #240	; 0xf0
 8001072:	012d      	lsls	r5, r5, #4
 8001074:	402c      	ands	r4, r5
 8001076:	6084      	str	r4, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8001078:	6892      	ldr	r2, [r2, #8]
 800107a:	24e0      	movs	r4, #224	; 0xe0
 800107c:	01e4      	lsls	r4, r4, #7
 800107e:	4022      	ands	r2, r4
 8001080:	60c2      	str	r2, [r0, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001082:	4a03      	ldr	r2, [pc, #12]	; (8001090 <HAL_RCC_GetClockConfig+0x30>)
 8001084:	6812      	ldr	r2, [r2, #0]
 8001086:	4013      	ands	r3, r2
 8001088:	600b      	str	r3, [r1, #0]
}
 800108a:	bd30      	pop	{r4, r5, pc}
 800108c:	40021000 	.word	0x40021000
 8001090:	40022000 	.word	0x40022000

08001094 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001094:	4770      	bx	lr
	...

08001098 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001098:	233d      	movs	r3, #61	; 0x3d
 800109a:	5cc3      	ldrb	r3, [r0, r3]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d12c      	bne.n	80010fa <HAL_TIM_Base_Start_IT+0x62>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80010a0:	333c      	adds	r3, #60	; 0x3c
 80010a2:	2202      	movs	r2, #2
 80010a4:	54c2      	strb	r2, [r0, r3]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80010a6:	6802      	ldr	r2, [r0, #0]
 80010a8:	68d3      	ldr	r3, [r2, #12]
 80010aa:	2101      	movs	r1, #1
 80010ac:	430b      	orrs	r3, r1
 80010ae:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80010b0:	6803      	ldr	r3, [r0, #0]
 80010b2:	4a15      	ldr	r2, [pc, #84]	; (8001108 <HAL_TIM_Base_Start_IT+0x70>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d012      	beq.n	80010de <HAL_TIM_Base_Start_IT+0x46>
 80010b8:	2280      	movs	r2, #128	; 0x80
 80010ba:	05d2      	lsls	r2, r2, #23
 80010bc:	4293      	cmp	r3, r2
 80010be:	d00e      	beq.n	80010de <HAL_TIM_Base_Start_IT+0x46>
 80010c0:	4a12      	ldr	r2, [pc, #72]	; (800110c <HAL_TIM_Base_Start_IT+0x74>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d00b      	beq.n	80010de <HAL_TIM_Base_Start_IT+0x46>
 80010c6:	4a12      	ldr	r2, [pc, #72]	; (8001110 <HAL_TIM_Base_Start_IT+0x78>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d008      	beq.n	80010de <HAL_TIM_Base_Start_IT+0x46>
 80010cc:	4a11      	ldr	r2, [pc, #68]	; (8001114 <HAL_TIM_Base_Start_IT+0x7c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d005      	beq.n	80010de <HAL_TIM_Base_Start_IT+0x46>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	2101      	movs	r1, #1
 80010d6:	430a      	orrs	r2, r1
 80010d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80010da:	2000      	movs	r0, #0
 80010dc:	e00e      	b.n	80010fc <HAL_TIM_Base_Start_IT+0x64>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	490d      	ldr	r1, [pc, #52]	; (8001118 <HAL_TIM_Base_Start_IT+0x80>)
 80010e2:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80010e4:	2a06      	cmp	r2, #6
 80010e6:	d00a      	beq.n	80010fe <HAL_TIM_Base_Start_IT+0x66>
 80010e8:	3907      	subs	r1, #7
 80010ea:	428a      	cmp	r2, r1
 80010ec:	d009      	beq.n	8001102 <HAL_TIM_Base_Start_IT+0x6a>
      __HAL_TIM_ENABLE(htim);
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	2101      	movs	r1, #1
 80010f2:	430a      	orrs	r2, r1
 80010f4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80010f6:	2000      	movs	r0, #0
 80010f8:	e000      	b.n	80010fc <HAL_TIM_Base_Start_IT+0x64>
    return HAL_ERROR;
 80010fa:	2001      	movs	r0, #1
}
 80010fc:	4770      	bx	lr
  return HAL_OK;
 80010fe:	2000      	movs	r0, #0
 8001100:	e7fc      	b.n	80010fc <HAL_TIM_Base_Start_IT+0x64>
 8001102:	2000      	movs	r0, #0
 8001104:	e7fa      	b.n	80010fc <HAL_TIM_Base_Start_IT+0x64>
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	40012c00 	.word	0x40012c00
 800110c:	40000400 	.word	0x40000400
 8001110:	40000800 	.word	0x40000800
 8001114:	40014000 	.word	0x40014000
 8001118:	00010007 	.word	0x00010007

0800111c <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800111c:	4770      	bx	lr

0800111e <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800111e:	4770      	bx	lr

08001120 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001120:	4770      	bx	lr

08001122 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001122:	4770      	bx	lr

08001124 <HAL_TIM_IRQHandler>:
{
 8001124:	b570      	push	{r4, r5, r6, lr}
 8001126:	0005      	movs	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 8001128:	6803      	ldr	r3, [r0, #0]
 800112a:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800112c:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800112e:	07a2      	lsls	r2, r4, #30
 8001130:	d50e      	bpl.n	8001150 <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001132:	07b2      	lsls	r2, r6, #30
 8001134:	d50c      	bpl.n	8001150 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001136:	2203      	movs	r2, #3
 8001138:	4252      	negs	r2, r2
 800113a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800113c:	2301      	movs	r3, #1
 800113e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001140:	6803      	ldr	r3, [r0, #0]
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	079b      	lsls	r3, r3, #30
 8001146:	d057      	beq.n	80011f8 <HAL_TIM_IRQHandler+0xd4>
          HAL_TIM_IC_CaptureCallback(htim);
 8001148:	f7ff ffe9 	bl	800111e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800114c:	2300      	movs	r3, #0
 800114e:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001150:	0763      	lsls	r3, r4, #29
 8001152:	d512      	bpl.n	800117a <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001154:	0773      	lsls	r3, r6, #29
 8001156:	d510      	bpl.n	800117a <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001158:	682b      	ldr	r3, [r5, #0]
 800115a:	2205      	movs	r2, #5
 800115c:	4252      	negs	r2, r2
 800115e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001160:	2302      	movs	r3, #2
 8001162:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001164:	682b      	ldr	r3, [r5, #0]
 8001166:	699a      	ldr	r2, [r3, #24]
 8001168:	23c0      	movs	r3, #192	; 0xc0
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	421a      	tst	r2, r3
 800116e:	d049      	beq.n	8001204 <HAL_TIM_IRQHandler+0xe0>
        HAL_TIM_IC_CaptureCallback(htim);
 8001170:	0028      	movs	r0, r5
 8001172:	f7ff ffd4 	bl	800111e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001176:	2300      	movs	r3, #0
 8001178:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800117a:	0723      	lsls	r3, r4, #28
 800117c:	d510      	bpl.n	80011a0 <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800117e:	0733      	lsls	r3, r6, #28
 8001180:	d50e      	bpl.n	80011a0 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001182:	682b      	ldr	r3, [r5, #0]
 8001184:	2209      	movs	r2, #9
 8001186:	4252      	negs	r2, r2
 8001188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800118a:	2304      	movs	r3, #4
 800118c:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800118e:	682b      	ldr	r3, [r5, #0]
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	079b      	lsls	r3, r3, #30
 8001194:	d03d      	beq.n	8001212 <HAL_TIM_IRQHandler+0xee>
        HAL_TIM_IC_CaptureCallback(htim);
 8001196:	0028      	movs	r0, r5
 8001198:	f7ff ffc1 	bl	800111e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800119c:	2300      	movs	r3, #0
 800119e:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80011a0:	06e3      	lsls	r3, r4, #27
 80011a2:	d512      	bpl.n	80011ca <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80011a4:	06f3      	lsls	r3, r6, #27
 80011a6:	d510      	bpl.n	80011ca <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80011a8:	682b      	ldr	r3, [r5, #0]
 80011aa:	2211      	movs	r2, #17
 80011ac:	4252      	negs	r2, r2
 80011ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80011b0:	2308      	movs	r3, #8
 80011b2:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80011b4:	682b      	ldr	r3, [r5, #0]
 80011b6:	69da      	ldr	r2, [r3, #28]
 80011b8:	23c0      	movs	r3, #192	; 0xc0
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	421a      	tst	r2, r3
 80011be:	d02f      	beq.n	8001220 <HAL_TIM_IRQHandler+0xfc>
        HAL_TIM_IC_CaptureCallback(htim);
 80011c0:	0028      	movs	r0, r5
 80011c2:	f7ff ffac 	bl	800111e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011c6:	2300      	movs	r3, #0
 80011c8:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80011ca:	07e3      	lsls	r3, r4, #31
 80011cc:	d501      	bpl.n	80011d2 <HAL_TIM_IRQHandler+0xae>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80011ce:	07f3      	lsls	r3, r6, #31
 80011d0:	d42d      	bmi.n	800122e <HAL_TIM_IRQHandler+0x10a>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80011d2:	2382      	movs	r3, #130	; 0x82
 80011d4:	019b      	lsls	r3, r3, #6
 80011d6:	421c      	tst	r4, r3
 80011d8:	d001      	beq.n	80011de <HAL_TIM_IRQHandler+0xba>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80011da:	0633      	lsls	r3, r6, #24
 80011dc:	d42f      	bmi.n	800123e <HAL_TIM_IRQHandler+0x11a>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80011de:	05e3      	lsls	r3, r4, #23
 80011e0:	d501      	bpl.n	80011e6 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80011e2:	0633      	lsls	r3, r6, #24
 80011e4:	d432      	bmi.n	800124c <HAL_TIM_IRQHandler+0x128>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80011e6:	0663      	lsls	r3, r4, #25
 80011e8:	d501      	bpl.n	80011ee <HAL_TIM_IRQHandler+0xca>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80011ea:	0673      	lsls	r3, r6, #25
 80011ec:	d435      	bmi.n	800125a <HAL_TIM_IRQHandler+0x136>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80011ee:	06a4      	lsls	r4, r4, #26
 80011f0:	d501      	bpl.n	80011f6 <HAL_TIM_IRQHandler+0xd2>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80011f2:	06b6      	lsls	r6, r6, #26
 80011f4:	d439      	bmi.n	800126a <HAL_TIM_IRQHandler+0x146>
}
 80011f6:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80011f8:	f7ff ff90 	bl	800111c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011fc:	0028      	movs	r0, r5
 80011fe:	f7ff ff8f 	bl	8001120 <HAL_TIM_PWM_PulseFinishedCallback>
 8001202:	e7a3      	b.n	800114c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001204:	0028      	movs	r0, r5
 8001206:	f7ff ff89 	bl	800111c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800120a:	0028      	movs	r0, r5
 800120c:	f7ff ff88 	bl	8001120 <HAL_TIM_PWM_PulseFinishedCallback>
 8001210:	e7b1      	b.n	8001176 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001212:	0028      	movs	r0, r5
 8001214:	f7ff ff82 	bl	800111c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001218:	0028      	movs	r0, r5
 800121a:	f7ff ff81 	bl	8001120 <HAL_TIM_PWM_PulseFinishedCallback>
 800121e:	e7bd      	b.n	800119c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001220:	0028      	movs	r0, r5
 8001222:	f7ff ff7b 	bl	800111c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001226:	0028      	movs	r0, r5
 8001228:	f7ff ff7a 	bl	8001120 <HAL_TIM_PWM_PulseFinishedCallback>
 800122c:	e7cb      	b.n	80011c6 <HAL_TIM_IRQHandler+0xa2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800122e:	682b      	ldr	r3, [r5, #0]
 8001230:	2202      	movs	r2, #2
 8001232:	4252      	negs	r2, r2
 8001234:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001236:	0028      	movs	r0, r5
 8001238:	f7ff f850 	bl	80002dc <HAL_TIM_PeriodElapsedCallback>
 800123c:	e7c9      	b.n	80011d2 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800123e:	682b      	ldr	r3, [r5, #0]
 8001240:	4a0e      	ldr	r2, [pc, #56]	; (800127c <HAL_TIM_IRQHandler+0x158>)
 8001242:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001244:	0028      	movs	r0, r5
 8001246:	f000 f9c4 	bl	80015d2 <HAL_TIMEx_BreakCallback>
 800124a:	e7c8      	b.n	80011de <HAL_TIM_IRQHandler+0xba>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800124c:	682b      	ldr	r3, [r5, #0]
 800124e:	4a0c      	ldr	r2, [pc, #48]	; (8001280 <HAL_TIM_IRQHandler+0x15c>)
 8001250:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001252:	0028      	movs	r0, r5
 8001254:	f000 f9be 	bl	80015d4 <HAL_TIMEx_Break2Callback>
 8001258:	e7c5      	b.n	80011e6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800125a:	682b      	ldr	r3, [r5, #0]
 800125c:	2241      	movs	r2, #65	; 0x41
 800125e:	4252      	negs	r2, r2
 8001260:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001262:	0028      	movs	r0, r5
 8001264:	f7ff ff5d 	bl	8001122 <HAL_TIM_TriggerCallback>
 8001268:	e7c1      	b.n	80011ee <HAL_TIM_IRQHandler+0xca>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800126a:	682b      	ldr	r3, [r5, #0]
 800126c:	2221      	movs	r2, #33	; 0x21
 800126e:	4252      	negs	r2, r2
 8001270:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001272:	0028      	movs	r0, r5
 8001274:	f000 f9ac 	bl	80015d0 <HAL_TIMEx_CommutCallback>
}
 8001278:	e7bd      	b.n	80011f6 <HAL_TIM_IRQHandler+0xd2>
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	ffffdf7f 	.word	0xffffdf7f
 8001280:	fffffeff 	.word	0xfffffeff

08001284 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001284:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001286:	4a27      	ldr	r2, [pc, #156]	; (8001324 <TIM_Base_SetConfig+0xa0>)
 8001288:	4290      	cmp	r0, r2
 800128a:	d009      	beq.n	80012a0 <TIM_Base_SetConfig+0x1c>
 800128c:	2280      	movs	r2, #128	; 0x80
 800128e:	05d2      	lsls	r2, r2, #23
 8001290:	4290      	cmp	r0, r2
 8001292:	d005      	beq.n	80012a0 <TIM_Base_SetConfig+0x1c>
 8001294:	4a24      	ldr	r2, [pc, #144]	; (8001328 <TIM_Base_SetConfig+0xa4>)
 8001296:	4290      	cmp	r0, r2
 8001298:	d002      	beq.n	80012a0 <TIM_Base_SetConfig+0x1c>
 800129a:	4a24      	ldr	r2, [pc, #144]	; (800132c <TIM_Base_SetConfig+0xa8>)
 800129c:	4290      	cmp	r0, r2
 800129e:	d103      	bne.n	80012a8 <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012a0:	2270      	movs	r2, #112	; 0x70
 80012a2:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80012a4:	684a      	ldr	r2, [r1, #4]
 80012a6:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80012a8:	4a1e      	ldr	r2, [pc, #120]	; (8001324 <TIM_Base_SetConfig+0xa0>)
 80012aa:	4290      	cmp	r0, r2
 80012ac:	d015      	beq.n	80012da <TIM_Base_SetConfig+0x56>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	05d2      	lsls	r2, r2, #23
 80012b2:	4290      	cmp	r0, r2
 80012b4:	d011      	beq.n	80012da <TIM_Base_SetConfig+0x56>
 80012b6:	4a1c      	ldr	r2, [pc, #112]	; (8001328 <TIM_Base_SetConfig+0xa4>)
 80012b8:	4290      	cmp	r0, r2
 80012ba:	d00e      	beq.n	80012da <TIM_Base_SetConfig+0x56>
 80012bc:	4a1b      	ldr	r2, [pc, #108]	; (800132c <TIM_Base_SetConfig+0xa8>)
 80012be:	4290      	cmp	r0, r2
 80012c0:	d00b      	beq.n	80012da <TIM_Base_SetConfig+0x56>
 80012c2:	4a1b      	ldr	r2, [pc, #108]	; (8001330 <TIM_Base_SetConfig+0xac>)
 80012c4:	4290      	cmp	r0, r2
 80012c6:	d008      	beq.n	80012da <TIM_Base_SetConfig+0x56>
 80012c8:	4a1a      	ldr	r2, [pc, #104]	; (8001334 <TIM_Base_SetConfig+0xb0>)
 80012ca:	4290      	cmp	r0, r2
 80012cc:	d005      	beq.n	80012da <TIM_Base_SetConfig+0x56>
 80012ce:	4a1a      	ldr	r2, [pc, #104]	; (8001338 <TIM_Base_SetConfig+0xb4>)
 80012d0:	4290      	cmp	r0, r2
 80012d2:	d002      	beq.n	80012da <TIM_Base_SetConfig+0x56>
 80012d4:	4a19      	ldr	r2, [pc, #100]	; (800133c <TIM_Base_SetConfig+0xb8>)
 80012d6:	4290      	cmp	r0, r2
 80012d8:	d103      	bne.n	80012e2 <TIM_Base_SetConfig+0x5e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80012da:	4a19      	ldr	r2, [pc, #100]	; (8001340 <TIM_Base_SetConfig+0xbc>)
 80012dc:	401a      	ands	r2, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80012de:	68cb      	ldr	r3, [r1, #12]
 80012e0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80012e2:	2280      	movs	r2, #128	; 0x80
 80012e4:	4393      	bics	r3, r2
 80012e6:	694a      	ldr	r2, [r1, #20]
 80012e8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80012ea:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80012ec:	688b      	ldr	r3, [r1, #8]
 80012ee:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80012f0:	680b      	ldr	r3, [r1, #0]
 80012f2:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <TIM_Base_SetConfig+0xa0>)
 80012f6:	4298      	cmp	r0, r3
 80012f8:	d008      	beq.n	800130c <TIM_Base_SetConfig+0x88>
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <TIM_Base_SetConfig+0xb0>)
 80012fc:	4298      	cmp	r0, r3
 80012fe:	d005      	beq.n	800130c <TIM_Base_SetConfig+0x88>
 8001300:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <TIM_Base_SetConfig+0xb4>)
 8001302:	4298      	cmp	r0, r3
 8001304:	d002      	beq.n	800130c <TIM_Base_SetConfig+0x88>
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <TIM_Base_SetConfig+0xb8>)
 8001308:	4298      	cmp	r0, r3
 800130a:	d101      	bne.n	8001310 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800130c:	690b      	ldr	r3, [r1, #16]
 800130e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001310:	2301      	movs	r3, #1
 8001312:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001314:	6902      	ldr	r2, [r0, #16]
 8001316:	4213      	tst	r3, r2
 8001318:	d003      	beq.n	8001322 <TIM_Base_SetConfig+0x9e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800131a:	6903      	ldr	r3, [r0, #16]
 800131c:	2201      	movs	r2, #1
 800131e:	4393      	bics	r3, r2
 8001320:	6103      	str	r3, [r0, #16]
  }
}
 8001322:	4770      	bx	lr
 8001324:	40012c00 	.word	0x40012c00
 8001328:	40000400 	.word	0x40000400
 800132c:	40000800 	.word	0x40000800
 8001330:	40002000 	.word	0x40002000
 8001334:	40014000 	.word	0x40014000
 8001338:	40014400 	.word	0x40014400
 800133c:	40014800 	.word	0x40014800
 8001340:	fffffcff 	.word	0xfffffcff

08001344 <HAL_TIM_Base_Init>:
{
 8001344:	b570      	push	{r4, r5, r6, lr}
 8001346:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8001348:	d02a      	beq.n	80013a0 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800134a:	233d      	movs	r3, #61	; 0x3d
 800134c:	5cc3      	ldrb	r3, [r0, r3]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d020      	beq.n	8001394 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8001352:	253d      	movs	r5, #61	; 0x3d
 8001354:	2302      	movs	r3, #2
 8001356:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001358:	0021      	movs	r1, r4
 800135a:	c901      	ldmia	r1!, {r0}
 800135c:	f7ff ff92 	bl	8001284 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001360:	2301      	movs	r3, #1
 8001362:	2248      	movs	r2, #72	; 0x48
 8001364:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001366:	3a0a      	subs	r2, #10
 8001368:	54a3      	strb	r3, [r4, r2]
 800136a:	3201      	adds	r2, #1
 800136c:	54a3      	strb	r3, [r4, r2]
 800136e:	3201      	adds	r2, #1
 8001370:	54a3      	strb	r3, [r4, r2]
 8001372:	3201      	adds	r2, #1
 8001374:	54a3      	strb	r3, [r4, r2]
 8001376:	3201      	adds	r2, #1
 8001378:	54a3      	strb	r3, [r4, r2]
 800137a:	3201      	adds	r2, #1
 800137c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800137e:	3201      	adds	r2, #1
 8001380:	54a3      	strb	r3, [r4, r2]
 8001382:	3201      	adds	r2, #1
 8001384:	54a3      	strb	r3, [r4, r2]
 8001386:	3201      	adds	r2, #1
 8001388:	54a3      	strb	r3, [r4, r2]
 800138a:	3201      	adds	r2, #1
 800138c:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 800138e:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8001390:	2000      	movs	r0, #0
}
 8001392:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8001394:	333c      	adds	r3, #60	; 0x3c
 8001396:	2200      	movs	r2, #0
 8001398:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 800139a:	f7ff fe7b 	bl	8001094 <HAL_TIM_Base_MspInit>
 800139e:	e7d8      	b.n	8001352 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80013a0:	2001      	movs	r0, #1
 80013a2:	e7f6      	b.n	8001392 <HAL_TIM_Base_Init+0x4e>

080013a4 <HAL_TIM_Encoder_Init>:
{
 80013a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a6:	46c6      	mov	lr, r8
 80013a8:	b500      	push	{lr}
 80013aa:	0004      	movs	r4, r0
 80013ac:	000d      	movs	r5, r1
  if (htim == NULL)
 80013ae:	2800      	cmp	r0, #0
 80013b0:	d04d      	beq.n	800144e <HAL_TIM_Encoder_Init+0xaa>
  if (htim->State == HAL_TIM_STATE_RESET)
 80013b2:	233d      	movs	r3, #61	; 0x3d
 80013b4:	5cc3      	ldrb	r3, [r0, r3]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d043      	beq.n	8001442 <HAL_TIM_Encoder_Init+0x9e>
  htim->State = HAL_TIM_STATE_BUSY;
 80013ba:	263d      	movs	r6, #61	; 0x3d
 80013bc:	2302      	movs	r3, #2
 80013be:	55a3      	strb	r3, [r4, r6]
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80013c0:	6822      	ldr	r2, [r4, #0]
 80013c2:	6893      	ldr	r3, [r2, #8]
 80013c4:	4923      	ldr	r1, [pc, #140]	; (8001454 <HAL_TIM_Encoder_Init+0xb0>)
 80013c6:	400b      	ands	r3, r1
 80013c8:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013ca:	0021      	movs	r1, r4
 80013cc:	c901      	ldmia	r1!, {r0}
 80013ce:	f7ff ff59 	bl	8001284 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 80013d2:	6821      	ldr	r1, [r4, #0]
 80013d4:	688b      	ldr	r3, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 80013d6:	698a      	ldr	r2, [r1, #24]
  tmpccer = htim->Instance->CCER;
 80013d8:	6a0f      	ldr	r7, [r1, #32]
  tmpsmcr |= sConfig->EncoderMode;
 80013da:	6828      	ldr	r0, [r5, #0]
 80013dc:	4318      	orrs	r0, r3
 80013de:	4680      	mov	r8, r0
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80013e0:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <HAL_TIM_Encoder_Init+0xb4>)
 80013e2:	401a      	ands	r2, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80013e4:	68ab      	ldr	r3, [r5, #8]
 80013e6:	69a8      	ldr	r0, [r5, #24]
 80013e8:	0200      	lsls	r0, r0, #8
 80013ea:	4303      	orrs	r3, r0
 80013ec:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80013ee:	4a1b      	ldr	r2, [pc, #108]	; (800145c <HAL_TIM_Encoder_Init+0xb8>)
 80013f0:	4013      	ands	r3, r2
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80013f2:	68ea      	ldr	r2, [r5, #12]
 80013f4:	69e8      	ldr	r0, [r5, #28]
 80013f6:	0200      	lsls	r0, r0, #8
 80013f8:	4302      	orrs	r2, r0
 80013fa:	431a      	orrs	r2, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80013fc:	692b      	ldr	r3, [r5, #16]
 80013fe:	011b      	lsls	r3, r3, #4
 8001400:	6a28      	ldr	r0, [r5, #32]
 8001402:	0300      	lsls	r0, r0, #12
 8001404:	4303      	orrs	r3, r0
 8001406:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001408:	22aa      	movs	r2, #170	; 0xaa
 800140a:	4397      	bics	r7, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800140c:	686a      	ldr	r2, [r5, #4]
 800140e:	696d      	ldr	r5, [r5, #20]
 8001410:	012d      	lsls	r5, r5, #4
 8001412:	432a      	orrs	r2, r5
 8001414:	433a      	orrs	r2, r7
  htim->Instance->SMCR = tmpsmcr;
 8001416:	4640      	mov	r0, r8
 8001418:	6088      	str	r0, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 800141a:	6821      	ldr	r1, [r4, #0]
 800141c:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 800141e:	6823      	ldr	r3, [r4, #0]
 8001420:	621a      	str	r2, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001422:	2301      	movs	r3, #1
 8001424:	2248      	movs	r2, #72	; 0x48
 8001426:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001428:	3a0a      	subs	r2, #10
 800142a:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800142c:	3201      	adds	r2, #1
 800142e:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001430:	3205      	adds	r2, #5
 8001432:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001434:	3201      	adds	r2, #1
 8001436:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8001438:	55a3      	strb	r3, [r4, r6]
  return HAL_OK;
 800143a:	2000      	movs	r0, #0
}
 800143c:	bc80      	pop	{r7}
 800143e:	46b8      	mov	r8, r7
 8001440:	bdf0      	pop	{r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 8001442:	333c      	adds	r3, #60	; 0x3c
 8001444:	2200      	movs	r2, #0
 8001446:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Encoder_MspInit(htim);
 8001448:	f7fe fffe 	bl	8000448 <HAL_TIM_Encoder_MspInit>
 800144c:	e7b5      	b.n	80013ba <HAL_TIM_Encoder_Init+0x16>
    return HAL_ERROR;
 800144e:	2001      	movs	r0, #1
 8001450:	e7f4      	b.n	800143c <HAL_TIM_Encoder_Init+0x98>
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	fffebff8 	.word	0xfffebff8
 8001458:	fffffcfc 	.word	0xfffffcfc
 800145c:	ffff0303 	.word	0xffff0303

08001460 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001460:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001462:	231f      	movs	r3, #31
 8001464:	4019      	ands	r1, r3
 8001466:	2401      	movs	r4, #1
 8001468:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800146a:	6a03      	ldr	r3, [r0, #32]
 800146c:	43a3      	bics	r3, r4
 800146e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001470:	6a03      	ldr	r3, [r0, #32]
 8001472:	408a      	lsls	r2, r1
 8001474:	4313      	orrs	r3, r2
 8001476:	6203      	str	r3, [r0, #32]
}
 8001478:	bd10      	pop	{r4, pc}

0800147a <HAL_TIM_Encoder_Start>:
{
 800147a:	b570      	push	{r4, r5, r6, lr}
 800147c:	0004      	movs	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800147e:	233e      	movs	r3, #62	; 0x3e
 8001480:	5cc0      	ldrb	r0, [r0, r3]
 8001482:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001484:	3301      	adds	r3, #1
 8001486:	5ce3      	ldrb	r3, [r4, r3]
 8001488:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800148a:	2244      	movs	r2, #68	; 0x44
 800148c:	5ca2      	ldrb	r2, [r4, r2]
 800148e:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001490:	2545      	movs	r5, #69	; 0x45
 8001492:	5d65      	ldrb	r5, [r4, r5]
 8001494:	b2ed      	uxtb	r5, r5
  if (Channel == TIM_CHANNEL_1)
 8001496:	2900      	cmp	r1, #0
 8001498:	d117      	bne.n	80014ca <HAL_TIM_Encoder_Start+0x50>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800149a:	2801      	cmp	r0, #1
 800149c:	d145      	bne.n	800152a <HAL_TIM_Encoder_Start+0xb0>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800149e:	2a01      	cmp	r2, #1
 80014a0:	d144      	bne.n	800152c <HAL_TIM_Encoder_Start+0xb2>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80014a2:	2302      	movs	r3, #2
 80014a4:	323d      	adds	r2, #61	; 0x3d
 80014a6:	54a3      	strb	r3, [r4, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80014a8:	3206      	adds	r2, #6
 80014aa:	54a3      	strb	r3, [r4, r2]
  switch (Channel)
 80014ac:	2900      	cmp	r1, #0
 80014ae:	d02a      	beq.n	8001506 <HAL_TIM_Encoder_Start+0x8c>
 80014b0:	2904      	cmp	r1, #4
 80014b2:	d034      	beq.n	800151e <HAL_TIM_Encoder_Start+0xa4>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80014b4:	6820      	ldr	r0, [r4, #0]
 80014b6:	2201      	movs	r2, #1
 80014b8:	2100      	movs	r1, #0
 80014ba:	f7ff ffd1 	bl	8001460 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80014be:	6820      	ldr	r0, [r4, #0]
 80014c0:	2201      	movs	r2, #1
 80014c2:	2104      	movs	r1, #4
 80014c4:	f7ff ffcc 	bl	8001460 <TIM_CCxChannelCmd>
      break;
 80014c8:	e022      	b.n	8001510 <HAL_TIM_Encoder_Start+0x96>
  else if (Channel == TIM_CHANNEL_2)
 80014ca:	2904      	cmp	r1, #4
 80014cc:	d011      	beq.n	80014f2 <HAL_TIM_Encoder_Start+0x78>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80014ce:	2801      	cmp	r0, #1
 80014d0:	d131      	bne.n	8001536 <HAL_TIM_Encoder_Start+0xbc>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d12a      	bne.n	800152c <HAL_TIM_Encoder_Start+0xb2>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80014d6:	2a01      	cmp	r2, #1
 80014d8:	d12f      	bne.n	800153a <HAL_TIM_Encoder_Start+0xc0>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80014da:	2d01      	cmp	r5, #1
 80014dc:	d12f      	bne.n	800153e <HAL_TIM_Encoder_Start+0xc4>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80014de:	3301      	adds	r3, #1
 80014e0:	323d      	adds	r2, #61	; 0x3d
 80014e2:	54a3      	strb	r3, [r4, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80014e4:	3201      	adds	r2, #1
 80014e6:	54a3      	strb	r3, [r4, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80014e8:	3205      	adds	r2, #5
 80014ea:	54a3      	strb	r3, [r4, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80014ec:	3201      	adds	r2, #1
 80014ee:	54a3      	strb	r3, [r4, r2]
 80014f0:	e7dc      	b.n	80014ac <HAL_TIM_Encoder_Start+0x32>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d11b      	bne.n	800152e <HAL_TIM_Encoder_Start+0xb4>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80014f6:	2d01      	cmp	r5, #1
 80014f8:	d11b      	bne.n	8001532 <HAL_TIM_Encoder_Start+0xb8>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80014fa:	3301      	adds	r3, #1
 80014fc:	223f      	movs	r2, #63	; 0x3f
 80014fe:	54a3      	strb	r3, [r4, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001500:	3206      	adds	r2, #6
 8001502:	54a3      	strb	r3, [r4, r2]
 8001504:	e7d2      	b.n	80014ac <HAL_TIM_Encoder_Start+0x32>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001506:	6820      	ldr	r0, [r4, #0]
 8001508:	2201      	movs	r2, #1
 800150a:	2100      	movs	r1, #0
 800150c:	f7ff ffa8 	bl	8001460 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8001510:	6822      	ldr	r2, [r4, #0]
 8001512:	6813      	ldr	r3, [r2, #0]
 8001514:	2101      	movs	r1, #1
 8001516:	430b      	orrs	r3, r1
 8001518:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800151a:	2000      	movs	r0, #0
 800151c:	e006      	b.n	800152c <HAL_TIM_Encoder_Start+0xb2>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800151e:	6820      	ldr	r0, [r4, #0]
 8001520:	2201      	movs	r2, #1
 8001522:	2104      	movs	r1, #4
 8001524:	f7ff ff9c 	bl	8001460 <TIM_CCxChannelCmd>
      break;
 8001528:	e7f2      	b.n	8001510 <HAL_TIM_Encoder_Start+0x96>
      return HAL_ERROR;
 800152a:	2001      	movs	r0, #1
}
 800152c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800152e:	2001      	movs	r0, #1
 8001530:	e7fc      	b.n	800152c <HAL_TIM_Encoder_Start+0xb2>
 8001532:	0018      	movs	r0, r3
 8001534:	e7fa      	b.n	800152c <HAL_TIM_Encoder_Start+0xb2>
      return HAL_ERROR;
 8001536:	2001      	movs	r0, #1
 8001538:	e7f8      	b.n	800152c <HAL_TIM_Encoder_Start+0xb2>
 800153a:	0018      	movs	r0, r3
 800153c:	e7f6      	b.n	800152c <HAL_TIM_Encoder_Start+0xb2>
 800153e:	0010      	movs	r0, r2
 8001540:	e7f4      	b.n	800152c <HAL_TIM_Encoder_Start+0xb2>
	...

08001544 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001544:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001546:	233c      	movs	r3, #60	; 0x3c
 8001548:	5cc3      	ldrb	r3, [r0, r3]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d033      	beq.n	80015b6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800154e:	233c      	movs	r3, #60	; 0x3c
 8001550:	2201      	movs	r2, #1
 8001552:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001554:	3301      	adds	r3, #1
 8001556:	3201      	adds	r2, #1
 8001558:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800155a:	6802      	ldr	r2, [r0, #0]
 800155c:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800155e:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001560:	4c16      	ldr	r4, [pc, #88]	; (80015bc <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8001562:	42a2      	cmp	r2, r4
 8001564:	d022      	beq.n	80015ac <HAL_TIMEx_MasterConfigSynchronization+0x68>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001566:	2470      	movs	r4, #112	; 0x70
 8001568:	43a3      	bics	r3, r4
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800156a:	680c      	ldr	r4, [r1, #0]
 800156c:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800156e:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001570:	6803      	ldr	r3, [r0, #0]
 8001572:	4a12      	ldr	r2, [pc, #72]	; (80015bc <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d00c      	beq.n	8001592 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8001578:	2280      	movs	r2, #128	; 0x80
 800157a:	05d2      	lsls	r2, r2, #23
 800157c:	4293      	cmp	r3, r2
 800157e:	d008      	beq.n	8001592 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8001580:	4a0f      	ldr	r2, [pc, #60]	; (80015c0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d005      	beq.n	8001592 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8001586:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d002      	beq.n	8001592 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800158c:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d104      	bne.n	800159c <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001592:	2280      	movs	r2, #128	; 0x80
 8001594:	4395      	bics	r5, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001596:	688a      	ldr	r2, [r1, #8]
 8001598:	432a      	orrs	r2, r5

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800159a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800159c:	233d      	movs	r3, #61	; 0x3d
 800159e:	2201      	movs	r2, #1
 80015a0:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 80015a2:	3b01      	subs	r3, #1
 80015a4:	2200      	movs	r2, #0
 80015a6:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80015a8:	2000      	movs	r0, #0
}
 80015aa:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 80015ac:	4c07      	ldr	r4, [pc, #28]	; (80015cc <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 80015ae:	4023      	ands	r3, r4
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80015b0:	684c      	ldr	r4, [r1, #4]
 80015b2:	4323      	orrs	r3, r4
 80015b4:	e7d7      	b.n	8001566 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 80015b6:	2002      	movs	r0, #2
 80015b8:	e7f7      	b.n	80015aa <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	40012c00 	.word	0x40012c00
 80015c0:	40000400 	.word	0x40000400
 80015c4:	40000800 	.word	0x40000800
 80015c8:	40014000 	.word	0x40014000
 80015cc:	ff0fffff 	.word	0xff0fffff

080015d0 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80015d0:	4770      	bx	lr

080015d2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80015d2:	4770      	bx	lr

080015d4 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80015d4:	4770      	bx	lr

080015d6 <app_encoder_init>:
/*
 * Initialization function
 */
void app_encoder_init(void){
	//HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
}
 80015d6:	4770      	bx	lr

080015d8 <app_encoder_loop>:

/*
 * Loop function
 */
void app_encoder_loop(void){
 80015d8:	b510      	push	{r4, lr}
	encoderVal = (TIM2 -> CNT) >> 2;
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	05db      	lsls	r3, r3, #23
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	089b      	lsrs	r3, r3, #2
 80015e2:	4a07      	ldr	r2, [pc, #28]	; (8001600 <app_encoder_loop+0x28>)
 80015e4:	6013      	str	r3, [r2, #0]
	if (g < 1000) {
 80015e6:	4b07      	ldr	r3, [pc, #28]	; (8001604 <app_encoder_loop+0x2c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	22fa      	movs	r2, #250	; 0xfa
 80015ec:	0092      	lsls	r2, r2, #2
 80015ee:	4293      	cmp	r3, r2
 80015f0:	da02      	bge.n	80015f8 <app_encoder_loop+0x20>
		g++;
 80015f2:	4a04      	ldr	r2, [pc, #16]	; (8001604 <app_encoder_loop+0x2c>)
 80015f4:	3301      	adds	r3, #1
 80015f6:	6013      	str	r3, [r2, #0]
	}
	HAL_Delay(100);
 80015f8:	2064      	movs	r0, #100	; 0x64
 80015fa:	f7ff f805 	bl	8000608 <HAL_Delay>
}
 80015fe:	bd10      	pop	{r4, pc}
 8001600:	200000c4 	.word	0x200000c4
 8001604:	200000c8 	.word	0x200000c8

08001608 <memset>:
 8001608:	0003      	movs	r3, r0
 800160a:	1882      	adds	r2, r0, r2
 800160c:	4293      	cmp	r3, r2
 800160e:	d100      	bne.n	8001612 <memset+0xa>
 8001610:	4770      	bx	lr
 8001612:	7019      	strb	r1, [r3, #0]
 8001614:	3301      	adds	r3, #1
 8001616:	e7f9      	b.n	800160c <memset+0x4>

08001618 <__libc_init_array>:
 8001618:	b570      	push	{r4, r5, r6, lr}
 800161a:	2600      	movs	r6, #0
 800161c:	4c0c      	ldr	r4, [pc, #48]	; (8001650 <__libc_init_array+0x38>)
 800161e:	4d0d      	ldr	r5, [pc, #52]	; (8001654 <__libc_init_array+0x3c>)
 8001620:	1b64      	subs	r4, r4, r5
 8001622:	10a4      	asrs	r4, r4, #2
 8001624:	42a6      	cmp	r6, r4
 8001626:	d109      	bne.n	800163c <__libc_init_array+0x24>
 8001628:	2600      	movs	r6, #0
 800162a:	f000 f819 	bl	8001660 <_init>
 800162e:	4c0a      	ldr	r4, [pc, #40]	; (8001658 <__libc_init_array+0x40>)
 8001630:	4d0a      	ldr	r5, [pc, #40]	; (800165c <__libc_init_array+0x44>)
 8001632:	1b64      	subs	r4, r4, r5
 8001634:	10a4      	asrs	r4, r4, #2
 8001636:	42a6      	cmp	r6, r4
 8001638:	d105      	bne.n	8001646 <__libc_init_array+0x2e>
 800163a:	bd70      	pop	{r4, r5, r6, pc}
 800163c:	00b3      	lsls	r3, r6, #2
 800163e:	58eb      	ldr	r3, [r5, r3]
 8001640:	4798      	blx	r3
 8001642:	3601      	adds	r6, #1
 8001644:	e7ee      	b.n	8001624 <__libc_init_array+0xc>
 8001646:	00b3      	lsls	r3, r6, #2
 8001648:	58eb      	ldr	r3, [r5, r3]
 800164a:	4798      	blx	r3
 800164c:	3601      	adds	r6, #1
 800164e:	e7f2      	b.n	8001636 <__libc_init_array+0x1e>
 8001650:	080016d8 	.word	0x080016d8
 8001654:	080016d8 	.word	0x080016d8
 8001658:	080016dc 	.word	0x080016dc
 800165c:	080016d8 	.word	0x080016d8

08001660 <_init>:
 8001660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001666:	bc08      	pop	{r3}
 8001668:	469e      	mov	lr, r3
 800166a:	4770      	bx	lr

0800166c <_fini>:
 800166c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800166e:	46c0      	nop			; (mov r8, r8)
 8001670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001672:	bc08      	pop	{r3}
 8001674:	469e      	mov	lr, r3
 8001676:	4770      	bx	lr
