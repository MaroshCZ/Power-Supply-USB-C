
STM32G0_encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f94  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003054  08003054  00013054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030dc  080030dc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080030dc  080030dc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030dc  080030dc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030dc  080030dc  000130dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030e0  080030e0  000130e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080030e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d60  20000010  080030f4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d70  080030f4  00021d70  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dfa5  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002517  00000000  00000000  0002e020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb0  00000000  00000000  00030538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c11  00000000  00000000  000314e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002368  00000000  00000000  000320f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010390  00000000  00000000  00034461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc536  00000000  00000000  000447f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000037cc  00000000  00000000  00100d28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001044f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800303c 	.word	0x0800303c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	0800303c 	.word	0x0800303c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b087      	sub	sp, #28
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fac7 	bl	80007b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f819 	bl	8000260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f8d9 	bl	80003e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000232:	f000 f873 	bl	800031c <MX_TIM2_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4a07      	ldr	r2, [pc, #28]	; (8000258 <main+0x38>)
 800023a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800023c:	c313      	stmia	r3!, {r0, r1, r4}
 800023e:	ca03      	ldmia	r2!, {r0, r1}
 8000240:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	2100      	movs	r1, #0
 8000246:	0018      	movs	r0, r3
 8000248:	f001 fed7 	bl	8001ffa <osThreadCreate>
 800024c:	0002      	movs	r2, r0
 800024e:	4b03      	ldr	r3, [pc, #12]	; (800025c <main+0x3c>)
 8000250:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000252:	f001 feca 	bl	8001fea <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000256:	e7fe      	b.n	8000256 <main+0x36>
 8000258:	08003060 	.word	0x08003060
 800025c:	20000078 	.word	0x20000078

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b095      	sub	sp, #84	; 0x54
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	2414      	movs	r4, #20
 8000268:	193b      	adds	r3, r7, r4
 800026a:	0018      	movs	r0, r3
 800026c:	233c      	movs	r3, #60	; 0x3c
 800026e:	001a      	movs	r2, r3
 8000270:	2100      	movs	r1, #0
 8000272:	f002 feb7 	bl	8002fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	0018      	movs	r0, r3
 800027a:	2310      	movs	r3, #16
 800027c:	001a      	movs	r2, r3
 800027e:	2100      	movs	r1, #0
 8000280:	f002 feb0 	bl	8002fe4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000284:	2380      	movs	r3, #128	; 0x80
 8000286:	009b      	lsls	r3, r3, #2
 8000288:	0018      	movs	r0, r3
 800028a:	f000 fd5d 	bl	8000d48 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028e:	193b      	adds	r3, r7, r4
 8000290:	2202      	movs	r2, #2
 8000292:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000294:	193b      	adds	r3, r7, r4
 8000296:	2280      	movs	r2, #128	; 0x80
 8000298:	0052      	lsls	r2, r2, #1
 800029a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800029c:	0021      	movs	r1, r4
 800029e:	187b      	adds	r3, r7, r1
 80002a0:	2200      	movs	r2, #0
 80002a2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	2240      	movs	r2, #64	; 0x40
 80002a8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	2202      	movs	r2, #2
 80002ae:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	2202      	movs	r2, #2
 80002b4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2200      	movs	r2, #0
 80002ba:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2208      	movs	r2, #8
 80002c0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2280      	movs	r2, #128	; 0x80
 80002c6:	0292      	lsls	r2, r2, #10
 80002c8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2280      	movs	r2, #128	; 0x80
 80002ce:	0492      	lsls	r2, r2, #18
 80002d0:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2280      	movs	r2, #128	; 0x80
 80002d6:	0592      	lsls	r2, r2, #22
 80002d8:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	0018      	movs	r0, r3
 80002de:	f000 fd7f 	bl	8000de0 <HAL_RCC_OscConfig>
 80002e2:	1e03      	subs	r3, r0, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002e6:	f000 f91b 	bl	8000520 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2207      	movs	r2, #7
 80002ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2202      	movs	r2, #2
 80002f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2102      	movs	r1, #2
 8000306:	0018      	movs	r0, r3
 8000308:	f001 f8ca 	bl	80014a0 <HAL_RCC_ClockConfig>
 800030c:	1e03      	subs	r3, r0, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000310:	f000 f906 	bl	8000520 <Error_Handler>
  }
}
 8000314:	46c0      	nop			; (mov r8, r8)
 8000316:	46bd      	mov	sp, r7
 8000318:	b015      	add	sp, #84	; 0x54
 800031a:	bd90      	pop	{r4, r7, pc}

0800031c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800031c:	b590      	push	{r4, r7, lr}
 800031e:	b08d      	sub	sp, #52	; 0x34
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000322:	240c      	movs	r4, #12
 8000324:	193b      	adds	r3, r7, r4
 8000326:	0018      	movs	r0, r3
 8000328:	2324      	movs	r3, #36	; 0x24
 800032a:	001a      	movs	r2, r3
 800032c:	2100      	movs	r1, #0
 800032e:	f002 fe59 	bl	8002fe4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000332:	003b      	movs	r3, r7
 8000334:	0018      	movs	r0, r3
 8000336:	230c      	movs	r3, #12
 8000338:	001a      	movs	r2, r3
 800033a:	2100      	movs	r1, #0
 800033c:	f002 fe52 	bl	8002fe4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000340:	4b26      	ldr	r3, [pc, #152]	; (80003dc <MX_TIM2_Init+0xc0>)
 8000342:	2280      	movs	r2, #128	; 0x80
 8000344:	05d2      	lsls	r2, r2, #23
 8000346:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000348:	4b24      	ldr	r3, [pc, #144]	; (80003dc <MX_TIM2_Init+0xc0>)
 800034a:	2200      	movs	r2, #0
 800034c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <MX_TIM2_Init+0xc0>)
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <MX_TIM2_Init+0xc0>)
 8000356:	4a22      	ldr	r2, [pc, #136]	; (80003e0 <MX_TIM2_Init+0xc4>)
 8000358:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <MX_TIM2_Init+0xc0>)
 800035c:	2200      	movs	r2, #0
 800035e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <MX_TIM2_Init+0xc0>)
 8000362:	2280      	movs	r2, #128	; 0x80
 8000364:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000366:	0021      	movs	r1, r4
 8000368:	187b      	adds	r3, r7, r1
 800036a:	2203      	movs	r2, #3
 800036c:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800036e:	187b      	adds	r3, r7, r1
 8000370:	2200      	movs	r2, #0
 8000372:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000374:	187b      	adds	r3, r7, r1
 8000376:	2201      	movs	r2, #1
 8000378:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2200      	movs	r2, #0
 800037e:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 10;
 8000380:	187b      	adds	r3, r7, r1
 8000382:	220a      	movs	r2, #10
 8000384:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000386:	187b      	adds	r3, r7, r1
 8000388:	2200      	movs	r2, #0
 800038a:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800038c:	187b      	adds	r3, r7, r1
 800038e:	2201      	movs	r2, #1
 8000390:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000392:	187b      	adds	r3, r7, r1
 8000394:	2200      	movs	r2, #0
 8000396:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 10;
 8000398:	187b      	adds	r3, r7, r1
 800039a:	220a      	movs	r2, #10
 800039c:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800039e:	187a      	adds	r2, r7, r1
 80003a0:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <MX_TIM2_Init+0xc0>)
 80003a2:	0011      	movs	r1, r2
 80003a4:	0018      	movs	r0, r3
 80003a6:	f001 fb11 	bl	80019cc <HAL_TIM_Encoder_Init>
 80003aa:	1e03      	subs	r3, r0, #0
 80003ac:	d001      	beq.n	80003b2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80003ae:	f000 f8b7 	bl	8000520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003b2:	003b      	movs	r3, r7
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003b8:	003b      	movs	r3, r7
 80003ba:	2200      	movs	r2, #0
 80003bc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003be:	003a      	movs	r2, r7
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <MX_TIM2_Init+0xc0>)
 80003c2:	0011      	movs	r1, r2
 80003c4:	0018      	movs	r0, r3
 80003c6:	f001 fd69 	bl	8001e9c <HAL_TIMEx_MasterConfigSynchronization>
 80003ca:	1e03      	subs	r3, r0, #0
 80003cc:	d001      	beq.n	80003d2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80003ce:	f000 f8a7 	bl	8000520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	46bd      	mov	sp, r7
 80003d6:	b00d      	add	sp, #52	; 0x34
 80003d8:	bd90      	pop	{r4, r7, pc}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	2000002c 	.word	0x2000002c
 80003e0:	0000ffff 	.word	0x0000ffff

080003e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e4:	b590      	push	{r4, r7, lr}
 80003e6:	b089      	sub	sp, #36	; 0x24
 80003e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ea:	240c      	movs	r4, #12
 80003ec:	193b      	adds	r3, r7, r4
 80003ee:	0018      	movs	r0, r3
 80003f0:	2314      	movs	r3, #20
 80003f2:	001a      	movs	r2, r3
 80003f4:	2100      	movs	r1, #0
 80003f6:	f002 fdf5 	bl	8002fe4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003fa:	4b39      	ldr	r3, [pc, #228]	; (80004e0 <MX_GPIO_Init+0xfc>)
 80003fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003fe:	4b38      	ldr	r3, [pc, #224]	; (80004e0 <MX_GPIO_Init+0xfc>)
 8000400:	2104      	movs	r1, #4
 8000402:	430a      	orrs	r2, r1
 8000404:	635a      	str	r2, [r3, #52]	; 0x34
 8000406:	4b36      	ldr	r3, [pc, #216]	; (80004e0 <MX_GPIO_Init+0xfc>)
 8000408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800040a:	2204      	movs	r2, #4
 800040c:	4013      	ands	r3, r2
 800040e:	60bb      	str	r3, [r7, #8]
 8000410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000412:	4b33      	ldr	r3, [pc, #204]	; (80004e0 <MX_GPIO_Init+0xfc>)
 8000414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000416:	4b32      	ldr	r3, [pc, #200]	; (80004e0 <MX_GPIO_Init+0xfc>)
 8000418:	2101      	movs	r1, #1
 800041a:	430a      	orrs	r2, r1
 800041c:	635a      	str	r2, [r3, #52]	; 0x34
 800041e:	4b30      	ldr	r3, [pc, #192]	; (80004e0 <MX_GPIO_Init+0xfc>)
 8000420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000422:	2201      	movs	r2, #1
 8000424:	4013      	ands	r3, r2
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800042a:	4b2d      	ldr	r3, [pc, #180]	; (80004e0 <MX_GPIO_Init+0xfc>)
 800042c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800042e:	4b2c      	ldr	r3, [pc, #176]	; (80004e0 <MX_GPIO_Init+0xfc>)
 8000430:	2102      	movs	r1, #2
 8000432:	430a      	orrs	r2, r1
 8000434:	635a      	str	r2, [r3, #52]	; 0x34
 8000436:	4b2a      	ldr	r3, [pc, #168]	; (80004e0 <MX_GPIO_Init+0xfc>)
 8000438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800043a:	2202      	movs	r2, #2
 800043c:	4013      	ands	r3, r2
 800043e:	603b      	str	r3, [r7, #0]
 8000440:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DB_OUT_GPIO_Port, DB_OUT_Pin, GPIO_PIN_RESET);
 8000442:	4b28      	ldr	r3, [pc, #160]	; (80004e4 <MX_GPIO_Init+0x100>)
 8000444:	2200      	movs	r2, #0
 8000446:	2140      	movs	r1, #64	; 0x40
 8000448:	0018      	movs	r0, r3
 800044a:	f000 fc21 	bl	8000c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VCC_OUT_GPIO_Port, VCC_OUT_Pin, GPIO_PIN_SET);
 800044e:	2380      	movs	r3, #128	; 0x80
 8000450:	00db      	lsls	r3, r3, #3
 8000452:	4825      	ldr	r0, [pc, #148]	; (80004e8 <MX_GPIO_Init+0x104>)
 8000454:	2201      	movs	r2, #1
 8000456:	0019      	movs	r1, r3
 8000458:	f000 fc1a 	bl	8000c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800045c:	193b      	adds	r3, r7, r4
 800045e:	2208      	movs	r2, #8
 8000460:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000462:	193b      	adds	r3, r7, r4
 8000464:	2288      	movs	r2, #136	; 0x88
 8000466:	0352      	lsls	r2, r2, #13
 8000468:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	193b      	adds	r3, r7, r4
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000470:	193b      	adds	r3, r7, r4
 8000472:	4a1d      	ldr	r2, [pc, #116]	; (80004e8 <MX_GPIO_Init+0x104>)
 8000474:	0019      	movs	r1, r3
 8000476:	0010      	movs	r0, r2
 8000478:	f000 fa9e 	bl	80009b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DB_OUT_Pin */
  GPIO_InitStruct.Pin = DB_OUT_Pin;
 800047c:	193b      	adds	r3, r7, r4
 800047e:	2240      	movs	r2, #64	; 0x40
 8000480:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000482:	193b      	adds	r3, r7, r4
 8000484:	2201      	movs	r2, #1
 8000486:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	193b      	adds	r3, r7, r4
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048e:	193b      	adds	r3, r7, r4
 8000490:	2200      	movs	r2, #0
 8000492:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DB_OUT_GPIO_Port, &GPIO_InitStruct);
 8000494:	193b      	adds	r3, r7, r4
 8000496:	4a13      	ldr	r2, [pc, #76]	; (80004e4 <MX_GPIO_Init+0x100>)
 8000498:	0019      	movs	r1, r3
 800049a:	0010      	movs	r0, r2
 800049c:	f000 fa8c 	bl	80009b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCC_OUT_Pin */
  GPIO_InitStruct.Pin = VCC_OUT_Pin;
 80004a0:	0021      	movs	r1, r4
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	2280      	movs	r2, #128	; 0x80
 80004a6:	00d2      	lsls	r2, r2, #3
 80004a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2201      	movs	r2, #1
 80004ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	187b      	adds	r3, r7, r1
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b6:	187b      	adds	r3, r7, r1
 80004b8:	2200      	movs	r2, #0
 80004ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(VCC_OUT_GPIO_Port, &GPIO_InitStruct);
 80004bc:	187b      	adds	r3, r7, r1
 80004be:	4a0a      	ldr	r2, [pc, #40]	; (80004e8 <MX_GPIO_Init+0x104>)
 80004c0:	0019      	movs	r1, r3
 80004c2:	0010      	movs	r0, r2
 80004c4:	f000 fa78 	bl	80009b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 2, 0);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2102      	movs	r1, #2
 80004cc:	2006      	movs	r0, #6
 80004ce:	f000 fa4d 	bl	800096c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80004d2:	2006      	movs	r0, #6
 80004d4:	f000 fa5f 	bl	8000996 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004d8:	46c0      	nop			; (mov r8, r8)
 80004da:	46bd      	mov	sp, r7
 80004dc:	b009      	add	sp, #36	; 0x24
 80004de:	bd90      	pop	{r4, r7, pc}
 80004e0:	40021000 	.word	0x40021000
 80004e4:	50000400 	.word	0x50000400
 80004e8:	50000800 	.word	0x50000800

080004ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004f4:	2001      	movs	r0, #1
 80004f6:	f001 fda8 	bl	800204a <osDelay>
 80004fa:	e7fb      	b.n	80004f4 <StartDefaultTask+0x8>

080004fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a04      	ldr	r2, [pc, #16]	; (800051c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d101      	bne.n	8000512 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800050e:	f000 f973 	bl	80007f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	46bd      	mov	sp, r7
 8000516:	b002      	add	sp, #8
 8000518:	bd80      	pop	{r7, pc}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	40001000 	.word	0x40001000

08000520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000524:	b672      	cpsid	i
}
 8000526:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000528:	e7fe      	b.n	8000528 <Error_Handler+0x8>
	...

0800052c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000532:	4b15      	ldr	r3, [pc, #84]	; (8000588 <HAL_MspInit+0x5c>)
 8000534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <HAL_MspInit+0x5c>)
 8000538:	2101      	movs	r1, #1
 800053a:	430a      	orrs	r2, r1
 800053c:	641a      	str	r2, [r3, #64]	; 0x40
 800053e:	4b12      	ldr	r3, [pc, #72]	; (8000588 <HAL_MspInit+0x5c>)
 8000540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000542:	2201      	movs	r2, #1
 8000544:	4013      	ands	r3, r2
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <HAL_MspInit+0x5c>)
 800054c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800054e:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <HAL_MspInit+0x5c>)
 8000550:	2180      	movs	r1, #128	; 0x80
 8000552:	0549      	lsls	r1, r1, #21
 8000554:	430a      	orrs	r2, r1
 8000556:	63da      	str	r2, [r3, #60]	; 0x3c
 8000558:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <HAL_MspInit+0x5c>)
 800055a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800055c:	2380      	movs	r3, #128	; 0x80
 800055e:	055b      	lsls	r3, r3, #21
 8000560:	4013      	ands	r3, r2
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000566:	2302      	movs	r3, #2
 8000568:	425b      	negs	r3, r3
 800056a:	2200      	movs	r2, #0
 800056c:	2103      	movs	r1, #3
 800056e:	0018      	movs	r0, r3
 8000570:	f000 f9fc 	bl	800096c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000574:	23c0      	movs	r3, #192	; 0xc0
 8000576:	00db      	lsls	r3, r3, #3
 8000578:	0018      	movs	r0, r3
 800057a:	f000 f959 	bl	8000830 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	b002      	add	sp, #8
 8000584:	bd80      	pop	{r7, pc}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	40021000 	.word	0x40021000

0800058c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b08b      	sub	sp, #44	; 0x2c
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000594:	2414      	movs	r4, #20
 8000596:	193b      	adds	r3, r7, r4
 8000598:	0018      	movs	r0, r3
 800059a:	2314      	movs	r3, #20
 800059c:	001a      	movs	r2, r3
 800059e:	2100      	movs	r1, #0
 80005a0:	f002 fd20 	bl	8002fe4 <memset>
  if(htim_encoder->Instance==TIM2)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	05db      	lsls	r3, r3, #23
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d12e      	bne.n	800060e <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005b0:	4b19      	ldr	r3, [pc, #100]	; (8000618 <HAL_TIM_Encoder_MspInit+0x8c>)
 80005b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005b4:	4b18      	ldr	r3, [pc, #96]	; (8000618 <HAL_TIM_Encoder_MspInit+0x8c>)
 80005b6:	2101      	movs	r1, #1
 80005b8:	430a      	orrs	r2, r1
 80005ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <HAL_TIM_Encoder_MspInit+0x8c>)
 80005be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005c0:	2201      	movs	r2, #1
 80005c2:	4013      	ands	r3, r2
 80005c4:	613b      	str	r3, [r7, #16]
 80005c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <HAL_TIM_Encoder_MspInit+0x8c>)
 80005ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_TIM_Encoder_MspInit+0x8c>)
 80005ce:	2101      	movs	r1, #1
 80005d0:	430a      	orrs	r2, r1
 80005d2:	635a      	str	r2, [r3, #52]	; 0x34
 80005d4:	4b10      	ldr	r3, [pc, #64]	; (8000618 <HAL_TIM_Encoder_MspInit+0x8c>)
 80005d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005d8:	2201      	movs	r2, #1
 80005da:	4013      	ands	r3, r2
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005e0:	0021      	movs	r1, r4
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2203      	movs	r2, #3
 80005e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2202      	movs	r2, #2
 80005ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2201      	movs	r2, #1
 80005f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	2202      	movs	r2, #2
 80005fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000600:	187a      	adds	r2, r7, r1
 8000602:	23a0      	movs	r3, #160	; 0xa0
 8000604:	05db      	lsls	r3, r3, #23
 8000606:	0011      	movs	r1, r2
 8000608:	0018      	movs	r0, r3
 800060a:	f000 f9d5 	bl	80009b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	b00b      	add	sp, #44	; 0x2c
 8000614:	bd90      	pop	{r4, r7, pc}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	40021000 	.word	0x40021000

0800061c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800061c:	b5b0      	push	{r4, r5, r7, lr}
 800061e:	b08c      	sub	sp, #48	; 0x30
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000624:	232b      	movs	r3, #43	; 0x2b
 8000626:	18fb      	adds	r3, r7, r3
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800062c:	4b37      	ldr	r3, [pc, #220]	; (800070c <HAL_InitTick+0xf0>)
 800062e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000630:	4b36      	ldr	r3, [pc, #216]	; (800070c <HAL_InitTick+0xf0>)
 8000632:	2110      	movs	r1, #16
 8000634:	430a      	orrs	r2, r1
 8000636:	63da      	str	r2, [r3, #60]	; 0x3c
 8000638:	4b34      	ldr	r3, [pc, #208]	; (800070c <HAL_InitTick+0xf0>)
 800063a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800063c:	2210      	movs	r2, #16
 800063e:	4013      	ands	r3, r2
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000644:	230c      	movs	r3, #12
 8000646:	18fa      	adds	r2, r7, r3
 8000648:	2410      	movs	r4, #16
 800064a:	193b      	adds	r3, r7, r4
 800064c:	0011      	movs	r1, r2
 800064e:	0018      	movs	r0, r3
 8000650:	f001 f8d0 	bl	80017f4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000654:	193b      	adds	r3, r7, r4
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800065a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065c:	2b00      	cmp	r3, #0
 800065e:	d104      	bne.n	800066a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000660:	f001 f8b2 	bl	80017c8 <HAL_RCC_GetPCLK1Freq>
 8000664:	0003      	movs	r3, r0
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000668:	e004      	b.n	8000674 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800066a:	f001 f8ad 	bl	80017c8 <HAL_RCC_GetPCLK1Freq>
 800066e:	0003      	movs	r3, r0
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000676:	4926      	ldr	r1, [pc, #152]	; (8000710 <HAL_InitTick+0xf4>)
 8000678:	0018      	movs	r0, r3
 800067a:	f7ff fd45 	bl	8000108 <__udivsi3>
 800067e:	0003      	movs	r3, r0
 8000680:	3b01      	subs	r3, #1
 8000682:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000684:	4b23      	ldr	r3, [pc, #140]	; (8000714 <HAL_InitTick+0xf8>)
 8000686:	4a24      	ldr	r2, [pc, #144]	; (8000718 <HAL_InitTick+0xfc>)
 8000688:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800068a:	4b22      	ldr	r3, [pc, #136]	; (8000714 <HAL_InitTick+0xf8>)
 800068c:	4a23      	ldr	r2, [pc, #140]	; (800071c <HAL_InitTick+0x100>)
 800068e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000690:	4b20      	ldr	r3, [pc, #128]	; (8000714 <HAL_InitTick+0xf8>)
 8000692:	6a3a      	ldr	r2, [r7, #32]
 8000694:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8000696:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <HAL_InitTick+0xf8>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800069c:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <HAL_InitTick+0xf8>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a2:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <HAL_InitTick+0xf8>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80006a8:	252b      	movs	r5, #43	; 0x2b
 80006aa:	197c      	adds	r4, r7, r5
 80006ac:	4b19      	ldr	r3, [pc, #100]	; (8000714 <HAL_InitTick+0xf8>)
 80006ae:	0018      	movs	r0, r3
 80006b0:	f001 f8ca 	bl	8001848 <HAL_TIM_Base_Init>
 80006b4:	0003      	movs	r3, r0
 80006b6:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80006b8:	197b      	adds	r3, r7, r5
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d11e      	bne.n	80006fe <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80006c0:	197c      	adds	r4, r7, r5
 80006c2:	4b14      	ldr	r3, [pc, #80]	; (8000714 <HAL_InitTick+0xf8>)
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 f91f 	bl	8001908 <HAL_TIM_Base_Start_IT>
 80006ca:	0003      	movs	r3, r0
 80006cc:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80006ce:	197b      	adds	r3, r7, r5
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d113      	bne.n	80006fe <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80006d6:	2011      	movs	r0, #17
 80006d8:	f000 f95d 	bl	8000996 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b03      	cmp	r3, #3
 80006e0:	d809      	bhi.n	80006f6 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, TickPriority, 0U);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2200      	movs	r2, #0
 80006e6:	0019      	movs	r1, r3
 80006e8:	2011      	movs	r0, #17
 80006ea:	f000 f93f 	bl	800096c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <HAL_InitTick+0x104>)
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	e003      	b.n	80006fe <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 80006f6:	232b      	movs	r3, #43	; 0x2b
 80006f8:	18fb      	adds	r3, r7, r3
 80006fa:	2201      	movs	r2, #1
 80006fc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80006fe:	232b      	movs	r3, #43	; 0x2b
 8000700:	18fb      	adds	r3, r7, r3
 8000702:	781b      	ldrb	r3, [r3, #0]
}
 8000704:	0018      	movs	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	b00c      	add	sp, #48	; 0x30
 800070a:	bdb0      	pop	{r4, r5, r7, pc}
 800070c:	40021000 	.word	0x40021000
 8000710:	000f4240 	.word	0x000f4240
 8000714:	2000007c 	.word	0x2000007c
 8000718:	40001000 	.word	0x40001000
 800071c:	000003e7 	.word	0x000003e7
 8000720:	20000004 	.word	0x20000004

08000724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000728:	e7fe      	b.n	8000728 <NMI_Handler+0x4>

0800072a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <HardFault_Handler+0x4>

08000730 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000734:	2008      	movs	r0, #8
 8000736:	f000 fac9 	bl	8000ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000744:	4b03      	ldr	r3, [pc, #12]	; (8000754 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8000746:	0018      	movs	r0, r3
 8000748:	f001 f9e8 	bl	8001b1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	2000007c 	.word	0x2000007c

08000758 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000764:	480d      	ldr	r0, [pc, #52]	; (800079c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000766:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000768:	f7ff fff6 	bl	8000758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800076c:	480c      	ldr	r0, [pc, #48]	; (80007a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800076e:	490d      	ldr	r1, [pc, #52]	; (80007a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000770:	4a0d      	ldr	r2, [pc, #52]	; (80007a8 <LoopForever+0xe>)
  movs r3, #0
 8000772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000774:	e002      	b.n	800077c <LoopCopyDataInit>

08000776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800077a:	3304      	adds	r3, #4

0800077c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800077c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800077e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000780:	d3f9      	bcc.n	8000776 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000782:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000784:	4c0a      	ldr	r4, [pc, #40]	; (80007b0 <LoopForever+0x16>)
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000788:	e001      	b.n	800078e <LoopFillZerobss>

0800078a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800078a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800078c:	3204      	adds	r2, #4

0800078e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800078e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000790:	d3fb      	bcc.n	800078a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000792:	f002 fc2f 	bl	8002ff4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000796:	f7ff fd43 	bl	8000220 <main>

0800079a <LoopForever>:

LoopForever:
  b LoopForever
 800079a:	e7fe      	b.n	800079a <LoopForever>
  ldr   r0, =_estack
 800079c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80007a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007a8:	080030e4 	.word	0x080030e4
  ldr r2, =_sbss
 80007ac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80007b0:	20001d70 	.word	0x20001d70

080007b4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007b4:	e7fe      	b.n	80007b4 <ADC1_COMP_IRQHandler>
	...

080007b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007be:	1dfb      	adds	r3, r7, #7
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c4:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <HAL_Init+0x3c>)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <HAL_Init+0x3c>)
 80007ca:	2180      	movs	r1, #128	; 0x80
 80007cc:	0049      	lsls	r1, r1, #1
 80007ce:	430a      	orrs	r2, r1
 80007d0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007d2:	2003      	movs	r0, #3
 80007d4:	f7ff ff22 	bl	800061c <HAL_InitTick>
 80007d8:	1e03      	subs	r3, r0, #0
 80007da:	d003      	beq.n	80007e4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80007dc:	1dfb      	adds	r3, r7, #7
 80007de:	2201      	movs	r2, #1
 80007e0:	701a      	strb	r2, [r3, #0]
 80007e2:	e001      	b.n	80007e8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80007e4:	f7ff fea2 	bl	800052c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007e8:	1dfb      	adds	r3, r7, #7
 80007ea:	781b      	ldrb	r3, [r3, #0]
}
 80007ec:	0018      	movs	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b002      	add	sp, #8
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40022000 	.word	0x40022000

080007f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <HAL_IncTick+0x1c>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	001a      	movs	r2, r3
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <HAL_IncTick+0x20>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	18d2      	adds	r2, r2, r3
 8000808:	4b03      	ldr	r3, [pc, #12]	; (8000818 <HAL_IncTick+0x20>)
 800080a:	601a      	str	r2, [r3, #0]
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	20000008 	.word	0x20000008
 8000818:	200000c8 	.word	0x200000c8

0800081c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  return uwTick;
 8000820:	4b02      	ldr	r3, [pc, #8]	; (800082c <HAL_GetTick+0x10>)
 8000822:	681b      	ldr	r3, [r3, #0]
}
 8000824:	0018      	movs	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	200000c8 	.word	0x200000c8

08000830 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a06      	ldr	r2, [pc, #24]	; (8000858 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800083e:	4013      	ands	r3, r2
 8000840:	0019      	movs	r1, r3
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	430a      	orrs	r2, r1
 8000848:	601a      	str	r2, [r3, #0]
}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b002      	add	sp, #8
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	40010000 	.word	0x40010000
 8000858:	fffff9ff 	.word	0xfffff9ff

0800085c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	0002      	movs	r2, r0
 8000864:	1dfb      	adds	r3, r7, #7
 8000866:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000868:	1dfb      	adds	r3, r7, #7
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b7f      	cmp	r3, #127	; 0x7f
 800086e:	d809      	bhi.n	8000884 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000870:	1dfb      	adds	r3, r7, #7
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	001a      	movs	r2, r3
 8000876:	231f      	movs	r3, #31
 8000878:	401a      	ands	r2, r3
 800087a:	4b04      	ldr	r3, [pc, #16]	; (800088c <__NVIC_EnableIRQ+0x30>)
 800087c:	2101      	movs	r1, #1
 800087e:	4091      	lsls	r1, r2
 8000880:	000a      	movs	r2, r1
 8000882:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	b002      	add	sp, #8
 800088a:	bd80      	pop	{r7, pc}
 800088c:	e000e100 	.word	0xe000e100

08000890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	0002      	movs	r2, r0
 8000898:	6039      	str	r1, [r7, #0]
 800089a:	1dfb      	adds	r3, r7, #7
 800089c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800089e:	1dfb      	adds	r3, r7, #7
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b7f      	cmp	r3, #127	; 0x7f
 80008a4:	d828      	bhi.n	80008f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008a6:	4a2f      	ldr	r2, [pc, #188]	; (8000964 <__NVIC_SetPriority+0xd4>)
 80008a8:	1dfb      	adds	r3, r7, #7
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	b25b      	sxtb	r3, r3
 80008ae:	089b      	lsrs	r3, r3, #2
 80008b0:	33c0      	adds	r3, #192	; 0xc0
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	589b      	ldr	r3, [r3, r2]
 80008b6:	1dfa      	adds	r2, r7, #7
 80008b8:	7812      	ldrb	r2, [r2, #0]
 80008ba:	0011      	movs	r1, r2
 80008bc:	2203      	movs	r2, #3
 80008be:	400a      	ands	r2, r1
 80008c0:	00d2      	lsls	r2, r2, #3
 80008c2:	21ff      	movs	r1, #255	; 0xff
 80008c4:	4091      	lsls	r1, r2
 80008c6:	000a      	movs	r2, r1
 80008c8:	43d2      	mvns	r2, r2
 80008ca:	401a      	ands	r2, r3
 80008cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	019b      	lsls	r3, r3, #6
 80008d2:	22ff      	movs	r2, #255	; 0xff
 80008d4:	401a      	ands	r2, r3
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	0018      	movs	r0, r3
 80008dc:	2303      	movs	r3, #3
 80008de:	4003      	ands	r3, r0
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e4:	481f      	ldr	r0, [pc, #124]	; (8000964 <__NVIC_SetPriority+0xd4>)
 80008e6:	1dfb      	adds	r3, r7, #7
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	b25b      	sxtb	r3, r3
 80008ec:	089b      	lsrs	r3, r3, #2
 80008ee:	430a      	orrs	r2, r1
 80008f0:	33c0      	adds	r3, #192	; 0xc0
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008f6:	e031      	b.n	800095c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008f8:	4a1b      	ldr	r2, [pc, #108]	; (8000968 <__NVIC_SetPriority+0xd8>)
 80008fa:	1dfb      	adds	r3, r7, #7
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	0019      	movs	r1, r3
 8000900:	230f      	movs	r3, #15
 8000902:	400b      	ands	r3, r1
 8000904:	3b08      	subs	r3, #8
 8000906:	089b      	lsrs	r3, r3, #2
 8000908:	3306      	adds	r3, #6
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	18d3      	adds	r3, r2, r3
 800090e:	3304      	adds	r3, #4
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	1dfa      	adds	r2, r7, #7
 8000914:	7812      	ldrb	r2, [r2, #0]
 8000916:	0011      	movs	r1, r2
 8000918:	2203      	movs	r2, #3
 800091a:	400a      	ands	r2, r1
 800091c:	00d2      	lsls	r2, r2, #3
 800091e:	21ff      	movs	r1, #255	; 0xff
 8000920:	4091      	lsls	r1, r2
 8000922:	000a      	movs	r2, r1
 8000924:	43d2      	mvns	r2, r2
 8000926:	401a      	ands	r2, r3
 8000928:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	019b      	lsls	r3, r3, #6
 800092e:	22ff      	movs	r2, #255	; 0xff
 8000930:	401a      	ands	r2, r3
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	0018      	movs	r0, r3
 8000938:	2303      	movs	r3, #3
 800093a:	4003      	ands	r3, r0
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000940:	4809      	ldr	r0, [pc, #36]	; (8000968 <__NVIC_SetPriority+0xd8>)
 8000942:	1dfb      	adds	r3, r7, #7
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	001c      	movs	r4, r3
 8000948:	230f      	movs	r3, #15
 800094a:	4023      	ands	r3, r4
 800094c:	3b08      	subs	r3, #8
 800094e:	089b      	lsrs	r3, r3, #2
 8000950:	430a      	orrs	r2, r1
 8000952:	3306      	adds	r3, #6
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	18c3      	adds	r3, r0, r3
 8000958:	3304      	adds	r3, #4
 800095a:	601a      	str	r2, [r3, #0]
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	b003      	add	sp, #12
 8000962:	bd90      	pop	{r4, r7, pc}
 8000964:	e000e100 	.word	0xe000e100
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	60b9      	str	r1, [r7, #8]
 8000974:	607a      	str	r2, [r7, #4]
 8000976:	210f      	movs	r1, #15
 8000978:	187b      	adds	r3, r7, r1
 800097a:	1c02      	adds	r2, r0, #0
 800097c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	187b      	adds	r3, r7, r1
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	b25b      	sxtb	r3, r3
 8000986:	0011      	movs	r1, r2
 8000988:	0018      	movs	r0, r3
 800098a:	f7ff ff81 	bl	8000890 <__NVIC_SetPriority>
}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	b004      	add	sp, #16
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	0002      	movs	r2, r0
 800099e:	1dfb      	adds	r3, r7, #7
 80009a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009a2:	1dfb      	adds	r3, r7, #7
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	b25b      	sxtb	r3, r3
 80009a8:	0018      	movs	r0, r3
 80009aa:	f7ff ff57 	bl	800085c <__NVIC_EnableIRQ>
}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	b002      	add	sp, #8
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009c6:	e14d      	b.n	8000c64 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2101      	movs	r1, #1
 80009ce:	697a      	ldr	r2, [r7, #20]
 80009d0:	4091      	lsls	r1, r2
 80009d2:	000a      	movs	r2, r1
 80009d4:	4013      	ands	r3, r2
 80009d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d100      	bne.n	80009e0 <HAL_GPIO_Init+0x28>
 80009de:	e13e      	b.n	8000c5e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	2203      	movs	r2, #3
 80009e6:	4013      	ands	r3, r2
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d005      	beq.n	80009f8 <HAL_GPIO_Init+0x40>
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	2203      	movs	r2, #3
 80009f2:	4013      	ands	r3, r2
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d130      	bne.n	8000a5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	2203      	movs	r2, #3
 8000a04:	409a      	lsls	r2, r3
 8000a06:	0013      	movs	r3, r2
 8000a08:	43da      	mvns	r2, r3
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	68da      	ldr	r2, [r3, #12]
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	409a      	lsls	r2, r3
 8000a1a:	0013      	movs	r3, r2
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a2e:	2201      	movs	r2, #1
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	409a      	lsls	r2, r3
 8000a34:	0013      	movs	r3, r2
 8000a36:	43da      	mvns	r2, r3
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	091b      	lsrs	r3, r3, #4
 8000a44:	2201      	movs	r2, #1
 8000a46:	401a      	ands	r2, r3
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	409a      	lsls	r2, r3
 8000a4c:	0013      	movs	r3, r2
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	2203      	movs	r2, #3
 8000a60:	4013      	ands	r3, r2
 8000a62:	2b03      	cmp	r3, #3
 8000a64:	d017      	beq.n	8000a96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	2203      	movs	r2, #3
 8000a72:	409a      	lsls	r2, r3
 8000a74:	0013      	movs	r3, r2
 8000a76:	43da      	mvns	r2, r3
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	689a      	ldr	r2, [r3, #8]
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	409a      	lsls	r2, r3
 8000a88:	0013      	movs	r3, r2
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	2203      	movs	r2, #3
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d123      	bne.n	8000aea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	08da      	lsrs	r2, r3, #3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	3208      	adds	r2, #8
 8000aaa:	0092      	lsls	r2, r2, #2
 8000aac:	58d3      	ldr	r3, [r2, r3]
 8000aae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	2207      	movs	r2, #7
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	220f      	movs	r2, #15
 8000aba:	409a      	lsls	r2, r3
 8000abc:	0013      	movs	r3, r2
 8000abe:	43da      	mvns	r2, r3
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	691a      	ldr	r2, [r3, #16]
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	2107      	movs	r1, #7
 8000ace:	400b      	ands	r3, r1
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	409a      	lsls	r2, r3
 8000ad4:	0013      	movs	r3, r2
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	08da      	lsrs	r2, r3, #3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3208      	adds	r2, #8
 8000ae4:	0092      	lsls	r2, r2, #2
 8000ae6:	6939      	ldr	r1, [r7, #16]
 8000ae8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	2203      	movs	r2, #3
 8000af6:	409a      	lsls	r2, r3
 8000af8:	0013      	movs	r3, r2
 8000afa:	43da      	mvns	r2, r3
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	4013      	ands	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	2203      	movs	r2, #3
 8000b08:	401a      	ands	r2, r3
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	409a      	lsls	r2, r3
 8000b10:	0013      	movs	r3, r2
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685a      	ldr	r2, [r3, #4]
 8000b22:	23c0      	movs	r3, #192	; 0xc0
 8000b24:	029b      	lsls	r3, r3, #10
 8000b26:	4013      	ands	r3, r2
 8000b28:	d100      	bne.n	8000b2c <HAL_GPIO_Init+0x174>
 8000b2a:	e098      	b.n	8000c5e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000b2c:	4a53      	ldr	r2, [pc, #332]	; (8000c7c <HAL_GPIO_Init+0x2c4>)
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	089b      	lsrs	r3, r3, #2
 8000b32:	3318      	adds	r3, #24
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	589b      	ldr	r3, [r3, r2]
 8000b38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	4013      	ands	r3, r2
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	220f      	movs	r2, #15
 8000b44:	409a      	lsls	r2, r3
 8000b46:	0013      	movs	r3, r2
 8000b48:	43da      	mvns	r2, r3
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	23a0      	movs	r3, #160	; 0xa0
 8000b54:	05db      	lsls	r3, r3, #23
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d019      	beq.n	8000b8e <HAL_GPIO_Init+0x1d6>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a48      	ldr	r2, [pc, #288]	; (8000c80 <HAL_GPIO_Init+0x2c8>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d013      	beq.n	8000b8a <HAL_GPIO_Init+0x1d2>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a47      	ldr	r2, [pc, #284]	; (8000c84 <HAL_GPIO_Init+0x2cc>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d00d      	beq.n	8000b86 <HAL_GPIO_Init+0x1ce>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a46      	ldr	r2, [pc, #280]	; (8000c88 <HAL_GPIO_Init+0x2d0>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d007      	beq.n	8000b82 <HAL_GPIO_Init+0x1ca>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a45      	ldr	r2, [pc, #276]	; (8000c8c <HAL_GPIO_Init+0x2d4>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d101      	bne.n	8000b7e <HAL_GPIO_Init+0x1c6>
 8000b7a:	2304      	movs	r3, #4
 8000b7c:	e008      	b.n	8000b90 <HAL_GPIO_Init+0x1d8>
 8000b7e:	2305      	movs	r3, #5
 8000b80:	e006      	b.n	8000b90 <HAL_GPIO_Init+0x1d8>
 8000b82:	2303      	movs	r3, #3
 8000b84:	e004      	b.n	8000b90 <HAL_GPIO_Init+0x1d8>
 8000b86:	2302      	movs	r3, #2
 8000b88:	e002      	b.n	8000b90 <HAL_GPIO_Init+0x1d8>
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e000      	b.n	8000b90 <HAL_GPIO_Init+0x1d8>
 8000b8e:	2300      	movs	r3, #0
 8000b90:	697a      	ldr	r2, [r7, #20]
 8000b92:	2103      	movs	r1, #3
 8000b94:	400a      	ands	r2, r1
 8000b96:	00d2      	lsls	r2, r2, #3
 8000b98:	4093      	lsls	r3, r2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000ba0:	4936      	ldr	r1, [pc, #216]	; (8000c7c <HAL_GPIO_Init+0x2c4>)
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	089b      	lsrs	r3, r3, #2
 8000ba6:	3318      	adds	r3, #24
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bae:	4b33      	ldr	r3, [pc, #204]	; (8000c7c <HAL_GPIO_Init+0x2c4>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685a      	ldr	r2, [r3, #4]
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	035b      	lsls	r3, r3, #13
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	d003      	beq.n	8000bd2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bd2:	4b2a      	ldr	r3, [pc, #168]	; (8000c7c <HAL_GPIO_Init+0x2c4>)
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000bd8:	4b28      	ldr	r3, [pc, #160]	; (8000c7c <HAL_GPIO_Init+0x2c4>)
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	43da      	mvns	r2, r3
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685a      	ldr	r2, [r3, #4]
 8000bec:	2380      	movs	r3, #128	; 0x80
 8000bee:	039b      	lsls	r3, r3, #14
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	d003      	beq.n	8000bfc <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <HAL_GPIO_Init+0x2c4>)
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c02:	4a1e      	ldr	r2, [pc, #120]	; (8000c7c <HAL_GPIO_Init+0x2c4>)
 8000c04:	2384      	movs	r3, #132	; 0x84
 8000c06:	58d3      	ldr	r3, [r2, r3]
 8000c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	43da      	mvns	r2, r3
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	4013      	ands	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685a      	ldr	r2, [r3, #4]
 8000c18:	2380      	movs	r3, #128	; 0x80
 8000c1a:	029b      	lsls	r3, r3, #10
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	d003      	beq.n	8000c28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c28:	4914      	ldr	r1, [pc, #80]	; (8000c7c <HAL_GPIO_Init+0x2c4>)
 8000c2a:	2284      	movs	r2, #132	; 0x84
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000c30:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <HAL_GPIO_Init+0x2c4>)
 8000c32:	2380      	movs	r3, #128	; 0x80
 8000c34:	58d3      	ldr	r3, [r2, r3]
 8000c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	2380      	movs	r3, #128	; 0x80
 8000c48:	025b      	lsls	r3, r3, #9
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	d003      	beq.n	8000c56 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c56:	4909      	ldr	r1, [pc, #36]	; (8000c7c <HAL_GPIO_Init+0x2c4>)
 8000c58:	2280      	movs	r2, #128	; 0x80
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	3301      	adds	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	40da      	lsrs	r2, r3
 8000c6c:	1e13      	subs	r3, r2, #0
 8000c6e:	d000      	beq.n	8000c72 <HAL_GPIO_Init+0x2ba>
 8000c70:	e6aa      	b.n	80009c8 <HAL_GPIO_Init+0x10>
  }
}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	b006      	add	sp, #24
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40021800 	.word	0x40021800
 8000c80:	50000400 	.word	0x50000400
 8000c84:	50000800 	.word	0x50000800
 8000c88:	50000c00 	.word	0x50000c00
 8000c8c:	50001000 	.word	0x50001000

08000c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	0008      	movs	r0, r1
 8000c9a:	0011      	movs	r1, r2
 8000c9c:	1cbb      	adds	r3, r7, #2
 8000c9e:	1c02      	adds	r2, r0, #0
 8000ca0:	801a      	strh	r2, [r3, #0]
 8000ca2:	1c7b      	adds	r3, r7, #1
 8000ca4:	1c0a      	adds	r2, r1, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ca8:	1c7b      	adds	r3, r7, #1
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d004      	beq.n	8000cba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cb0:	1cbb      	adds	r3, r7, #2
 8000cb2:	881a      	ldrh	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cb8:	e003      	b.n	8000cc2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cba:	1cbb      	adds	r3, r7, #2
 8000cbc:	881a      	ldrh	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b002      	add	sp, #8
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	0002      	movs	r2, r0
 8000cd4:	1dbb      	adds	r3, r7, #6
 8000cd6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	1dba      	adds	r2, r7, #6
 8000cde:	8812      	ldrh	r2, [r2, #0]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	d008      	beq.n	8000cf6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000ce4:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000ce6:	1dba      	adds	r2, r7, #6
 8000ce8:	8812      	ldrh	r2, [r2, #0]
 8000cea:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000cec:	1dbb      	adds	r3, r7, #6
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f000 f815 	bl	8000d20 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000cf8:	691b      	ldr	r3, [r3, #16]
 8000cfa:	1dba      	adds	r2, r7, #6
 8000cfc:	8812      	ldrh	r2, [r2, #0]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	d008      	beq.n	8000d14 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000d04:	1dba      	adds	r2, r7, #6
 8000d06:	8812      	ldrh	r2, [r2, #0]
 8000d08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000d0a:	1dbb      	adds	r3, r7, #6
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f000 f810 	bl	8000d34 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000d14:	46c0      	nop			; (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b002      	add	sp, #8
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40021800 	.word	0x40021800

08000d20 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	0002      	movs	r2, r0
 8000d28:	1dbb      	adds	r3, r7, #6
 8000d2a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b002      	add	sp, #8
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	0002      	movs	r2, r0
 8000d3c:	1dbb      	adds	r3, r7, #6
 8000d3e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b002      	add	sp, #8
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000d50:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a19      	ldr	r2, [pc, #100]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000d56:	4013      	ands	r3, r2
 8000d58:	0019      	movs	r1, r3
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d11f      	bne.n	8000dac <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	0013      	movs	r3, r2
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	189b      	adds	r3, r3, r2
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	4912      	ldr	r1, [pc, #72]	; (8000dc4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f7ff f9c4 	bl	8000108 <__udivsi3>
 8000d80:	0003      	movs	r3, r0
 8000d82:	3301      	adds	r3, #1
 8000d84:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d86:	e008      	b.n	8000d9a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d003      	beq.n	8000d96 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	e001      	b.n	8000d9a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000d96:	2303      	movs	r3, #3
 8000d98:	e009      	b.n	8000dae <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d9a:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000d9c:	695a      	ldr	r2, [r3, #20]
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	401a      	ands	r2, r3
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d0ed      	beq.n	8000d88 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	0018      	movs	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	b004      	add	sp, #16
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	40007000 	.word	0x40007000
 8000dbc:	fffff9ff 	.word	0xfffff9ff
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	000f4240 	.word	0x000f4240

08000dc8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <LL_RCC_GetAPB1Prescaler+0x14>)
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	23e0      	movs	r3, #224	; 0xe0
 8000dd2:	01db      	lsls	r3, r3, #7
 8000dd4:	4013      	ands	r3, r2
}
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40021000 	.word	0x40021000

08000de0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d102      	bne.n	8000df4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	f000 fb50 	bl	8001494 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	d100      	bne.n	8000e00 <HAL_RCC_OscConfig+0x20>
 8000dfe:	e07c      	b.n	8000efa <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e00:	4bc3      	ldr	r3, [pc, #780]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	2238      	movs	r2, #56	; 0x38
 8000e06:	4013      	ands	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e0a:	4bc1      	ldr	r3, [pc, #772]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	2203      	movs	r2, #3
 8000e10:	4013      	ands	r3, r2
 8000e12:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	2b10      	cmp	r3, #16
 8000e18:	d102      	bne.n	8000e20 <HAL_RCC_OscConfig+0x40>
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	2b03      	cmp	r3, #3
 8000e1e:	d002      	beq.n	8000e26 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	2b08      	cmp	r3, #8
 8000e24:	d10b      	bne.n	8000e3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e26:	4bba      	ldr	r3, [pc, #744]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	2380      	movs	r3, #128	; 0x80
 8000e2c:	029b      	lsls	r3, r3, #10
 8000e2e:	4013      	ands	r3, r2
 8000e30:	d062      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x118>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d15e      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e32a      	b.n	8001494 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685a      	ldr	r2, [r3, #4]
 8000e42:	2380      	movs	r3, #128	; 0x80
 8000e44:	025b      	lsls	r3, r3, #9
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d107      	bne.n	8000e5a <HAL_RCC_OscConfig+0x7a>
 8000e4a:	4bb1      	ldr	r3, [pc, #708]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	4bb0      	ldr	r3, [pc, #704]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000e50:	2180      	movs	r1, #128	; 0x80
 8000e52:	0249      	lsls	r1, r1, #9
 8000e54:	430a      	orrs	r2, r1
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	e020      	b.n	8000e9c <HAL_RCC_OscConfig+0xbc>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685a      	ldr	r2, [r3, #4]
 8000e5e:	23a0      	movs	r3, #160	; 0xa0
 8000e60:	02db      	lsls	r3, r3, #11
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d10e      	bne.n	8000e84 <HAL_RCC_OscConfig+0xa4>
 8000e66:	4baa      	ldr	r3, [pc, #680]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4ba9      	ldr	r3, [pc, #676]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000e6c:	2180      	movs	r1, #128	; 0x80
 8000e6e:	02c9      	lsls	r1, r1, #11
 8000e70:	430a      	orrs	r2, r1
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	4ba6      	ldr	r3, [pc, #664]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4ba5      	ldr	r3, [pc, #660]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000e7a:	2180      	movs	r1, #128	; 0x80
 8000e7c:	0249      	lsls	r1, r1, #9
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	e00b      	b.n	8000e9c <HAL_RCC_OscConfig+0xbc>
 8000e84:	4ba2      	ldr	r3, [pc, #648]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4ba1      	ldr	r3, [pc, #644]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000e8a:	49a2      	ldr	r1, [pc, #648]	; (8001114 <HAL_RCC_OscConfig+0x334>)
 8000e8c:	400a      	ands	r2, r1
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	4b9f      	ldr	r3, [pc, #636]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b9e      	ldr	r3, [pc, #632]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000e96:	49a0      	ldr	r1, [pc, #640]	; (8001118 <HAL_RCC_OscConfig+0x338>)
 8000e98:	400a      	ands	r2, r1
 8000e9a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d014      	beq.n	8000ece <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ea4:	f7ff fcba 	bl	800081c <HAL_GetTick>
 8000ea8:	0003      	movs	r3, r0
 8000eaa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eac:	e008      	b.n	8000ec0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eae:	f7ff fcb5 	bl	800081c <HAL_GetTick>
 8000eb2:	0002      	movs	r2, r0
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	2b64      	cmp	r3, #100	; 0x64
 8000eba:	d901      	bls.n	8000ec0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e2e9      	b.n	8001494 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ec0:	4b93      	ldr	r3, [pc, #588]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	029b      	lsls	r3, r3, #10
 8000ec8:	4013      	ands	r3, r2
 8000eca:	d0f0      	beq.n	8000eae <HAL_RCC_OscConfig+0xce>
 8000ecc:	e015      	b.n	8000efa <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ece:	f7ff fca5 	bl	800081c <HAL_GetTick>
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ed6:	e008      	b.n	8000eea <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ed8:	f7ff fca0 	bl	800081c <HAL_GetTick>
 8000edc:	0002      	movs	r2, r0
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	2b64      	cmp	r3, #100	; 0x64
 8000ee4:	d901      	bls.n	8000eea <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e2d4      	b.n	8001494 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000eea:	4b89      	ldr	r3, [pc, #548]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	2380      	movs	r3, #128	; 0x80
 8000ef0:	029b      	lsls	r3, r3, #10
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	d1f0      	bne.n	8000ed8 <HAL_RCC_OscConfig+0xf8>
 8000ef6:	e000      	b.n	8000efa <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2202      	movs	r2, #2
 8000f00:	4013      	ands	r3, r2
 8000f02:	d100      	bne.n	8000f06 <HAL_RCC_OscConfig+0x126>
 8000f04:	e099      	b.n	800103a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f06:	4b82      	ldr	r3, [pc, #520]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	2238      	movs	r2, #56	; 0x38
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f10:	4b7f      	ldr	r3, [pc, #508]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	2203      	movs	r2, #3
 8000f16:	4013      	ands	r3, r2
 8000f18:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	2b10      	cmp	r3, #16
 8000f1e:	d102      	bne.n	8000f26 <HAL_RCC_OscConfig+0x146>
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d002      	beq.n	8000f2c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d135      	bne.n	8000f98 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f2c:	4b78      	ldr	r3, [pc, #480]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	4013      	ands	r3, r2
 8000f36:	d005      	beq.n	8000f44 <HAL_RCC_OscConfig+0x164>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d101      	bne.n	8000f44 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e2a7      	b.n	8001494 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f44:	4b72      	ldr	r3, [pc, #456]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	4a74      	ldr	r2, [pc, #464]	; (800111c <HAL_RCC_OscConfig+0x33c>)
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	0019      	movs	r1, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	021a      	lsls	r2, r3, #8
 8000f54:	4b6e      	ldr	r3, [pc, #440]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000f56:	430a      	orrs	r2, r1
 8000f58:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d112      	bne.n	8000f86 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000f60:	4b6b      	ldr	r3, [pc, #428]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a6e      	ldr	r2, [pc, #440]	; (8001120 <HAL_RCC_OscConfig+0x340>)
 8000f66:	4013      	ands	r3, r2
 8000f68:	0019      	movs	r1, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	691a      	ldr	r2, [r3, #16]
 8000f6e:	4b68      	ldr	r3, [pc, #416]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000f70:	430a      	orrs	r2, r1
 8000f72:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000f74:	4b66      	ldr	r3, [pc, #408]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	0adb      	lsrs	r3, r3, #11
 8000f7a:	2207      	movs	r2, #7
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	4a69      	ldr	r2, [pc, #420]	; (8001124 <HAL_RCC_OscConfig+0x344>)
 8000f80:	40da      	lsrs	r2, r3
 8000f82:	4b69      	ldr	r3, [pc, #420]	; (8001128 <HAL_RCC_OscConfig+0x348>)
 8000f84:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f86:	4b69      	ldr	r3, [pc, #420]	; (800112c <HAL_RCC_OscConfig+0x34c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f7ff fb46 	bl	800061c <HAL_InitTick>
 8000f90:	1e03      	subs	r3, r0, #0
 8000f92:	d051      	beq.n	8001038 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e27d      	b.n	8001494 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d030      	beq.n	8001002 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000fa0:	4b5b      	ldr	r3, [pc, #364]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a5e      	ldr	r2, [pc, #376]	; (8001120 <HAL_RCC_OscConfig+0x340>)
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	0019      	movs	r1, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	691a      	ldr	r2, [r3, #16]
 8000fae:	4b58      	ldr	r3, [pc, #352]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000fb4:	4b56      	ldr	r3, [pc, #344]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b55      	ldr	r3, [pc, #340]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000fba:	2180      	movs	r1, #128	; 0x80
 8000fbc:	0049      	lsls	r1, r1, #1
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc2:	f7ff fc2b 	bl	800081c <HAL_GetTick>
 8000fc6:	0003      	movs	r3, r0
 8000fc8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fcc:	f7ff fc26 	bl	800081c <HAL_GetTick>
 8000fd0:	0002      	movs	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e25a      	b.n	8001494 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fde:	4b4c      	ldr	r3, [pc, #304]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	2380      	movs	r3, #128	; 0x80
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	d0f0      	beq.n	8000fcc <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fea:	4b49      	ldr	r3, [pc, #292]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	4a4b      	ldr	r2, [pc, #300]	; (800111c <HAL_RCC_OscConfig+0x33c>)
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	0019      	movs	r1, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	021a      	lsls	r2, r3, #8
 8000ffa:	4b45      	ldr	r3, [pc, #276]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	e01b      	b.n	800103a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001002:	4b43      	ldr	r3, [pc, #268]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	4b42      	ldr	r3, [pc, #264]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8001008:	4949      	ldr	r1, [pc, #292]	; (8001130 <HAL_RCC_OscConfig+0x350>)
 800100a:	400a      	ands	r2, r1
 800100c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800100e:	f7ff fc05 	bl	800081c <HAL_GetTick>
 8001012:	0003      	movs	r3, r0
 8001014:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001016:	e008      	b.n	800102a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001018:	f7ff fc00 	bl	800081c <HAL_GetTick>
 800101c:	0002      	movs	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e234      	b.n	8001494 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800102a:	4b39      	ldr	r3, [pc, #228]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	2380      	movs	r3, #128	; 0x80
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	4013      	ands	r3, r2
 8001034:	d1f0      	bne.n	8001018 <HAL_RCC_OscConfig+0x238>
 8001036:	e000      	b.n	800103a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001038:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2208      	movs	r2, #8
 8001040:	4013      	ands	r3, r2
 8001042:	d047      	beq.n	80010d4 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001044:	4b32      	ldr	r3, [pc, #200]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	2238      	movs	r2, #56	; 0x38
 800104a:	4013      	ands	r3, r2
 800104c:	2b18      	cmp	r3, #24
 800104e:	d10a      	bne.n	8001066 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001050:	4b2f      	ldr	r3, [pc, #188]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8001052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001054:	2202      	movs	r2, #2
 8001056:	4013      	ands	r3, r2
 8001058:	d03c      	beq.n	80010d4 <HAL_RCC_OscConfig+0x2f4>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d138      	bne.n	80010d4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e216      	b.n	8001494 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d019      	beq.n	80010a2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800106e:	4b28      	ldr	r3, [pc, #160]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8001070:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001072:	4b27      	ldr	r3, [pc, #156]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8001074:	2101      	movs	r1, #1
 8001076:	430a      	orrs	r2, r1
 8001078:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800107a:	f7ff fbcf 	bl	800081c <HAL_GetTick>
 800107e:	0003      	movs	r3, r0
 8001080:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001084:	f7ff fbca 	bl	800081c <HAL_GetTick>
 8001088:	0002      	movs	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e1fe      	b.n	8001494 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001096:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8001098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109a:	2202      	movs	r2, #2
 800109c:	4013      	ands	r3, r2
 800109e:	d0f1      	beq.n	8001084 <HAL_RCC_OscConfig+0x2a4>
 80010a0:	e018      	b.n	80010d4 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80010a2:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 80010a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010a6:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 80010a8:	2101      	movs	r1, #1
 80010aa:	438a      	bics	r2, r1
 80010ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ae:	f7ff fbb5 	bl	800081c <HAL_GetTick>
 80010b2:	0003      	movs	r3, r0
 80010b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010b6:	e008      	b.n	80010ca <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010b8:	f7ff fbb0 	bl	800081c <HAL_GetTick>
 80010bc:	0002      	movs	r2, r0
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e1e4      	b.n	8001494 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 80010cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ce:	2202      	movs	r2, #2
 80010d0:	4013      	ands	r3, r2
 80010d2:	d1f1      	bne.n	80010b8 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2204      	movs	r2, #4
 80010da:	4013      	ands	r3, r2
 80010dc:	d100      	bne.n	80010e0 <HAL_RCC_OscConfig+0x300>
 80010de:	e0c7      	b.n	8001270 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010e0:	231f      	movs	r3, #31
 80010e2:	18fb      	adds	r3, r7, r3
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	2238      	movs	r2, #56	; 0x38
 80010ee:	4013      	ands	r3, r2
 80010f0:	2b20      	cmp	r3, #32
 80010f2:	d11f      	bne.n	8001134 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 80010f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f8:	2202      	movs	r2, #2
 80010fa:	4013      	ands	r3, r2
 80010fc:	d100      	bne.n	8001100 <HAL_RCC_OscConfig+0x320>
 80010fe:	e0b7      	b.n	8001270 <HAL_RCC_OscConfig+0x490>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d000      	beq.n	800110a <HAL_RCC_OscConfig+0x32a>
 8001108:	e0b2      	b.n	8001270 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e1c2      	b.n	8001494 <HAL_RCC_OscConfig+0x6b4>
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	40021000 	.word	0x40021000
 8001114:	fffeffff 	.word	0xfffeffff
 8001118:	fffbffff 	.word	0xfffbffff
 800111c:	ffff80ff 	.word	0xffff80ff
 8001120:	ffffc7ff 	.word	0xffffc7ff
 8001124:	00f42400 	.word	0x00f42400
 8001128:	20000000 	.word	0x20000000
 800112c:	20000004 	.word	0x20000004
 8001130:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001134:	4bb5      	ldr	r3, [pc, #724]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 8001136:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	055b      	lsls	r3, r3, #21
 800113c:	4013      	ands	r3, r2
 800113e:	d101      	bne.n	8001144 <HAL_RCC_OscConfig+0x364>
 8001140:	2301      	movs	r3, #1
 8001142:	e000      	b.n	8001146 <HAL_RCC_OscConfig+0x366>
 8001144:	2300      	movs	r3, #0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d011      	beq.n	800116e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	4bb0      	ldr	r3, [pc, #704]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 800114c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800114e:	4baf      	ldr	r3, [pc, #700]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 8001150:	2180      	movs	r1, #128	; 0x80
 8001152:	0549      	lsls	r1, r1, #21
 8001154:	430a      	orrs	r2, r1
 8001156:	63da      	str	r2, [r3, #60]	; 0x3c
 8001158:	4bac      	ldr	r3, [pc, #688]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 800115a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	055b      	lsls	r3, r3, #21
 8001160:	4013      	ands	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001166:	231f      	movs	r3, #31
 8001168:	18fb      	adds	r3, r7, r3
 800116a:	2201      	movs	r2, #1
 800116c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800116e:	4ba8      	ldr	r3, [pc, #672]	; (8001410 <HAL_RCC_OscConfig+0x630>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	2380      	movs	r3, #128	; 0x80
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4013      	ands	r3, r2
 8001178:	d11a      	bne.n	80011b0 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800117a:	4ba5      	ldr	r3, [pc, #660]	; (8001410 <HAL_RCC_OscConfig+0x630>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4ba4      	ldr	r3, [pc, #656]	; (8001410 <HAL_RCC_OscConfig+0x630>)
 8001180:	2180      	movs	r1, #128	; 0x80
 8001182:	0049      	lsls	r1, r1, #1
 8001184:	430a      	orrs	r2, r1
 8001186:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001188:	f7ff fb48 	bl	800081c <HAL_GetTick>
 800118c:	0003      	movs	r3, r0
 800118e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001190:	e008      	b.n	80011a4 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001192:	f7ff fb43 	bl	800081c <HAL_GetTick>
 8001196:	0002      	movs	r2, r0
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e177      	b.n	8001494 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011a4:	4b9a      	ldr	r3, [pc, #616]	; (8001410 <HAL_RCC_OscConfig+0x630>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4013      	ands	r3, r2
 80011ae:	d0f0      	beq.n	8001192 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d106      	bne.n	80011c6 <HAL_RCC_OscConfig+0x3e6>
 80011b8:	4b94      	ldr	r3, [pc, #592]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 80011ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80011bc:	4b93      	ldr	r3, [pc, #588]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 80011be:	2101      	movs	r1, #1
 80011c0:	430a      	orrs	r2, r1
 80011c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80011c4:	e01c      	b.n	8001200 <HAL_RCC_OscConfig+0x420>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	2b05      	cmp	r3, #5
 80011cc:	d10c      	bne.n	80011e8 <HAL_RCC_OscConfig+0x408>
 80011ce:	4b8f      	ldr	r3, [pc, #572]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 80011d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80011d2:	4b8e      	ldr	r3, [pc, #568]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 80011d4:	2104      	movs	r1, #4
 80011d6:	430a      	orrs	r2, r1
 80011d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80011da:	4b8c      	ldr	r3, [pc, #560]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 80011dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80011de:	4b8b      	ldr	r3, [pc, #556]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 80011e0:	2101      	movs	r1, #1
 80011e2:	430a      	orrs	r2, r1
 80011e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80011e6:	e00b      	b.n	8001200 <HAL_RCC_OscConfig+0x420>
 80011e8:	4b88      	ldr	r3, [pc, #544]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 80011ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80011ec:	4b87      	ldr	r3, [pc, #540]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 80011ee:	2101      	movs	r1, #1
 80011f0:	438a      	bics	r2, r1
 80011f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80011f4:	4b85      	ldr	r3, [pc, #532]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 80011f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80011f8:	4b84      	ldr	r3, [pc, #528]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 80011fa:	2104      	movs	r1, #4
 80011fc:	438a      	bics	r2, r1
 80011fe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d014      	beq.n	8001232 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001208:	f7ff fb08 	bl	800081c <HAL_GetTick>
 800120c:	0003      	movs	r3, r0
 800120e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001210:	e009      	b.n	8001226 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001212:	f7ff fb03 	bl	800081c <HAL_GetTick>
 8001216:	0002      	movs	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	4a7d      	ldr	r2, [pc, #500]	; (8001414 <HAL_RCC_OscConfig+0x634>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e136      	b.n	8001494 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001226:	4b79      	ldr	r3, [pc, #484]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 8001228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800122a:	2202      	movs	r2, #2
 800122c:	4013      	ands	r3, r2
 800122e:	d0f0      	beq.n	8001212 <HAL_RCC_OscConfig+0x432>
 8001230:	e013      	b.n	800125a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001232:	f7ff faf3 	bl	800081c <HAL_GetTick>
 8001236:	0003      	movs	r3, r0
 8001238:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800123a:	e009      	b.n	8001250 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800123c:	f7ff faee 	bl	800081c <HAL_GetTick>
 8001240:	0002      	movs	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	4a73      	ldr	r2, [pc, #460]	; (8001414 <HAL_RCC_OscConfig+0x634>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e121      	b.n	8001494 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001250:	4b6e      	ldr	r3, [pc, #440]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 8001252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001254:	2202      	movs	r2, #2
 8001256:	4013      	ands	r3, r2
 8001258:	d1f0      	bne.n	800123c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800125a:	231f      	movs	r3, #31
 800125c:	18fb      	adds	r3, r7, r3
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d105      	bne.n	8001270 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001264:	4b69      	ldr	r3, [pc, #420]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 8001266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001268:	4b68      	ldr	r3, [pc, #416]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 800126a:	496b      	ldr	r1, [pc, #428]	; (8001418 <HAL_RCC_OscConfig+0x638>)
 800126c:	400a      	ands	r2, r1
 800126e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2220      	movs	r2, #32
 8001276:	4013      	ands	r3, r2
 8001278:	d039      	beq.n	80012ee <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d01b      	beq.n	80012ba <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001282:	4b62      	ldr	r3, [pc, #392]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	4b61      	ldr	r3, [pc, #388]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 8001288:	2180      	movs	r1, #128	; 0x80
 800128a:	03c9      	lsls	r1, r1, #15
 800128c:	430a      	orrs	r2, r1
 800128e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001290:	f7ff fac4 	bl	800081c <HAL_GetTick>
 8001294:	0003      	movs	r3, r0
 8001296:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001298:	e008      	b.n	80012ac <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800129a:	f7ff fabf 	bl	800081c <HAL_GetTick>
 800129e:	0002      	movs	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e0f3      	b.n	8001494 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80012ac:	4b57      	ldr	r3, [pc, #348]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	041b      	lsls	r3, r3, #16
 80012b4:	4013      	ands	r3, r2
 80012b6:	d0f0      	beq.n	800129a <HAL_RCC_OscConfig+0x4ba>
 80012b8:	e019      	b.n	80012ee <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80012ba:	4b54      	ldr	r3, [pc, #336]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4b53      	ldr	r3, [pc, #332]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 80012c0:	4956      	ldr	r1, [pc, #344]	; (800141c <HAL_RCC_OscConfig+0x63c>)
 80012c2:	400a      	ands	r2, r1
 80012c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c6:	f7ff faa9 	bl	800081c <HAL_GetTick>
 80012ca:	0003      	movs	r3, r0
 80012cc:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012d0:	f7ff faa4 	bl	800081c <HAL_GetTick>
 80012d4:	0002      	movs	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e0d8      	b.n	8001494 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80012e2:	4b4a      	ldr	r3, [pc, #296]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	2380      	movs	r3, #128	; 0x80
 80012e8:	041b      	lsls	r3, r3, #16
 80012ea:	4013      	ands	r3, r2
 80012ec:	d1f0      	bne.n	80012d0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a1b      	ldr	r3, [r3, #32]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d100      	bne.n	80012f8 <HAL_RCC_OscConfig+0x518>
 80012f6:	e0cc      	b.n	8001492 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012f8:	4b44      	ldr	r3, [pc, #272]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	2238      	movs	r2, #56	; 0x38
 80012fe:	4013      	ands	r3, r2
 8001300:	2b10      	cmp	r3, #16
 8001302:	d100      	bne.n	8001306 <HAL_RCC_OscConfig+0x526>
 8001304:	e07b      	b.n	80013fe <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	2b02      	cmp	r3, #2
 800130c:	d156      	bne.n	80013bc <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800130e:	4b3f      	ldr	r3, [pc, #252]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4b3e      	ldr	r3, [pc, #248]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 8001314:	4942      	ldr	r1, [pc, #264]	; (8001420 <HAL_RCC_OscConfig+0x640>)
 8001316:	400a      	ands	r2, r1
 8001318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131a:	f7ff fa7f 	bl	800081c <HAL_GetTick>
 800131e:	0003      	movs	r3, r0
 8001320:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001324:	f7ff fa7a 	bl	800081c <HAL_GetTick>
 8001328:	0002      	movs	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e0ae      	b.n	8001494 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001336:	4b35      	ldr	r3, [pc, #212]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	2380      	movs	r3, #128	; 0x80
 800133c:	049b      	lsls	r3, r3, #18
 800133e:	4013      	ands	r3, r2
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001342:	4b32      	ldr	r3, [pc, #200]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	4a37      	ldr	r2, [pc, #220]	; (8001424 <HAL_RCC_OscConfig+0x644>)
 8001348:	4013      	ands	r3, r2
 800134a:	0019      	movs	r1, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001354:	431a      	orrs	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135a:	021b      	lsls	r3, r3, #8
 800135c:	431a      	orrs	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	431a      	orrs	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001368:	431a      	orrs	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800136e:	431a      	orrs	r2, r3
 8001370:	4b26      	ldr	r3, [pc, #152]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 8001372:	430a      	orrs	r2, r1
 8001374:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001376:	4b25      	ldr	r3, [pc, #148]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4b24      	ldr	r3, [pc, #144]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 800137c:	2180      	movs	r1, #128	; 0x80
 800137e:	0449      	lsls	r1, r1, #17
 8001380:	430a      	orrs	r2, r1
 8001382:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001384:	4b21      	ldr	r3, [pc, #132]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 8001386:	68da      	ldr	r2, [r3, #12]
 8001388:	4b20      	ldr	r3, [pc, #128]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 800138a:	2180      	movs	r1, #128	; 0x80
 800138c:	0549      	lsls	r1, r1, #21
 800138e:	430a      	orrs	r2, r1
 8001390:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001392:	f7ff fa43 	bl	800081c <HAL_GetTick>
 8001396:	0003      	movs	r3, r0
 8001398:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139c:	f7ff fa3e 	bl	800081c <HAL_GetTick>
 80013a0:	0002      	movs	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e072      	b.n	8001494 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ae:	4b17      	ldr	r3, [pc, #92]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	2380      	movs	r3, #128	; 0x80
 80013b4:	049b      	lsls	r3, r3, #18
 80013b6:	4013      	ands	r3, r2
 80013b8:	d0f0      	beq.n	800139c <HAL_RCC_OscConfig+0x5bc>
 80013ba:	e06a      	b.n	8001492 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013bc:	4b13      	ldr	r3, [pc, #76]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 80013c2:	4917      	ldr	r1, [pc, #92]	; (8001420 <HAL_RCC_OscConfig+0x640>)
 80013c4:	400a      	ands	r2, r1
 80013c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c8:	f7ff fa28 	bl	800081c <HAL_GetTick>
 80013cc:	0003      	movs	r3, r0
 80013ce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d2:	f7ff fa23 	bl	800081c <HAL_GetTick>
 80013d6:	0002      	movs	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e057      	b.n	8001494 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	049b      	lsls	r3, r3, #18
 80013ec:	4013      	ands	r3, r2
 80013ee:	d1f0      	bne.n	80013d2 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_RCC_OscConfig+0x62c>)
 80013f6:	490c      	ldr	r1, [pc, #48]	; (8001428 <HAL_RCC_OscConfig+0x648>)
 80013f8:	400a      	ands	r2, r1
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	e049      	b.n	8001492 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d112      	bne.n	800142c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e044      	b.n	8001494 <HAL_RCC_OscConfig+0x6b4>
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	40021000 	.word	0x40021000
 8001410:	40007000 	.word	0x40007000
 8001414:	00001388 	.word	0x00001388
 8001418:	efffffff 	.word	0xefffffff
 800141c:	ffbfffff 	.word	0xffbfffff
 8001420:	feffffff 	.word	0xfeffffff
 8001424:	11c1808c 	.word	0x11c1808c
 8001428:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800142c:	4b1b      	ldr	r3, [pc, #108]	; (800149c <HAL_RCC_OscConfig+0x6bc>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	2203      	movs	r2, #3
 8001436:	401a      	ands	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143c:	429a      	cmp	r2, r3
 800143e:	d126      	bne.n	800148e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	2270      	movs	r2, #112	; 0x70
 8001444:	401a      	ands	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800144a:	429a      	cmp	r2, r3
 800144c:	d11f      	bne.n	800148e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	23fe      	movs	r3, #254	; 0xfe
 8001452:	01db      	lsls	r3, r3, #7
 8001454:	401a      	ands	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800145c:	429a      	cmp	r2, r3
 800145e:	d116      	bne.n	800148e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	23f8      	movs	r3, #248	; 0xf8
 8001464:	039b      	lsls	r3, r3, #14
 8001466:	401a      	ands	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800146c:	429a      	cmp	r2, r3
 800146e:	d10e      	bne.n	800148e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	23e0      	movs	r3, #224	; 0xe0
 8001474:	051b      	lsls	r3, r3, #20
 8001476:	401a      	ands	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800147c:	429a      	cmp	r2, r3
 800147e:	d106      	bne.n	800148e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	0f5b      	lsrs	r3, r3, #29
 8001484:	075a      	lsls	r2, r3, #29
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800148a:	429a      	cmp	r2, r3
 800148c:	d001      	beq.n	8001492 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	0018      	movs	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	b008      	add	sp, #32
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40021000 	.word	0x40021000

080014a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e0e9      	b.n	8001688 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014b4:	4b76      	ldr	r3, [pc, #472]	; (8001690 <HAL_RCC_ClockConfig+0x1f0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2207      	movs	r2, #7
 80014ba:	4013      	ands	r3, r2
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d91e      	bls.n	8001500 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c2:	4b73      	ldr	r3, [pc, #460]	; (8001690 <HAL_RCC_ClockConfig+0x1f0>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2207      	movs	r2, #7
 80014c8:	4393      	bics	r3, r2
 80014ca:	0019      	movs	r1, r3
 80014cc:	4b70      	ldr	r3, [pc, #448]	; (8001690 <HAL_RCC_ClockConfig+0x1f0>)
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014d4:	f7ff f9a2 	bl	800081c <HAL_GetTick>
 80014d8:	0003      	movs	r3, r0
 80014da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014dc:	e009      	b.n	80014f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014de:	f7ff f99d 	bl	800081c <HAL_GetTick>
 80014e2:	0002      	movs	r2, r0
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	4a6a      	ldr	r2, [pc, #424]	; (8001694 <HAL_RCC_ClockConfig+0x1f4>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e0ca      	b.n	8001688 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014f2:	4b67      	ldr	r3, [pc, #412]	; (8001690 <HAL_RCC_ClockConfig+0x1f0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2207      	movs	r2, #7
 80014f8:	4013      	ands	r3, r2
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d1ee      	bne.n	80014de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2202      	movs	r2, #2
 8001506:	4013      	ands	r3, r2
 8001508:	d015      	beq.n	8001536 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2204      	movs	r2, #4
 8001510:	4013      	ands	r3, r2
 8001512:	d006      	beq.n	8001522 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001514:	4b60      	ldr	r3, [pc, #384]	; (8001698 <HAL_RCC_ClockConfig+0x1f8>)
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	4b5f      	ldr	r3, [pc, #380]	; (8001698 <HAL_RCC_ClockConfig+0x1f8>)
 800151a:	21e0      	movs	r1, #224	; 0xe0
 800151c:	01c9      	lsls	r1, r1, #7
 800151e:	430a      	orrs	r2, r1
 8001520:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001522:	4b5d      	ldr	r3, [pc, #372]	; (8001698 <HAL_RCC_ClockConfig+0x1f8>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	4a5d      	ldr	r2, [pc, #372]	; (800169c <HAL_RCC_ClockConfig+0x1fc>)
 8001528:	4013      	ands	r3, r2
 800152a:	0019      	movs	r1, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	4b59      	ldr	r3, [pc, #356]	; (8001698 <HAL_RCC_ClockConfig+0x1f8>)
 8001532:	430a      	orrs	r2, r1
 8001534:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2201      	movs	r2, #1
 800153c:	4013      	ands	r3, r2
 800153e:	d057      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d107      	bne.n	8001558 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001548:	4b53      	ldr	r3, [pc, #332]	; (8001698 <HAL_RCC_ClockConfig+0x1f8>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	2380      	movs	r3, #128	; 0x80
 800154e:	029b      	lsls	r3, r3, #10
 8001550:	4013      	ands	r3, r2
 8001552:	d12b      	bne.n	80015ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e097      	b.n	8001688 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b02      	cmp	r3, #2
 800155e:	d107      	bne.n	8001570 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001560:	4b4d      	ldr	r3, [pc, #308]	; (8001698 <HAL_RCC_ClockConfig+0x1f8>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	049b      	lsls	r3, r3, #18
 8001568:	4013      	ands	r3, r2
 800156a:	d11f      	bne.n	80015ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e08b      	b.n	8001688 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d107      	bne.n	8001588 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001578:	4b47      	ldr	r3, [pc, #284]	; (8001698 <HAL_RCC_ClockConfig+0x1f8>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4013      	ands	r3, r2
 8001582:	d113      	bne.n	80015ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e07f      	b.n	8001688 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b03      	cmp	r3, #3
 800158e:	d106      	bne.n	800159e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001590:	4b41      	ldr	r3, [pc, #260]	; (8001698 <HAL_RCC_ClockConfig+0x1f8>)
 8001592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001594:	2202      	movs	r2, #2
 8001596:	4013      	ands	r3, r2
 8001598:	d108      	bne.n	80015ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e074      	b.n	8001688 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800159e:	4b3e      	ldr	r3, [pc, #248]	; (8001698 <HAL_RCC_ClockConfig+0x1f8>)
 80015a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a2:	2202      	movs	r2, #2
 80015a4:	4013      	ands	r3, r2
 80015a6:	d101      	bne.n	80015ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e06d      	b.n	8001688 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015ac:	4b3a      	ldr	r3, [pc, #232]	; (8001698 <HAL_RCC_ClockConfig+0x1f8>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2207      	movs	r2, #7
 80015b2:	4393      	bics	r3, r2
 80015b4:	0019      	movs	r1, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	4b37      	ldr	r3, [pc, #220]	; (8001698 <HAL_RCC_ClockConfig+0x1f8>)
 80015bc:	430a      	orrs	r2, r1
 80015be:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015c0:	f7ff f92c 	bl	800081c <HAL_GetTick>
 80015c4:	0003      	movs	r3, r0
 80015c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c8:	e009      	b.n	80015de <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ca:	f7ff f927 	bl	800081c <HAL_GetTick>
 80015ce:	0002      	movs	r2, r0
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	4a2f      	ldr	r2, [pc, #188]	; (8001694 <HAL_RCC_ClockConfig+0x1f4>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e054      	b.n	8001688 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015de:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <HAL_RCC_ClockConfig+0x1f8>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2238      	movs	r2, #56	; 0x38
 80015e4:	401a      	ands	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d1ec      	bne.n	80015ca <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015f0:	4b27      	ldr	r3, [pc, #156]	; (8001690 <HAL_RCC_ClockConfig+0x1f0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2207      	movs	r2, #7
 80015f6:	4013      	ands	r3, r2
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d21e      	bcs.n	800163c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fe:	4b24      	ldr	r3, [pc, #144]	; (8001690 <HAL_RCC_ClockConfig+0x1f0>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2207      	movs	r2, #7
 8001604:	4393      	bics	r3, r2
 8001606:	0019      	movs	r1, r3
 8001608:	4b21      	ldr	r3, [pc, #132]	; (8001690 <HAL_RCC_ClockConfig+0x1f0>)
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001610:	f7ff f904 	bl	800081c <HAL_GetTick>
 8001614:	0003      	movs	r3, r0
 8001616:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001618:	e009      	b.n	800162e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800161a:	f7ff f8ff 	bl	800081c <HAL_GetTick>
 800161e:	0002      	movs	r2, r0
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	4a1b      	ldr	r2, [pc, #108]	; (8001694 <HAL_RCC_ClockConfig+0x1f4>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d901      	bls.n	800162e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e02c      	b.n	8001688 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800162e:	4b18      	ldr	r3, [pc, #96]	; (8001690 <HAL_RCC_ClockConfig+0x1f0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2207      	movs	r2, #7
 8001634:	4013      	ands	r3, r2
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	429a      	cmp	r2, r3
 800163a:	d1ee      	bne.n	800161a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2204      	movs	r2, #4
 8001642:	4013      	ands	r3, r2
 8001644:	d009      	beq.n	800165a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001646:	4b14      	ldr	r3, [pc, #80]	; (8001698 <HAL_RCC_ClockConfig+0x1f8>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	4a15      	ldr	r2, [pc, #84]	; (80016a0 <HAL_RCC_ClockConfig+0x200>)
 800164c:	4013      	ands	r3, r2
 800164e:	0019      	movs	r1, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68da      	ldr	r2, [r3, #12]
 8001654:	4b10      	ldr	r3, [pc, #64]	; (8001698 <HAL_RCC_ClockConfig+0x1f8>)
 8001656:	430a      	orrs	r2, r1
 8001658:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800165a:	f000 f829 	bl	80016b0 <HAL_RCC_GetSysClockFreq>
 800165e:	0001      	movs	r1, r0
 8001660:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <HAL_RCC_ClockConfig+0x1f8>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	0a1b      	lsrs	r3, r3, #8
 8001666:	220f      	movs	r2, #15
 8001668:	401a      	ands	r2, r3
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <HAL_RCC_ClockConfig+0x204>)
 800166c:	0092      	lsls	r2, r2, #2
 800166e:	58d3      	ldr	r3, [r2, r3]
 8001670:	221f      	movs	r2, #31
 8001672:	4013      	ands	r3, r2
 8001674:	000a      	movs	r2, r1
 8001676:	40da      	lsrs	r2, r3
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_RCC_ClockConfig+0x208>)
 800167a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <HAL_RCC_ClockConfig+0x20c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	0018      	movs	r0, r3
 8001682:	f7fe ffcb 	bl	800061c <HAL_InitTick>
 8001686:	0003      	movs	r3, r0
}
 8001688:	0018      	movs	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	b004      	add	sp, #16
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40022000 	.word	0x40022000
 8001694:	00001388 	.word	0x00001388
 8001698:	40021000 	.word	0x40021000
 800169c:	fffff0ff 	.word	0xfffff0ff
 80016a0:	ffff8fff 	.word	0xffff8fff
 80016a4:	0800307c 	.word	0x0800307c
 80016a8:	20000000 	.word	0x20000000
 80016ac:	20000004 	.word	0x20000004

080016b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016b6:	4b3c      	ldr	r3, [pc, #240]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2238      	movs	r2, #56	; 0x38
 80016bc:	4013      	ands	r3, r2
 80016be:	d10f      	bne.n	80016e0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80016c0:	4b39      	ldr	r3, [pc, #228]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	0adb      	lsrs	r3, r3, #11
 80016c6:	2207      	movs	r2, #7
 80016c8:	4013      	ands	r3, r2
 80016ca:	2201      	movs	r2, #1
 80016cc:	409a      	lsls	r2, r3
 80016ce:	0013      	movs	r3, r2
 80016d0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80016d2:	6839      	ldr	r1, [r7, #0]
 80016d4:	4835      	ldr	r0, [pc, #212]	; (80017ac <HAL_RCC_GetSysClockFreq+0xfc>)
 80016d6:	f7fe fd17 	bl	8000108 <__udivsi3>
 80016da:	0003      	movs	r3, r0
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	e05d      	b.n	800179c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016e0:	4b31      	ldr	r3, [pc, #196]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2238      	movs	r2, #56	; 0x38
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	d102      	bne.n	80016f2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016ec:	4b30      	ldr	r3, [pc, #192]	; (80017b0 <HAL_RCC_GetSysClockFreq+0x100>)
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	e054      	b.n	800179c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016f2:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2238      	movs	r2, #56	; 0x38
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b10      	cmp	r3, #16
 80016fc:	d138      	bne.n	8001770 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80016fe:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	2203      	movs	r2, #3
 8001704:	4013      	ands	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001708:	4b27      	ldr	r3, [pc, #156]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	091b      	lsrs	r3, r3, #4
 800170e:	2207      	movs	r2, #7
 8001710:	4013      	ands	r3, r2
 8001712:	3301      	adds	r3, #1
 8001714:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2b03      	cmp	r3, #3
 800171a:	d10d      	bne.n	8001738 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800171c:	68b9      	ldr	r1, [r7, #8]
 800171e:	4824      	ldr	r0, [pc, #144]	; (80017b0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001720:	f7fe fcf2 	bl	8000108 <__udivsi3>
 8001724:	0003      	movs	r3, r0
 8001726:	0019      	movs	r1, r3
 8001728:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	0a1b      	lsrs	r3, r3, #8
 800172e:	227f      	movs	r2, #127	; 0x7f
 8001730:	4013      	ands	r3, r2
 8001732:	434b      	muls	r3, r1
 8001734:	617b      	str	r3, [r7, #20]
        break;
 8001736:	e00d      	b.n	8001754 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001738:	68b9      	ldr	r1, [r7, #8]
 800173a:	481c      	ldr	r0, [pc, #112]	; (80017ac <HAL_RCC_GetSysClockFreq+0xfc>)
 800173c:	f7fe fce4 	bl	8000108 <__udivsi3>
 8001740:	0003      	movs	r3, r0
 8001742:	0019      	movs	r1, r3
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	0a1b      	lsrs	r3, r3, #8
 800174a:	227f      	movs	r2, #127	; 0x7f
 800174c:	4013      	ands	r3, r2
 800174e:	434b      	muls	r3, r1
 8001750:	617b      	str	r3, [r7, #20]
        break;
 8001752:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	0f5b      	lsrs	r3, r3, #29
 800175a:	2207      	movs	r2, #7
 800175c:	4013      	ands	r3, r2
 800175e:	3301      	adds	r3, #1
 8001760:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	6978      	ldr	r0, [r7, #20]
 8001766:	f7fe fccf 	bl	8000108 <__udivsi3>
 800176a:	0003      	movs	r3, r0
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	e015      	b.n	800179c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001770:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2238      	movs	r2, #56	; 0x38
 8001776:	4013      	ands	r3, r2
 8001778:	2b20      	cmp	r3, #32
 800177a:	d103      	bne.n	8001784 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	e00b      	b.n	800179c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2238      	movs	r2, #56	; 0x38
 800178a:	4013      	ands	r3, r2
 800178c:	2b18      	cmp	r3, #24
 800178e:	d103      	bne.n	8001798 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001790:	23fa      	movs	r3, #250	; 0xfa
 8001792:	01db      	lsls	r3, r3, #7
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	e001      	b.n	800179c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001798:	2300      	movs	r3, #0
 800179a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800179c:	693b      	ldr	r3, [r7, #16]
}
 800179e:	0018      	movs	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	b006      	add	sp, #24
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	40021000 	.word	0x40021000
 80017ac:	00f42400 	.word	0x00f42400
 80017b0:	007a1200 	.word	0x007a1200

080017b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017b8:	4b02      	ldr	r3, [pc, #8]	; (80017c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80017ba:	681b      	ldr	r3, [r3, #0]
}
 80017bc:	0018      	movs	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	20000000 	.word	0x20000000

080017c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017c8:	b5b0      	push	{r4, r5, r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80017cc:	f7ff fff2 	bl	80017b4 <HAL_RCC_GetHCLKFreq>
 80017d0:	0004      	movs	r4, r0
 80017d2:	f7ff faf9 	bl	8000dc8 <LL_RCC_GetAPB1Prescaler>
 80017d6:	0003      	movs	r3, r0
 80017d8:	0b1a      	lsrs	r2, r3, #12
 80017da:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80017dc:	0092      	lsls	r2, r2, #2
 80017de:	58d3      	ldr	r3, [r2, r3]
 80017e0:	221f      	movs	r2, #31
 80017e2:	4013      	ands	r3, r2
 80017e4:	40dc      	lsrs	r4, r3
 80017e6:	0023      	movs	r3, r4
}
 80017e8:	0018      	movs	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bdb0      	pop	{r4, r5, r7, pc}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	080030bc 	.word	0x080030bc

080017f4 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <HAL_RCC_GetClockConfig+0x4c>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2207      	movs	r2, #7
 800180a:	401a      	ands	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_RCC_GetClockConfig+0x4c>)
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	23f0      	movs	r3, #240	; 0xf0
 8001816:	011b      	lsls	r3, r3, #4
 8001818:	401a      	ands	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800181e:	4b08      	ldr	r3, [pc, #32]	; (8001840 <HAL_RCC_GetClockConfig+0x4c>)
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	23e0      	movs	r3, #224	; 0xe0
 8001824:	01db      	lsls	r3, r3, #7
 8001826:	401a      	ands	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <HAL_RCC_GetClockConfig+0x50>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2207      	movs	r2, #7
 8001832:	401a      	ands	r2, r3
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	601a      	str	r2, [r3, #0]
}
 8001838:	46c0      	nop			; (mov r8, r8)
 800183a:	46bd      	mov	sp, r7
 800183c:	b002      	add	sp, #8
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40021000 	.word	0x40021000
 8001844:	40022000 	.word	0x40022000

08001848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e04a      	b.n	80018f0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	223d      	movs	r2, #61	; 0x3d
 800185e:	5c9b      	ldrb	r3, [r3, r2]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d107      	bne.n	8001876 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	223c      	movs	r2, #60	; 0x3c
 800186a:	2100      	movs	r1, #0
 800186c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	0018      	movs	r0, r3
 8001872:	f000 f841 	bl	80018f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	223d      	movs	r2, #61	; 0x3d
 800187a:	2102      	movs	r1, #2
 800187c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3304      	adds	r3, #4
 8001886:	0019      	movs	r1, r3
 8001888:	0010      	movs	r0, r2
 800188a:	f000 fa6f 	bl	8001d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2248      	movs	r2, #72	; 0x48
 8001892:	2101      	movs	r1, #1
 8001894:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	223e      	movs	r2, #62	; 0x3e
 800189a:	2101      	movs	r1, #1
 800189c:	5499      	strb	r1, [r3, r2]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	223f      	movs	r2, #63	; 0x3f
 80018a2:	2101      	movs	r1, #1
 80018a4:	5499      	strb	r1, [r3, r2]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2240      	movs	r2, #64	; 0x40
 80018aa:	2101      	movs	r1, #1
 80018ac:	5499      	strb	r1, [r3, r2]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2241      	movs	r2, #65	; 0x41
 80018b2:	2101      	movs	r1, #1
 80018b4:	5499      	strb	r1, [r3, r2]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2242      	movs	r2, #66	; 0x42
 80018ba:	2101      	movs	r1, #1
 80018bc:	5499      	strb	r1, [r3, r2]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2243      	movs	r2, #67	; 0x43
 80018c2:	2101      	movs	r1, #1
 80018c4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2244      	movs	r2, #68	; 0x44
 80018ca:	2101      	movs	r1, #1
 80018cc:	5499      	strb	r1, [r3, r2]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2245      	movs	r2, #69	; 0x45
 80018d2:	2101      	movs	r1, #1
 80018d4:	5499      	strb	r1, [r3, r2]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2246      	movs	r2, #70	; 0x46
 80018da:	2101      	movs	r1, #1
 80018dc:	5499      	strb	r1, [r3, r2]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2247      	movs	r2, #71	; 0x47
 80018e2:	2101      	movs	r1, #1
 80018e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	223d      	movs	r2, #61	; 0x3d
 80018ea:	2101      	movs	r1, #1
 80018ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	0018      	movs	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	b002      	add	sp, #8
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001900:	46c0      	nop			; (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	b002      	add	sp, #8
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	223d      	movs	r2, #61	; 0x3d
 8001914:	5c9b      	ldrb	r3, [r3, r2]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b01      	cmp	r3, #1
 800191a:	d001      	beq.n	8001920 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e047      	b.n	80019b0 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	223d      	movs	r2, #61	; 0x3d
 8001924:	2102      	movs	r1, #2
 8001926:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68da      	ldr	r2, [r3, #12]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2101      	movs	r1, #1
 8001934:	430a      	orrs	r2, r1
 8001936:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a1e      	ldr	r2, [pc, #120]	; (80019b8 <HAL_TIM_Base_Start_IT+0xb0>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d014      	beq.n	800196c <HAL_TIM_Base_Start_IT+0x64>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	05db      	lsls	r3, r3, #23
 800194a:	429a      	cmp	r2, r3
 800194c:	d00e      	beq.n	800196c <HAL_TIM_Base_Start_IT+0x64>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a1a      	ldr	r2, [pc, #104]	; (80019bc <HAL_TIM_Base_Start_IT+0xb4>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d009      	beq.n	800196c <HAL_TIM_Base_Start_IT+0x64>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a18      	ldr	r2, [pc, #96]	; (80019c0 <HAL_TIM_Base_Start_IT+0xb8>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d004      	beq.n	800196c <HAL_TIM_Base_Start_IT+0x64>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a17      	ldr	r2, [pc, #92]	; (80019c4 <HAL_TIM_Base_Start_IT+0xbc>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d116      	bne.n	800199a <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	4a15      	ldr	r2, [pc, #84]	; (80019c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8001974:	4013      	ands	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b06      	cmp	r3, #6
 800197c:	d016      	beq.n	80019ac <HAL_TIM_Base_Start_IT+0xa4>
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	025b      	lsls	r3, r3, #9
 8001984:	429a      	cmp	r2, r3
 8001986:	d011      	beq.n	80019ac <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2101      	movs	r1, #1
 8001994:	430a      	orrs	r2, r1
 8001996:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001998:	e008      	b.n	80019ac <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2101      	movs	r1, #1
 80019a6:	430a      	orrs	r2, r1
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	e000      	b.n	80019ae <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019ac:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	0018      	movs	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b004      	add	sp, #16
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40012c00 	.word	0x40012c00
 80019bc:	40000400 	.word	0x40000400
 80019c0:	40000800 	.word	0x40000800
 80019c4:	40014000 	.word	0x40014000
 80019c8:	00010007 	.word	0x00010007

080019cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e090      	b.n	8001b02 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	223d      	movs	r2, #61	; 0x3d
 80019e4:	5c9b      	ldrb	r3, [r3, r2]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d107      	bne.n	80019fc <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	223c      	movs	r2, #60	; 0x3c
 80019f0:	2100      	movs	r1, #0
 80019f2:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	0018      	movs	r0, r3
 80019f8:	f7fe fdc8 	bl	800058c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	223d      	movs	r2, #61	; 0x3d
 8001a00:	2102      	movs	r1, #2
 8001a02:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	493f      	ldr	r1, [pc, #252]	; (8001b0c <HAL_TIM_Encoder_Init+0x140>)
 8001a10:	400a      	ands	r2, r1
 8001a12:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	0019      	movs	r1, r3
 8001a1e:	0010      	movs	r0, r2
 8001a20:	f000 f9a4 	bl	8001d6c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	4a31      	ldr	r2, [pc, #196]	; (8001b10 <HAL_TIM_Encoder_Init+0x144>)
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	021b      	lsls	r3, r3, #8
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	4a2c      	ldr	r2, [pc, #176]	; (8001b14 <HAL_TIM_Encoder_Init+0x148>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4a2b      	ldr	r2, [pc, #172]	; (8001b18 <HAL_TIM_Encoder_Init+0x14c>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	021b      	lsls	r3, r3, #8
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	011a      	lsls	r2, r3, #4
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	031b      	lsls	r3, r3, #12
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2222      	movs	r2, #34	; 0x22
 8001a9a:	4393      	bics	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2288      	movs	r2, #136	; 0x88
 8001aa2:	4393      	bics	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2248      	movs	r2, #72	; 0x48
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	223e      	movs	r2, #62	; 0x3e
 8001adc:	2101      	movs	r1, #1
 8001ade:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	223f      	movs	r2, #63	; 0x3f
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2244      	movs	r2, #68	; 0x44
 8001aec:	2101      	movs	r1, #1
 8001aee:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2245      	movs	r2, #69	; 0x45
 8001af4:	2101      	movs	r1, #1
 8001af6:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	223d      	movs	r2, #61	; 0x3d
 8001afc:	2101      	movs	r1, #1
 8001afe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	0018      	movs	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	b006      	add	sp, #24
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	fffebff8 	.word	0xfffebff8
 8001b10:	fffffcfc 	.word	0xfffffcfc
 8001b14:	fffff3f3 	.word	0xfffff3f3
 8001b18:	ffff0f0f 	.word	0xffff0f0f

08001b1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2202      	movs	r2, #2
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d021      	beq.n	8001b80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2202      	movs	r2, #2
 8001b40:	4013      	ands	r3, r2
 8001b42:	d01d      	beq.n	8001b80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2203      	movs	r2, #3
 8001b4a:	4252      	negs	r2, r2
 8001b4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d004      	beq.n	8001b6a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	0018      	movs	r0, r3
 8001b64:	f000 f8ea 	bl	8001d3c <HAL_TIM_IC_CaptureCallback>
 8001b68:	e007      	b.n	8001b7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f000 f8dd 	bl	8001d2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	0018      	movs	r0, r3
 8001b76:	f000 f8e9 	bl	8001d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	2204      	movs	r2, #4
 8001b84:	4013      	ands	r3, r2
 8001b86:	d022      	beq.n	8001bce <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d01e      	beq.n	8001bce <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2205      	movs	r2, #5
 8001b96:	4252      	negs	r2, r2
 8001b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	699a      	ldr	r2, [r3, #24]
 8001ba6:	23c0      	movs	r3, #192	; 0xc0
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4013      	ands	r3, r2
 8001bac:	d004      	beq.n	8001bb8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f000 f8c3 	bl	8001d3c <HAL_TIM_IC_CaptureCallback>
 8001bb6:	e007      	b.n	8001bc8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f000 f8b6 	bl	8001d2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f000 f8c2 	bl	8001d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	2208      	movs	r2, #8
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d021      	beq.n	8001c1a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2208      	movs	r2, #8
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d01d      	beq.n	8001c1a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2209      	movs	r2, #9
 8001be4:	4252      	negs	r2, r2
 8001be6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2204      	movs	r2, #4
 8001bec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d004      	beq.n	8001c04 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f000 f89d 	bl	8001d3c <HAL_TIM_IC_CaptureCallback>
 8001c02:	e007      	b.n	8001c14 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	0018      	movs	r0, r3
 8001c08:	f000 f890 	bl	8001d2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	0018      	movs	r0, r3
 8001c10:	f000 f89c 	bl	8001d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2210      	movs	r2, #16
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d022      	beq.n	8001c68 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2210      	movs	r2, #16
 8001c26:	4013      	ands	r3, r2
 8001c28:	d01e      	beq.n	8001c68 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2211      	movs	r2, #17
 8001c30:	4252      	negs	r2, r2
 8001c32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2208      	movs	r2, #8
 8001c38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	69da      	ldr	r2, [r3, #28]
 8001c40:	23c0      	movs	r3, #192	; 0xc0
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4013      	ands	r3, r2
 8001c46:	d004      	beq.n	8001c52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f000 f876 	bl	8001d3c <HAL_TIM_IC_CaptureCallback>
 8001c50:	e007      	b.n	8001c62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	0018      	movs	r0, r3
 8001c56:	f000 f869 	bl	8001d2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f000 f875 	bl	8001d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d00c      	beq.n	8001c8a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2201      	movs	r2, #1
 8001c74:	4013      	ands	r3, r2
 8001c76:	d008      	beq.n	8001c8a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	4252      	negs	r2, r2
 8001c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	0018      	movs	r0, r3
 8001c86:	f7fe fc39 	bl	80004fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2280      	movs	r2, #128	; 0x80
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d104      	bne.n	8001c9c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	019b      	lsls	r3, r3, #6
 8001c98:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001c9a:	d00b      	beq.n	8001cb4 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2280      	movs	r2, #128	; 0x80
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d007      	beq.n	8001cb4 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1e      	ldr	r2, [pc, #120]	; (8001d24 <HAL_TIM_IRQHandler+0x208>)
 8001caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f000 f972 	bl	8001f98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d00b      	beq.n	8001cd6 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2280      	movs	r2, #128	; 0x80
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d007      	beq.n	8001cd6 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a17      	ldr	r2, [pc, #92]	; (8001d28 <HAL_TIM_IRQHandler+0x20c>)
 8001ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f000 f969 	bl	8001fa8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	2240      	movs	r2, #64	; 0x40
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d00c      	beq.n	8001cf8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2240      	movs	r2, #64	; 0x40
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d008      	beq.n	8001cf8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2241      	movs	r2, #65	; 0x41
 8001cec:	4252      	negs	r2, r2
 8001cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f000 f832 	bl	8001d5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d00c      	beq.n	8001d1a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2220      	movs	r2, #32
 8001d04:	4013      	ands	r3, r2
 8001d06:	d008      	beq.n	8001d1a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2221      	movs	r2, #33	; 0x21
 8001d0e:	4252      	negs	r2, r2
 8001d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	0018      	movs	r0, r3
 8001d16:	f000 f937 	bl	8001f88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d1a:	46c0      	nop			; (mov r8, r8)
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b004      	add	sp, #16
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	ffffdf7f 	.word	0xffffdf7f
 8001d28:	fffffeff 	.word	0xfffffeff

08001d2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d34:	46c0      	nop			; (mov r8, r8)
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b002      	add	sp, #8
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d44:	46c0      	nop			; (mov r8, r8)
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b002      	add	sp, #8
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d54:	46c0      	nop			; (mov r8, r8)
 8001d56:	46bd      	mov	sp, r7
 8001d58:	b002      	add	sp, #8
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d64:	46c0      	nop			; (mov r8, r8)
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b002      	add	sp, #8
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a3f      	ldr	r2, [pc, #252]	; (8001e7c <TIM_Base_SetConfig+0x110>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d00c      	beq.n	8001d9e <TIM_Base_SetConfig+0x32>
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	05db      	lsls	r3, r3, #23
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d007      	beq.n	8001d9e <TIM_Base_SetConfig+0x32>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a3b      	ldr	r2, [pc, #236]	; (8001e80 <TIM_Base_SetConfig+0x114>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d003      	beq.n	8001d9e <TIM_Base_SetConfig+0x32>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a3a      	ldr	r2, [pc, #232]	; (8001e84 <TIM_Base_SetConfig+0x118>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d108      	bne.n	8001db0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2270      	movs	r2, #112	; 0x70
 8001da2:	4393      	bics	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a32      	ldr	r2, [pc, #200]	; (8001e7c <TIM_Base_SetConfig+0x110>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d01c      	beq.n	8001df2 <TIM_Base_SetConfig+0x86>
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	05db      	lsls	r3, r3, #23
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d017      	beq.n	8001df2 <TIM_Base_SetConfig+0x86>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a2e      	ldr	r2, [pc, #184]	; (8001e80 <TIM_Base_SetConfig+0x114>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d013      	beq.n	8001df2 <TIM_Base_SetConfig+0x86>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a2d      	ldr	r2, [pc, #180]	; (8001e84 <TIM_Base_SetConfig+0x118>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d00f      	beq.n	8001df2 <TIM_Base_SetConfig+0x86>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a2c      	ldr	r2, [pc, #176]	; (8001e88 <TIM_Base_SetConfig+0x11c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d00b      	beq.n	8001df2 <TIM_Base_SetConfig+0x86>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a2b      	ldr	r2, [pc, #172]	; (8001e8c <TIM_Base_SetConfig+0x120>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d007      	beq.n	8001df2 <TIM_Base_SetConfig+0x86>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a2a      	ldr	r2, [pc, #168]	; (8001e90 <TIM_Base_SetConfig+0x124>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d003      	beq.n	8001df2 <TIM_Base_SetConfig+0x86>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a29      	ldr	r2, [pc, #164]	; (8001e94 <TIM_Base_SetConfig+0x128>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d108      	bne.n	8001e04 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4a28      	ldr	r2, [pc, #160]	; (8001e98 <TIM_Base_SetConfig+0x12c>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2280      	movs	r2, #128	; 0x80
 8001e08:	4393      	bics	r3, r2
 8001e0a:	001a      	movs	r2, r3
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a13      	ldr	r2, [pc, #76]	; (8001e7c <TIM_Base_SetConfig+0x110>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d00b      	beq.n	8001e4a <TIM_Base_SetConfig+0xde>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a15      	ldr	r2, [pc, #84]	; (8001e8c <TIM_Base_SetConfig+0x120>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d007      	beq.n	8001e4a <TIM_Base_SetConfig+0xde>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a14      	ldr	r2, [pc, #80]	; (8001e90 <TIM_Base_SetConfig+0x124>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d003      	beq.n	8001e4a <TIM_Base_SetConfig+0xde>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a13      	ldr	r2, [pc, #76]	; (8001e94 <TIM_Base_SetConfig+0x128>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d103      	bne.n	8001e52 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	691a      	ldr	r2, [r3, #16]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d106      	bne.n	8001e72 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	4393      	bics	r3, r2
 8001e6c:	001a      	movs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	611a      	str	r2, [r3, #16]
  }
}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	46bd      	mov	sp, r7
 8001e76:	b004      	add	sp, #16
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	40012c00 	.word	0x40012c00
 8001e80:	40000400 	.word	0x40000400
 8001e84:	40000800 	.word	0x40000800
 8001e88:	40002000 	.word	0x40002000
 8001e8c:	40014000 	.word	0x40014000
 8001e90:	40014400 	.word	0x40014400
 8001e94:	40014800 	.word	0x40014800
 8001e98:	fffffcff 	.word	0xfffffcff

08001e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	223c      	movs	r2, #60	; 0x3c
 8001eaa:	5c9b      	ldrb	r3, [r3, r2]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e05a      	b.n	8001f6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	223c      	movs	r2, #60	; 0x3c
 8001eb8:	2101      	movs	r1, #1
 8001eba:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	223d      	movs	r2, #61	; 0x3d
 8001ec0:	2102      	movs	r1, #2
 8001ec2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a26      	ldr	r2, [pc, #152]	; (8001f74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d108      	bne.n	8001ef0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4a25      	ldr	r2, [pc, #148]	; (8001f78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2270      	movs	r2, #112	; 0x70
 8001ef4:	4393      	bics	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a19      	ldr	r2, [pc, #100]	; (8001f74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d014      	beq.n	8001f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	05db      	lsls	r3, r3, #23
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d00e      	beq.n	8001f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a15      	ldr	r2, [pc, #84]	; (8001f7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d009      	beq.n	8001f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a14      	ldr	r2, [pc, #80]	; (8001f80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d004      	beq.n	8001f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d10c      	bne.n	8001f58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	2280      	movs	r2, #128	; 0x80
 8001f42:	4393      	bics	r3, r2
 8001f44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68ba      	ldr	r2, [r7, #8]
 8001f56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	223d      	movs	r2, #61	; 0x3d
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	223c      	movs	r2, #60	; 0x3c
 8001f64:	2100      	movs	r1, #0
 8001f66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	b004      	add	sp, #16
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	40012c00 	.word	0x40012c00
 8001f78:	ff0fffff 	.word	0xff0fffff
 8001f7c:	40000400 	.word	0x40000400
 8001f80:	40000800 	.word	0x40000800
 8001f84:	40014000 	.word	0x40014000

08001f88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f90:	46c0      	nop			; (mov r8, r8)
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b002      	add	sp, #8
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fa0:	46c0      	nop			; (mov r8, r8)
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b002      	add	sp, #8
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001fb0:	46c0      	nop			; (mov r8, r8)
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b002      	add	sp, #8
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	0002      	movs	r2, r0
 8001fc0:	1dbb      	adds	r3, r7, #6
 8001fc2:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001fc8:	1dbb      	adds	r3, r7, #6
 8001fca:	2200      	movs	r2, #0
 8001fcc:	5e9b      	ldrsh	r3, [r3, r2]
 8001fce:	2b84      	cmp	r3, #132	; 0x84
 8001fd0:	d006      	beq.n	8001fe0 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8001fd2:	1dbb      	adds	r3, r7, #6
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	5e9a      	ldrsh	r2, [r3, r2]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	18d3      	adds	r3, r2, r3
 8001fdc:	3303      	adds	r3, #3
 8001fde:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
}
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	b004      	add	sp, #16
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001fee:	f000 fa3d 	bl	800246c <vTaskStartScheduler>
  
  return osOK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001ffa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ffc:	b087      	sub	sp, #28
 8001ffe:	af02      	add	r7, sp, #8
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685c      	ldr	r4, [r3, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002010:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2208      	movs	r2, #8
 8002016:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002018:	0018      	movs	r0, r3
 800201a:	f7ff ffcd 	bl	8001fb8 <makeFreeRtosPriority>
 800201e:	0001      	movs	r1, r0
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	230c      	movs	r3, #12
 8002024:	18fb      	adds	r3, r7, r3
 8002026:	9301      	str	r3, [sp, #4]
 8002028:	9100      	str	r1, [sp, #0]
 800202a:	0013      	movs	r3, r2
 800202c:	0032      	movs	r2, r6
 800202e:	0029      	movs	r1, r5
 8002030:	0020      	movs	r0, r4
 8002032:	f000 f8c7 	bl	80021c4 <xTaskCreate>
 8002036:	0003      	movs	r3, r0
 8002038:	2b01      	cmp	r3, #1
 800203a:	d001      	beq.n	8002040 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 800203c:	2300      	movs	r3, #0
 800203e:	e000      	b.n	8002042 <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8002040:	68fb      	ldr	r3, [r7, #12]
}
 8002042:	0018      	movs	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	b005      	add	sp, #20
 8002048:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800204a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b084      	sub	sp, #16
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <osDelay+0x16>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	e000      	b.n	8002062 <osDelay+0x18>
 8002060:	2301      	movs	r3, #1
 8002062:	0018      	movs	r0, r3
 8002064:	f000 f9dc 	bl	8002420 <vTaskDelay>
  
  return osOK;
 8002068:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800206a:	0018      	movs	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	b004      	add	sp, #16
 8002070:	bd80      	pop	{r7, pc}

08002072 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3308      	adds	r3, #8
 800207e:	001a      	movs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	4252      	negs	r2, r2
 800208a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3308      	adds	r3, #8
 8002090:	001a      	movs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3308      	adds	r3, #8
 800209a:	001a      	movs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b002      	add	sp, #8
 80020ac:	bd80      	pop	{r7, pc}

080020ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020bc:	46c0      	nop			; (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	b002      	add	sp, #8
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	1c5a      	adds	r2, r3, #1
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	601a      	str	r2, [r3, #0]
}
 8002100:	46c0      	nop			; (mov r8, r8)
 8002102:	46bd      	mov	sp, r7
 8002104:	b004      	add	sp, #16
 8002106:	bd80      	pop	{r7, pc}

08002108 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	3301      	adds	r3, #1
 800211c:	d103      	bne.n	8002126 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	e00c      	b.n	8002140 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3308      	adds	r3, #8
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	e002      	b.n	8002134 <vListInsert+0x2c>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	429a      	cmp	r2, r3
 800213e:	d2f6      	bcs.n	800212e <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	1c5a      	adds	r2, r3, #1
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	601a      	str	r2, [r3, #0]
}
 800216c:	46c0      	nop			; (mov r8, r8)
 800216e:	46bd      	mov	sp, r7
 8002170:	b004      	add	sp, #16
 8002172:	bd80      	pop	{r7, pc}

08002174 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6892      	ldr	r2, [r2, #8]
 800218a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6852      	ldr	r2, [r2, #4]
 8002194:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	429a      	cmp	r2, r3
 800219e:	d103      	bne.n	80021a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	1e5a      	subs	r2, r3, #1
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
}
 80021bc:	0018      	movs	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	b004      	add	sp, #16
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80021c4:	b590      	push	{r4, r7, lr}
 80021c6:	b08d      	sub	sp, #52	; 0x34
 80021c8:	af04      	add	r7, sp, #16
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	1dbb      	adds	r3, r7, #6
 80021d2:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80021d4:	1dbb      	adds	r3, r7, #6
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	0018      	movs	r0, r3
 80021dc:	f000 fd50 	bl	8002c80 <pvPortMalloc>
 80021e0:	0003      	movs	r3, r0
 80021e2:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d010      	beq.n	800220c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80021ea:	2054      	movs	r0, #84	; 0x54
 80021ec:	f000 fd48 	bl	8002c80 <pvPortMalloc>
 80021f0:	0003      	movs	r3, r0
 80021f2:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002200:	e006      	b.n	8002210 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	0018      	movs	r0, r3
 8002206:	f000 fde7 	bl	8002dd8 <vPortFree>
 800220a:	e001      	b.n	8002210 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800220c:	2300      	movs	r3, #0
 800220e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d016      	beq.n	8002244 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002216:	1dbb      	adds	r3, r7, #6
 8002218:	881a      	ldrh	r2, [r3, #0]
 800221a:	683c      	ldr	r4, [r7, #0]
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	2300      	movs	r3, #0
 8002222:	9303      	str	r3, [sp, #12]
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	9302      	str	r3, [sp, #8]
 8002228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222a:	9301      	str	r3, [sp, #4]
 800222c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	0023      	movs	r3, r4
 8002232:	f000 f80f 	bl	8002254 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	0018      	movs	r0, r3
 800223a:	f000 f88d 	bl	8002358 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800223e:	2301      	movs	r3, #1
 8002240:	61bb      	str	r3, [r7, #24]
 8002242:	e002      	b.n	800224a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002244:	2301      	movs	r3, #1
 8002246:	425b      	negs	r3, r3
 8002248:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800224a:	69bb      	ldr	r3, [r7, #24]
	}
 800224c:	0018      	movs	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	b009      	add	sp, #36	; 0x24
 8002252:	bd90      	pop	{r4, r7, pc}

08002254 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
 8002260:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	493a      	ldr	r1, [pc, #232]	; (8002354 <prvInitialiseNewTask+0x100>)
 800226a:	468c      	mov	ip, r1
 800226c:	4463      	add	r3, ip
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	18d3      	adds	r3, r2, r3
 8002272:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	2207      	movs	r2, #7
 8002278:	4393      	bics	r3, r2
 800227a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	2207      	movs	r2, #7
 8002280:	4013      	ands	r3, r2
 8002282:	d001      	beq.n	8002288 <prvInitialiseNewTask+0x34>
 8002284:	b672      	cpsid	i
 8002286:	e7fe      	b.n	8002286 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d020      	beq.n	80022d0 <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	e013      	b.n	80022bc <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	18d3      	adds	r3, r2, r3
 800229a:	7818      	ldrb	r0, [r3, #0]
 800229c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800229e:	2134      	movs	r1, #52	; 0x34
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	18d3      	adds	r3, r2, r3
 80022a4:	185b      	adds	r3, r3, r1
 80022a6:	1c02      	adds	r2, r0, #0
 80022a8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	18d3      	adds	r3, r2, r3
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d006      	beq.n	80022c4 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	3301      	adds	r3, #1
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	2b0f      	cmp	r3, #15
 80022c0:	d9e8      	bls.n	8002294 <prvInitialiseNewTask+0x40>
 80022c2:	e000      	b.n	80022c6 <prvInitialiseNewTask+0x72>
			{
				break;
 80022c4:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c8:	2243      	movs	r2, #67	; 0x43
 80022ca:	2100      	movs	r1, #0
 80022cc:	5499      	strb	r1, [r3, r2]
 80022ce:	e003      	b.n	80022d8 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80022d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d2:	2234      	movs	r2, #52	; 0x34
 80022d4:	2100      	movs	r1, #0
 80022d6:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80022d8:	6a3b      	ldr	r3, [r7, #32]
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d901      	bls.n	80022e2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80022de:	2306      	movs	r3, #6
 80022e0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80022e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e4:	6a3a      	ldr	r2, [r7, #32]
 80022e6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80022e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ea:	6a3a      	ldr	r2, [r7, #32]
 80022ec:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80022ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f0:	2200      	movs	r2, #0
 80022f2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80022f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f6:	3304      	adds	r3, #4
 80022f8:	0018      	movs	r0, r3
 80022fa:	f7ff fed8 	bl	80020ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80022fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002300:	3318      	adds	r3, #24
 8002302:	0018      	movs	r0, r3
 8002304:	f7ff fed3 	bl	80020ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800230c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800230e:	6a3b      	ldr	r3, [r7, #32]
 8002310:	2207      	movs	r2, #7
 8002312:	1ad2      	subs	r2, r2, r3
 8002314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002316:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800231c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800231e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002320:	2200      	movs	r2, #0
 8002322:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002326:	2250      	movs	r2, #80	; 0x50
 8002328:	2100      	movs	r1, #0
 800232a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	68f9      	ldr	r1, [r7, #12]
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	0018      	movs	r0, r3
 8002334:	f000 fb70 	bl	8002a18 <pxPortInitialiseStack>
 8002338:	0002      	movs	r2, r0
 800233a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002348:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	46bd      	mov	sp, r7
 800234e:	b006      	add	sp, #24
 8002350:	bd80      	pop	{r7, pc}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	3fffffff 	.word	0x3fffffff

08002358 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002360:	f000 fbf6 	bl	8002b50 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002364:	4b28      	ldr	r3, [pc, #160]	; (8002408 <prvAddNewTaskToReadyList+0xb0>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	4b27      	ldr	r3, [pc, #156]	; (8002408 <prvAddNewTaskToReadyList+0xb0>)
 800236c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800236e:	4b27      	ldr	r3, [pc, #156]	; (800240c <prvAddNewTaskToReadyList+0xb4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002376:	4b25      	ldr	r3, [pc, #148]	; (800240c <prvAddNewTaskToReadyList+0xb4>)
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800237c:	4b22      	ldr	r3, [pc, #136]	; (8002408 <prvAddNewTaskToReadyList+0xb0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d110      	bne.n	80023a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002384:	f000 fa52 	bl	800282c <prvInitialiseTaskLists>
 8002388:	e00d      	b.n	80023a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800238a:	4b21      	ldr	r3, [pc, #132]	; (8002410 <prvAddNewTaskToReadyList+0xb8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d109      	bne.n	80023a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002392:	4b1e      	ldr	r3, [pc, #120]	; (800240c <prvAddNewTaskToReadyList+0xb4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239c:	429a      	cmp	r2, r3
 800239e:	d802      	bhi.n	80023a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80023a0:	4b1a      	ldr	r3, [pc, #104]	; (800240c <prvAddNewTaskToReadyList+0xb4>)
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80023a6:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <prvAddNewTaskToReadyList+0xbc>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	4b19      	ldr	r3, [pc, #100]	; (8002414 <prvAddNewTaskToReadyList+0xbc>)
 80023ae:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b4:	4b18      	ldr	r3, [pc, #96]	; (8002418 <prvAddNewTaskToReadyList+0xc0>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d903      	bls.n	80023c4 <prvAddNewTaskToReadyList+0x6c>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c0:	4b15      	ldr	r3, [pc, #84]	; (8002418 <prvAddNewTaskToReadyList+0xc0>)
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c8:	0013      	movs	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	189b      	adds	r3, r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4a12      	ldr	r2, [pc, #72]	; (800241c <prvAddNewTaskToReadyList+0xc4>)
 80023d2:	189a      	adds	r2, r3, r2
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3304      	adds	r3, #4
 80023d8:	0019      	movs	r1, r3
 80023da:	0010      	movs	r0, r2
 80023dc:	f7ff fe72 	bl	80020c4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80023e0:	f000 fbc8 	bl	8002b74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80023e4:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <prvAddNewTaskToReadyList+0xb8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80023ec:	4b07      	ldr	r3, [pc, #28]	; (800240c <prvAddNewTaskToReadyList+0xb4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d201      	bcs.n	80023fe <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80023fa:	f000 fb99 	bl	8002b30 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	46bd      	mov	sp, r7
 8002402:	b002      	add	sp, #8
 8002404:	bd80      	pop	{r7, pc}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	200001cc 	.word	0x200001cc
 800240c:	200000cc 	.word	0x200000cc
 8002410:	200001d8 	.word	0x200001d8
 8002414:	200001e8 	.word	0x200001e8
 8002418:	200001d4 	.word	0x200001d4
 800241c:	200000d0 	.word	0x200000d0

08002420 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002428:	2300      	movs	r3, #0
 800242a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d010      	beq.n	8002454 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002432:	4b0d      	ldr	r3, [pc, #52]	; (8002468 <vTaskDelay+0x48>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <vTaskDelay+0x1e>
 800243a:	b672      	cpsid	i
 800243c:	e7fe      	b.n	800243c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800243e:	f000 f84b 	bl	80024d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2100      	movs	r1, #0
 8002446:	0018      	movs	r0, r3
 8002448:	f000 fa92 	bl	8002970 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800244c:	f000 f850 	bl	80024f0 <xTaskResumeAll>
 8002450:	0003      	movs	r3, r0
 8002452:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800245a:	f000 fb69 	bl	8002b30 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	46bd      	mov	sp, r7
 8002462:	b004      	add	sp, #16
 8002464:	bd80      	pop	{r7, pc}
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	200001f4 	.word	0x200001f4

0800246c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002472:	4913      	ldr	r1, [pc, #76]	; (80024c0 <vTaskStartScheduler+0x54>)
 8002474:	4813      	ldr	r0, [pc, #76]	; (80024c4 <vTaskStartScheduler+0x58>)
 8002476:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <vTaskStartScheduler+0x5c>)
 8002478:	9301      	str	r3, [sp, #4]
 800247a:	2300      	movs	r3, #0
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	2300      	movs	r3, #0
 8002480:	2280      	movs	r2, #128	; 0x80
 8002482:	f7ff fe9f 	bl	80021c4 <xTaskCreate>
 8002486:	0003      	movs	r3, r0
 8002488:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d10d      	bne.n	80024ac <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8002490:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002492:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <vTaskStartScheduler+0x60>)
 8002494:	2201      	movs	r2, #1
 8002496:	4252      	negs	r2, r2
 8002498:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800249a:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <vTaskStartScheduler+0x64>)
 800249c:	2201      	movs	r2, #1
 800249e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <vTaskStartScheduler+0x68>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80024a6:	f000 fb1f 	bl	8002ae8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80024aa:	e004      	b.n	80024b6 <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3301      	adds	r3, #1
 80024b0:	d101      	bne.n	80024b6 <vTaskStartScheduler+0x4a>
 80024b2:	b672      	cpsid	i
 80024b4:	e7fe      	b.n	80024b4 <vTaskStartScheduler+0x48>
}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b002      	add	sp, #8
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	08003074 	.word	0x08003074
 80024c4:	0800280d 	.word	0x0800280d
 80024c8:	200001f0 	.word	0x200001f0
 80024cc:	200001ec 	.word	0x200001ec
 80024d0:	200001d8 	.word	0x200001d8
 80024d4:	200001d0 	.word	0x200001d0

080024d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <vTaskSuspendAll+0x14>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	4b02      	ldr	r3, [pc, #8]	; (80024ec <vTaskSuspendAll+0x14>)
 80024e4:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	200001f4 	.word	0x200001f4

080024f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80024fe:	4b3a      	ldr	r3, [pc, #232]	; (80025e8 <xTaskResumeAll+0xf8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <xTaskResumeAll+0x1a>
 8002506:	b672      	cpsid	i
 8002508:	e7fe      	b.n	8002508 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800250a:	f000 fb21 	bl	8002b50 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800250e:	4b36      	ldr	r3, [pc, #216]	; (80025e8 <xTaskResumeAll+0xf8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	1e5a      	subs	r2, r3, #1
 8002514:	4b34      	ldr	r3, [pc, #208]	; (80025e8 <xTaskResumeAll+0xf8>)
 8002516:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002518:	4b33      	ldr	r3, [pc, #204]	; (80025e8 <xTaskResumeAll+0xf8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d15b      	bne.n	80025d8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002520:	4b32      	ldr	r3, [pc, #200]	; (80025ec <xTaskResumeAll+0xfc>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d057      	beq.n	80025d8 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002528:	e02f      	b.n	800258a <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800252a:	4b31      	ldr	r3, [pc, #196]	; (80025f0 <xTaskResumeAll+0x100>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	3318      	adds	r3, #24
 8002536:	0018      	movs	r0, r3
 8002538:	f7ff fe1c 	bl	8002174 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	3304      	adds	r3, #4
 8002540:	0018      	movs	r0, r3
 8002542:	f7ff fe17 	bl	8002174 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800254a:	4b2a      	ldr	r3, [pc, #168]	; (80025f4 <xTaskResumeAll+0x104>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d903      	bls.n	800255a <xTaskResumeAll+0x6a>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002556:	4b27      	ldr	r3, [pc, #156]	; (80025f4 <xTaskResumeAll+0x104>)
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800255e:	0013      	movs	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	189b      	adds	r3, r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4a24      	ldr	r2, [pc, #144]	; (80025f8 <xTaskResumeAll+0x108>)
 8002568:	189a      	adds	r2, r3, r2
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	3304      	adds	r3, #4
 800256e:	0019      	movs	r1, r3
 8002570:	0010      	movs	r0, r2
 8002572:	f7ff fda7 	bl	80020c4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800257a:	4b20      	ldr	r3, [pc, #128]	; (80025fc <xTaskResumeAll+0x10c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	429a      	cmp	r2, r3
 8002582:	d302      	bcc.n	800258a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8002584:	4b1e      	ldr	r3, [pc, #120]	; (8002600 <xTaskResumeAll+0x110>)
 8002586:	2201      	movs	r2, #1
 8002588:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800258a:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <xTaskResumeAll+0x100>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1cb      	bne.n	800252a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002598:	f000 f9cc 	bl	8002934 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800259c:	4b19      	ldr	r3, [pc, #100]	; (8002604 <xTaskResumeAll+0x114>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00f      	beq.n	80025c8 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80025a8:	f000 f82e 	bl	8002608 <xTaskIncrementTick>
 80025ac:	1e03      	subs	r3, r0, #0
 80025ae:	d002      	beq.n	80025b6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80025b0:	4b13      	ldr	r3, [pc, #76]	; (8002600 <xTaskResumeAll+0x110>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f2      	bne.n	80025a8 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 80025c2:	4b10      	ldr	r3, [pc, #64]	; (8002604 <xTaskResumeAll+0x114>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80025c8:	4b0d      	ldr	r3, [pc, #52]	; (8002600 <xTaskResumeAll+0x110>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80025d0:	2301      	movs	r3, #1
 80025d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80025d4:	f000 faac 	bl	8002b30 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80025d8:	f000 facc 	bl	8002b74 <vPortExitCritical>

	return xAlreadyYielded;
 80025dc:	68bb      	ldr	r3, [r7, #8]
}
 80025de:	0018      	movs	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	b004      	add	sp, #16
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	200001f4 	.word	0x200001f4
 80025ec:	200001cc 	.word	0x200001cc
 80025f0:	2000018c 	.word	0x2000018c
 80025f4:	200001d4 	.word	0x200001d4
 80025f8:	200000d0 	.word	0x200000d0
 80025fc:	200000cc 	.word	0x200000cc
 8002600:	200001e0 	.word	0x200001e0
 8002604:	200001dc 	.word	0x200001dc

08002608 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002612:	4b4a      	ldr	r3, [pc, #296]	; (800273c <xTaskIncrementTick+0x134>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d000      	beq.n	800261c <xTaskIncrementTick+0x14>
 800261a:	e084      	b.n	8002726 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800261c:	4b48      	ldr	r3, [pc, #288]	; (8002740 <xTaskIncrementTick+0x138>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	3301      	adds	r3, #1
 8002622:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002624:	4b46      	ldr	r3, [pc, #280]	; (8002740 <xTaskIncrementTick+0x138>)
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d117      	bne.n	8002660 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8002630:	4b44      	ldr	r3, [pc, #272]	; (8002744 <xTaskIncrementTick+0x13c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <xTaskIncrementTick+0x36>
 800263a:	b672      	cpsid	i
 800263c:	e7fe      	b.n	800263c <xTaskIncrementTick+0x34>
 800263e:	4b41      	ldr	r3, [pc, #260]	; (8002744 <xTaskIncrementTick+0x13c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	4b40      	ldr	r3, [pc, #256]	; (8002748 <xTaskIncrementTick+0x140>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b3e      	ldr	r3, [pc, #248]	; (8002744 <xTaskIncrementTick+0x13c>)
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	4b3e      	ldr	r3, [pc, #248]	; (8002748 <xTaskIncrementTick+0x140>)
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	4b3e      	ldr	r3, [pc, #248]	; (800274c <xTaskIncrementTick+0x144>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	4b3c      	ldr	r3, [pc, #240]	; (800274c <xTaskIncrementTick+0x144>)
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	f000 f96a 	bl	8002934 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002660:	4b3b      	ldr	r3, [pc, #236]	; (8002750 <xTaskIncrementTick+0x148>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	429a      	cmp	r2, r3
 8002668:	d349      	bcc.n	80026fe <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800266a:	4b36      	ldr	r3, [pc, #216]	; (8002744 <xTaskIncrementTick+0x13c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d104      	bne.n	800267e <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002674:	4b36      	ldr	r3, [pc, #216]	; (8002750 <xTaskIncrementTick+0x148>)
 8002676:	2201      	movs	r2, #1
 8002678:	4252      	negs	r2, r2
 800267a:	601a      	str	r2, [r3, #0]
					break;
 800267c:	e03f      	b.n	80026fe <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800267e:	4b31      	ldr	r3, [pc, #196]	; (8002744 <xTaskIncrementTick+0x13c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	429a      	cmp	r2, r3
 8002694:	d203      	bcs.n	800269e <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002696:	4b2e      	ldr	r3, [pc, #184]	; (8002750 <xTaskIncrementTick+0x148>)
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800269c:	e02f      	b.n	80026fe <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	3304      	adds	r3, #4
 80026a2:	0018      	movs	r0, r3
 80026a4:	f7ff fd66 	bl	8002174 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d004      	beq.n	80026ba <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	3318      	adds	r3, #24
 80026b4:	0018      	movs	r0, r3
 80026b6:	f7ff fd5d 	bl	8002174 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026be:	4b25      	ldr	r3, [pc, #148]	; (8002754 <xTaskIncrementTick+0x14c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d903      	bls.n	80026ce <xTaskIncrementTick+0xc6>
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ca:	4b22      	ldr	r3, [pc, #136]	; (8002754 <xTaskIncrementTick+0x14c>)
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d2:	0013      	movs	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	189b      	adds	r3, r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4a1f      	ldr	r2, [pc, #124]	; (8002758 <xTaskIncrementTick+0x150>)
 80026dc:	189a      	adds	r2, r3, r2
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	3304      	adds	r3, #4
 80026e2:	0019      	movs	r1, r3
 80026e4:	0010      	movs	r0, r2
 80026e6:	f7ff fced 	bl	80020c4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ee:	4b1b      	ldr	r3, [pc, #108]	; (800275c <xTaskIncrementTick+0x154>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d3b8      	bcc.n	800266a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80026f8:	2301      	movs	r3, #1
 80026fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026fc:	e7b5      	b.n	800266a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80026fe:	4b17      	ldr	r3, [pc, #92]	; (800275c <xTaskIncrementTick+0x154>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002704:	4914      	ldr	r1, [pc, #80]	; (8002758 <xTaskIncrementTick+0x150>)
 8002706:	0013      	movs	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	189b      	adds	r3, r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	585b      	ldr	r3, [r3, r1]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d901      	bls.n	8002718 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8002714:	2301      	movs	r3, #1
 8002716:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002718:	4b11      	ldr	r3, [pc, #68]	; (8002760 <xTaskIncrementTick+0x158>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d007      	beq.n	8002730 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8002720:	2301      	movs	r3, #1
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	e004      	b.n	8002730 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002726:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <xTaskIncrementTick+0x15c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	4b0d      	ldr	r3, [pc, #52]	; (8002764 <xTaskIncrementTick+0x15c>)
 800272e:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002730:	697b      	ldr	r3, [r7, #20]
}
 8002732:	0018      	movs	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	b006      	add	sp, #24
 8002738:	bd80      	pop	{r7, pc}
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	200001f4 	.word	0x200001f4
 8002740:	200001d0 	.word	0x200001d0
 8002744:	20000184 	.word	0x20000184
 8002748:	20000188 	.word	0x20000188
 800274c:	200001e4 	.word	0x200001e4
 8002750:	200001ec 	.word	0x200001ec
 8002754:	200001d4 	.word	0x200001d4
 8002758:	200000d0 	.word	0x200000d0
 800275c:	200000cc 	.word	0x200000cc
 8002760:	200001e0 	.word	0x200001e0
 8002764:	200001dc 	.word	0x200001dc

08002768 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800276e:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <vTaskSwitchContext+0x90>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002776:	4b21      	ldr	r3, [pc, #132]	; (80027fc <vTaskSwitchContext+0x94>)
 8002778:	2201      	movs	r2, #1
 800277a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800277c:	e037      	b.n	80027ee <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800277e:	4b1f      	ldr	r3, [pc, #124]	; (80027fc <vTaskSwitchContext+0x94>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002784:	4b1e      	ldr	r3, [pc, #120]	; (8002800 <vTaskSwitchContext+0x98>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	607b      	str	r3, [r7, #4]
 800278a:	e007      	b.n	800279c <vTaskSwitchContext+0x34>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <vTaskSwitchContext+0x2e>
 8002792:	b672      	cpsid	i
 8002794:	e7fe      	b.n	8002794 <vTaskSwitchContext+0x2c>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3b01      	subs	r3, #1
 800279a:	607b      	str	r3, [r7, #4]
 800279c:	4919      	ldr	r1, [pc, #100]	; (8002804 <vTaskSwitchContext+0x9c>)
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	0013      	movs	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	189b      	adds	r3, r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	585b      	ldr	r3, [r3, r1]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0ee      	beq.n	800278c <vTaskSwitchContext+0x24>
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	0013      	movs	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	189b      	adds	r3, r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4a12      	ldr	r2, [pc, #72]	; (8002804 <vTaskSwitchContext+0x9c>)
 80027ba:	189b      	adds	r3, r3, r2
 80027bc:	603b      	str	r3, [r7, #0]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	605a      	str	r2, [r3, #4]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	3308      	adds	r3, #8
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d104      	bne.n	80027de <vTaskSwitchContext+0x76>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	4b08      	ldr	r3, [pc, #32]	; (8002808 <vTaskSwitchContext+0xa0>)
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <vTaskSwitchContext+0x98>)
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	601a      	str	r2, [r3, #0]
}
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	46bd      	mov	sp, r7
 80027f2:	b002      	add	sp, #8
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	46c0      	nop			; (mov r8, r8)
 80027f8:	200001f4 	.word	0x200001f4
 80027fc:	200001e0 	.word	0x200001e0
 8002800:	200001d4 	.word	0x200001d4
 8002804:	200000d0 	.word	0x200000d0
 8002808:	200000cc 	.word	0x200000cc

0800280c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002814:	f000 f84e 	bl	80028b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002818:	4b03      	ldr	r3, [pc, #12]	; (8002828 <prvIdleTask+0x1c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d9f9      	bls.n	8002814 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002820:	f000 f986 	bl	8002b30 <vPortYield>
		prvCheckTasksWaitingTermination();
 8002824:	e7f6      	b.n	8002814 <prvIdleTask+0x8>
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	200000d0 	.word	0x200000d0

0800282c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002832:	2300      	movs	r3, #0
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	e00c      	b.n	8002852 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	0013      	movs	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	189b      	adds	r3, r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4a14      	ldr	r2, [pc, #80]	; (8002894 <prvInitialiseTaskLists+0x68>)
 8002844:	189b      	adds	r3, r3, r2
 8002846:	0018      	movs	r0, r3
 8002848:	f7ff fc13 	bl	8002072 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3301      	adds	r3, #1
 8002850:	607b      	str	r3, [r7, #4]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b06      	cmp	r3, #6
 8002856:	d9ef      	bls.n	8002838 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002858:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <prvInitialiseTaskLists+0x6c>)
 800285a:	0018      	movs	r0, r3
 800285c:	f7ff fc09 	bl	8002072 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002860:	4b0e      	ldr	r3, [pc, #56]	; (800289c <prvInitialiseTaskLists+0x70>)
 8002862:	0018      	movs	r0, r3
 8002864:	f7ff fc05 	bl	8002072 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002868:	4b0d      	ldr	r3, [pc, #52]	; (80028a0 <prvInitialiseTaskLists+0x74>)
 800286a:	0018      	movs	r0, r3
 800286c:	f7ff fc01 	bl	8002072 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <prvInitialiseTaskLists+0x78>)
 8002872:	0018      	movs	r0, r3
 8002874:	f7ff fbfd 	bl	8002072 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002878:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <prvInitialiseTaskLists+0x7c>)
 800287a:	0018      	movs	r0, r3
 800287c:	f7ff fbf9 	bl	8002072 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002880:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <prvInitialiseTaskLists+0x80>)
 8002882:	4a05      	ldr	r2, [pc, #20]	; (8002898 <prvInitialiseTaskLists+0x6c>)
 8002884:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002886:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <prvInitialiseTaskLists+0x84>)
 8002888:	4a04      	ldr	r2, [pc, #16]	; (800289c <prvInitialiseTaskLists+0x70>)
 800288a:	601a      	str	r2, [r3, #0]
}
 800288c:	46c0      	nop			; (mov r8, r8)
 800288e:	46bd      	mov	sp, r7
 8002890:	b002      	add	sp, #8
 8002892:	bd80      	pop	{r7, pc}
 8002894:	200000d0 	.word	0x200000d0
 8002898:	2000015c 	.word	0x2000015c
 800289c:	20000170 	.word	0x20000170
 80028a0:	2000018c 	.word	0x2000018c
 80028a4:	200001a0 	.word	0x200001a0
 80028a8:	200001b8 	.word	0x200001b8
 80028ac:	20000184 	.word	0x20000184
 80028b0:	20000188 	.word	0x20000188

080028b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80028ba:	e01a      	b.n	80028f2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80028bc:	f000 f948 	bl	8002b50 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028c0:	4b10      	ldr	r3, [pc, #64]	; (8002904 <prvCheckTasksWaitingTermination+0x50>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3304      	adds	r3, #4
 80028cc:	0018      	movs	r0, r3
 80028ce:	f7ff fc51 	bl	8002174 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80028d2:	4b0d      	ldr	r3, [pc, #52]	; (8002908 <prvCheckTasksWaitingTermination+0x54>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	1e5a      	subs	r2, r3, #1
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <prvCheckTasksWaitingTermination+0x54>)
 80028da:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80028dc:	4b0b      	ldr	r3, [pc, #44]	; (800290c <prvCheckTasksWaitingTermination+0x58>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	1e5a      	subs	r2, r3, #1
 80028e2:	4b0a      	ldr	r3, [pc, #40]	; (800290c <prvCheckTasksWaitingTermination+0x58>)
 80028e4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80028e6:	f000 f945 	bl	8002b74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	0018      	movs	r0, r3
 80028ee:	f000 f80f 	bl	8002910 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <prvCheckTasksWaitingTermination+0x58>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1e0      	bne.n	80028bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	46c0      	nop			; (mov r8, r8)
 80028fe:	46bd      	mov	sp, r7
 8002900:	b002      	add	sp, #8
 8002902:	bd80      	pop	{r7, pc}
 8002904:	200001a0 	.word	0x200001a0
 8002908:	200001cc 	.word	0x200001cc
 800290c:	200001b4 	.word	0x200001b4

08002910 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	0018      	movs	r0, r3
 800291e:	f000 fa5b 	bl	8002dd8 <vPortFree>
			vPortFree( pxTCB );
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	0018      	movs	r0, r3
 8002926:	f000 fa57 	bl	8002dd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	46bd      	mov	sp, r7
 800292e:	b002      	add	sp, #8
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800293a:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <prvResetNextTaskUnblockTime+0x34>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d104      	bne.n	800294e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002944:	4b09      	ldr	r3, [pc, #36]	; (800296c <prvResetNextTaskUnblockTime+0x38>)
 8002946:	2201      	movs	r2, #1
 8002948:	4252      	negs	r2, r2
 800294a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800294c:	e008      	b.n	8002960 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800294e:	4b06      	ldr	r3, [pc, #24]	; (8002968 <prvResetNextTaskUnblockTime+0x34>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	4b03      	ldr	r3, [pc, #12]	; (800296c <prvResetNextTaskUnblockTime+0x38>)
 800295e:	601a      	str	r2, [r3, #0]
}
 8002960:	46c0      	nop			; (mov r8, r8)
 8002962:	46bd      	mov	sp, r7
 8002964:	b002      	add	sp, #8
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20000184 	.word	0x20000184
 800296c:	200001ec 	.word	0x200001ec

08002970 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800297a:	4b21      	ldr	r3, [pc, #132]	; (8002a00 <prvAddCurrentTaskToDelayedList+0x90>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002980:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <prvAddCurrentTaskToDelayedList+0x94>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	3304      	adds	r3, #4
 8002986:	0018      	movs	r0, r3
 8002988:	f7ff fbf4 	bl	8002174 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3301      	adds	r3, #1
 8002990:	d10b      	bne.n	80029aa <prvAddCurrentTaskToDelayedList+0x3a>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002998:	4b1a      	ldr	r3, [pc, #104]	; (8002a04 <prvAddCurrentTaskToDelayedList+0x94>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	1d1a      	adds	r2, r3, #4
 800299e:	4b1a      	ldr	r3, [pc, #104]	; (8002a08 <prvAddCurrentTaskToDelayedList+0x98>)
 80029a0:	0011      	movs	r1, r2
 80029a2:	0018      	movs	r0, r3
 80029a4:	f7ff fb8e 	bl	80020c4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80029a8:	e026      	b.n	80029f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	18d3      	adds	r3, r2, r3
 80029b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80029b2:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <prvAddCurrentTaskToDelayedList+0x94>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d209      	bcs.n	80029d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029c2:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <prvAddCurrentTaskToDelayedList+0x9c>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <prvAddCurrentTaskToDelayedList+0x94>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	3304      	adds	r3, #4
 80029cc:	0019      	movs	r1, r3
 80029ce:	0010      	movs	r0, r2
 80029d0:	f7ff fb9a 	bl	8002108 <vListInsert>
}
 80029d4:	e010      	b.n	80029f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029d6:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <prvAddCurrentTaskToDelayedList+0xa0>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <prvAddCurrentTaskToDelayedList+0x94>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	3304      	adds	r3, #4
 80029e0:	0019      	movs	r1, r3
 80029e2:	0010      	movs	r0, r2
 80029e4:	f7ff fb90 	bl	8002108 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80029e8:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <prvAddCurrentTaskToDelayedList+0xa4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d202      	bcs.n	80029f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80029f2:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <prvAddCurrentTaskToDelayedList+0xa4>)
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	601a      	str	r2, [r3, #0]
}
 80029f8:	46c0      	nop			; (mov r8, r8)
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b004      	add	sp, #16
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	200001d0 	.word	0x200001d0
 8002a04:	200000cc 	.word	0x200000cc
 8002a08:	200001b8 	.word	0x200001b8
 8002a0c:	20000188 	.word	0x20000188
 8002a10:	20000184 	.word	0x20000184
 8002a14:	200001ec 	.word	0x200001ec

08002a18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	3b04      	subs	r3, #4
 8002a28:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2280      	movs	r2, #128	; 0x80
 8002a2e:	0452      	lsls	r2, r2, #17
 8002a30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	3b04      	subs	r3, #4
 8002a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	3b04      	subs	r3, #4
 8002a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002a44:	4a08      	ldr	r2, [pc, #32]	; (8002a68 <pxPortInitialiseStack+0x50>)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	3b14      	subs	r3, #20
 8002a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	3b20      	subs	r3, #32
 8002a5a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
}
 8002a5e:	0018      	movs	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	b004      	add	sp, #16
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	08002a6d 	.word	0x08002a6d

08002a6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002a76:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <prvTaskExitError+0x2c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	d001      	beq.n	8002a82 <prvTaskExitError+0x16>
 8002a7e:	b672      	cpsid	i
 8002a80:	e7fe      	b.n	8002a80 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8002a82:	b672      	cpsid	i
	while( ulDummy == 0 )
 8002a84:	46c0      	nop			; (mov r8, r8)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0fc      	beq.n	8002a86 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002a8c:	46c0      	nop			; (mov r8, r8)
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	46bd      	mov	sp, r7
 8002a92:	b002      	add	sp, #8
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	2000000c 	.word	0x2000000c

08002a9c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8002aa0:	46c0      	nop			; (mov r8, r8)
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002ab0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8002ab0:	4a0b      	ldr	r2, [pc, #44]	; (8002ae0 <pxCurrentTCBConst2>)
 8002ab2:	6813      	ldr	r3, [r2, #0]
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	3020      	adds	r0, #32
 8002ab8:	f380 8809 	msr	PSP, r0
 8002abc:	2002      	movs	r0, #2
 8002abe:	f380 8814 	msr	CONTROL, r0
 8002ac2:	f3bf 8f6f 	isb	sy
 8002ac6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8002ac8:	46ae      	mov	lr, r5
 8002aca:	bc08      	pop	{r3}
 8002acc:	bc04      	pop	{r2}
 8002ace:	b662      	cpsie	i
 8002ad0:	4718      	bx	r3
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	46c0      	nop			; (mov r8, r8)
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	46c0      	nop			; (mov r8, r8)
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	46c0      	nop			; (mov r8, r8)
 8002ade:	46c0      	nop			; (mov r8, r8)

08002ae0 <pxCurrentTCBConst2>:
 8002ae0:	200000cc 	.word	0x200000cc
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8002ae4:	46c0      	nop			; (mov r8, r8)
 8002ae6:	46c0      	nop			; (mov r8, r8)

08002ae8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002aec:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <xPortStartScheduler+0x40>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <xPortStartScheduler+0x40>)
 8002af2:	21ff      	movs	r1, #255	; 0xff
 8002af4:	0409      	lsls	r1, r1, #16
 8002af6:	430a      	orrs	r2, r1
 8002af8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002afa:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <xPortStartScheduler+0x40>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <xPortStartScheduler+0x40>)
 8002b00:	21ff      	movs	r1, #255	; 0xff
 8002b02:	0609      	lsls	r1, r1, #24
 8002b04:	430a      	orrs	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002b08:	f000 f898 	bl	8002c3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002b0c:	4b07      	ldr	r3, [pc, #28]	; (8002b2c <xPortStartScheduler+0x44>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8002b12:	f7ff ffcd 	bl	8002ab0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002b16:	f7ff fe27 	bl	8002768 <vTaskSwitchContext>
	prvTaskExitError();
 8002b1a:	f7ff ffa7 	bl	8002a6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	e000ed20 	.word	0xe000ed20
 8002b2c:	2000000c 	.word	0x2000000c

08002b30 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002b34:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <vPortYield+0x1c>)
 8002b36:	2280      	movs	r2, #128	; 0x80
 8002b38:	0552      	lsls	r2, r2, #21
 8002b3a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8002b3c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002b40:	f3bf 8f6f 	isb	sy
}
 8002b44:	46c0      	nop			; (mov r8, r8)
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	e000ed04 	.word	0xe000ed04

08002b50 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8002b54:	b672      	cpsid	i
	uxCriticalNesting++;
 8002b56:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <vPortEnterCritical+0x20>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <vPortEnterCritical+0x20>)
 8002b5e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8002b60:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002b64:	f3bf 8f6f 	isb	sy
}
 8002b68:	46c0      	nop			; (mov r8, r8)
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	2000000c 	.word	0x2000000c

08002b74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002b78:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <vPortExitCritical+0x2c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <vPortExitCritical+0x10>
 8002b80:	b672      	cpsid	i
 8002b82:	e7fe      	b.n	8002b82 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8002b84:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <vPortExitCritical+0x2c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	1e5a      	subs	r2, r3, #1
 8002b8a:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <vPortExitCritical+0x2c>)
 8002b8c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8002b8e:	4b04      	ldr	r3, [pc, #16]	; (8002ba0 <vPortExitCritical+0x2c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d100      	bne.n	8002b98 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8002b96:	b662      	cpsie	i
	}
}
 8002b98:	46c0      	nop			; (mov r8, r8)
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	2000000c 	.word	0x2000000c

08002ba4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8002ba4:	f3ef 8010 	mrs	r0, PRIMASK
 8002ba8:	b672      	cpsid	i
 8002baa:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8002bac:	46c0      	nop			; (mov r8, r8)
 8002bae:	0018      	movs	r0, r3

08002bb0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8002bb0:	f380 8810 	msr	PRIMASK, r0
 8002bb4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8002bb6:	46c0      	nop			; (mov r8, r8)
	...

08002bc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002bc0:	f3ef 8009 	mrs	r0, PSP
 8002bc4:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <pxCurrentTCBConst>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	3820      	subs	r0, #32
 8002bca:	6010      	str	r0, [r2, #0]
 8002bcc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002bce:	4644      	mov	r4, r8
 8002bd0:	464d      	mov	r5, r9
 8002bd2:	4656      	mov	r6, sl
 8002bd4:	465f      	mov	r7, fp
 8002bd6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002bd8:	b508      	push	{r3, lr}
 8002bda:	b672      	cpsid	i
 8002bdc:	f7ff fdc4 	bl	8002768 <vTaskSwitchContext>
 8002be0:	b662      	cpsie	i
 8002be2:	bc0c      	pop	{r2, r3}
 8002be4:	6811      	ldr	r1, [r2, #0]
 8002be6:	6808      	ldr	r0, [r1, #0]
 8002be8:	3010      	adds	r0, #16
 8002bea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002bec:	46a0      	mov	r8, r4
 8002bee:	46a9      	mov	r9, r5
 8002bf0:	46b2      	mov	sl, r6
 8002bf2:	46bb      	mov	fp, r7
 8002bf4:	f380 8809 	msr	PSP, r0
 8002bf8:	3820      	subs	r0, #32
 8002bfa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002bfc:	4718      	bx	r3
 8002bfe:	46c0      	nop			; (mov r8, r8)

08002c00 <pxCurrentTCBConst>:
 8002c00:	200000cc 	.word	0x200000cc
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8002c04:	46c0      	nop			; (mov r8, r8)
 8002c06:	46c0      	nop			; (mov r8, r8)

08002c08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c0e:	f7ff ffc9 	bl	8002ba4 <ulSetInterruptMaskFromISR>
 8002c12:	0003      	movs	r3, r0
 8002c14:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002c16:	f7ff fcf7 	bl	8002608 <xTaskIncrementTick>
 8002c1a:	1e03      	subs	r3, r0, #0
 8002c1c:	d003      	beq.n	8002c26 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002c1e:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <SysTick_Handler+0x30>)
 8002c20:	2280      	movs	r2, #128	; 0x80
 8002c22:	0552      	lsls	r2, r2, #21
 8002c24:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f7ff ffc1 	bl	8002bb0 <vClearInterruptMaskFromISR>
}
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b002      	add	sp, #8
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	e000ed04 	.word	0xe000ed04

08002c3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002c40:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <vPortSetupTimerInterrupt+0x34>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002c46:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <vPortSetupTimerInterrupt+0x38>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002c4c:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <vPortSetupTimerInterrupt+0x3c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	22fa      	movs	r2, #250	; 0xfa
 8002c52:	0091      	lsls	r1, r2, #2
 8002c54:	0018      	movs	r0, r3
 8002c56:	f7fd fa57 	bl	8000108 <__udivsi3>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	001a      	movs	r2, r3
 8002c5e:	4b07      	ldr	r3, [pc, #28]	; (8002c7c <vPortSetupTimerInterrupt+0x40>)
 8002c60:	3a01      	subs	r2, #1
 8002c62:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8002c64:	4b02      	ldr	r3, [pc, #8]	; (8002c70 <vPortSetupTimerInterrupt+0x34>)
 8002c66:	2207      	movs	r2, #7
 8002c68:	601a      	str	r2, [r3, #0]
}
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	e000e010 	.word	0xe000e010
 8002c74:	e000e018 	.word	0xe000e018
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	e000e014 	.word	0xe000e014

08002c80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8002c8c:	f7ff fc24 	bl	80024d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002c90:	4b4b      	ldr	r3, [pc, #300]	; (8002dc0 <pvPortMalloc+0x140>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002c98:	f000 f8ec 	bl	8002e74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002c9c:	4b49      	ldr	r3, [pc, #292]	; (8002dc4 <pvPortMalloc+0x144>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d000      	beq.n	8002ca8 <pvPortMalloc+0x28>
 8002ca6:	e07e      	b.n	8002da6 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d012      	beq.n	8002cd4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8002cae:	2208      	movs	r2, #8
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	189b      	adds	r3, r3, r2
 8002cb4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2207      	movs	r2, #7
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d00a      	beq.n	8002cd4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2207      	movs	r2, #7
 8002cc2:	4393      	bics	r3, r2
 8002cc4:	3308      	adds	r3, #8
 8002cc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2207      	movs	r2, #7
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d001      	beq.n	8002cd4 <pvPortMalloc+0x54>
 8002cd0:	b672      	cpsid	i
 8002cd2:	e7fe      	b.n	8002cd2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d065      	beq.n	8002da6 <pvPortMalloc+0x126>
 8002cda:	4b3b      	ldr	r3, [pc, #236]	; (8002dc8 <pvPortMalloc+0x148>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d860      	bhi.n	8002da6 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002ce4:	4b39      	ldr	r3, [pc, #228]	; (8002dcc <pvPortMalloc+0x14c>)
 8002ce6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8002ce8:	4b38      	ldr	r3, [pc, #224]	; (8002dcc <pvPortMalloc+0x14c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002cee:	e004      	b.n	8002cfa <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d903      	bls.n	8002d0c <pvPortMalloc+0x8c>
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f1      	bne.n	8002cf0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002d0c:	4b2c      	ldr	r3, [pc, #176]	; (8002dc0 <pvPortMalloc+0x140>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d047      	beq.n	8002da6 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2208      	movs	r2, #8
 8002d1c:	189b      	adds	r3, r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	1ad2      	subs	r2, r2, r3
 8002d30:	2308      	movs	r3, #8
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d916      	bls.n	8002d66 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	18d3      	adds	r3, r2, r3
 8002d3e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2207      	movs	r2, #7
 8002d44:	4013      	ands	r3, r2
 8002d46:	d001      	beq.n	8002d4c <pvPortMalloc+0xcc>
 8002d48:	b672      	cpsid	i
 8002d4a:	e7fe      	b.n	8002d4a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	1ad2      	subs	r2, r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	0018      	movs	r0, r3
 8002d62:	f000 f8e7 	bl	8002f34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002d66:	4b18      	ldr	r3, [pc, #96]	; (8002dc8 <pvPortMalloc+0x148>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	1ad2      	subs	r2, r2, r3
 8002d70:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <pvPortMalloc+0x148>)
 8002d72:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002d74:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <pvPortMalloc+0x148>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <pvPortMalloc+0x150>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d203      	bcs.n	8002d88 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002d80:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <pvPortMalloc+0x148>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <pvPortMalloc+0x150>)
 8002d86:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <pvPortMalloc+0x144>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	431a      	orrs	r2, r3
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002d9c:	4b0d      	ldr	r3, [pc, #52]	; (8002dd4 <pvPortMalloc+0x154>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <pvPortMalloc+0x154>)
 8002da4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002da6:	f7ff fba3 	bl	80024f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2207      	movs	r2, #7
 8002dae:	4013      	ands	r3, r2
 8002db0:	d001      	beq.n	8002db6 <pvPortMalloc+0x136>
 8002db2:	b672      	cpsid	i
 8002db4:	e7fe      	b.n	8002db4 <pvPortMalloc+0x134>
	return pvReturn;
 8002db6:	68fb      	ldr	r3, [r7, #12]
}
 8002db8:	0018      	movs	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b006      	add	sp, #24
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	20001d58 	.word	0x20001d58
 8002dc4:	20001d6c 	.word	0x20001d6c
 8002dc8:	20001d5c 	.word	0x20001d5c
 8002dcc:	20001d50 	.word	0x20001d50
 8002dd0:	20001d60 	.word	0x20001d60
 8002dd4:	20001d64 	.word	0x20001d64

08002dd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d03a      	beq.n	8002e60 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002dea:	2308      	movs	r3, #8
 8002dec:	425b      	negs	r3, r3
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	18d3      	adds	r3, r2, r3
 8002df2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	4b1a      	ldr	r3, [pc, #104]	; (8002e68 <vPortFree+0x90>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4013      	ands	r3, r2
 8002e02:	d101      	bne.n	8002e08 <vPortFree+0x30>
 8002e04:	b672      	cpsid	i
 8002e06:	e7fe      	b.n	8002e06 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <vPortFree+0x3c>
 8002e10:	b672      	cpsid	i
 8002e12:	e7fe      	b.n	8002e12 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <vPortFree+0x90>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d01f      	beq.n	8002e60 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d11b      	bne.n	8002e60 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <vPortFree+0x90>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	43db      	mvns	r3, r3
 8002e32:	401a      	ands	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002e38:	f7ff fb4e 	bl	80024d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <vPortFree+0x94>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	18d2      	adds	r2, r2, r3
 8002e46:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <vPortFree+0x94>)
 8002e48:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f000 f871 	bl	8002f34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002e52:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <vPortFree+0x98>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <vPortFree+0x98>)
 8002e5a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8002e5c:	f7ff fb48 	bl	80024f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002e60:	46c0      	nop			; (mov r8, r8)
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b004      	add	sp, #16
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	20001d6c 	.word	0x20001d6c
 8002e6c:	20001d5c 	.word	0x20001d5c
 8002e70:	20001d68 	.word	0x20001d68

08002e74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002e7a:	4b27      	ldr	r3, [pc, #156]	; (8002f18 <prvHeapInit+0xa4>)
 8002e7c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002e7e:	4b27      	ldr	r3, [pc, #156]	; (8002f1c <prvHeapInit+0xa8>)
 8002e80:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2207      	movs	r2, #7
 8002e86:	4013      	ands	r3, r2
 8002e88:	d00c      	beq.n	8002ea4 <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	3307      	adds	r3, #7
 8002e8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2207      	movs	r2, #7
 8002e94:	4393      	bics	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1ad2      	subs	r2, r2, r3
 8002e9e:	4b1f      	ldr	r3, [pc, #124]	; (8002f1c <prvHeapInit+0xa8>)
 8002ea0:	18d3      	adds	r3, r2, r3
 8002ea2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002ea8:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <prvHeapInit+0xac>)
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002eae:	4b1c      	ldr	r3, [pc, #112]	; (8002f20 <prvHeapInit+0xac>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	18d3      	adds	r3, r2, r3
 8002eba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002ebc:	2208      	movs	r2, #8
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2207      	movs	r2, #7
 8002ec8:	4393      	bics	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <prvHeapInit+0xb0>)
 8002ed0:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8002ed2:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <prvHeapInit+0xb0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002eda:	4b12      	ldr	r3, [pc, #72]	; (8002f24 <prvHeapInit+0xb0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	1ad2      	subs	r2, r2, r3
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <prvHeapInit+0xb0>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <prvHeapInit+0xb4>)
 8002efe:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <prvHeapInit+0xb8>)
 8002f06:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002f08:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <prvHeapInit+0xbc>)
 8002f0a:	2280      	movs	r2, #128	; 0x80
 8002f0c:	0612      	lsls	r2, r2, #24
 8002f0e:	601a      	str	r2, [r3, #0]
}
 8002f10:	46c0      	nop			; (mov r8, r8)
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b004      	add	sp, #16
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	00001b58 	.word	0x00001b58
 8002f1c:	200001f8 	.word	0x200001f8
 8002f20:	20001d50 	.word	0x20001d50
 8002f24:	20001d58 	.word	0x20001d58
 8002f28:	20001d60 	.word	0x20001d60
 8002f2c:	20001d5c 	.word	0x20001d5c
 8002f30:	20001d6c 	.word	0x20001d6c

08002f34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002f3c:	4b27      	ldr	r3, [pc, #156]	; (8002fdc <prvInsertBlockIntoFreeList+0xa8>)
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	e002      	b.n	8002f48 <prvInsertBlockIntoFreeList+0x14>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d8f7      	bhi.n	8002f42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	18d3      	adds	r3, r2, r3
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d108      	bne.n	8002f76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	18d2      	adds	r2, r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	18d2      	adds	r2, r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d118      	bne.n	8002fbc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	4b14      	ldr	r3, [pc, #80]	; (8002fe0 <prvInsertBlockIntoFreeList+0xac>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d00d      	beq.n	8002fb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	18d2      	adds	r2, r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	e008      	b.n	8002fc4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002fb2:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <prvInsertBlockIntoFreeList+0xac>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	e003      	b.n	8002fc4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d002      	beq.n	8002fd2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	b004      	add	sp, #16
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	20001d50 	.word	0x20001d50
 8002fe0:	20001d58 	.word	0x20001d58

08002fe4 <memset>:
 8002fe4:	0003      	movs	r3, r0
 8002fe6:	1882      	adds	r2, r0, r2
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d100      	bne.n	8002fee <memset+0xa>
 8002fec:	4770      	bx	lr
 8002fee:	7019      	strb	r1, [r3, #0]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	e7f9      	b.n	8002fe8 <memset+0x4>

08002ff4 <__libc_init_array>:
 8002ff4:	b570      	push	{r4, r5, r6, lr}
 8002ff6:	2600      	movs	r6, #0
 8002ff8:	4c0c      	ldr	r4, [pc, #48]	; (800302c <__libc_init_array+0x38>)
 8002ffa:	4d0d      	ldr	r5, [pc, #52]	; (8003030 <__libc_init_array+0x3c>)
 8002ffc:	1b64      	subs	r4, r4, r5
 8002ffe:	10a4      	asrs	r4, r4, #2
 8003000:	42a6      	cmp	r6, r4
 8003002:	d109      	bne.n	8003018 <__libc_init_array+0x24>
 8003004:	2600      	movs	r6, #0
 8003006:	f000 f819 	bl	800303c <_init>
 800300a:	4c0a      	ldr	r4, [pc, #40]	; (8003034 <__libc_init_array+0x40>)
 800300c:	4d0a      	ldr	r5, [pc, #40]	; (8003038 <__libc_init_array+0x44>)
 800300e:	1b64      	subs	r4, r4, r5
 8003010:	10a4      	asrs	r4, r4, #2
 8003012:	42a6      	cmp	r6, r4
 8003014:	d105      	bne.n	8003022 <__libc_init_array+0x2e>
 8003016:	bd70      	pop	{r4, r5, r6, pc}
 8003018:	00b3      	lsls	r3, r6, #2
 800301a:	58eb      	ldr	r3, [r5, r3]
 800301c:	4798      	blx	r3
 800301e:	3601      	adds	r6, #1
 8003020:	e7ee      	b.n	8003000 <__libc_init_array+0xc>
 8003022:	00b3      	lsls	r3, r6, #2
 8003024:	58eb      	ldr	r3, [r5, r3]
 8003026:	4798      	blx	r3
 8003028:	3601      	adds	r6, #1
 800302a:	e7f2      	b.n	8003012 <__libc_init_array+0x1e>
 800302c:	080030dc 	.word	0x080030dc
 8003030:	080030dc 	.word	0x080030dc
 8003034:	080030e0 	.word	0x080030e0
 8003038:	080030dc 	.word	0x080030dc

0800303c <_init>:
 800303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003042:	bc08      	pop	{r3}
 8003044:	469e      	mov	lr, r3
 8003046:	4770      	bx	lr

08003048 <_fini>:
 8003048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800304e:	bc08      	pop	{r3}
 8003050:	469e      	mov	lr, r3
 8003052:	4770      	bx	lr
