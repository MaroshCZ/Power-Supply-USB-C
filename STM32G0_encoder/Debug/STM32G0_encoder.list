
STM32G0_encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a58  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08004b14  08004b14  00014b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c04  08004c04  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08004c04  08004c04  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c04  08004c04  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c04  08004c04  00014c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c08  08004c08  00014c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004c0c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000018  08004c24  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08004c24  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001267c  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026c6  00000000  00000000  000326ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00008779  00000000  00000000  00034dc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e40  00000000  00000000  0003d540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b85  00000000  00000000  0003e380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001dbf5  00000000  00000000  0003ef05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014cb1  00000000  00000000  0005cafa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c1887  00000000  00000000  000717ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000028b0  00000000  00000000  00133034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  001358e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000018 	.word	0x20000018
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004afc 	.word	0x08004afc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000001c 	.word	0x2000001c
 8000100:	08004afc 	.word	0x08004afc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cdrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0010      	movs	r0, r2
 80003f4:	4662      	mov	r2, ip
 80003f6:	468c      	mov	ip, r1
 80003f8:	0019      	movs	r1, r3
 80003fa:	4663      	mov	r3, ip
 80003fc:	e000      	b.n	8000400 <__aeabi_cdcmpeq>
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cdcmpeq>:
 8000400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000402:	f001 fb4d 	bl	8001aa0 <__ledf2>
 8000406:	2800      	cmp	r0, #0
 8000408:	d401      	bmi.n	800040e <__aeabi_cdcmpeq+0xe>
 800040a:	2100      	movs	r1, #0
 800040c:	42c8      	cmn	r0, r1
 800040e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000410 <__aeabi_dcmpeq>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f001 fa9d 	bl	8001950 <__eqdf2>
 8000416:	4240      	negs	r0, r0
 8000418:	3001      	adds	r0, #1
 800041a:	bd10      	pop	{r4, pc}

0800041c <__aeabi_dcmplt>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f001 fb3f 	bl	8001aa0 <__ledf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	db01      	blt.n	800042a <__aeabi_dcmplt+0xe>
 8000426:	2000      	movs	r0, #0
 8000428:	bd10      	pop	{r4, pc}
 800042a:	2001      	movs	r0, #1
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_dcmple>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fb35 	bl	8001aa0 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	dd01      	ble.n	800043e <__aeabi_dcmple+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmpgt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fac5 	bl	80019d4 <__gedf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dc01      	bgt.n	8000452 <__aeabi_dcmpgt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpge>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fabb 	bl	80019d4 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	da01      	bge.n	8000466 <__aeabi_dcmpge+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_cfrcmple>:
 800046c:	4684      	mov	ip, r0
 800046e:	0008      	movs	r0, r1
 8000470:	4661      	mov	r1, ip
 8000472:	e7ff      	b.n	8000474 <__aeabi_cfcmpeq>

08000474 <__aeabi_cfcmpeq>:
 8000474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000476:	f000 fb71 	bl	8000b5c <__lesf2>
 800047a:	2800      	cmp	r0, #0
 800047c:	d401      	bmi.n	8000482 <__aeabi_cfcmpeq+0xe>
 800047e:	2100      	movs	r1, #0
 8000480:	42c8      	cmn	r0, r1
 8000482:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000484 <__aeabi_fcmpeq>:
 8000484:	b510      	push	{r4, lr}
 8000486:	f000 fafd 	bl	8000a84 <__eqsf2>
 800048a:	4240      	negs	r0, r0
 800048c:	3001      	adds	r0, #1
 800048e:	bd10      	pop	{r4, pc}

08000490 <__aeabi_fcmplt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 fb63 	bl	8000b5c <__lesf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	db01      	blt.n	800049e <__aeabi_fcmplt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_fcmple>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f000 fb59 	bl	8000b5c <__lesf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	dd01      	ble.n	80004b2 <__aeabi_fcmple+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_fcmpgt>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fb09 	bl	8000ad0 <__gesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	dc01      	bgt.n	80004c6 <__aeabi_fcmpgt+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_fcmpge>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 faff 	bl	8000ad0 <__gesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	da01      	bge.n	80004da <__aeabi_fcmpge+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_f2uiz>:
 80004e0:	219e      	movs	r1, #158	; 0x9e
 80004e2:	b510      	push	{r4, lr}
 80004e4:	05c9      	lsls	r1, r1, #23
 80004e6:	1c04      	adds	r4, r0, #0
 80004e8:	f7ff fff0 	bl	80004cc <__aeabi_fcmpge>
 80004ec:	2800      	cmp	r0, #0
 80004ee:	d103      	bne.n	80004f8 <__aeabi_f2uiz+0x18>
 80004f0:	1c20      	adds	r0, r4, #0
 80004f2:	f000 fe65 	bl	80011c0 <__aeabi_f2iz>
 80004f6:	bd10      	pop	{r4, pc}
 80004f8:	219e      	movs	r1, #158	; 0x9e
 80004fa:	1c20      	adds	r0, r4, #0
 80004fc:	05c9      	lsls	r1, r1, #23
 80004fe:	f000 fcbf 	bl	8000e80 <__aeabi_fsub>
 8000502:	f000 fe5d 	bl	80011c0 <__aeabi_f2iz>
 8000506:	2380      	movs	r3, #128	; 0x80
 8000508:	061b      	lsls	r3, r3, #24
 800050a:	469c      	mov	ip, r3
 800050c:	4460      	add	r0, ip
 800050e:	e7f2      	b.n	80004f6 <__aeabi_f2uiz+0x16>

08000510 <__aeabi_fadd>:
 8000510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000512:	4647      	mov	r7, r8
 8000514:	46ce      	mov	lr, r9
 8000516:	024a      	lsls	r2, r1, #9
 8000518:	0243      	lsls	r3, r0, #9
 800051a:	0045      	lsls	r5, r0, #1
 800051c:	0fc4      	lsrs	r4, r0, #31
 800051e:	0a50      	lsrs	r0, r2, #9
 8000520:	4680      	mov	r8, r0
 8000522:	0048      	lsls	r0, r1, #1
 8000524:	0a5b      	lsrs	r3, r3, #9
 8000526:	0e00      	lsrs	r0, r0, #24
 8000528:	0992      	lsrs	r2, r2, #6
 800052a:	4694      	mov	ip, r2
 800052c:	b580      	push	{r7, lr}
 800052e:	001e      	movs	r6, r3
 8000530:	4681      	mov	r9, r0
 8000532:	0002      	movs	r2, r0
 8000534:	0e2d      	lsrs	r5, r5, #24
 8000536:	00df      	lsls	r7, r3, #3
 8000538:	0fc9      	lsrs	r1, r1, #31
 800053a:	428c      	cmp	r4, r1
 800053c:	d024      	beq.n	8000588 <__aeabi_fadd+0x78>
 800053e:	1a28      	subs	r0, r5, r0
 8000540:	2800      	cmp	r0, #0
 8000542:	dd0e      	ble.n	8000562 <__aeabi_fadd+0x52>
 8000544:	2a00      	cmp	r2, #0
 8000546:	d13e      	bne.n	80005c6 <__aeabi_fadd+0xb6>
 8000548:	4662      	mov	r2, ip
 800054a:	2a00      	cmp	r2, #0
 800054c:	d100      	bne.n	8000550 <__aeabi_fadd+0x40>
 800054e:	e0fd      	b.n	800074c <__aeabi_fadd+0x23c>
 8000550:	1e42      	subs	r2, r0, #1
 8000552:	2801      	cmp	r0, #1
 8000554:	d100      	bne.n	8000558 <__aeabi_fadd+0x48>
 8000556:	e137      	b.n	80007c8 <__aeabi_fadd+0x2b8>
 8000558:	28ff      	cmp	r0, #255	; 0xff
 800055a:	d100      	bne.n	800055e <__aeabi_fadd+0x4e>
 800055c:	e0a9      	b.n	80006b2 <__aeabi_fadd+0x1a2>
 800055e:	0010      	movs	r0, r2
 8000560:	e039      	b.n	80005d6 <__aeabi_fadd+0xc6>
 8000562:	2800      	cmp	r0, #0
 8000564:	d063      	beq.n	800062e <__aeabi_fadd+0x11e>
 8000566:	464b      	mov	r3, r9
 8000568:	1b52      	subs	r2, r2, r5
 800056a:	2d00      	cmp	r5, #0
 800056c:	d000      	beq.n	8000570 <__aeabi_fadd+0x60>
 800056e:	e0e0      	b.n	8000732 <__aeabi_fadd+0x222>
 8000570:	2f00      	cmp	r7, #0
 8000572:	d100      	bne.n	8000576 <__aeabi_fadd+0x66>
 8000574:	e0ce      	b.n	8000714 <__aeabi_fadd+0x204>
 8000576:	1e53      	subs	r3, r2, #1
 8000578:	2a01      	cmp	r2, #1
 800057a:	d100      	bne.n	800057e <__aeabi_fadd+0x6e>
 800057c:	e155      	b.n	800082a <__aeabi_fadd+0x31a>
 800057e:	2aff      	cmp	r2, #255	; 0xff
 8000580:	d100      	bne.n	8000584 <__aeabi_fadd+0x74>
 8000582:	e094      	b.n	80006ae <__aeabi_fadd+0x19e>
 8000584:	001a      	movs	r2, r3
 8000586:	e0d9      	b.n	800073c <__aeabi_fadd+0x22c>
 8000588:	1a2a      	subs	r2, r5, r0
 800058a:	2a00      	cmp	r2, #0
 800058c:	dc00      	bgt.n	8000590 <__aeabi_fadd+0x80>
 800058e:	e099      	b.n	80006c4 <__aeabi_fadd+0x1b4>
 8000590:	2800      	cmp	r0, #0
 8000592:	d062      	beq.n	800065a <__aeabi_fadd+0x14a>
 8000594:	2dff      	cmp	r5, #255	; 0xff
 8000596:	d100      	bne.n	800059a <__aeabi_fadd+0x8a>
 8000598:	e08b      	b.n	80006b2 <__aeabi_fadd+0x1a2>
 800059a:	2380      	movs	r3, #128	; 0x80
 800059c:	4661      	mov	r1, ip
 800059e:	04db      	lsls	r3, r3, #19
 80005a0:	4319      	orrs	r1, r3
 80005a2:	468c      	mov	ip, r1
 80005a4:	2a1b      	cmp	r2, #27
 80005a6:	dc00      	bgt.n	80005aa <__aeabi_fadd+0x9a>
 80005a8:	e0d2      	b.n	8000750 <__aeabi_fadd+0x240>
 80005aa:	2301      	movs	r3, #1
 80005ac:	19db      	adds	r3, r3, r7
 80005ae:	015a      	lsls	r2, r3, #5
 80005b0:	d56a      	bpl.n	8000688 <__aeabi_fadd+0x178>
 80005b2:	3501      	adds	r5, #1
 80005b4:	2dff      	cmp	r5, #255	; 0xff
 80005b6:	d05b      	beq.n	8000670 <__aeabi_fadd+0x160>
 80005b8:	2201      	movs	r2, #1
 80005ba:	49a3      	ldr	r1, [pc, #652]	; (8000848 <__aeabi_fadd+0x338>)
 80005bc:	401a      	ands	r2, r3
 80005be:	085b      	lsrs	r3, r3, #1
 80005c0:	400b      	ands	r3, r1
 80005c2:	4313      	orrs	r3, r2
 80005c4:	e01c      	b.n	8000600 <__aeabi_fadd+0xf0>
 80005c6:	2dff      	cmp	r5, #255	; 0xff
 80005c8:	d100      	bne.n	80005cc <__aeabi_fadd+0xbc>
 80005ca:	e072      	b.n	80006b2 <__aeabi_fadd+0x1a2>
 80005cc:	2380      	movs	r3, #128	; 0x80
 80005ce:	4662      	mov	r2, ip
 80005d0:	04db      	lsls	r3, r3, #19
 80005d2:	431a      	orrs	r2, r3
 80005d4:	4694      	mov	ip, r2
 80005d6:	281b      	cmp	r0, #27
 80005d8:	dc00      	bgt.n	80005dc <__aeabi_fadd+0xcc>
 80005da:	e090      	b.n	80006fe <__aeabi_fadd+0x1ee>
 80005dc:	2301      	movs	r3, #1
 80005de:	1afb      	subs	r3, r7, r3
 80005e0:	015a      	lsls	r2, r3, #5
 80005e2:	d551      	bpl.n	8000688 <__aeabi_fadd+0x178>
 80005e4:	019b      	lsls	r3, r3, #6
 80005e6:	099e      	lsrs	r6, r3, #6
 80005e8:	0030      	movs	r0, r6
 80005ea:	f002 fa05 	bl	80029f8 <__clzsi2>
 80005ee:	0033      	movs	r3, r6
 80005f0:	3805      	subs	r0, #5
 80005f2:	4083      	lsls	r3, r0
 80005f4:	4285      	cmp	r5, r0
 80005f6:	dc00      	bgt.n	80005fa <__aeabi_fadd+0xea>
 80005f8:	e075      	b.n	80006e6 <__aeabi_fadd+0x1d6>
 80005fa:	4a94      	ldr	r2, [pc, #592]	; (800084c <__aeabi_fadd+0x33c>)
 80005fc:	1a2d      	subs	r5, r5, r0
 80005fe:	4013      	ands	r3, r2
 8000600:	075a      	lsls	r2, r3, #29
 8000602:	d004      	beq.n	800060e <__aeabi_fadd+0xfe>
 8000604:	220f      	movs	r2, #15
 8000606:	401a      	ands	r2, r3
 8000608:	2a04      	cmp	r2, #4
 800060a:	d000      	beq.n	800060e <__aeabi_fadd+0xfe>
 800060c:	3304      	adds	r3, #4
 800060e:	015a      	lsls	r2, r3, #5
 8000610:	d53c      	bpl.n	800068c <__aeabi_fadd+0x17c>
 8000612:	1c68      	adds	r0, r5, #1
 8000614:	2dfe      	cmp	r5, #254	; 0xfe
 8000616:	d02b      	beq.n	8000670 <__aeabi_fadd+0x160>
 8000618:	019b      	lsls	r3, r3, #6
 800061a:	0a5e      	lsrs	r6, r3, #9
 800061c:	b2c0      	uxtb	r0, r0
 800061e:	05c0      	lsls	r0, r0, #23
 8000620:	4330      	orrs	r0, r6
 8000622:	07e4      	lsls	r4, r4, #31
 8000624:	4320      	orrs	r0, r4
 8000626:	bcc0      	pop	{r6, r7}
 8000628:	46b9      	mov	r9, r7
 800062a:	46b0      	mov	r8, r6
 800062c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800062e:	20fe      	movs	r0, #254	; 0xfe
 8000630:	1c6a      	adds	r2, r5, #1
 8000632:	4210      	tst	r0, r2
 8000634:	d172      	bne.n	800071c <__aeabi_fadd+0x20c>
 8000636:	2d00      	cmp	r5, #0
 8000638:	d000      	beq.n	800063c <__aeabi_fadd+0x12c>
 800063a:	e0ae      	b.n	800079a <__aeabi_fadd+0x28a>
 800063c:	2f00      	cmp	r7, #0
 800063e:	d100      	bne.n	8000642 <__aeabi_fadd+0x132>
 8000640:	e0ec      	b.n	800081c <__aeabi_fadd+0x30c>
 8000642:	4663      	mov	r3, ip
 8000644:	2000      	movs	r0, #0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d0e9      	beq.n	800061e <__aeabi_fadd+0x10e>
 800064a:	1afb      	subs	r3, r7, r3
 800064c:	015a      	lsls	r2, r3, #5
 800064e:	d400      	bmi.n	8000652 <__aeabi_fadd+0x142>
 8000650:	e0f3      	b.n	800083a <__aeabi_fadd+0x32a>
 8000652:	4663      	mov	r3, ip
 8000654:	000c      	movs	r4, r1
 8000656:	1bdb      	subs	r3, r3, r7
 8000658:	e7d2      	b.n	8000600 <__aeabi_fadd+0xf0>
 800065a:	4661      	mov	r1, ip
 800065c:	2900      	cmp	r1, #0
 800065e:	d05b      	beq.n	8000718 <__aeabi_fadd+0x208>
 8000660:	1e51      	subs	r1, r2, #1
 8000662:	2a01      	cmp	r2, #1
 8000664:	d100      	bne.n	8000668 <__aeabi_fadd+0x158>
 8000666:	e0a7      	b.n	80007b8 <__aeabi_fadd+0x2a8>
 8000668:	2aff      	cmp	r2, #255	; 0xff
 800066a:	d022      	beq.n	80006b2 <__aeabi_fadd+0x1a2>
 800066c:	000a      	movs	r2, r1
 800066e:	e799      	b.n	80005a4 <__aeabi_fadd+0x94>
 8000670:	20ff      	movs	r0, #255	; 0xff
 8000672:	2600      	movs	r6, #0
 8000674:	e7d3      	b.n	800061e <__aeabi_fadd+0x10e>
 8000676:	21fe      	movs	r1, #254	; 0xfe
 8000678:	1c6a      	adds	r2, r5, #1
 800067a:	4211      	tst	r1, r2
 800067c:	d073      	beq.n	8000766 <__aeabi_fadd+0x256>
 800067e:	2aff      	cmp	r2, #255	; 0xff
 8000680:	d0f6      	beq.n	8000670 <__aeabi_fadd+0x160>
 8000682:	0015      	movs	r5, r2
 8000684:	4467      	add	r7, ip
 8000686:	087b      	lsrs	r3, r7, #1
 8000688:	075a      	lsls	r2, r3, #29
 800068a:	d1bb      	bne.n	8000604 <__aeabi_fadd+0xf4>
 800068c:	08db      	lsrs	r3, r3, #3
 800068e:	2dff      	cmp	r5, #255	; 0xff
 8000690:	d00f      	beq.n	80006b2 <__aeabi_fadd+0x1a2>
 8000692:	025b      	lsls	r3, r3, #9
 8000694:	0a5e      	lsrs	r6, r3, #9
 8000696:	b2e8      	uxtb	r0, r5
 8000698:	e7c1      	b.n	800061e <__aeabi_fadd+0x10e>
 800069a:	4662      	mov	r2, ip
 800069c:	2a00      	cmp	r2, #0
 800069e:	d008      	beq.n	80006b2 <__aeabi_fadd+0x1a2>
 80006a0:	2280      	movs	r2, #128	; 0x80
 80006a2:	03d2      	lsls	r2, r2, #15
 80006a4:	4213      	tst	r3, r2
 80006a6:	d004      	beq.n	80006b2 <__aeabi_fadd+0x1a2>
 80006a8:	4640      	mov	r0, r8
 80006aa:	4210      	tst	r0, r2
 80006ac:	d101      	bne.n	80006b2 <__aeabi_fadd+0x1a2>
 80006ae:	000c      	movs	r4, r1
 80006b0:	4643      	mov	r3, r8
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d0dc      	beq.n	8000670 <__aeabi_fadd+0x160>
 80006b6:	2680      	movs	r6, #128	; 0x80
 80006b8:	03f6      	lsls	r6, r6, #15
 80006ba:	431e      	orrs	r6, r3
 80006bc:	0276      	lsls	r6, r6, #9
 80006be:	20ff      	movs	r0, #255	; 0xff
 80006c0:	0a76      	lsrs	r6, r6, #9
 80006c2:	e7ac      	b.n	800061e <__aeabi_fadd+0x10e>
 80006c4:	2a00      	cmp	r2, #0
 80006c6:	d0d6      	beq.n	8000676 <__aeabi_fadd+0x166>
 80006c8:	1b42      	subs	r2, r0, r5
 80006ca:	2d00      	cmp	r5, #0
 80006cc:	d05c      	beq.n	8000788 <__aeabi_fadd+0x278>
 80006ce:	28ff      	cmp	r0, #255	; 0xff
 80006d0:	d0ee      	beq.n	80006b0 <__aeabi_fadd+0x1a0>
 80006d2:	2380      	movs	r3, #128	; 0x80
 80006d4:	04db      	lsls	r3, r3, #19
 80006d6:	431f      	orrs	r7, r3
 80006d8:	2a1b      	cmp	r2, #27
 80006da:	dc00      	bgt.n	80006de <__aeabi_fadd+0x1ce>
 80006dc:	e082      	b.n	80007e4 <__aeabi_fadd+0x2d4>
 80006de:	2301      	movs	r3, #1
 80006e0:	464d      	mov	r5, r9
 80006e2:	4463      	add	r3, ip
 80006e4:	e763      	b.n	80005ae <__aeabi_fadd+0x9e>
 80006e6:	2220      	movs	r2, #32
 80006e8:	1b40      	subs	r0, r0, r5
 80006ea:	3001      	adds	r0, #1
 80006ec:	1a12      	subs	r2, r2, r0
 80006ee:	0019      	movs	r1, r3
 80006f0:	4093      	lsls	r3, r2
 80006f2:	40c1      	lsrs	r1, r0
 80006f4:	1e5a      	subs	r2, r3, #1
 80006f6:	4193      	sbcs	r3, r2
 80006f8:	2500      	movs	r5, #0
 80006fa:	430b      	orrs	r3, r1
 80006fc:	e780      	b.n	8000600 <__aeabi_fadd+0xf0>
 80006fe:	2320      	movs	r3, #32
 8000700:	4661      	mov	r1, ip
 8000702:	1a1b      	subs	r3, r3, r0
 8000704:	4099      	lsls	r1, r3
 8000706:	4662      	mov	r2, ip
 8000708:	000b      	movs	r3, r1
 800070a:	40c2      	lsrs	r2, r0
 800070c:	1e59      	subs	r1, r3, #1
 800070e:	418b      	sbcs	r3, r1
 8000710:	4313      	orrs	r3, r2
 8000712:	e764      	b.n	80005de <__aeabi_fadd+0xce>
 8000714:	000c      	movs	r4, r1
 8000716:	4643      	mov	r3, r8
 8000718:	0015      	movs	r5, r2
 800071a:	e7b8      	b.n	800068e <__aeabi_fadd+0x17e>
 800071c:	4663      	mov	r3, ip
 800071e:	1afe      	subs	r6, r7, r3
 8000720:	0173      	lsls	r3, r6, #5
 8000722:	d445      	bmi.n	80007b0 <__aeabi_fadd+0x2a0>
 8000724:	2e00      	cmp	r6, #0
 8000726:	d000      	beq.n	800072a <__aeabi_fadd+0x21a>
 8000728:	e75e      	b.n	80005e8 <__aeabi_fadd+0xd8>
 800072a:	2400      	movs	r4, #0
 800072c:	2000      	movs	r0, #0
 800072e:	2600      	movs	r6, #0
 8000730:	e775      	b.n	800061e <__aeabi_fadd+0x10e>
 8000732:	2bff      	cmp	r3, #255	; 0xff
 8000734:	d0bb      	beq.n	80006ae <__aeabi_fadd+0x19e>
 8000736:	2380      	movs	r3, #128	; 0x80
 8000738:	04db      	lsls	r3, r3, #19
 800073a:	431f      	orrs	r7, r3
 800073c:	2a1b      	cmp	r2, #27
 800073e:	dd47      	ble.n	80007d0 <__aeabi_fadd+0x2c0>
 8000740:	2301      	movs	r3, #1
 8000742:	4662      	mov	r2, ip
 8000744:	000c      	movs	r4, r1
 8000746:	464d      	mov	r5, r9
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	e749      	b.n	80005e0 <__aeabi_fadd+0xd0>
 800074c:	0005      	movs	r5, r0
 800074e:	e79e      	b.n	800068e <__aeabi_fadd+0x17e>
 8000750:	4661      	mov	r1, ip
 8000752:	2320      	movs	r3, #32
 8000754:	40d1      	lsrs	r1, r2
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	4662      	mov	r2, ip
 800075a:	409a      	lsls	r2, r3
 800075c:	0013      	movs	r3, r2
 800075e:	1e5a      	subs	r2, r3, #1
 8000760:	4193      	sbcs	r3, r2
 8000762:	430b      	orrs	r3, r1
 8000764:	e722      	b.n	80005ac <__aeabi_fadd+0x9c>
 8000766:	2d00      	cmp	r5, #0
 8000768:	d146      	bne.n	80007f8 <__aeabi_fadd+0x2e8>
 800076a:	2f00      	cmp	r7, #0
 800076c:	d062      	beq.n	8000834 <__aeabi_fadd+0x324>
 800076e:	4663      	mov	r3, ip
 8000770:	2000      	movs	r0, #0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d100      	bne.n	8000778 <__aeabi_fadd+0x268>
 8000776:	e752      	b.n	800061e <__aeabi_fadd+0x10e>
 8000778:	003b      	movs	r3, r7
 800077a:	4463      	add	r3, ip
 800077c:	015a      	lsls	r2, r3, #5
 800077e:	d583      	bpl.n	8000688 <__aeabi_fadd+0x178>
 8000780:	4a32      	ldr	r2, [pc, #200]	; (800084c <__aeabi_fadd+0x33c>)
 8000782:	3501      	adds	r5, #1
 8000784:	4013      	ands	r3, r2
 8000786:	e77f      	b.n	8000688 <__aeabi_fadd+0x178>
 8000788:	2f00      	cmp	r7, #0
 800078a:	d0c4      	beq.n	8000716 <__aeabi_fadd+0x206>
 800078c:	1e53      	subs	r3, r2, #1
 800078e:	2a01      	cmp	r2, #1
 8000790:	d012      	beq.n	80007b8 <__aeabi_fadd+0x2a8>
 8000792:	2aff      	cmp	r2, #255	; 0xff
 8000794:	d08c      	beq.n	80006b0 <__aeabi_fadd+0x1a0>
 8000796:	001a      	movs	r2, r3
 8000798:	e79e      	b.n	80006d8 <__aeabi_fadd+0x1c8>
 800079a:	2f00      	cmp	r7, #0
 800079c:	d000      	beq.n	80007a0 <__aeabi_fadd+0x290>
 800079e:	e77c      	b.n	800069a <__aeabi_fadd+0x18a>
 80007a0:	4663      	mov	r3, ip
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d183      	bne.n	80006ae <__aeabi_fadd+0x19e>
 80007a6:	2680      	movs	r6, #128	; 0x80
 80007a8:	2400      	movs	r4, #0
 80007aa:	20ff      	movs	r0, #255	; 0xff
 80007ac:	03f6      	lsls	r6, r6, #15
 80007ae:	e736      	b.n	800061e <__aeabi_fadd+0x10e>
 80007b0:	4663      	mov	r3, ip
 80007b2:	000c      	movs	r4, r1
 80007b4:	1bde      	subs	r6, r3, r7
 80007b6:	e717      	b.n	80005e8 <__aeabi_fadd+0xd8>
 80007b8:	003b      	movs	r3, r7
 80007ba:	4463      	add	r3, ip
 80007bc:	2501      	movs	r5, #1
 80007be:	015a      	lsls	r2, r3, #5
 80007c0:	d400      	bmi.n	80007c4 <__aeabi_fadd+0x2b4>
 80007c2:	e761      	b.n	8000688 <__aeabi_fadd+0x178>
 80007c4:	2502      	movs	r5, #2
 80007c6:	e6f7      	b.n	80005b8 <__aeabi_fadd+0xa8>
 80007c8:	4663      	mov	r3, ip
 80007ca:	2501      	movs	r5, #1
 80007cc:	1afb      	subs	r3, r7, r3
 80007ce:	e707      	b.n	80005e0 <__aeabi_fadd+0xd0>
 80007d0:	2320      	movs	r3, #32
 80007d2:	1a9b      	subs	r3, r3, r2
 80007d4:	0038      	movs	r0, r7
 80007d6:	409f      	lsls	r7, r3
 80007d8:	003b      	movs	r3, r7
 80007da:	40d0      	lsrs	r0, r2
 80007dc:	1e5a      	subs	r2, r3, #1
 80007de:	4193      	sbcs	r3, r2
 80007e0:	4303      	orrs	r3, r0
 80007e2:	e7ae      	b.n	8000742 <__aeabi_fadd+0x232>
 80007e4:	2320      	movs	r3, #32
 80007e6:	1a9b      	subs	r3, r3, r2
 80007e8:	0039      	movs	r1, r7
 80007ea:	409f      	lsls	r7, r3
 80007ec:	003b      	movs	r3, r7
 80007ee:	40d1      	lsrs	r1, r2
 80007f0:	1e5a      	subs	r2, r3, #1
 80007f2:	4193      	sbcs	r3, r2
 80007f4:	430b      	orrs	r3, r1
 80007f6:	e773      	b.n	80006e0 <__aeabi_fadd+0x1d0>
 80007f8:	2f00      	cmp	r7, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_fadd+0x2ee>
 80007fc:	e758      	b.n	80006b0 <__aeabi_fadd+0x1a0>
 80007fe:	4662      	mov	r2, ip
 8000800:	2a00      	cmp	r2, #0
 8000802:	d100      	bne.n	8000806 <__aeabi_fadd+0x2f6>
 8000804:	e755      	b.n	80006b2 <__aeabi_fadd+0x1a2>
 8000806:	2280      	movs	r2, #128	; 0x80
 8000808:	03d2      	lsls	r2, r2, #15
 800080a:	4213      	tst	r3, r2
 800080c:	d100      	bne.n	8000810 <__aeabi_fadd+0x300>
 800080e:	e750      	b.n	80006b2 <__aeabi_fadd+0x1a2>
 8000810:	4641      	mov	r1, r8
 8000812:	4211      	tst	r1, r2
 8000814:	d000      	beq.n	8000818 <__aeabi_fadd+0x308>
 8000816:	e74c      	b.n	80006b2 <__aeabi_fadd+0x1a2>
 8000818:	4643      	mov	r3, r8
 800081a:	e74a      	b.n	80006b2 <__aeabi_fadd+0x1a2>
 800081c:	4663      	mov	r3, ip
 800081e:	2b00      	cmp	r3, #0
 8000820:	d083      	beq.n	800072a <__aeabi_fadd+0x21a>
 8000822:	000c      	movs	r4, r1
 8000824:	4646      	mov	r6, r8
 8000826:	2000      	movs	r0, #0
 8000828:	e6f9      	b.n	800061e <__aeabi_fadd+0x10e>
 800082a:	4663      	mov	r3, ip
 800082c:	000c      	movs	r4, r1
 800082e:	1bdb      	subs	r3, r3, r7
 8000830:	3501      	adds	r5, #1
 8000832:	e6d5      	b.n	80005e0 <__aeabi_fadd+0xd0>
 8000834:	4646      	mov	r6, r8
 8000836:	2000      	movs	r0, #0
 8000838:	e6f1      	b.n	800061e <__aeabi_fadd+0x10e>
 800083a:	2b00      	cmp	r3, #0
 800083c:	d000      	beq.n	8000840 <__aeabi_fadd+0x330>
 800083e:	e723      	b.n	8000688 <__aeabi_fadd+0x178>
 8000840:	2400      	movs	r4, #0
 8000842:	2600      	movs	r6, #0
 8000844:	e6eb      	b.n	800061e <__aeabi_fadd+0x10e>
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	7dffffff 	.word	0x7dffffff
 800084c:	fbffffff 	.word	0xfbffffff

08000850 <__aeabi_fdiv>:
 8000850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000852:	464f      	mov	r7, r9
 8000854:	4646      	mov	r6, r8
 8000856:	46d6      	mov	lr, sl
 8000858:	0245      	lsls	r5, r0, #9
 800085a:	b5c0      	push	{r6, r7, lr}
 800085c:	0047      	lsls	r7, r0, #1
 800085e:	1c0c      	adds	r4, r1, #0
 8000860:	0a6d      	lsrs	r5, r5, #9
 8000862:	0e3f      	lsrs	r7, r7, #24
 8000864:	0fc6      	lsrs	r6, r0, #31
 8000866:	2f00      	cmp	r7, #0
 8000868:	d100      	bne.n	800086c <__aeabi_fdiv+0x1c>
 800086a:	e06f      	b.n	800094c <__aeabi_fdiv+0xfc>
 800086c:	2fff      	cmp	r7, #255	; 0xff
 800086e:	d100      	bne.n	8000872 <__aeabi_fdiv+0x22>
 8000870:	e074      	b.n	800095c <__aeabi_fdiv+0x10c>
 8000872:	2300      	movs	r3, #0
 8000874:	2280      	movs	r2, #128	; 0x80
 8000876:	4699      	mov	r9, r3
 8000878:	469a      	mov	sl, r3
 800087a:	00ed      	lsls	r5, r5, #3
 800087c:	04d2      	lsls	r2, r2, #19
 800087e:	4315      	orrs	r5, r2
 8000880:	3f7f      	subs	r7, #127	; 0x7f
 8000882:	0263      	lsls	r3, r4, #9
 8000884:	0a5b      	lsrs	r3, r3, #9
 8000886:	4698      	mov	r8, r3
 8000888:	0063      	lsls	r3, r4, #1
 800088a:	0e1b      	lsrs	r3, r3, #24
 800088c:	0fe4      	lsrs	r4, r4, #31
 800088e:	2b00      	cmp	r3, #0
 8000890:	d04d      	beq.n	800092e <__aeabi_fdiv+0xde>
 8000892:	2bff      	cmp	r3, #255	; 0xff
 8000894:	d045      	beq.n	8000922 <__aeabi_fdiv+0xd2>
 8000896:	4642      	mov	r2, r8
 8000898:	2180      	movs	r1, #128	; 0x80
 800089a:	00d2      	lsls	r2, r2, #3
 800089c:	04c9      	lsls	r1, r1, #19
 800089e:	4311      	orrs	r1, r2
 80008a0:	4688      	mov	r8, r1
 80008a2:	2200      	movs	r2, #0
 80008a4:	3b7f      	subs	r3, #127	; 0x7f
 80008a6:	0031      	movs	r1, r6
 80008a8:	1aff      	subs	r7, r7, r3
 80008aa:	464b      	mov	r3, r9
 80008ac:	4061      	eors	r1, r4
 80008ae:	b2c9      	uxtb	r1, r1
 80008b0:	2b0f      	cmp	r3, #15
 80008b2:	d900      	bls.n	80008b6 <__aeabi_fdiv+0x66>
 80008b4:	e0b8      	b.n	8000a28 <__aeabi_fdiv+0x1d8>
 80008b6:	4870      	ldr	r0, [pc, #448]	; (8000a78 <__aeabi_fdiv+0x228>)
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	58c3      	ldr	r3, [r0, r3]
 80008bc:	469f      	mov	pc, r3
 80008be:	2300      	movs	r3, #0
 80008c0:	4698      	mov	r8, r3
 80008c2:	0026      	movs	r6, r4
 80008c4:	4645      	mov	r5, r8
 80008c6:	4692      	mov	sl, r2
 80008c8:	4653      	mov	r3, sl
 80008ca:	2b02      	cmp	r3, #2
 80008cc:	d100      	bne.n	80008d0 <__aeabi_fdiv+0x80>
 80008ce:	e08d      	b.n	80009ec <__aeabi_fdiv+0x19c>
 80008d0:	2b03      	cmp	r3, #3
 80008d2:	d100      	bne.n	80008d6 <__aeabi_fdiv+0x86>
 80008d4:	e0a1      	b.n	8000a1a <__aeabi_fdiv+0x1ca>
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d018      	beq.n	800090c <__aeabi_fdiv+0xbc>
 80008da:	003b      	movs	r3, r7
 80008dc:	337f      	adds	r3, #127	; 0x7f
 80008de:	2b00      	cmp	r3, #0
 80008e0:	dd6d      	ble.n	80009be <__aeabi_fdiv+0x16e>
 80008e2:	076a      	lsls	r2, r5, #29
 80008e4:	d004      	beq.n	80008f0 <__aeabi_fdiv+0xa0>
 80008e6:	220f      	movs	r2, #15
 80008e8:	402a      	ands	r2, r5
 80008ea:	2a04      	cmp	r2, #4
 80008ec:	d000      	beq.n	80008f0 <__aeabi_fdiv+0xa0>
 80008ee:	3504      	adds	r5, #4
 80008f0:	012a      	lsls	r2, r5, #4
 80008f2:	d503      	bpl.n	80008fc <__aeabi_fdiv+0xac>
 80008f4:	4b61      	ldr	r3, [pc, #388]	; (8000a7c <__aeabi_fdiv+0x22c>)
 80008f6:	401d      	ands	r5, r3
 80008f8:	003b      	movs	r3, r7
 80008fa:	3380      	adds	r3, #128	; 0x80
 80008fc:	2bfe      	cmp	r3, #254	; 0xfe
 80008fe:	dd00      	ble.n	8000902 <__aeabi_fdiv+0xb2>
 8000900:	e074      	b.n	80009ec <__aeabi_fdiv+0x19c>
 8000902:	01aa      	lsls	r2, r5, #6
 8000904:	0a52      	lsrs	r2, r2, #9
 8000906:	b2d8      	uxtb	r0, r3
 8000908:	e002      	b.n	8000910 <__aeabi_fdiv+0xc0>
 800090a:	000e      	movs	r6, r1
 800090c:	2000      	movs	r0, #0
 800090e:	2200      	movs	r2, #0
 8000910:	05c0      	lsls	r0, r0, #23
 8000912:	07f6      	lsls	r6, r6, #31
 8000914:	4310      	orrs	r0, r2
 8000916:	4330      	orrs	r0, r6
 8000918:	bce0      	pop	{r5, r6, r7}
 800091a:	46ba      	mov	sl, r7
 800091c:	46b1      	mov	r9, r6
 800091e:	46a8      	mov	r8, r5
 8000920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000922:	4643      	mov	r3, r8
 8000924:	2b00      	cmp	r3, #0
 8000926:	d13f      	bne.n	80009a8 <__aeabi_fdiv+0x158>
 8000928:	2202      	movs	r2, #2
 800092a:	3fff      	subs	r7, #255	; 0xff
 800092c:	e003      	b.n	8000936 <__aeabi_fdiv+0xe6>
 800092e:	4643      	mov	r3, r8
 8000930:	2b00      	cmp	r3, #0
 8000932:	d12d      	bne.n	8000990 <__aeabi_fdiv+0x140>
 8000934:	2201      	movs	r2, #1
 8000936:	0031      	movs	r1, r6
 8000938:	464b      	mov	r3, r9
 800093a:	4061      	eors	r1, r4
 800093c:	b2c9      	uxtb	r1, r1
 800093e:	4313      	orrs	r3, r2
 8000940:	2b0f      	cmp	r3, #15
 8000942:	d838      	bhi.n	80009b6 <__aeabi_fdiv+0x166>
 8000944:	484e      	ldr	r0, [pc, #312]	; (8000a80 <__aeabi_fdiv+0x230>)
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	58c3      	ldr	r3, [r0, r3]
 800094a:	469f      	mov	pc, r3
 800094c:	2d00      	cmp	r5, #0
 800094e:	d113      	bne.n	8000978 <__aeabi_fdiv+0x128>
 8000950:	2304      	movs	r3, #4
 8000952:	4699      	mov	r9, r3
 8000954:	3b03      	subs	r3, #3
 8000956:	2700      	movs	r7, #0
 8000958:	469a      	mov	sl, r3
 800095a:	e792      	b.n	8000882 <__aeabi_fdiv+0x32>
 800095c:	2d00      	cmp	r5, #0
 800095e:	d105      	bne.n	800096c <__aeabi_fdiv+0x11c>
 8000960:	2308      	movs	r3, #8
 8000962:	4699      	mov	r9, r3
 8000964:	3b06      	subs	r3, #6
 8000966:	27ff      	movs	r7, #255	; 0xff
 8000968:	469a      	mov	sl, r3
 800096a:	e78a      	b.n	8000882 <__aeabi_fdiv+0x32>
 800096c:	230c      	movs	r3, #12
 800096e:	4699      	mov	r9, r3
 8000970:	3b09      	subs	r3, #9
 8000972:	27ff      	movs	r7, #255	; 0xff
 8000974:	469a      	mov	sl, r3
 8000976:	e784      	b.n	8000882 <__aeabi_fdiv+0x32>
 8000978:	0028      	movs	r0, r5
 800097a:	f002 f83d 	bl	80029f8 <__clzsi2>
 800097e:	2776      	movs	r7, #118	; 0x76
 8000980:	1f43      	subs	r3, r0, #5
 8000982:	409d      	lsls	r5, r3
 8000984:	2300      	movs	r3, #0
 8000986:	427f      	negs	r7, r7
 8000988:	4699      	mov	r9, r3
 800098a:	469a      	mov	sl, r3
 800098c:	1a3f      	subs	r7, r7, r0
 800098e:	e778      	b.n	8000882 <__aeabi_fdiv+0x32>
 8000990:	4640      	mov	r0, r8
 8000992:	f002 f831 	bl	80029f8 <__clzsi2>
 8000996:	4642      	mov	r2, r8
 8000998:	1f43      	subs	r3, r0, #5
 800099a:	409a      	lsls	r2, r3
 800099c:	2376      	movs	r3, #118	; 0x76
 800099e:	425b      	negs	r3, r3
 80009a0:	4690      	mov	r8, r2
 80009a2:	1a1b      	subs	r3, r3, r0
 80009a4:	2200      	movs	r2, #0
 80009a6:	e77e      	b.n	80008a6 <__aeabi_fdiv+0x56>
 80009a8:	2303      	movs	r3, #3
 80009aa:	464a      	mov	r2, r9
 80009ac:	431a      	orrs	r2, r3
 80009ae:	4691      	mov	r9, r2
 80009b0:	33fc      	adds	r3, #252	; 0xfc
 80009b2:	2203      	movs	r2, #3
 80009b4:	e777      	b.n	80008a6 <__aeabi_fdiv+0x56>
 80009b6:	000e      	movs	r6, r1
 80009b8:	20ff      	movs	r0, #255	; 0xff
 80009ba:	2200      	movs	r2, #0
 80009bc:	e7a8      	b.n	8000910 <__aeabi_fdiv+0xc0>
 80009be:	2201      	movs	r2, #1
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	2b1b      	cmp	r3, #27
 80009c4:	dca2      	bgt.n	800090c <__aeabi_fdiv+0xbc>
 80009c6:	379e      	adds	r7, #158	; 0x9e
 80009c8:	002a      	movs	r2, r5
 80009ca:	40bd      	lsls	r5, r7
 80009cc:	40da      	lsrs	r2, r3
 80009ce:	1e6b      	subs	r3, r5, #1
 80009d0:	419d      	sbcs	r5, r3
 80009d2:	4315      	orrs	r5, r2
 80009d4:	076a      	lsls	r2, r5, #29
 80009d6:	d004      	beq.n	80009e2 <__aeabi_fdiv+0x192>
 80009d8:	220f      	movs	r2, #15
 80009da:	402a      	ands	r2, r5
 80009dc:	2a04      	cmp	r2, #4
 80009de:	d000      	beq.n	80009e2 <__aeabi_fdiv+0x192>
 80009e0:	3504      	adds	r5, #4
 80009e2:	016a      	lsls	r2, r5, #5
 80009e4:	d544      	bpl.n	8000a70 <__aeabi_fdiv+0x220>
 80009e6:	2001      	movs	r0, #1
 80009e8:	2200      	movs	r2, #0
 80009ea:	e791      	b.n	8000910 <__aeabi_fdiv+0xc0>
 80009ec:	20ff      	movs	r0, #255	; 0xff
 80009ee:	2200      	movs	r2, #0
 80009f0:	e78e      	b.n	8000910 <__aeabi_fdiv+0xc0>
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	2600      	movs	r6, #0
 80009f6:	20ff      	movs	r0, #255	; 0xff
 80009f8:	03d2      	lsls	r2, r2, #15
 80009fa:	e789      	b.n	8000910 <__aeabi_fdiv+0xc0>
 80009fc:	2300      	movs	r3, #0
 80009fe:	4698      	mov	r8, r3
 8000a00:	2280      	movs	r2, #128	; 0x80
 8000a02:	03d2      	lsls	r2, r2, #15
 8000a04:	4215      	tst	r5, r2
 8000a06:	d008      	beq.n	8000a1a <__aeabi_fdiv+0x1ca>
 8000a08:	4643      	mov	r3, r8
 8000a0a:	4213      	tst	r3, r2
 8000a0c:	d105      	bne.n	8000a1a <__aeabi_fdiv+0x1ca>
 8000a0e:	431a      	orrs	r2, r3
 8000a10:	0252      	lsls	r2, r2, #9
 8000a12:	0026      	movs	r6, r4
 8000a14:	20ff      	movs	r0, #255	; 0xff
 8000a16:	0a52      	lsrs	r2, r2, #9
 8000a18:	e77a      	b.n	8000910 <__aeabi_fdiv+0xc0>
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	03d2      	lsls	r2, r2, #15
 8000a1e:	432a      	orrs	r2, r5
 8000a20:	0252      	lsls	r2, r2, #9
 8000a22:	20ff      	movs	r0, #255	; 0xff
 8000a24:	0a52      	lsrs	r2, r2, #9
 8000a26:	e773      	b.n	8000910 <__aeabi_fdiv+0xc0>
 8000a28:	4642      	mov	r2, r8
 8000a2a:	016b      	lsls	r3, r5, #5
 8000a2c:	0155      	lsls	r5, r2, #5
 8000a2e:	42ab      	cmp	r3, r5
 8000a30:	d21a      	bcs.n	8000a68 <__aeabi_fdiv+0x218>
 8000a32:	201b      	movs	r0, #27
 8000a34:	2200      	movs	r2, #0
 8000a36:	3f01      	subs	r7, #1
 8000a38:	2601      	movs	r6, #1
 8000a3a:	001c      	movs	r4, r3
 8000a3c:	0052      	lsls	r2, r2, #1
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	2c00      	cmp	r4, #0
 8000a42:	db01      	blt.n	8000a48 <__aeabi_fdiv+0x1f8>
 8000a44:	429d      	cmp	r5, r3
 8000a46:	d801      	bhi.n	8000a4c <__aeabi_fdiv+0x1fc>
 8000a48:	1b5b      	subs	r3, r3, r5
 8000a4a:	4332      	orrs	r2, r6
 8000a4c:	3801      	subs	r0, #1
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	d1f3      	bne.n	8000a3a <__aeabi_fdiv+0x1ea>
 8000a52:	1e58      	subs	r0, r3, #1
 8000a54:	4183      	sbcs	r3, r0
 8000a56:	4313      	orrs	r3, r2
 8000a58:	001d      	movs	r5, r3
 8000a5a:	003b      	movs	r3, r7
 8000a5c:	337f      	adds	r3, #127	; 0x7f
 8000a5e:	000e      	movs	r6, r1
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	dd00      	ble.n	8000a66 <__aeabi_fdiv+0x216>
 8000a64:	e73d      	b.n	80008e2 <__aeabi_fdiv+0x92>
 8000a66:	e7aa      	b.n	80009be <__aeabi_fdiv+0x16e>
 8000a68:	201a      	movs	r0, #26
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	1b5b      	subs	r3, r3, r5
 8000a6e:	e7e3      	b.n	8000a38 <__aeabi_fdiv+0x1e8>
 8000a70:	01aa      	lsls	r2, r5, #6
 8000a72:	2000      	movs	r0, #0
 8000a74:	0a52      	lsrs	r2, r2, #9
 8000a76:	e74b      	b.n	8000910 <__aeabi_fdiv+0xc0>
 8000a78:	08004b14 	.word	0x08004b14
 8000a7c:	f7ffffff 	.word	0xf7ffffff
 8000a80:	08004b54 	.word	0x08004b54

08000a84 <__eqsf2>:
 8000a84:	b570      	push	{r4, r5, r6, lr}
 8000a86:	0042      	lsls	r2, r0, #1
 8000a88:	0245      	lsls	r5, r0, #9
 8000a8a:	024e      	lsls	r6, r1, #9
 8000a8c:	004c      	lsls	r4, r1, #1
 8000a8e:	0fc3      	lsrs	r3, r0, #31
 8000a90:	0a6d      	lsrs	r5, r5, #9
 8000a92:	2001      	movs	r0, #1
 8000a94:	0e12      	lsrs	r2, r2, #24
 8000a96:	0a76      	lsrs	r6, r6, #9
 8000a98:	0e24      	lsrs	r4, r4, #24
 8000a9a:	0fc9      	lsrs	r1, r1, #31
 8000a9c:	2aff      	cmp	r2, #255	; 0xff
 8000a9e:	d006      	beq.n	8000aae <__eqsf2+0x2a>
 8000aa0:	2cff      	cmp	r4, #255	; 0xff
 8000aa2:	d003      	beq.n	8000aac <__eqsf2+0x28>
 8000aa4:	42a2      	cmp	r2, r4
 8000aa6:	d101      	bne.n	8000aac <__eqsf2+0x28>
 8000aa8:	42b5      	cmp	r5, r6
 8000aaa:	d006      	beq.n	8000aba <__eqsf2+0x36>
 8000aac:	bd70      	pop	{r4, r5, r6, pc}
 8000aae:	2d00      	cmp	r5, #0
 8000ab0:	d1fc      	bne.n	8000aac <__eqsf2+0x28>
 8000ab2:	2cff      	cmp	r4, #255	; 0xff
 8000ab4:	d1fa      	bne.n	8000aac <__eqsf2+0x28>
 8000ab6:	2e00      	cmp	r6, #0
 8000ab8:	d1f8      	bne.n	8000aac <__eqsf2+0x28>
 8000aba:	428b      	cmp	r3, r1
 8000abc:	d006      	beq.n	8000acc <__eqsf2+0x48>
 8000abe:	2001      	movs	r0, #1
 8000ac0:	2a00      	cmp	r2, #0
 8000ac2:	d1f3      	bne.n	8000aac <__eqsf2+0x28>
 8000ac4:	0028      	movs	r0, r5
 8000ac6:	1e43      	subs	r3, r0, #1
 8000ac8:	4198      	sbcs	r0, r3
 8000aca:	e7ef      	b.n	8000aac <__eqsf2+0x28>
 8000acc:	2000      	movs	r0, #0
 8000ace:	e7ed      	b.n	8000aac <__eqsf2+0x28>

08000ad0 <__gesf2>:
 8000ad0:	b570      	push	{r4, r5, r6, lr}
 8000ad2:	0042      	lsls	r2, r0, #1
 8000ad4:	0245      	lsls	r5, r0, #9
 8000ad6:	024e      	lsls	r6, r1, #9
 8000ad8:	004c      	lsls	r4, r1, #1
 8000ada:	0fc3      	lsrs	r3, r0, #31
 8000adc:	0a6d      	lsrs	r5, r5, #9
 8000ade:	0e12      	lsrs	r2, r2, #24
 8000ae0:	0a76      	lsrs	r6, r6, #9
 8000ae2:	0e24      	lsrs	r4, r4, #24
 8000ae4:	0fc8      	lsrs	r0, r1, #31
 8000ae6:	2aff      	cmp	r2, #255	; 0xff
 8000ae8:	d01b      	beq.n	8000b22 <__gesf2+0x52>
 8000aea:	2cff      	cmp	r4, #255	; 0xff
 8000aec:	d00e      	beq.n	8000b0c <__gesf2+0x3c>
 8000aee:	2a00      	cmp	r2, #0
 8000af0:	d11b      	bne.n	8000b2a <__gesf2+0x5a>
 8000af2:	2c00      	cmp	r4, #0
 8000af4:	d101      	bne.n	8000afa <__gesf2+0x2a>
 8000af6:	2e00      	cmp	r6, #0
 8000af8:	d01c      	beq.n	8000b34 <__gesf2+0x64>
 8000afa:	2d00      	cmp	r5, #0
 8000afc:	d00c      	beq.n	8000b18 <__gesf2+0x48>
 8000afe:	4283      	cmp	r3, r0
 8000b00:	d01c      	beq.n	8000b3c <__gesf2+0x6c>
 8000b02:	2102      	movs	r1, #2
 8000b04:	1e58      	subs	r0, r3, #1
 8000b06:	4008      	ands	r0, r1
 8000b08:	3801      	subs	r0, #1
 8000b0a:	bd70      	pop	{r4, r5, r6, pc}
 8000b0c:	2e00      	cmp	r6, #0
 8000b0e:	d122      	bne.n	8000b56 <__gesf2+0x86>
 8000b10:	2a00      	cmp	r2, #0
 8000b12:	d1f4      	bne.n	8000afe <__gesf2+0x2e>
 8000b14:	2d00      	cmp	r5, #0
 8000b16:	d1f2      	bne.n	8000afe <__gesf2+0x2e>
 8000b18:	2800      	cmp	r0, #0
 8000b1a:	d1f6      	bne.n	8000b0a <__gesf2+0x3a>
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	4240      	negs	r0, r0
 8000b20:	e7f3      	b.n	8000b0a <__gesf2+0x3a>
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d117      	bne.n	8000b56 <__gesf2+0x86>
 8000b26:	2cff      	cmp	r4, #255	; 0xff
 8000b28:	d0f0      	beq.n	8000b0c <__gesf2+0x3c>
 8000b2a:	2c00      	cmp	r4, #0
 8000b2c:	d1e7      	bne.n	8000afe <__gesf2+0x2e>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d1e5      	bne.n	8000afe <__gesf2+0x2e>
 8000b32:	e7e6      	b.n	8000b02 <__gesf2+0x32>
 8000b34:	2000      	movs	r0, #0
 8000b36:	2d00      	cmp	r5, #0
 8000b38:	d0e7      	beq.n	8000b0a <__gesf2+0x3a>
 8000b3a:	e7e2      	b.n	8000b02 <__gesf2+0x32>
 8000b3c:	42a2      	cmp	r2, r4
 8000b3e:	dc05      	bgt.n	8000b4c <__gesf2+0x7c>
 8000b40:	dbea      	blt.n	8000b18 <__gesf2+0x48>
 8000b42:	42b5      	cmp	r5, r6
 8000b44:	d802      	bhi.n	8000b4c <__gesf2+0x7c>
 8000b46:	d3e7      	bcc.n	8000b18 <__gesf2+0x48>
 8000b48:	2000      	movs	r0, #0
 8000b4a:	e7de      	b.n	8000b0a <__gesf2+0x3a>
 8000b4c:	4243      	negs	r3, r0
 8000b4e:	4158      	adcs	r0, r3
 8000b50:	0040      	lsls	r0, r0, #1
 8000b52:	3801      	subs	r0, #1
 8000b54:	e7d9      	b.n	8000b0a <__gesf2+0x3a>
 8000b56:	2002      	movs	r0, #2
 8000b58:	4240      	negs	r0, r0
 8000b5a:	e7d6      	b.n	8000b0a <__gesf2+0x3a>

08000b5c <__lesf2>:
 8000b5c:	b570      	push	{r4, r5, r6, lr}
 8000b5e:	0042      	lsls	r2, r0, #1
 8000b60:	0245      	lsls	r5, r0, #9
 8000b62:	024e      	lsls	r6, r1, #9
 8000b64:	004c      	lsls	r4, r1, #1
 8000b66:	0fc3      	lsrs	r3, r0, #31
 8000b68:	0a6d      	lsrs	r5, r5, #9
 8000b6a:	0e12      	lsrs	r2, r2, #24
 8000b6c:	0a76      	lsrs	r6, r6, #9
 8000b6e:	0e24      	lsrs	r4, r4, #24
 8000b70:	0fc8      	lsrs	r0, r1, #31
 8000b72:	2aff      	cmp	r2, #255	; 0xff
 8000b74:	d00b      	beq.n	8000b8e <__lesf2+0x32>
 8000b76:	2cff      	cmp	r4, #255	; 0xff
 8000b78:	d00d      	beq.n	8000b96 <__lesf2+0x3a>
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	d11f      	bne.n	8000bbe <__lesf2+0x62>
 8000b7e:	2c00      	cmp	r4, #0
 8000b80:	d116      	bne.n	8000bb0 <__lesf2+0x54>
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	d114      	bne.n	8000bb0 <__lesf2+0x54>
 8000b86:	2000      	movs	r0, #0
 8000b88:	2d00      	cmp	r5, #0
 8000b8a:	d010      	beq.n	8000bae <__lesf2+0x52>
 8000b8c:	e009      	b.n	8000ba2 <__lesf2+0x46>
 8000b8e:	2d00      	cmp	r5, #0
 8000b90:	d10c      	bne.n	8000bac <__lesf2+0x50>
 8000b92:	2cff      	cmp	r4, #255	; 0xff
 8000b94:	d113      	bne.n	8000bbe <__lesf2+0x62>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d108      	bne.n	8000bac <__lesf2+0x50>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d008      	beq.n	8000bb0 <__lesf2+0x54>
 8000b9e:	4283      	cmp	r3, r0
 8000ba0:	d012      	beq.n	8000bc8 <__lesf2+0x6c>
 8000ba2:	2102      	movs	r1, #2
 8000ba4:	1e58      	subs	r0, r3, #1
 8000ba6:	4008      	ands	r0, r1
 8000ba8:	3801      	subs	r0, #1
 8000baa:	e000      	b.n	8000bae <__lesf2+0x52>
 8000bac:	2002      	movs	r0, #2
 8000bae:	bd70      	pop	{r4, r5, r6, pc}
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d1f4      	bne.n	8000b9e <__lesf2+0x42>
 8000bb4:	2800      	cmp	r0, #0
 8000bb6:	d1fa      	bne.n	8000bae <__lesf2+0x52>
 8000bb8:	2001      	movs	r0, #1
 8000bba:	4240      	negs	r0, r0
 8000bbc:	e7f7      	b.n	8000bae <__lesf2+0x52>
 8000bbe:	2c00      	cmp	r4, #0
 8000bc0:	d1ed      	bne.n	8000b9e <__lesf2+0x42>
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	d1eb      	bne.n	8000b9e <__lesf2+0x42>
 8000bc6:	e7ec      	b.n	8000ba2 <__lesf2+0x46>
 8000bc8:	42a2      	cmp	r2, r4
 8000bca:	dc05      	bgt.n	8000bd8 <__lesf2+0x7c>
 8000bcc:	dbf2      	blt.n	8000bb4 <__lesf2+0x58>
 8000bce:	42b5      	cmp	r5, r6
 8000bd0:	d802      	bhi.n	8000bd8 <__lesf2+0x7c>
 8000bd2:	d3ef      	bcc.n	8000bb4 <__lesf2+0x58>
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	e7ea      	b.n	8000bae <__lesf2+0x52>
 8000bd8:	4243      	negs	r3, r0
 8000bda:	4158      	adcs	r0, r3
 8000bdc:	0040      	lsls	r0, r0, #1
 8000bde:	3801      	subs	r0, #1
 8000be0:	e7e5      	b.n	8000bae <__lesf2+0x52>
 8000be2:	46c0      	nop			; (mov r8, r8)

08000be4 <__aeabi_fmul>:
 8000be4:	0243      	lsls	r3, r0, #9
 8000be6:	0a5b      	lsrs	r3, r3, #9
 8000be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bea:	464f      	mov	r7, r9
 8000bec:	4646      	mov	r6, r8
 8000bee:	4699      	mov	r9, r3
 8000bf0:	46d6      	mov	lr, sl
 8000bf2:	0fc3      	lsrs	r3, r0, #31
 8000bf4:	0045      	lsls	r5, r0, #1
 8000bf6:	4698      	mov	r8, r3
 8000bf8:	b5c0      	push	{r6, r7, lr}
 8000bfa:	464b      	mov	r3, r9
 8000bfc:	1c0f      	adds	r7, r1, #0
 8000bfe:	0e2d      	lsrs	r5, r5, #24
 8000c00:	d100      	bne.n	8000c04 <__aeabi_fmul+0x20>
 8000c02:	e0cb      	b.n	8000d9c <__aeabi_fmul+0x1b8>
 8000c04:	2dff      	cmp	r5, #255	; 0xff
 8000c06:	d100      	bne.n	8000c0a <__aeabi_fmul+0x26>
 8000c08:	e0cf      	b.n	8000daa <__aeabi_fmul+0x1c6>
 8000c0a:	2280      	movs	r2, #128	; 0x80
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	04d2      	lsls	r2, r2, #19
 8000c10:	431a      	orrs	r2, r3
 8000c12:	2300      	movs	r3, #0
 8000c14:	4691      	mov	r9, r2
 8000c16:	2600      	movs	r6, #0
 8000c18:	469a      	mov	sl, r3
 8000c1a:	3d7f      	subs	r5, #127	; 0x7f
 8000c1c:	027c      	lsls	r4, r7, #9
 8000c1e:	007b      	lsls	r3, r7, #1
 8000c20:	0a64      	lsrs	r4, r4, #9
 8000c22:	0e1b      	lsrs	r3, r3, #24
 8000c24:	0fff      	lsrs	r7, r7, #31
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d100      	bne.n	8000c2c <__aeabi_fmul+0x48>
 8000c2a:	e0a9      	b.n	8000d80 <__aeabi_fmul+0x19c>
 8000c2c:	2bff      	cmp	r3, #255	; 0xff
 8000c2e:	d011      	beq.n	8000c54 <__aeabi_fmul+0x70>
 8000c30:	2280      	movs	r2, #128	; 0x80
 8000c32:	00e4      	lsls	r4, r4, #3
 8000c34:	04d2      	lsls	r2, r2, #19
 8000c36:	4314      	orrs	r4, r2
 8000c38:	4642      	mov	r2, r8
 8000c3a:	3b7f      	subs	r3, #127	; 0x7f
 8000c3c:	195b      	adds	r3, r3, r5
 8000c3e:	407a      	eors	r2, r7
 8000c40:	2000      	movs	r0, #0
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	1c5d      	adds	r5, r3, #1
 8000c46:	2e0a      	cmp	r6, #10
 8000c48:	dd13      	ble.n	8000c72 <__aeabi_fmul+0x8e>
 8000c4a:	003a      	movs	r2, r7
 8000c4c:	2e0b      	cmp	r6, #11
 8000c4e:	d047      	beq.n	8000ce0 <__aeabi_fmul+0xfc>
 8000c50:	4647      	mov	r7, r8
 8000c52:	e03f      	b.n	8000cd4 <__aeabi_fmul+0xf0>
 8000c54:	002b      	movs	r3, r5
 8000c56:	33ff      	adds	r3, #255	; 0xff
 8000c58:	2c00      	cmp	r4, #0
 8000c5a:	d11e      	bne.n	8000c9a <__aeabi_fmul+0xb6>
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	4316      	orrs	r6, r2
 8000c60:	4642      	mov	r2, r8
 8000c62:	3501      	adds	r5, #1
 8000c64:	407a      	eors	r2, r7
 8000c66:	b2d2      	uxtb	r2, r2
 8000c68:	35ff      	adds	r5, #255	; 0xff
 8000c6a:	2e0a      	cmp	r6, #10
 8000c6c:	dd00      	ble.n	8000c70 <__aeabi_fmul+0x8c>
 8000c6e:	e0e4      	b.n	8000e3a <__aeabi_fmul+0x256>
 8000c70:	2002      	movs	r0, #2
 8000c72:	2e02      	cmp	r6, #2
 8000c74:	dc1c      	bgt.n	8000cb0 <__aeabi_fmul+0xcc>
 8000c76:	3e01      	subs	r6, #1
 8000c78:	2e01      	cmp	r6, #1
 8000c7a:	d842      	bhi.n	8000d02 <__aeabi_fmul+0x11e>
 8000c7c:	2802      	cmp	r0, #2
 8000c7e:	d03d      	beq.n	8000cfc <__aeabi_fmul+0x118>
 8000c80:	2801      	cmp	r0, #1
 8000c82:	d166      	bne.n	8000d52 <__aeabi_fmul+0x16e>
 8000c84:	2000      	movs	r0, #0
 8000c86:	2100      	movs	r1, #0
 8000c88:	05c0      	lsls	r0, r0, #23
 8000c8a:	4308      	orrs	r0, r1
 8000c8c:	07d2      	lsls	r2, r2, #31
 8000c8e:	4310      	orrs	r0, r2
 8000c90:	bce0      	pop	{r5, r6, r7}
 8000c92:	46ba      	mov	sl, r7
 8000c94:	46b1      	mov	r9, r6
 8000c96:	46a8      	mov	r8, r5
 8000c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	4316      	orrs	r6, r2
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	3501      	adds	r5, #1
 8000ca2:	407a      	eors	r2, r7
 8000ca4:	b2d2      	uxtb	r2, r2
 8000ca6:	35ff      	adds	r5, #255	; 0xff
 8000ca8:	2e0a      	cmp	r6, #10
 8000caa:	dd00      	ble.n	8000cae <__aeabi_fmul+0xca>
 8000cac:	e0e4      	b.n	8000e78 <__aeabi_fmul+0x294>
 8000cae:	2003      	movs	r0, #3
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	40b1      	lsls	r1, r6
 8000cb4:	26a6      	movs	r6, #166	; 0xa6
 8000cb6:	00f6      	lsls	r6, r6, #3
 8000cb8:	4231      	tst	r1, r6
 8000cba:	d10a      	bne.n	8000cd2 <__aeabi_fmul+0xee>
 8000cbc:	2690      	movs	r6, #144	; 0x90
 8000cbe:	00b6      	lsls	r6, r6, #2
 8000cc0:	4231      	tst	r1, r6
 8000cc2:	d116      	bne.n	8000cf2 <__aeabi_fmul+0x10e>
 8000cc4:	3eb9      	subs	r6, #185	; 0xb9
 8000cc6:	3eff      	subs	r6, #255	; 0xff
 8000cc8:	420e      	tst	r6, r1
 8000cca:	d01a      	beq.n	8000d02 <__aeabi_fmul+0x11e>
 8000ccc:	46a1      	mov	r9, r4
 8000cce:	4682      	mov	sl, r0
 8000cd0:	e000      	b.n	8000cd4 <__aeabi_fmul+0xf0>
 8000cd2:	0017      	movs	r7, r2
 8000cd4:	4653      	mov	r3, sl
 8000cd6:	003a      	movs	r2, r7
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d00f      	beq.n	8000cfc <__aeabi_fmul+0x118>
 8000cdc:	464c      	mov	r4, r9
 8000cde:	4650      	mov	r0, sl
 8000ce0:	2803      	cmp	r0, #3
 8000ce2:	d1cd      	bne.n	8000c80 <__aeabi_fmul+0x9c>
 8000ce4:	2180      	movs	r1, #128	; 0x80
 8000ce6:	03c9      	lsls	r1, r1, #15
 8000ce8:	4321      	orrs	r1, r4
 8000cea:	0249      	lsls	r1, r1, #9
 8000cec:	20ff      	movs	r0, #255	; 0xff
 8000cee:	0a49      	lsrs	r1, r1, #9
 8000cf0:	e7ca      	b.n	8000c88 <__aeabi_fmul+0xa4>
 8000cf2:	2180      	movs	r1, #128	; 0x80
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	20ff      	movs	r0, #255	; 0xff
 8000cf8:	03c9      	lsls	r1, r1, #15
 8000cfa:	e7c5      	b.n	8000c88 <__aeabi_fmul+0xa4>
 8000cfc:	20ff      	movs	r0, #255	; 0xff
 8000cfe:	2100      	movs	r1, #0
 8000d00:	e7c2      	b.n	8000c88 <__aeabi_fmul+0xa4>
 8000d02:	0c20      	lsrs	r0, r4, #16
 8000d04:	4649      	mov	r1, r9
 8000d06:	0424      	lsls	r4, r4, #16
 8000d08:	0c24      	lsrs	r4, r4, #16
 8000d0a:	0027      	movs	r7, r4
 8000d0c:	0c0e      	lsrs	r6, r1, #16
 8000d0e:	0409      	lsls	r1, r1, #16
 8000d10:	0c09      	lsrs	r1, r1, #16
 8000d12:	4374      	muls	r4, r6
 8000d14:	434f      	muls	r7, r1
 8000d16:	4346      	muls	r6, r0
 8000d18:	4348      	muls	r0, r1
 8000d1a:	0c39      	lsrs	r1, r7, #16
 8000d1c:	1900      	adds	r0, r0, r4
 8000d1e:	1809      	adds	r1, r1, r0
 8000d20:	428c      	cmp	r4, r1
 8000d22:	d903      	bls.n	8000d2c <__aeabi_fmul+0x148>
 8000d24:	2080      	movs	r0, #128	; 0x80
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	4684      	mov	ip, r0
 8000d2a:	4466      	add	r6, ip
 8000d2c:	043f      	lsls	r7, r7, #16
 8000d2e:	0408      	lsls	r0, r1, #16
 8000d30:	0c3f      	lsrs	r7, r7, #16
 8000d32:	19c0      	adds	r0, r0, r7
 8000d34:	0184      	lsls	r4, r0, #6
 8000d36:	1e67      	subs	r7, r4, #1
 8000d38:	41bc      	sbcs	r4, r7
 8000d3a:	0c09      	lsrs	r1, r1, #16
 8000d3c:	0e80      	lsrs	r0, r0, #26
 8000d3e:	1989      	adds	r1, r1, r6
 8000d40:	4304      	orrs	r4, r0
 8000d42:	0189      	lsls	r1, r1, #6
 8000d44:	430c      	orrs	r4, r1
 8000d46:	0109      	lsls	r1, r1, #4
 8000d48:	d571      	bpl.n	8000e2e <__aeabi_fmul+0x24a>
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	0861      	lsrs	r1, r4, #1
 8000d4e:	401c      	ands	r4, r3
 8000d50:	430c      	orrs	r4, r1
 8000d52:	002b      	movs	r3, r5
 8000d54:	337f      	adds	r3, #127	; 0x7f
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	dd51      	ble.n	8000dfe <__aeabi_fmul+0x21a>
 8000d5a:	0761      	lsls	r1, r4, #29
 8000d5c:	d004      	beq.n	8000d68 <__aeabi_fmul+0x184>
 8000d5e:	210f      	movs	r1, #15
 8000d60:	4021      	ands	r1, r4
 8000d62:	2904      	cmp	r1, #4
 8000d64:	d000      	beq.n	8000d68 <__aeabi_fmul+0x184>
 8000d66:	3404      	adds	r4, #4
 8000d68:	0121      	lsls	r1, r4, #4
 8000d6a:	d503      	bpl.n	8000d74 <__aeabi_fmul+0x190>
 8000d6c:	4b43      	ldr	r3, [pc, #268]	; (8000e7c <__aeabi_fmul+0x298>)
 8000d6e:	401c      	ands	r4, r3
 8000d70:	002b      	movs	r3, r5
 8000d72:	3380      	adds	r3, #128	; 0x80
 8000d74:	2bfe      	cmp	r3, #254	; 0xfe
 8000d76:	dcc1      	bgt.n	8000cfc <__aeabi_fmul+0x118>
 8000d78:	01a1      	lsls	r1, r4, #6
 8000d7a:	0a49      	lsrs	r1, r1, #9
 8000d7c:	b2d8      	uxtb	r0, r3
 8000d7e:	e783      	b.n	8000c88 <__aeabi_fmul+0xa4>
 8000d80:	2c00      	cmp	r4, #0
 8000d82:	d12c      	bne.n	8000dde <__aeabi_fmul+0x1fa>
 8000d84:	2301      	movs	r3, #1
 8000d86:	4642      	mov	r2, r8
 8000d88:	431e      	orrs	r6, r3
 8000d8a:	002b      	movs	r3, r5
 8000d8c:	407a      	eors	r2, r7
 8000d8e:	2001      	movs	r0, #1
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	1c5d      	adds	r5, r3, #1
 8000d94:	2e0a      	cmp	r6, #10
 8000d96:	dd00      	ble.n	8000d9a <__aeabi_fmul+0x1b6>
 8000d98:	e757      	b.n	8000c4a <__aeabi_fmul+0x66>
 8000d9a:	e76a      	b.n	8000c72 <__aeabi_fmul+0x8e>
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d110      	bne.n	8000dc2 <__aeabi_fmul+0x1de>
 8000da0:	2301      	movs	r3, #1
 8000da2:	2604      	movs	r6, #4
 8000da4:	2500      	movs	r5, #0
 8000da6:	469a      	mov	sl, r3
 8000da8:	e738      	b.n	8000c1c <__aeabi_fmul+0x38>
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d104      	bne.n	8000db8 <__aeabi_fmul+0x1d4>
 8000dae:	2302      	movs	r3, #2
 8000db0:	2608      	movs	r6, #8
 8000db2:	25ff      	movs	r5, #255	; 0xff
 8000db4:	469a      	mov	sl, r3
 8000db6:	e731      	b.n	8000c1c <__aeabi_fmul+0x38>
 8000db8:	2303      	movs	r3, #3
 8000dba:	260c      	movs	r6, #12
 8000dbc:	25ff      	movs	r5, #255	; 0xff
 8000dbe:	469a      	mov	sl, r3
 8000dc0:	e72c      	b.n	8000c1c <__aeabi_fmul+0x38>
 8000dc2:	4648      	mov	r0, r9
 8000dc4:	f001 fe18 	bl	80029f8 <__clzsi2>
 8000dc8:	464a      	mov	r2, r9
 8000dca:	1f43      	subs	r3, r0, #5
 8000dcc:	2576      	movs	r5, #118	; 0x76
 8000dce:	409a      	lsls	r2, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	426d      	negs	r5, r5
 8000dd4:	4691      	mov	r9, r2
 8000dd6:	2600      	movs	r6, #0
 8000dd8:	469a      	mov	sl, r3
 8000dda:	1a2d      	subs	r5, r5, r0
 8000ddc:	e71e      	b.n	8000c1c <__aeabi_fmul+0x38>
 8000dde:	0020      	movs	r0, r4
 8000de0:	f001 fe0a 	bl	80029f8 <__clzsi2>
 8000de4:	4642      	mov	r2, r8
 8000de6:	1f43      	subs	r3, r0, #5
 8000de8:	409c      	lsls	r4, r3
 8000dea:	1a2b      	subs	r3, r5, r0
 8000dec:	3b76      	subs	r3, #118	; 0x76
 8000dee:	407a      	eors	r2, r7
 8000df0:	2000      	movs	r0, #0
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	1c5d      	adds	r5, r3, #1
 8000df6:	2e0a      	cmp	r6, #10
 8000df8:	dd00      	ble.n	8000dfc <__aeabi_fmul+0x218>
 8000dfa:	e726      	b.n	8000c4a <__aeabi_fmul+0x66>
 8000dfc:	e739      	b.n	8000c72 <__aeabi_fmul+0x8e>
 8000dfe:	2101      	movs	r1, #1
 8000e00:	1acb      	subs	r3, r1, r3
 8000e02:	2b1b      	cmp	r3, #27
 8000e04:	dd00      	ble.n	8000e08 <__aeabi_fmul+0x224>
 8000e06:	e73d      	b.n	8000c84 <__aeabi_fmul+0xa0>
 8000e08:	359e      	adds	r5, #158	; 0x9e
 8000e0a:	0021      	movs	r1, r4
 8000e0c:	40ac      	lsls	r4, r5
 8000e0e:	40d9      	lsrs	r1, r3
 8000e10:	1e63      	subs	r3, r4, #1
 8000e12:	419c      	sbcs	r4, r3
 8000e14:	4321      	orrs	r1, r4
 8000e16:	074b      	lsls	r3, r1, #29
 8000e18:	d004      	beq.n	8000e24 <__aeabi_fmul+0x240>
 8000e1a:	230f      	movs	r3, #15
 8000e1c:	400b      	ands	r3, r1
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	d000      	beq.n	8000e24 <__aeabi_fmul+0x240>
 8000e22:	3104      	adds	r1, #4
 8000e24:	014b      	lsls	r3, r1, #5
 8000e26:	d504      	bpl.n	8000e32 <__aeabi_fmul+0x24e>
 8000e28:	2001      	movs	r0, #1
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	e72c      	b.n	8000c88 <__aeabi_fmul+0xa4>
 8000e2e:	001d      	movs	r5, r3
 8000e30:	e78f      	b.n	8000d52 <__aeabi_fmul+0x16e>
 8000e32:	0189      	lsls	r1, r1, #6
 8000e34:	2000      	movs	r0, #0
 8000e36:	0a49      	lsrs	r1, r1, #9
 8000e38:	e726      	b.n	8000c88 <__aeabi_fmul+0xa4>
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	2e0f      	cmp	r6, #15
 8000e3e:	d10c      	bne.n	8000e5a <__aeabi_fmul+0x276>
 8000e40:	2180      	movs	r1, #128	; 0x80
 8000e42:	464b      	mov	r3, r9
 8000e44:	03c9      	lsls	r1, r1, #15
 8000e46:	420b      	tst	r3, r1
 8000e48:	d00d      	beq.n	8000e66 <__aeabi_fmul+0x282>
 8000e4a:	420c      	tst	r4, r1
 8000e4c:	d10b      	bne.n	8000e66 <__aeabi_fmul+0x282>
 8000e4e:	4321      	orrs	r1, r4
 8000e50:	0249      	lsls	r1, r1, #9
 8000e52:	003a      	movs	r2, r7
 8000e54:	20ff      	movs	r0, #255	; 0xff
 8000e56:	0a49      	lsrs	r1, r1, #9
 8000e58:	e716      	b.n	8000c88 <__aeabi_fmul+0xa4>
 8000e5a:	2e0b      	cmp	r6, #11
 8000e5c:	d000      	beq.n	8000e60 <__aeabi_fmul+0x27c>
 8000e5e:	e6f7      	b.n	8000c50 <__aeabi_fmul+0x6c>
 8000e60:	46a1      	mov	r9, r4
 8000e62:	469a      	mov	sl, r3
 8000e64:	e736      	b.n	8000cd4 <__aeabi_fmul+0xf0>
 8000e66:	2180      	movs	r1, #128	; 0x80
 8000e68:	464b      	mov	r3, r9
 8000e6a:	03c9      	lsls	r1, r1, #15
 8000e6c:	4319      	orrs	r1, r3
 8000e6e:	0249      	lsls	r1, r1, #9
 8000e70:	4642      	mov	r2, r8
 8000e72:	20ff      	movs	r0, #255	; 0xff
 8000e74:	0a49      	lsrs	r1, r1, #9
 8000e76:	e707      	b.n	8000c88 <__aeabi_fmul+0xa4>
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e7df      	b.n	8000e3c <__aeabi_fmul+0x258>
 8000e7c:	f7ffffff 	.word	0xf7ffffff

08000e80 <__aeabi_fsub>:
 8000e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e82:	46c6      	mov	lr, r8
 8000e84:	0243      	lsls	r3, r0, #9
 8000e86:	0a5b      	lsrs	r3, r3, #9
 8000e88:	0045      	lsls	r5, r0, #1
 8000e8a:	00da      	lsls	r2, r3, #3
 8000e8c:	0fc4      	lsrs	r4, r0, #31
 8000e8e:	0248      	lsls	r0, r1, #9
 8000e90:	004f      	lsls	r7, r1, #1
 8000e92:	4694      	mov	ip, r2
 8000e94:	0a42      	lsrs	r2, r0, #9
 8000e96:	001e      	movs	r6, r3
 8000e98:	4690      	mov	r8, r2
 8000e9a:	b500      	push	{lr}
 8000e9c:	0e2d      	lsrs	r5, r5, #24
 8000e9e:	0e3f      	lsrs	r7, r7, #24
 8000ea0:	0fc9      	lsrs	r1, r1, #31
 8000ea2:	0980      	lsrs	r0, r0, #6
 8000ea4:	2fff      	cmp	r7, #255	; 0xff
 8000ea6:	d059      	beq.n	8000f5c <__aeabi_fsub+0xdc>
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4051      	eors	r1, r2
 8000eac:	428c      	cmp	r4, r1
 8000eae:	d039      	beq.n	8000f24 <__aeabi_fsub+0xa4>
 8000eb0:	1bea      	subs	r2, r5, r7
 8000eb2:	2a00      	cmp	r2, #0
 8000eb4:	dd58      	ble.n	8000f68 <__aeabi_fsub+0xe8>
 8000eb6:	2f00      	cmp	r7, #0
 8000eb8:	d068      	beq.n	8000f8c <__aeabi_fsub+0x10c>
 8000eba:	2dff      	cmp	r5, #255	; 0xff
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_fsub+0x40>
 8000ebe:	e0d1      	b.n	8001064 <__aeabi_fsub+0x1e4>
 8000ec0:	2380      	movs	r3, #128	; 0x80
 8000ec2:	04db      	lsls	r3, r3, #19
 8000ec4:	4318      	orrs	r0, r3
 8000ec6:	2a1b      	cmp	r2, #27
 8000ec8:	dc00      	bgt.n	8000ecc <__aeabi_fsub+0x4c>
 8000eca:	e0e3      	b.n	8001094 <__aeabi_fsub+0x214>
 8000ecc:	2301      	movs	r3, #1
 8000ece:	4662      	mov	r2, ip
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	015a      	lsls	r2, r3, #5
 8000ed4:	d400      	bmi.n	8000ed8 <__aeabi_fsub+0x58>
 8000ed6:	e0ac      	b.n	8001032 <__aeabi_fsub+0x1b2>
 8000ed8:	019b      	lsls	r3, r3, #6
 8000eda:	099e      	lsrs	r6, r3, #6
 8000edc:	0030      	movs	r0, r6
 8000ede:	f001 fd8b 	bl	80029f8 <__clzsi2>
 8000ee2:	0033      	movs	r3, r6
 8000ee4:	3805      	subs	r0, #5
 8000ee6:	4083      	lsls	r3, r0
 8000ee8:	4285      	cmp	r5, r0
 8000eea:	dc00      	bgt.n	8000eee <__aeabi_fsub+0x6e>
 8000eec:	e0c6      	b.n	800107c <__aeabi_fsub+0x1fc>
 8000eee:	4ab2      	ldr	r2, [pc, #712]	; (80011b8 <__aeabi_fsub+0x338>)
 8000ef0:	1a2d      	subs	r5, r5, r0
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	075a      	lsls	r2, r3, #29
 8000ef6:	d004      	beq.n	8000f02 <__aeabi_fsub+0x82>
 8000ef8:	220f      	movs	r2, #15
 8000efa:	401a      	ands	r2, r3
 8000efc:	2a04      	cmp	r2, #4
 8000efe:	d000      	beq.n	8000f02 <__aeabi_fsub+0x82>
 8000f00:	3304      	adds	r3, #4
 8000f02:	015a      	lsls	r2, r3, #5
 8000f04:	d400      	bmi.n	8000f08 <__aeabi_fsub+0x88>
 8000f06:	e097      	b.n	8001038 <__aeabi_fsub+0x1b8>
 8000f08:	1c6a      	adds	r2, r5, #1
 8000f0a:	2dfe      	cmp	r5, #254	; 0xfe
 8000f0c:	d100      	bne.n	8000f10 <__aeabi_fsub+0x90>
 8000f0e:	e084      	b.n	800101a <__aeabi_fsub+0x19a>
 8000f10:	019b      	lsls	r3, r3, #6
 8000f12:	0a5e      	lsrs	r6, r3, #9
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	05d0      	lsls	r0, r2, #23
 8000f18:	4330      	orrs	r0, r6
 8000f1a:	07e4      	lsls	r4, r4, #31
 8000f1c:	4320      	orrs	r0, r4
 8000f1e:	bc80      	pop	{r7}
 8000f20:	46b8      	mov	r8, r7
 8000f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f24:	1bea      	subs	r2, r5, r7
 8000f26:	2a00      	cmp	r2, #0
 8000f28:	dd41      	ble.n	8000fae <__aeabi_fsub+0x12e>
 8000f2a:	2f00      	cmp	r7, #0
 8000f2c:	d06b      	beq.n	8001006 <__aeabi_fsub+0x186>
 8000f2e:	2dff      	cmp	r5, #255	; 0xff
 8000f30:	d100      	bne.n	8000f34 <__aeabi_fsub+0xb4>
 8000f32:	e097      	b.n	8001064 <__aeabi_fsub+0x1e4>
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	04db      	lsls	r3, r3, #19
 8000f38:	4318      	orrs	r0, r3
 8000f3a:	2a1b      	cmp	r2, #27
 8000f3c:	dc00      	bgt.n	8000f40 <__aeabi_fsub+0xc0>
 8000f3e:	e0cc      	b.n	80010da <__aeabi_fsub+0x25a>
 8000f40:	2301      	movs	r3, #1
 8000f42:	4463      	add	r3, ip
 8000f44:	015a      	lsls	r2, r3, #5
 8000f46:	d574      	bpl.n	8001032 <__aeabi_fsub+0x1b2>
 8000f48:	3501      	adds	r5, #1
 8000f4a:	2dff      	cmp	r5, #255	; 0xff
 8000f4c:	d065      	beq.n	800101a <__aeabi_fsub+0x19a>
 8000f4e:	2201      	movs	r2, #1
 8000f50:	499a      	ldr	r1, [pc, #616]	; (80011bc <__aeabi_fsub+0x33c>)
 8000f52:	401a      	ands	r2, r3
 8000f54:	085b      	lsrs	r3, r3, #1
 8000f56:	400b      	ands	r3, r1
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	e7cb      	b.n	8000ef4 <__aeabi_fsub+0x74>
 8000f5c:	2800      	cmp	r0, #0
 8000f5e:	d01f      	beq.n	8000fa0 <__aeabi_fsub+0x120>
 8000f60:	428c      	cmp	r4, r1
 8000f62:	d022      	beq.n	8000faa <__aeabi_fsub+0x12a>
 8000f64:	002a      	movs	r2, r5
 8000f66:	3aff      	subs	r2, #255	; 0xff
 8000f68:	2a00      	cmp	r2, #0
 8000f6a:	d035      	beq.n	8000fd8 <__aeabi_fsub+0x158>
 8000f6c:	1b7a      	subs	r2, r7, r5
 8000f6e:	2d00      	cmp	r5, #0
 8000f70:	d000      	beq.n	8000f74 <__aeabi_fsub+0xf4>
 8000f72:	e099      	b.n	80010a8 <__aeabi_fsub+0x228>
 8000f74:	4663      	mov	r3, ip
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d100      	bne.n	8000f7c <__aeabi_fsub+0xfc>
 8000f7a:	e0dd      	b.n	8001138 <__aeabi_fsub+0x2b8>
 8000f7c:	1e53      	subs	r3, r2, #1
 8000f7e:	2a01      	cmp	r2, #1
 8000f80:	d100      	bne.n	8000f84 <__aeabi_fsub+0x104>
 8000f82:	e105      	b.n	8001190 <__aeabi_fsub+0x310>
 8000f84:	2aff      	cmp	r2, #255	; 0xff
 8000f86:	d06b      	beq.n	8001060 <__aeabi_fsub+0x1e0>
 8000f88:	001a      	movs	r2, r3
 8000f8a:	e094      	b.n	80010b6 <__aeabi_fsub+0x236>
 8000f8c:	2800      	cmp	r0, #0
 8000f8e:	d073      	beq.n	8001078 <__aeabi_fsub+0x1f8>
 8000f90:	1e51      	subs	r1, r2, #1
 8000f92:	2a01      	cmp	r2, #1
 8000f94:	d100      	bne.n	8000f98 <__aeabi_fsub+0x118>
 8000f96:	e0df      	b.n	8001158 <__aeabi_fsub+0x2d8>
 8000f98:	2aff      	cmp	r2, #255	; 0xff
 8000f9a:	d063      	beq.n	8001064 <__aeabi_fsub+0x1e4>
 8000f9c:	000a      	movs	r2, r1
 8000f9e:	e792      	b.n	8000ec6 <__aeabi_fsub+0x46>
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4051      	eors	r1, r2
 8000fa4:	42a1      	cmp	r1, r4
 8000fa6:	d000      	beq.n	8000faa <__aeabi_fsub+0x12a>
 8000fa8:	e782      	b.n	8000eb0 <__aeabi_fsub+0x30>
 8000faa:	002a      	movs	r2, r5
 8000fac:	3aff      	subs	r2, #255	; 0xff
 8000fae:	2a00      	cmp	r2, #0
 8000fb0:	d036      	beq.n	8001020 <__aeabi_fsub+0x1a0>
 8000fb2:	1b7a      	subs	r2, r7, r5
 8000fb4:	2d00      	cmp	r5, #0
 8000fb6:	d100      	bne.n	8000fba <__aeabi_fsub+0x13a>
 8000fb8:	e0aa      	b.n	8001110 <__aeabi_fsub+0x290>
 8000fba:	2fff      	cmp	r7, #255	; 0xff
 8000fbc:	d100      	bne.n	8000fc0 <__aeabi_fsub+0x140>
 8000fbe:	e0da      	b.n	8001176 <__aeabi_fsub+0x2f6>
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	4661      	mov	r1, ip
 8000fc4:	04db      	lsls	r3, r3, #19
 8000fc6:	4319      	orrs	r1, r3
 8000fc8:	468c      	mov	ip, r1
 8000fca:	2a1b      	cmp	r2, #27
 8000fcc:	dc00      	bgt.n	8000fd0 <__aeabi_fsub+0x150>
 8000fce:	e0d4      	b.n	800117a <__aeabi_fsub+0x2fa>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	003d      	movs	r5, r7
 8000fd4:	181b      	adds	r3, r3, r0
 8000fd6:	e7b5      	b.n	8000f44 <__aeabi_fsub+0xc4>
 8000fd8:	27fe      	movs	r7, #254	; 0xfe
 8000fda:	1c6a      	adds	r2, r5, #1
 8000fdc:	4217      	tst	r7, r2
 8000fde:	d171      	bne.n	80010c4 <__aeabi_fsub+0x244>
 8000fe0:	2d00      	cmp	r5, #0
 8000fe2:	d000      	beq.n	8000fe6 <__aeabi_fsub+0x166>
 8000fe4:	e09e      	b.n	8001124 <__aeabi_fsub+0x2a4>
 8000fe6:	4663      	mov	r3, ip
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d100      	bne.n	8000fee <__aeabi_fsub+0x16e>
 8000fec:	e0d5      	b.n	800119a <__aeabi_fsub+0x31a>
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2800      	cmp	r0, #0
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_fsub+0x176>
 8000ff4:	e78f      	b.n	8000f16 <__aeabi_fsub+0x96>
 8000ff6:	1a1b      	subs	r3, r3, r0
 8000ff8:	015e      	lsls	r6, r3, #5
 8000ffa:	d400      	bmi.n	8000ffe <__aeabi_fsub+0x17e>
 8000ffc:	e0d6      	b.n	80011ac <__aeabi_fsub+0x32c>
 8000ffe:	4663      	mov	r3, ip
 8001000:	000c      	movs	r4, r1
 8001002:	1ac3      	subs	r3, r0, r3
 8001004:	e776      	b.n	8000ef4 <__aeabi_fsub+0x74>
 8001006:	2800      	cmp	r0, #0
 8001008:	d036      	beq.n	8001078 <__aeabi_fsub+0x1f8>
 800100a:	1e51      	subs	r1, r2, #1
 800100c:	2a01      	cmp	r2, #1
 800100e:	d100      	bne.n	8001012 <__aeabi_fsub+0x192>
 8001010:	e09a      	b.n	8001148 <__aeabi_fsub+0x2c8>
 8001012:	2aff      	cmp	r2, #255	; 0xff
 8001014:	d026      	beq.n	8001064 <__aeabi_fsub+0x1e4>
 8001016:	000a      	movs	r2, r1
 8001018:	e78f      	b.n	8000f3a <__aeabi_fsub+0xba>
 800101a:	22ff      	movs	r2, #255	; 0xff
 800101c:	2600      	movs	r6, #0
 800101e:	e77a      	b.n	8000f16 <__aeabi_fsub+0x96>
 8001020:	27fe      	movs	r7, #254	; 0xfe
 8001022:	1c6a      	adds	r2, r5, #1
 8001024:	4217      	tst	r7, r2
 8001026:	d062      	beq.n	80010ee <__aeabi_fsub+0x26e>
 8001028:	2aff      	cmp	r2, #255	; 0xff
 800102a:	d0f6      	beq.n	800101a <__aeabi_fsub+0x19a>
 800102c:	0015      	movs	r5, r2
 800102e:	4460      	add	r0, ip
 8001030:	0843      	lsrs	r3, r0, #1
 8001032:	075a      	lsls	r2, r3, #29
 8001034:	d000      	beq.n	8001038 <__aeabi_fsub+0x1b8>
 8001036:	e75f      	b.n	8000ef8 <__aeabi_fsub+0x78>
 8001038:	08db      	lsrs	r3, r3, #3
 800103a:	2dff      	cmp	r5, #255	; 0xff
 800103c:	d012      	beq.n	8001064 <__aeabi_fsub+0x1e4>
 800103e:	025b      	lsls	r3, r3, #9
 8001040:	0a5e      	lsrs	r6, r3, #9
 8001042:	b2ea      	uxtb	r2, r5
 8001044:	e767      	b.n	8000f16 <__aeabi_fsub+0x96>
 8001046:	4662      	mov	r2, ip
 8001048:	2a00      	cmp	r2, #0
 800104a:	d100      	bne.n	800104e <__aeabi_fsub+0x1ce>
 800104c:	e093      	b.n	8001176 <__aeabi_fsub+0x2f6>
 800104e:	2800      	cmp	r0, #0
 8001050:	d008      	beq.n	8001064 <__aeabi_fsub+0x1e4>
 8001052:	2280      	movs	r2, #128	; 0x80
 8001054:	03d2      	lsls	r2, r2, #15
 8001056:	4213      	tst	r3, r2
 8001058:	d004      	beq.n	8001064 <__aeabi_fsub+0x1e4>
 800105a:	4640      	mov	r0, r8
 800105c:	4210      	tst	r0, r2
 800105e:	d101      	bne.n	8001064 <__aeabi_fsub+0x1e4>
 8001060:	000c      	movs	r4, r1
 8001062:	4643      	mov	r3, r8
 8001064:	2b00      	cmp	r3, #0
 8001066:	d0d8      	beq.n	800101a <__aeabi_fsub+0x19a>
 8001068:	2680      	movs	r6, #128	; 0x80
 800106a:	03f6      	lsls	r6, r6, #15
 800106c:	431e      	orrs	r6, r3
 800106e:	0276      	lsls	r6, r6, #9
 8001070:	22ff      	movs	r2, #255	; 0xff
 8001072:	0a76      	lsrs	r6, r6, #9
 8001074:	e74f      	b.n	8000f16 <__aeabi_fsub+0x96>
 8001076:	4643      	mov	r3, r8
 8001078:	0015      	movs	r5, r2
 800107a:	e7de      	b.n	800103a <__aeabi_fsub+0x1ba>
 800107c:	2220      	movs	r2, #32
 800107e:	1b40      	subs	r0, r0, r5
 8001080:	3001      	adds	r0, #1
 8001082:	1a12      	subs	r2, r2, r0
 8001084:	0019      	movs	r1, r3
 8001086:	4093      	lsls	r3, r2
 8001088:	40c1      	lsrs	r1, r0
 800108a:	1e5a      	subs	r2, r3, #1
 800108c:	4193      	sbcs	r3, r2
 800108e:	2500      	movs	r5, #0
 8001090:	430b      	orrs	r3, r1
 8001092:	e72f      	b.n	8000ef4 <__aeabi_fsub+0x74>
 8001094:	2320      	movs	r3, #32
 8001096:	1a9b      	subs	r3, r3, r2
 8001098:	0001      	movs	r1, r0
 800109a:	4098      	lsls	r0, r3
 800109c:	0003      	movs	r3, r0
 800109e:	40d1      	lsrs	r1, r2
 80010a0:	1e5a      	subs	r2, r3, #1
 80010a2:	4193      	sbcs	r3, r2
 80010a4:	430b      	orrs	r3, r1
 80010a6:	e712      	b.n	8000ece <__aeabi_fsub+0x4e>
 80010a8:	2fff      	cmp	r7, #255	; 0xff
 80010aa:	d0d9      	beq.n	8001060 <__aeabi_fsub+0x1e0>
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	4664      	mov	r4, ip
 80010b0:	04db      	lsls	r3, r3, #19
 80010b2:	431c      	orrs	r4, r3
 80010b4:	46a4      	mov	ip, r4
 80010b6:	2a1b      	cmp	r2, #27
 80010b8:	dd52      	ble.n	8001160 <__aeabi_fsub+0x2e0>
 80010ba:	2301      	movs	r3, #1
 80010bc:	000c      	movs	r4, r1
 80010be:	003d      	movs	r5, r7
 80010c0:	1ac3      	subs	r3, r0, r3
 80010c2:	e706      	b.n	8000ed2 <__aeabi_fsub+0x52>
 80010c4:	4663      	mov	r3, ip
 80010c6:	1a1e      	subs	r6, r3, r0
 80010c8:	0173      	lsls	r3, r6, #5
 80010ca:	d439      	bmi.n	8001140 <__aeabi_fsub+0x2c0>
 80010cc:	2e00      	cmp	r6, #0
 80010ce:	d000      	beq.n	80010d2 <__aeabi_fsub+0x252>
 80010d0:	e704      	b.n	8000edc <__aeabi_fsub+0x5c>
 80010d2:	2400      	movs	r4, #0
 80010d4:	2200      	movs	r2, #0
 80010d6:	2600      	movs	r6, #0
 80010d8:	e71d      	b.n	8000f16 <__aeabi_fsub+0x96>
 80010da:	2320      	movs	r3, #32
 80010dc:	1a9b      	subs	r3, r3, r2
 80010de:	0001      	movs	r1, r0
 80010e0:	4098      	lsls	r0, r3
 80010e2:	0003      	movs	r3, r0
 80010e4:	40d1      	lsrs	r1, r2
 80010e6:	1e5a      	subs	r2, r3, #1
 80010e8:	4193      	sbcs	r3, r2
 80010ea:	430b      	orrs	r3, r1
 80010ec:	e729      	b.n	8000f42 <__aeabi_fsub+0xc2>
 80010ee:	2d00      	cmp	r5, #0
 80010f0:	d1a9      	bne.n	8001046 <__aeabi_fsub+0x1c6>
 80010f2:	4663      	mov	r3, ip
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d056      	beq.n	80011a6 <__aeabi_fsub+0x326>
 80010f8:	2200      	movs	r2, #0
 80010fa:	2800      	cmp	r0, #0
 80010fc:	d100      	bne.n	8001100 <__aeabi_fsub+0x280>
 80010fe:	e70a      	b.n	8000f16 <__aeabi_fsub+0x96>
 8001100:	0003      	movs	r3, r0
 8001102:	4463      	add	r3, ip
 8001104:	015a      	lsls	r2, r3, #5
 8001106:	d594      	bpl.n	8001032 <__aeabi_fsub+0x1b2>
 8001108:	4a2b      	ldr	r2, [pc, #172]	; (80011b8 <__aeabi_fsub+0x338>)
 800110a:	3501      	adds	r5, #1
 800110c:	4013      	ands	r3, r2
 800110e:	e790      	b.n	8001032 <__aeabi_fsub+0x1b2>
 8001110:	4663      	mov	r3, ip
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0af      	beq.n	8001076 <__aeabi_fsub+0x1f6>
 8001116:	1e53      	subs	r3, r2, #1
 8001118:	2a01      	cmp	r2, #1
 800111a:	d015      	beq.n	8001148 <__aeabi_fsub+0x2c8>
 800111c:	2aff      	cmp	r2, #255	; 0xff
 800111e:	d02a      	beq.n	8001176 <__aeabi_fsub+0x2f6>
 8001120:	001a      	movs	r2, r3
 8001122:	e752      	b.n	8000fca <__aeabi_fsub+0x14a>
 8001124:	4662      	mov	r2, ip
 8001126:	2a00      	cmp	r2, #0
 8001128:	d191      	bne.n	800104e <__aeabi_fsub+0x1ce>
 800112a:	2800      	cmp	r0, #0
 800112c:	d198      	bne.n	8001060 <__aeabi_fsub+0x1e0>
 800112e:	2680      	movs	r6, #128	; 0x80
 8001130:	2400      	movs	r4, #0
 8001132:	22ff      	movs	r2, #255	; 0xff
 8001134:	03f6      	lsls	r6, r6, #15
 8001136:	e6ee      	b.n	8000f16 <__aeabi_fsub+0x96>
 8001138:	000c      	movs	r4, r1
 800113a:	4643      	mov	r3, r8
 800113c:	0015      	movs	r5, r2
 800113e:	e77c      	b.n	800103a <__aeabi_fsub+0x1ba>
 8001140:	4663      	mov	r3, ip
 8001142:	000c      	movs	r4, r1
 8001144:	1ac6      	subs	r6, r0, r3
 8001146:	e6c9      	b.n	8000edc <__aeabi_fsub+0x5c>
 8001148:	0003      	movs	r3, r0
 800114a:	4463      	add	r3, ip
 800114c:	2501      	movs	r5, #1
 800114e:	015a      	lsls	r2, r3, #5
 8001150:	d400      	bmi.n	8001154 <__aeabi_fsub+0x2d4>
 8001152:	e76e      	b.n	8001032 <__aeabi_fsub+0x1b2>
 8001154:	2502      	movs	r5, #2
 8001156:	e6fa      	b.n	8000f4e <__aeabi_fsub+0xce>
 8001158:	4663      	mov	r3, ip
 800115a:	2501      	movs	r5, #1
 800115c:	1a1b      	subs	r3, r3, r0
 800115e:	e6b8      	b.n	8000ed2 <__aeabi_fsub+0x52>
 8001160:	4664      	mov	r4, ip
 8001162:	2320      	movs	r3, #32
 8001164:	40d4      	lsrs	r4, r2
 8001166:	1a9b      	subs	r3, r3, r2
 8001168:	4662      	mov	r2, ip
 800116a:	409a      	lsls	r2, r3
 800116c:	0013      	movs	r3, r2
 800116e:	1e5a      	subs	r2, r3, #1
 8001170:	4193      	sbcs	r3, r2
 8001172:	4323      	orrs	r3, r4
 8001174:	e7a2      	b.n	80010bc <__aeabi_fsub+0x23c>
 8001176:	4643      	mov	r3, r8
 8001178:	e774      	b.n	8001064 <__aeabi_fsub+0x1e4>
 800117a:	4661      	mov	r1, ip
 800117c:	2320      	movs	r3, #32
 800117e:	40d1      	lsrs	r1, r2
 8001180:	1a9b      	subs	r3, r3, r2
 8001182:	4662      	mov	r2, ip
 8001184:	409a      	lsls	r2, r3
 8001186:	0013      	movs	r3, r2
 8001188:	1e5a      	subs	r2, r3, #1
 800118a:	4193      	sbcs	r3, r2
 800118c:	430b      	orrs	r3, r1
 800118e:	e720      	b.n	8000fd2 <__aeabi_fsub+0x152>
 8001190:	4663      	mov	r3, ip
 8001192:	000c      	movs	r4, r1
 8001194:	2501      	movs	r5, #1
 8001196:	1ac3      	subs	r3, r0, r3
 8001198:	e69b      	b.n	8000ed2 <__aeabi_fsub+0x52>
 800119a:	2800      	cmp	r0, #0
 800119c:	d099      	beq.n	80010d2 <__aeabi_fsub+0x252>
 800119e:	000c      	movs	r4, r1
 80011a0:	4646      	mov	r6, r8
 80011a2:	2200      	movs	r2, #0
 80011a4:	e6b7      	b.n	8000f16 <__aeabi_fsub+0x96>
 80011a6:	4646      	mov	r6, r8
 80011a8:	2200      	movs	r2, #0
 80011aa:	e6b4      	b.n	8000f16 <__aeabi_fsub+0x96>
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d000      	beq.n	80011b2 <__aeabi_fsub+0x332>
 80011b0:	e73f      	b.n	8001032 <__aeabi_fsub+0x1b2>
 80011b2:	2400      	movs	r4, #0
 80011b4:	2600      	movs	r6, #0
 80011b6:	e6ae      	b.n	8000f16 <__aeabi_fsub+0x96>
 80011b8:	fbffffff 	.word	0xfbffffff
 80011bc:	7dffffff 	.word	0x7dffffff

080011c0 <__aeabi_f2iz>:
 80011c0:	0241      	lsls	r1, r0, #9
 80011c2:	0042      	lsls	r2, r0, #1
 80011c4:	0fc3      	lsrs	r3, r0, #31
 80011c6:	0a49      	lsrs	r1, r1, #9
 80011c8:	2000      	movs	r0, #0
 80011ca:	0e12      	lsrs	r2, r2, #24
 80011cc:	2a7e      	cmp	r2, #126	; 0x7e
 80011ce:	dd03      	ble.n	80011d8 <__aeabi_f2iz+0x18>
 80011d0:	2a9d      	cmp	r2, #157	; 0x9d
 80011d2:	dd02      	ble.n	80011da <__aeabi_f2iz+0x1a>
 80011d4:	4a09      	ldr	r2, [pc, #36]	; (80011fc <__aeabi_f2iz+0x3c>)
 80011d6:	1898      	adds	r0, r3, r2
 80011d8:	4770      	bx	lr
 80011da:	2080      	movs	r0, #128	; 0x80
 80011dc:	0400      	lsls	r0, r0, #16
 80011de:	4301      	orrs	r1, r0
 80011e0:	2a95      	cmp	r2, #149	; 0x95
 80011e2:	dc07      	bgt.n	80011f4 <__aeabi_f2iz+0x34>
 80011e4:	2096      	movs	r0, #150	; 0x96
 80011e6:	1a82      	subs	r2, r0, r2
 80011e8:	40d1      	lsrs	r1, r2
 80011ea:	4248      	negs	r0, r1
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1f3      	bne.n	80011d8 <__aeabi_f2iz+0x18>
 80011f0:	0008      	movs	r0, r1
 80011f2:	e7f1      	b.n	80011d8 <__aeabi_f2iz+0x18>
 80011f4:	3a96      	subs	r2, #150	; 0x96
 80011f6:	4091      	lsls	r1, r2
 80011f8:	e7f7      	b.n	80011ea <__aeabi_f2iz+0x2a>
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	7fffffff 	.word	0x7fffffff

08001200 <__aeabi_ui2f>:
 8001200:	b570      	push	{r4, r5, r6, lr}
 8001202:	1e04      	subs	r4, r0, #0
 8001204:	d00e      	beq.n	8001224 <__aeabi_ui2f+0x24>
 8001206:	f001 fbf7 	bl	80029f8 <__clzsi2>
 800120a:	239e      	movs	r3, #158	; 0x9e
 800120c:	0001      	movs	r1, r0
 800120e:	1a1b      	subs	r3, r3, r0
 8001210:	2b96      	cmp	r3, #150	; 0x96
 8001212:	dc0c      	bgt.n	800122e <__aeabi_ui2f+0x2e>
 8001214:	2808      	cmp	r0, #8
 8001216:	d02c      	beq.n	8001272 <__aeabi_ui2f+0x72>
 8001218:	3908      	subs	r1, #8
 800121a:	408c      	lsls	r4, r1
 800121c:	0264      	lsls	r4, r4, #9
 800121e:	0a64      	lsrs	r4, r4, #9
 8001220:	b2d8      	uxtb	r0, r3
 8001222:	e001      	b.n	8001228 <__aeabi_ui2f+0x28>
 8001224:	2000      	movs	r0, #0
 8001226:	2400      	movs	r4, #0
 8001228:	05c0      	lsls	r0, r0, #23
 800122a:	4320      	orrs	r0, r4
 800122c:	bd70      	pop	{r4, r5, r6, pc}
 800122e:	2b99      	cmp	r3, #153	; 0x99
 8001230:	dd0a      	ble.n	8001248 <__aeabi_ui2f+0x48>
 8001232:	0002      	movs	r2, r0
 8001234:	0020      	movs	r0, r4
 8001236:	321b      	adds	r2, #27
 8001238:	4090      	lsls	r0, r2
 800123a:	0002      	movs	r2, r0
 800123c:	1e50      	subs	r0, r2, #1
 800123e:	4182      	sbcs	r2, r0
 8001240:	2005      	movs	r0, #5
 8001242:	1a40      	subs	r0, r0, r1
 8001244:	40c4      	lsrs	r4, r0
 8001246:	4314      	orrs	r4, r2
 8001248:	2905      	cmp	r1, #5
 800124a:	dc16      	bgt.n	800127a <__aeabi_ui2f+0x7a>
 800124c:	0022      	movs	r2, r4
 800124e:	480f      	ldr	r0, [pc, #60]	; (800128c <__aeabi_ui2f+0x8c>)
 8001250:	4002      	ands	r2, r0
 8001252:	0765      	lsls	r5, r4, #29
 8001254:	d009      	beq.n	800126a <__aeabi_ui2f+0x6a>
 8001256:	250f      	movs	r5, #15
 8001258:	402c      	ands	r4, r5
 800125a:	2c04      	cmp	r4, #4
 800125c:	d005      	beq.n	800126a <__aeabi_ui2f+0x6a>
 800125e:	3204      	adds	r2, #4
 8001260:	0154      	lsls	r4, r2, #5
 8001262:	d502      	bpl.n	800126a <__aeabi_ui2f+0x6a>
 8001264:	239f      	movs	r3, #159	; 0x9f
 8001266:	4002      	ands	r2, r0
 8001268:	1a5b      	subs	r3, r3, r1
 800126a:	0192      	lsls	r2, r2, #6
 800126c:	0a54      	lsrs	r4, r2, #9
 800126e:	b2d8      	uxtb	r0, r3
 8001270:	e7da      	b.n	8001228 <__aeabi_ui2f+0x28>
 8001272:	0264      	lsls	r4, r4, #9
 8001274:	2096      	movs	r0, #150	; 0x96
 8001276:	0a64      	lsrs	r4, r4, #9
 8001278:	e7d6      	b.n	8001228 <__aeabi_ui2f+0x28>
 800127a:	1f4a      	subs	r2, r1, #5
 800127c:	4094      	lsls	r4, r2
 800127e:	0022      	movs	r2, r4
 8001280:	4802      	ldr	r0, [pc, #8]	; (800128c <__aeabi_ui2f+0x8c>)
 8001282:	4002      	ands	r2, r0
 8001284:	0765      	lsls	r5, r4, #29
 8001286:	d0f0      	beq.n	800126a <__aeabi_ui2f+0x6a>
 8001288:	e7e5      	b.n	8001256 <__aeabi_ui2f+0x56>
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	fbffffff 	.word	0xfbffffff

08001290 <__aeabi_dadd>:
 8001290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001292:	464f      	mov	r7, r9
 8001294:	4646      	mov	r6, r8
 8001296:	46d6      	mov	lr, sl
 8001298:	0004      	movs	r4, r0
 800129a:	b5c0      	push	{r6, r7, lr}
 800129c:	001f      	movs	r7, r3
 800129e:	030b      	lsls	r3, r1, #12
 80012a0:	0010      	movs	r0, r2
 80012a2:	004e      	lsls	r6, r1, #1
 80012a4:	0a5b      	lsrs	r3, r3, #9
 80012a6:	0fcd      	lsrs	r5, r1, #31
 80012a8:	0f61      	lsrs	r1, r4, #29
 80012aa:	007a      	lsls	r2, r7, #1
 80012ac:	4319      	orrs	r1, r3
 80012ae:	00e3      	lsls	r3, r4, #3
 80012b0:	033c      	lsls	r4, r7, #12
 80012b2:	0fff      	lsrs	r7, r7, #31
 80012b4:	46bc      	mov	ip, r7
 80012b6:	0a64      	lsrs	r4, r4, #9
 80012b8:	0f47      	lsrs	r7, r0, #29
 80012ba:	4327      	orrs	r7, r4
 80012bc:	0d76      	lsrs	r6, r6, #21
 80012be:	0d52      	lsrs	r2, r2, #21
 80012c0:	00c0      	lsls	r0, r0, #3
 80012c2:	46b9      	mov	r9, r7
 80012c4:	4680      	mov	r8, r0
 80012c6:	1ab7      	subs	r7, r6, r2
 80012c8:	4565      	cmp	r5, ip
 80012ca:	d100      	bne.n	80012ce <__aeabi_dadd+0x3e>
 80012cc:	e09b      	b.n	8001406 <__aeabi_dadd+0x176>
 80012ce:	2f00      	cmp	r7, #0
 80012d0:	dc00      	bgt.n	80012d4 <__aeabi_dadd+0x44>
 80012d2:	e084      	b.n	80013de <__aeabi_dadd+0x14e>
 80012d4:	2a00      	cmp	r2, #0
 80012d6:	d100      	bne.n	80012da <__aeabi_dadd+0x4a>
 80012d8:	e0be      	b.n	8001458 <__aeabi_dadd+0x1c8>
 80012da:	4ac8      	ldr	r2, [pc, #800]	; (80015fc <__aeabi_dadd+0x36c>)
 80012dc:	4296      	cmp	r6, r2
 80012de:	d100      	bne.n	80012e2 <__aeabi_dadd+0x52>
 80012e0:	e124      	b.n	800152c <__aeabi_dadd+0x29c>
 80012e2:	2280      	movs	r2, #128	; 0x80
 80012e4:	464c      	mov	r4, r9
 80012e6:	0412      	lsls	r2, r2, #16
 80012e8:	4314      	orrs	r4, r2
 80012ea:	46a1      	mov	r9, r4
 80012ec:	2f38      	cmp	r7, #56	; 0x38
 80012ee:	dd00      	ble.n	80012f2 <__aeabi_dadd+0x62>
 80012f0:	e167      	b.n	80015c2 <__aeabi_dadd+0x332>
 80012f2:	2f1f      	cmp	r7, #31
 80012f4:	dd00      	ble.n	80012f8 <__aeabi_dadd+0x68>
 80012f6:	e1d6      	b.n	80016a6 <__aeabi_dadd+0x416>
 80012f8:	2220      	movs	r2, #32
 80012fa:	464c      	mov	r4, r9
 80012fc:	1bd2      	subs	r2, r2, r7
 80012fe:	4094      	lsls	r4, r2
 8001300:	46a2      	mov	sl, r4
 8001302:	4644      	mov	r4, r8
 8001304:	40fc      	lsrs	r4, r7
 8001306:	0020      	movs	r0, r4
 8001308:	4654      	mov	r4, sl
 800130a:	4304      	orrs	r4, r0
 800130c:	4640      	mov	r0, r8
 800130e:	4090      	lsls	r0, r2
 8001310:	1e42      	subs	r2, r0, #1
 8001312:	4190      	sbcs	r0, r2
 8001314:	464a      	mov	r2, r9
 8001316:	40fa      	lsrs	r2, r7
 8001318:	4304      	orrs	r4, r0
 800131a:	1a89      	subs	r1, r1, r2
 800131c:	1b1c      	subs	r4, r3, r4
 800131e:	42a3      	cmp	r3, r4
 8001320:	4192      	sbcs	r2, r2
 8001322:	4252      	negs	r2, r2
 8001324:	1a8b      	subs	r3, r1, r2
 8001326:	469a      	mov	sl, r3
 8001328:	4653      	mov	r3, sl
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	d400      	bmi.n	8001330 <__aeabi_dadd+0xa0>
 800132e:	e0d4      	b.n	80014da <__aeabi_dadd+0x24a>
 8001330:	4653      	mov	r3, sl
 8001332:	025a      	lsls	r2, r3, #9
 8001334:	0a53      	lsrs	r3, r2, #9
 8001336:	469a      	mov	sl, r3
 8001338:	4653      	mov	r3, sl
 800133a:	2b00      	cmp	r3, #0
 800133c:	d100      	bne.n	8001340 <__aeabi_dadd+0xb0>
 800133e:	e104      	b.n	800154a <__aeabi_dadd+0x2ba>
 8001340:	4650      	mov	r0, sl
 8001342:	f001 fb59 	bl	80029f8 <__clzsi2>
 8001346:	0003      	movs	r3, r0
 8001348:	3b08      	subs	r3, #8
 800134a:	2220      	movs	r2, #32
 800134c:	0020      	movs	r0, r4
 800134e:	1ad2      	subs	r2, r2, r3
 8001350:	4651      	mov	r1, sl
 8001352:	40d0      	lsrs	r0, r2
 8001354:	4099      	lsls	r1, r3
 8001356:	0002      	movs	r2, r0
 8001358:	409c      	lsls	r4, r3
 800135a:	430a      	orrs	r2, r1
 800135c:	42b3      	cmp	r3, r6
 800135e:	da00      	bge.n	8001362 <__aeabi_dadd+0xd2>
 8001360:	e102      	b.n	8001568 <__aeabi_dadd+0x2d8>
 8001362:	1b9b      	subs	r3, r3, r6
 8001364:	1c59      	adds	r1, r3, #1
 8001366:	291f      	cmp	r1, #31
 8001368:	dd00      	ble.n	800136c <__aeabi_dadd+0xdc>
 800136a:	e0a7      	b.n	80014bc <__aeabi_dadd+0x22c>
 800136c:	2320      	movs	r3, #32
 800136e:	0010      	movs	r0, r2
 8001370:	0026      	movs	r6, r4
 8001372:	1a5b      	subs	r3, r3, r1
 8001374:	409c      	lsls	r4, r3
 8001376:	4098      	lsls	r0, r3
 8001378:	40ce      	lsrs	r6, r1
 800137a:	40ca      	lsrs	r2, r1
 800137c:	1e63      	subs	r3, r4, #1
 800137e:	419c      	sbcs	r4, r3
 8001380:	4330      	orrs	r0, r6
 8001382:	4692      	mov	sl, r2
 8001384:	2600      	movs	r6, #0
 8001386:	4304      	orrs	r4, r0
 8001388:	0763      	lsls	r3, r4, #29
 800138a:	d009      	beq.n	80013a0 <__aeabi_dadd+0x110>
 800138c:	230f      	movs	r3, #15
 800138e:	4023      	ands	r3, r4
 8001390:	2b04      	cmp	r3, #4
 8001392:	d005      	beq.n	80013a0 <__aeabi_dadd+0x110>
 8001394:	1d23      	adds	r3, r4, #4
 8001396:	42a3      	cmp	r3, r4
 8001398:	41a4      	sbcs	r4, r4
 800139a:	4264      	negs	r4, r4
 800139c:	44a2      	add	sl, r4
 800139e:	001c      	movs	r4, r3
 80013a0:	4653      	mov	r3, sl
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	d400      	bmi.n	80013a8 <__aeabi_dadd+0x118>
 80013a6:	e09b      	b.n	80014e0 <__aeabi_dadd+0x250>
 80013a8:	4b94      	ldr	r3, [pc, #592]	; (80015fc <__aeabi_dadd+0x36c>)
 80013aa:	3601      	adds	r6, #1
 80013ac:	429e      	cmp	r6, r3
 80013ae:	d100      	bne.n	80013b2 <__aeabi_dadd+0x122>
 80013b0:	e0b8      	b.n	8001524 <__aeabi_dadd+0x294>
 80013b2:	4653      	mov	r3, sl
 80013b4:	4992      	ldr	r1, [pc, #584]	; (8001600 <__aeabi_dadd+0x370>)
 80013b6:	08e4      	lsrs	r4, r4, #3
 80013b8:	400b      	ands	r3, r1
 80013ba:	0019      	movs	r1, r3
 80013bc:	075b      	lsls	r3, r3, #29
 80013be:	4323      	orrs	r3, r4
 80013c0:	0572      	lsls	r2, r6, #21
 80013c2:	024c      	lsls	r4, r1, #9
 80013c4:	0b24      	lsrs	r4, r4, #12
 80013c6:	0d52      	lsrs	r2, r2, #21
 80013c8:	0512      	lsls	r2, r2, #20
 80013ca:	07ed      	lsls	r5, r5, #31
 80013cc:	4322      	orrs	r2, r4
 80013ce:	432a      	orrs	r2, r5
 80013d0:	0018      	movs	r0, r3
 80013d2:	0011      	movs	r1, r2
 80013d4:	bce0      	pop	{r5, r6, r7}
 80013d6:	46ba      	mov	sl, r7
 80013d8:	46b1      	mov	r9, r6
 80013da:	46a8      	mov	r8, r5
 80013dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013de:	2f00      	cmp	r7, #0
 80013e0:	d048      	beq.n	8001474 <__aeabi_dadd+0x1e4>
 80013e2:	1b97      	subs	r7, r2, r6
 80013e4:	2e00      	cmp	r6, #0
 80013e6:	d000      	beq.n	80013ea <__aeabi_dadd+0x15a>
 80013e8:	e10e      	b.n	8001608 <__aeabi_dadd+0x378>
 80013ea:	000c      	movs	r4, r1
 80013ec:	431c      	orrs	r4, r3
 80013ee:	d100      	bne.n	80013f2 <__aeabi_dadd+0x162>
 80013f0:	e1b7      	b.n	8001762 <__aeabi_dadd+0x4d2>
 80013f2:	1e7c      	subs	r4, r7, #1
 80013f4:	2f01      	cmp	r7, #1
 80013f6:	d100      	bne.n	80013fa <__aeabi_dadd+0x16a>
 80013f8:	e226      	b.n	8001848 <__aeabi_dadd+0x5b8>
 80013fa:	4d80      	ldr	r5, [pc, #512]	; (80015fc <__aeabi_dadd+0x36c>)
 80013fc:	42af      	cmp	r7, r5
 80013fe:	d100      	bne.n	8001402 <__aeabi_dadd+0x172>
 8001400:	e1d5      	b.n	80017ae <__aeabi_dadd+0x51e>
 8001402:	0027      	movs	r7, r4
 8001404:	e107      	b.n	8001616 <__aeabi_dadd+0x386>
 8001406:	2f00      	cmp	r7, #0
 8001408:	dc00      	bgt.n	800140c <__aeabi_dadd+0x17c>
 800140a:	e0b2      	b.n	8001572 <__aeabi_dadd+0x2e2>
 800140c:	2a00      	cmp	r2, #0
 800140e:	d047      	beq.n	80014a0 <__aeabi_dadd+0x210>
 8001410:	4a7a      	ldr	r2, [pc, #488]	; (80015fc <__aeabi_dadd+0x36c>)
 8001412:	4296      	cmp	r6, r2
 8001414:	d100      	bne.n	8001418 <__aeabi_dadd+0x188>
 8001416:	e089      	b.n	800152c <__aeabi_dadd+0x29c>
 8001418:	2280      	movs	r2, #128	; 0x80
 800141a:	464c      	mov	r4, r9
 800141c:	0412      	lsls	r2, r2, #16
 800141e:	4314      	orrs	r4, r2
 8001420:	46a1      	mov	r9, r4
 8001422:	2f38      	cmp	r7, #56	; 0x38
 8001424:	dc6b      	bgt.n	80014fe <__aeabi_dadd+0x26e>
 8001426:	2f1f      	cmp	r7, #31
 8001428:	dc00      	bgt.n	800142c <__aeabi_dadd+0x19c>
 800142a:	e16e      	b.n	800170a <__aeabi_dadd+0x47a>
 800142c:	003a      	movs	r2, r7
 800142e:	4648      	mov	r0, r9
 8001430:	3a20      	subs	r2, #32
 8001432:	40d0      	lsrs	r0, r2
 8001434:	4684      	mov	ip, r0
 8001436:	2f20      	cmp	r7, #32
 8001438:	d007      	beq.n	800144a <__aeabi_dadd+0x1ba>
 800143a:	2240      	movs	r2, #64	; 0x40
 800143c:	4648      	mov	r0, r9
 800143e:	1bd2      	subs	r2, r2, r7
 8001440:	4090      	lsls	r0, r2
 8001442:	0002      	movs	r2, r0
 8001444:	4640      	mov	r0, r8
 8001446:	4310      	orrs	r0, r2
 8001448:	4680      	mov	r8, r0
 800144a:	4640      	mov	r0, r8
 800144c:	1e42      	subs	r2, r0, #1
 800144e:	4190      	sbcs	r0, r2
 8001450:	4662      	mov	r2, ip
 8001452:	0004      	movs	r4, r0
 8001454:	4314      	orrs	r4, r2
 8001456:	e057      	b.n	8001508 <__aeabi_dadd+0x278>
 8001458:	464a      	mov	r2, r9
 800145a:	4302      	orrs	r2, r0
 800145c:	d100      	bne.n	8001460 <__aeabi_dadd+0x1d0>
 800145e:	e103      	b.n	8001668 <__aeabi_dadd+0x3d8>
 8001460:	1e7a      	subs	r2, r7, #1
 8001462:	2f01      	cmp	r7, #1
 8001464:	d100      	bne.n	8001468 <__aeabi_dadd+0x1d8>
 8001466:	e193      	b.n	8001790 <__aeabi_dadd+0x500>
 8001468:	4c64      	ldr	r4, [pc, #400]	; (80015fc <__aeabi_dadd+0x36c>)
 800146a:	42a7      	cmp	r7, r4
 800146c:	d100      	bne.n	8001470 <__aeabi_dadd+0x1e0>
 800146e:	e18a      	b.n	8001786 <__aeabi_dadd+0x4f6>
 8001470:	0017      	movs	r7, r2
 8001472:	e73b      	b.n	80012ec <__aeabi_dadd+0x5c>
 8001474:	4c63      	ldr	r4, [pc, #396]	; (8001604 <__aeabi_dadd+0x374>)
 8001476:	1c72      	adds	r2, r6, #1
 8001478:	4222      	tst	r2, r4
 800147a:	d000      	beq.n	800147e <__aeabi_dadd+0x1ee>
 800147c:	e0e0      	b.n	8001640 <__aeabi_dadd+0x3b0>
 800147e:	000a      	movs	r2, r1
 8001480:	431a      	orrs	r2, r3
 8001482:	2e00      	cmp	r6, #0
 8001484:	d000      	beq.n	8001488 <__aeabi_dadd+0x1f8>
 8001486:	e174      	b.n	8001772 <__aeabi_dadd+0x4e2>
 8001488:	2a00      	cmp	r2, #0
 800148a:	d100      	bne.n	800148e <__aeabi_dadd+0x1fe>
 800148c:	e1d0      	b.n	8001830 <__aeabi_dadd+0x5a0>
 800148e:	464a      	mov	r2, r9
 8001490:	4302      	orrs	r2, r0
 8001492:	d000      	beq.n	8001496 <__aeabi_dadd+0x206>
 8001494:	e1e3      	b.n	800185e <__aeabi_dadd+0x5ce>
 8001496:	074a      	lsls	r2, r1, #29
 8001498:	08db      	lsrs	r3, r3, #3
 800149a:	4313      	orrs	r3, r2
 800149c:	08c9      	lsrs	r1, r1, #3
 800149e:	e029      	b.n	80014f4 <__aeabi_dadd+0x264>
 80014a0:	464a      	mov	r2, r9
 80014a2:	4302      	orrs	r2, r0
 80014a4:	d100      	bne.n	80014a8 <__aeabi_dadd+0x218>
 80014a6:	e17d      	b.n	80017a4 <__aeabi_dadd+0x514>
 80014a8:	1e7a      	subs	r2, r7, #1
 80014aa:	2f01      	cmp	r7, #1
 80014ac:	d100      	bne.n	80014b0 <__aeabi_dadd+0x220>
 80014ae:	e0e0      	b.n	8001672 <__aeabi_dadd+0x3e2>
 80014b0:	4c52      	ldr	r4, [pc, #328]	; (80015fc <__aeabi_dadd+0x36c>)
 80014b2:	42a7      	cmp	r7, r4
 80014b4:	d100      	bne.n	80014b8 <__aeabi_dadd+0x228>
 80014b6:	e166      	b.n	8001786 <__aeabi_dadd+0x4f6>
 80014b8:	0017      	movs	r7, r2
 80014ba:	e7b2      	b.n	8001422 <__aeabi_dadd+0x192>
 80014bc:	0010      	movs	r0, r2
 80014be:	3b1f      	subs	r3, #31
 80014c0:	40d8      	lsrs	r0, r3
 80014c2:	2920      	cmp	r1, #32
 80014c4:	d003      	beq.n	80014ce <__aeabi_dadd+0x23e>
 80014c6:	2340      	movs	r3, #64	; 0x40
 80014c8:	1a5b      	subs	r3, r3, r1
 80014ca:	409a      	lsls	r2, r3
 80014cc:	4314      	orrs	r4, r2
 80014ce:	1e63      	subs	r3, r4, #1
 80014d0:	419c      	sbcs	r4, r3
 80014d2:	2300      	movs	r3, #0
 80014d4:	2600      	movs	r6, #0
 80014d6:	469a      	mov	sl, r3
 80014d8:	4304      	orrs	r4, r0
 80014da:	0763      	lsls	r3, r4, #29
 80014dc:	d000      	beq.n	80014e0 <__aeabi_dadd+0x250>
 80014de:	e755      	b.n	800138c <__aeabi_dadd+0xfc>
 80014e0:	4652      	mov	r2, sl
 80014e2:	08e3      	lsrs	r3, r4, #3
 80014e4:	0752      	lsls	r2, r2, #29
 80014e6:	4313      	orrs	r3, r2
 80014e8:	4652      	mov	r2, sl
 80014ea:	0037      	movs	r7, r6
 80014ec:	08d1      	lsrs	r1, r2, #3
 80014ee:	4a43      	ldr	r2, [pc, #268]	; (80015fc <__aeabi_dadd+0x36c>)
 80014f0:	4297      	cmp	r7, r2
 80014f2:	d01f      	beq.n	8001534 <__aeabi_dadd+0x2a4>
 80014f4:	0309      	lsls	r1, r1, #12
 80014f6:	057a      	lsls	r2, r7, #21
 80014f8:	0b0c      	lsrs	r4, r1, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	e764      	b.n	80013c8 <__aeabi_dadd+0x138>
 80014fe:	4642      	mov	r2, r8
 8001500:	464c      	mov	r4, r9
 8001502:	4314      	orrs	r4, r2
 8001504:	1e62      	subs	r2, r4, #1
 8001506:	4194      	sbcs	r4, r2
 8001508:	18e4      	adds	r4, r4, r3
 800150a:	429c      	cmp	r4, r3
 800150c:	4192      	sbcs	r2, r2
 800150e:	4252      	negs	r2, r2
 8001510:	4692      	mov	sl, r2
 8001512:	448a      	add	sl, r1
 8001514:	4653      	mov	r3, sl
 8001516:	021b      	lsls	r3, r3, #8
 8001518:	d5df      	bpl.n	80014da <__aeabi_dadd+0x24a>
 800151a:	4b38      	ldr	r3, [pc, #224]	; (80015fc <__aeabi_dadd+0x36c>)
 800151c:	3601      	adds	r6, #1
 800151e:	429e      	cmp	r6, r3
 8001520:	d000      	beq.n	8001524 <__aeabi_dadd+0x294>
 8001522:	e0b3      	b.n	800168c <__aeabi_dadd+0x3fc>
 8001524:	0032      	movs	r2, r6
 8001526:	2400      	movs	r4, #0
 8001528:	2300      	movs	r3, #0
 800152a:	e74d      	b.n	80013c8 <__aeabi_dadd+0x138>
 800152c:	074a      	lsls	r2, r1, #29
 800152e:	08db      	lsrs	r3, r3, #3
 8001530:	4313      	orrs	r3, r2
 8001532:	08c9      	lsrs	r1, r1, #3
 8001534:	001a      	movs	r2, r3
 8001536:	430a      	orrs	r2, r1
 8001538:	d100      	bne.n	800153c <__aeabi_dadd+0x2ac>
 800153a:	e200      	b.n	800193e <__aeabi_dadd+0x6ae>
 800153c:	2480      	movs	r4, #128	; 0x80
 800153e:	0324      	lsls	r4, r4, #12
 8001540:	430c      	orrs	r4, r1
 8001542:	0324      	lsls	r4, r4, #12
 8001544:	4a2d      	ldr	r2, [pc, #180]	; (80015fc <__aeabi_dadd+0x36c>)
 8001546:	0b24      	lsrs	r4, r4, #12
 8001548:	e73e      	b.n	80013c8 <__aeabi_dadd+0x138>
 800154a:	0020      	movs	r0, r4
 800154c:	f001 fa54 	bl	80029f8 <__clzsi2>
 8001550:	0003      	movs	r3, r0
 8001552:	3318      	adds	r3, #24
 8001554:	2b1f      	cmp	r3, #31
 8001556:	dc00      	bgt.n	800155a <__aeabi_dadd+0x2ca>
 8001558:	e6f7      	b.n	800134a <__aeabi_dadd+0xba>
 800155a:	0022      	movs	r2, r4
 800155c:	3808      	subs	r0, #8
 800155e:	4082      	lsls	r2, r0
 8001560:	2400      	movs	r4, #0
 8001562:	42b3      	cmp	r3, r6
 8001564:	db00      	blt.n	8001568 <__aeabi_dadd+0x2d8>
 8001566:	e6fc      	b.n	8001362 <__aeabi_dadd+0xd2>
 8001568:	1af6      	subs	r6, r6, r3
 800156a:	4b25      	ldr	r3, [pc, #148]	; (8001600 <__aeabi_dadd+0x370>)
 800156c:	401a      	ands	r2, r3
 800156e:	4692      	mov	sl, r2
 8001570:	e70a      	b.n	8001388 <__aeabi_dadd+0xf8>
 8001572:	2f00      	cmp	r7, #0
 8001574:	d02b      	beq.n	80015ce <__aeabi_dadd+0x33e>
 8001576:	1b97      	subs	r7, r2, r6
 8001578:	2e00      	cmp	r6, #0
 800157a:	d100      	bne.n	800157e <__aeabi_dadd+0x2ee>
 800157c:	e0b8      	b.n	80016f0 <__aeabi_dadd+0x460>
 800157e:	4c1f      	ldr	r4, [pc, #124]	; (80015fc <__aeabi_dadd+0x36c>)
 8001580:	42a2      	cmp	r2, r4
 8001582:	d100      	bne.n	8001586 <__aeabi_dadd+0x2f6>
 8001584:	e11c      	b.n	80017c0 <__aeabi_dadd+0x530>
 8001586:	2480      	movs	r4, #128	; 0x80
 8001588:	0424      	lsls	r4, r4, #16
 800158a:	4321      	orrs	r1, r4
 800158c:	2f38      	cmp	r7, #56	; 0x38
 800158e:	dd00      	ble.n	8001592 <__aeabi_dadd+0x302>
 8001590:	e11e      	b.n	80017d0 <__aeabi_dadd+0x540>
 8001592:	2f1f      	cmp	r7, #31
 8001594:	dd00      	ble.n	8001598 <__aeabi_dadd+0x308>
 8001596:	e19e      	b.n	80018d6 <__aeabi_dadd+0x646>
 8001598:	2620      	movs	r6, #32
 800159a:	000c      	movs	r4, r1
 800159c:	1bf6      	subs	r6, r6, r7
 800159e:	0018      	movs	r0, r3
 80015a0:	40b3      	lsls	r3, r6
 80015a2:	40b4      	lsls	r4, r6
 80015a4:	40f8      	lsrs	r0, r7
 80015a6:	1e5e      	subs	r6, r3, #1
 80015a8:	41b3      	sbcs	r3, r6
 80015aa:	40f9      	lsrs	r1, r7
 80015ac:	4304      	orrs	r4, r0
 80015ae:	431c      	orrs	r4, r3
 80015b0:	4489      	add	r9, r1
 80015b2:	4444      	add	r4, r8
 80015b4:	4544      	cmp	r4, r8
 80015b6:	419b      	sbcs	r3, r3
 80015b8:	425b      	negs	r3, r3
 80015ba:	444b      	add	r3, r9
 80015bc:	469a      	mov	sl, r3
 80015be:	0016      	movs	r6, r2
 80015c0:	e7a8      	b.n	8001514 <__aeabi_dadd+0x284>
 80015c2:	4642      	mov	r2, r8
 80015c4:	464c      	mov	r4, r9
 80015c6:	4314      	orrs	r4, r2
 80015c8:	1e62      	subs	r2, r4, #1
 80015ca:	4194      	sbcs	r4, r2
 80015cc:	e6a6      	b.n	800131c <__aeabi_dadd+0x8c>
 80015ce:	4c0d      	ldr	r4, [pc, #52]	; (8001604 <__aeabi_dadd+0x374>)
 80015d0:	1c72      	adds	r2, r6, #1
 80015d2:	4222      	tst	r2, r4
 80015d4:	d000      	beq.n	80015d8 <__aeabi_dadd+0x348>
 80015d6:	e0a8      	b.n	800172a <__aeabi_dadd+0x49a>
 80015d8:	000a      	movs	r2, r1
 80015da:	431a      	orrs	r2, r3
 80015dc:	2e00      	cmp	r6, #0
 80015de:	d000      	beq.n	80015e2 <__aeabi_dadd+0x352>
 80015e0:	e10a      	b.n	80017f8 <__aeabi_dadd+0x568>
 80015e2:	2a00      	cmp	r2, #0
 80015e4:	d100      	bne.n	80015e8 <__aeabi_dadd+0x358>
 80015e6:	e15e      	b.n	80018a6 <__aeabi_dadd+0x616>
 80015e8:	464a      	mov	r2, r9
 80015ea:	4302      	orrs	r2, r0
 80015ec:	d000      	beq.n	80015f0 <__aeabi_dadd+0x360>
 80015ee:	e161      	b.n	80018b4 <__aeabi_dadd+0x624>
 80015f0:	074a      	lsls	r2, r1, #29
 80015f2:	08db      	lsrs	r3, r3, #3
 80015f4:	4313      	orrs	r3, r2
 80015f6:	08c9      	lsrs	r1, r1, #3
 80015f8:	e77c      	b.n	80014f4 <__aeabi_dadd+0x264>
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	000007ff 	.word	0x000007ff
 8001600:	ff7fffff 	.word	0xff7fffff
 8001604:	000007fe 	.word	0x000007fe
 8001608:	4ccf      	ldr	r4, [pc, #828]	; (8001948 <__aeabi_dadd+0x6b8>)
 800160a:	42a2      	cmp	r2, r4
 800160c:	d100      	bne.n	8001610 <__aeabi_dadd+0x380>
 800160e:	e0ce      	b.n	80017ae <__aeabi_dadd+0x51e>
 8001610:	2480      	movs	r4, #128	; 0x80
 8001612:	0424      	lsls	r4, r4, #16
 8001614:	4321      	orrs	r1, r4
 8001616:	2f38      	cmp	r7, #56	; 0x38
 8001618:	dc5b      	bgt.n	80016d2 <__aeabi_dadd+0x442>
 800161a:	2f1f      	cmp	r7, #31
 800161c:	dd00      	ble.n	8001620 <__aeabi_dadd+0x390>
 800161e:	e0dc      	b.n	80017da <__aeabi_dadd+0x54a>
 8001620:	2520      	movs	r5, #32
 8001622:	000c      	movs	r4, r1
 8001624:	1bed      	subs	r5, r5, r7
 8001626:	001e      	movs	r6, r3
 8001628:	40ab      	lsls	r3, r5
 800162a:	40ac      	lsls	r4, r5
 800162c:	40fe      	lsrs	r6, r7
 800162e:	1e5d      	subs	r5, r3, #1
 8001630:	41ab      	sbcs	r3, r5
 8001632:	4334      	orrs	r4, r6
 8001634:	40f9      	lsrs	r1, r7
 8001636:	431c      	orrs	r4, r3
 8001638:	464b      	mov	r3, r9
 800163a:	1a5b      	subs	r3, r3, r1
 800163c:	4699      	mov	r9, r3
 800163e:	e04c      	b.n	80016da <__aeabi_dadd+0x44a>
 8001640:	464a      	mov	r2, r9
 8001642:	1a1c      	subs	r4, r3, r0
 8001644:	1a88      	subs	r0, r1, r2
 8001646:	42a3      	cmp	r3, r4
 8001648:	4192      	sbcs	r2, r2
 800164a:	4252      	negs	r2, r2
 800164c:	4692      	mov	sl, r2
 800164e:	0002      	movs	r2, r0
 8001650:	4650      	mov	r0, sl
 8001652:	1a12      	subs	r2, r2, r0
 8001654:	4692      	mov	sl, r2
 8001656:	0212      	lsls	r2, r2, #8
 8001658:	d478      	bmi.n	800174c <__aeabi_dadd+0x4bc>
 800165a:	4653      	mov	r3, sl
 800165c:	4323      	orrs	r3, r4
 800165e:	d000      	beq.n	8001662 <__aeabi_dadd+0x3d2>
 8001660:	e66a      	b.n	8001338 <__aeabi_dadd+0xa8>
 8001662:	2100      	movs	r1, #0
 8001664:	2500      	movs	r5, #0
 8001666:	e745      	b.n	80014f4 <__aeabi_dadd+0x264>
 8001668:	074a      	lsls	r2, r1, #29
 800166a:	08db      	lsrs	r3, r3, #3
 800166c:	4313      	orrs	r3, r2
 800166e:	08c9      	lsrs	r1, r1, #3
 8001670:	e73d      	b.n	80014ee <__aeabi_dadd+0x25e>
 8001672:	181c      	adds	r4, r3, r0
 8001674:	429c      	cmp	r4, r3
 8001676:	419b      	sbcs	r3, r3
 8001678:	4449      	add	r1, r9
 800167a:	468a      	mov	sl, r1
 800167c:	425b      	negs	r3, r3
 800167e:	449a      	add	sl, r3
 8001680:	4653      	mov	r3, sl
 8001682:	2601      	movs	r6, #1
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	d400      	bmi.n	800168a <__aeabi_dadd+0x3fa>
 8001688:	e727      	b.n	80014da <__aeabi_dadd+0x24a>
 800168a:	2602      	movs	r6, #2
 800168c:	4652      	mov	r2, sl
 800168e:	4baf      	ldr	r3, [pc, #700]	; (800194c <__aeabi_dadd+0x6bc>)
 8001690:	2101      	movs	r1, #1
 8001692:	401a      	ands	r2, r3
 8001694:	0013      	movs	r3, r2
 8001696:	4021      	ands	r1, r4
 8001698:	0862      	lsrs	r2, r4, #1
 800169a:	430a      	orrs	r2, r1
 800169c:	07dc      	lsls	r4, r3, #31
 800169e:	085b      	lsrs	r3, r3, #1
 80016a0:	469a      	mov	sl, r3
 80016a2:	4314      	orrs	r4, r2
 80016a4:	e670      	b.n	8001388 <__aeabi_dadd+0xf8>
 80016a6:	003a      	movs	r2, r7
 80016a8:	464c      	mov	r4, r9
 80016aa:	3a20      	subs	r2, #32
 80016ac:	40d4      	lsrs	r4, r2
 80016ae:	46a4      	mov	ip, r4
 80016b0:	2f20      	cmp	r7, #32
 80016b2:	d007      	beq.n	80016c4 <__aeabi_dadd+0x434>
 80016b4:	2240      	movs	r2, #64	; 0x40
 80016b6:	4648      	mov	r0, r9
 80016b8:	1bd2      	subs	r2, r2, r7
 80016ba:	4090      	lsls	r0, r2
 80016bc:	0002      	movs	r2, r0
 80016be:	4640      	mov	r0, r8
 80016c0:	4310      	orrs	r0, r2
 80016c2:	4680      	mov	r8, r0
 80016c4:	4640      	mov	r0, r8
 80016c6:	1e42      	subs	r2, r0, #1
 80016c8:	4190      	sbcs	r0, r2
 80016ca:	4662      	mov	r2, ip
 80016cc:	0004      	movs	r4, r0
 80016ce:	4314      	orrs	r4, r2
 80016d0:	e624      	b.n	800131c <__aeabi_dadd+0x8c>
 80016d2:	4319      	orrs	r1, r3
 80016d4:	000c      	movs	r4, r1
 80016d6:	1e63      	subs	r3, r4, #1
 80016d8:	419c      	sbcs	r4, r3
 80016da:	4643      	mov	r3, r8
 80016dc:	1b1c      	subs	r4, r3, r4
 80016de:	45a0      	cmp	r8, r4
 80016e0:	419b      	sbcs	r3, r3
 80016e2:	4649      	mov	r1, r9
 80016e4:	425b      	negs	r3, r3
 80016e6:	1acb      	subs	r3, r1, r3
 80016e8:	469a      	mov	sl, r3
 80016ea:	4665      	mov	r5, ip
 80016ec:	0016      	movs	r6, r2
 80016ee:	e61b      	b.n	8001328 <__aeabi_dadd+0x98>
 80016f0:	000c      	movs	r4, r1
 80016f2:	431c      	orrs	r4, r3
 80016f4:	d100      	bne.n	80016f8 <__aeabi_dadd+0x468>
 80016f6:	e0c7      	b.n	8001888 <__aeabi_dadd+0x5f8>
 80016f8:	1e7c      	subs	r4, r7, #1
 80016fa:	2f01      	cmp	r7, #1
 80016fc:	d100      	bne.n	8001700 <__aeabi_dadd+0x470>
 80016fe:	e0f9      	b.n	80018f4 <__aeabi_dadd+0x664>
 8001700:	4e91      	ldr	r6, [pc, #580]	; (8001948 <__aeabi_dadd+0x6b8>)
 8001702:	42b7      	cmp	r7, r6
 8001704:	d05c      	beq.n	80017c0 <__aeabi_dadd+0x530>
 8001706:	0027      	movs	r7, r4
 8001708:	e740      	b.n	800158c <__aeabi_dadd+0x2fc>
 800170a:	2220      	movs	r2, #32
 800170c:	464c      	mov	r4, r9
 800170e:	4640      	mov	r0, r8
 8001710:	1bd2      	subs	r2, r2, r7
 8001712:	4094      	lsls	r4, r2
 8001714:	40f8      	lsrs	r0, r7
 8001716:	4304      	orrs	r4, r0
 8001718:	4640      	mov	r0, r8
 800171a:	4090      	lsls	r0, r2
 800171c:	1e42      	subs	r2, r0, #1
 800171e:	4190      	sbcs	r0, r2
 8001720:	464a      	mov	r2, r9
 8001722:	40fa      	lsrs	r2, r7
 8001724:	4304      	orrs	r4, r0
 8001726:	1889      	adds	r1, r1, r2
 8001728:	e6ee      	b.n	8001508 <__aeabi_dadd+0x278>
 800172a:	4c87      	ldr	r4, [pc, #540]	; (8001948 <__aeabi_dadd+0x6b8>)
 800172c:	42a2      	cmp	r2, r4
 800172e:	d100      	bne.n	8001732 <__aeabi_dadd+0x4a2>
 8001730:	e6f9      	b.n	8001526 <__aeabi_dadd+0x296>
 8001732:	1818      	adds	r0, r3, r0
 8001734:	4298      	cmp	r0, r3
 8001736:	419b      	sbcs	r3, r3
 8001738:	4449      	add	r1, r9
 800173a:	425b      	negs	r3, r3
 800173c:	18cb      	adds	r3, r1, r3
 800173e:	07dc      	lsls	r4, r3, #31
 8001740:	0840      	lsrs	r0, r0, #1
 8001742:	085b      	lsrs	r3, r3, #1
 8001744:	469a      	mov	sl, r3
 8001746:	0016      	movs	r6, r2
 8001748:	4304      	orrs	r4, r0
 800174a:	e6c6      	b.n	80014da <__aeabi_dadd+0x24a>
 800174c:	4642      	mov	r2, r8
 800174e:	1ad4      	subs	r4, r2, r3
 8001750:	45a0      	cmp	r8, r4
 8001752:	4180      	sbcs	r0, r0
 8001754:	464b      	mov	r3, r9
 8001756:	4240      	negs	r0, r0
 8001758:	1a59      	subs	r1, r3, r1
 800175a:	1a0b      	subs	r3, r1, r0
 800175c:	469a      	mov	sl, r3
 800175e:	4665      	mov	r5, ip
 8001760:	e5ea      	b.n	8001338 <__aeabi_dadd+0xa8>
 8001762:	464b      	mov	r3, r9
 8001764:	464a      	mov	r2, r9
 8001766:	08c0      	lsrs	r0, r0, #3
 8001768:	075b      	lsls	r3, r3, #29
 800176a:	4665      	mov	r5, ip
 800176c:	4303      	orrs	r3, r0
 800176e:	08d1      	lsrs	r1, r2, #3
 8001770:	e6bd      	b.n	80014ee <__aeabi_dadd+0x25e>
 8001772:	2a00      	cmp	r2, #0
 8001774:	d000      	beq.n	8001778 <__aeabi_dadd+0x4e8>
 8001776:	e08e      	b.n	8001896 <__aeabi_dadd+0x606>
 8001778:	464b      	mov	r3, r9
 800177a:	4303      	orrs	r3, r0
 800177c:	d117      	bne.n	80017ae <__aeabi_dadd+0x51e>
 800177e:	2180      	movs	r1, #128	; 0x80
 8001780:	2500      	movs	r5, #0
 8001782:	0309      	lsls	r1, r1, #12
 8001784:	e6da      	b.n	800153c <__aeabi_dadd+0x2ac>
 8001786:	074a      	lsls	r2, r1, #29
 8001788:	08db      	lsrs	r3, r3, #3
 800178a:	4313      	orrs	r3, r2
 800178c:	08c9      	lsrs	r1, r1, #3
 800178e:	e6d1      	b.n	8001534 <__aeabi_dadd+0x2a4>
 8001790:	1a1c      	subs	r4, r3, r0
 8001792:	464a      	mov	r2, r9
 8001794:	42a3      	cmp	r3, r4
 8001796:	419b      	sbcs	r3, r3
 8001798:	1a89      	subs	r1, r1, r2
 800179a:	425b      	negs	r3, r3
 800179c:	1acb      	subs	r3, r1, r3
 800179e:	469a      	mov	sl, r3
 80017a0:	2601      	movs	r6, #1
 80017a2:	e5c1      	b.n	8001328 <__aeabi_dadd+0x98>
 80017a4:	074a      	lsls	r2, r1, #29
 80017a6:	08db      	lsrs	r3, r3, #3
 80017a8:	4313      	orrs	r3, r2
 80017aa:	08c9      	lsrs	r1, r1, #3
 80017ac:	e69f      	b.n	80014ee <__aeabi_dadd+0x25e>
 80017ae:	4643      	mov	r3, r8
 80017b0:	08d8      	lsrs	r0, r3, #3
 80017b2:	464b      	mov	r3, r9
 80017b4:	464a      	mov	r2, r9
 80017b6:	075b      	lsls	r3, r3, #29
 80017b8:	4665      	mov	r5, ip
 80017ba:	4303      	orrs	r3, r0
 80017bc:	08d1      	lsrs	r1, r2, #3
 80017be:	e6b9      	b.n	8001534 <__aeabi_dadd+0x2a4>
 80017c0:	4643      	mov	r3, r8
 80017c2:	08d8      	lsrs	r0, r3, #3
 80017c4:	464b      	mov	r3, r9
 80017c6:	464a      	mov	r2, r9
 80017c8:	075b      	lsls	r3, r3, #29
 80017ca:	4303      	orrs	r3, r0
 80017cc:	08d1      	lsrs	r1, r2, #3
 80017ce:	e6b1      	b.n	8001534 <__aeabi_dadd+0x2a4>
 80017d0:	4319      	orrs	r1, r3
 80017d2:	000c      	movs	r4, r1
 80017d4:	1e63      	subs	r3, r4, #1
 80017d6:	419c      	sbcs	r4, r3
 80017d8:	e6eb      	b.n	80015b2 <__aeabi_dadd+0x322>
 80017da:	003c      	movs	r4, r7
 80017dc:	000d      	movs	r5, r1
 80017de:	3c20      	subs	r4, #32
 80017e0:	40e5      	lsrs	r5, r4
 80017e2:	2f20      	cmp	r7, #32
 80017e4:	d003      	beq.n	80017ee <__aeabi_dadd+0x55e>
 80017e6:	2440      	movs	r4, #64	; 0x40
 80017e8:	1be4      	subs	r4, r4, r7
 80017ea:	40a1      	lsls	r1, r4
 80017ec:	430b      	orrs	r3, r1
 80017ee:	001c      	movs	r4, r3
 80017f0:	1e63      	subs	r3, r4, #1
 80017f2:	419c      	sbcs	r4, r3
 80017f4:	432c      	orrs	r4, r5
 80017f6:	e770      	b.n	80016da <__aeabi_dadd+0x44a>
 80017f8:	2a00      	cmp	r2, #0
 80017fa:	d0e1      	beq.n	80017c0 <__aeabi_dadd+0x530>
 80017fc:	464a      	mov	r2, r9
 80017fe:	4302      	orrs	r2, r0
 8001800:	d0c1      	beq.n	8001786 <__aeabi_dadd+0x4f6>
 8001802:	074a      	lsls	r2, r1, #29
 8001804:	08db      	lsrs	r3, r3, #3
 8001806:	4313      	orrs	r3, r2
 8001808:	2280      	movs	r2, #128	; 0x80
 800180a:	08c9      	lsrs	r1, r1, #3
 800180c:	0312      	lsls	r2, r2, #12
 800180e:	4211      	tst	r1, r2
 8001810:	d008      	beq.n	8001824 <__aeabi_dadd+0x594>
 8001812:	4648      	mov	r0, r9
 8001814:	08c4      	lsrs	r4, r0, #3
 8001816:	4214      	tst	r4, r2
 8001818:	d104      	bne.n	8001824 <__aeabi_dadd+0x594>
 800181a:	4643      	mov	r3, r8
 800181c:	0021      	movs	r1, r4
 800181e:	08db      	lsrs	r3, r3, #3
 8001820:	0742      	lsls	r2, r0, #29
 8001822:	4313      	orrs	r3, r2
 8001824:	0f5a      	lsrs	r2, r3, #29
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	0752      	lsls	r2, r2, #29
 800182a:	08db      	lsrs	r3, r3, #3
 800182c:	4313      	orrs	r3, r2
 800182e:	e681      	b.n	8001534 <__aeabi_dadd+0x2a4>
 8001830:	464b      	mov	r3, r9
 8001832:	4303      	orrs	r3, r0
 8001834:	d100      	bne.n	8001838 <__aeabi_dadd+0x5a8>
 8001836:	e714      	b.n	8001662 <__aeabi_dadd+0x3d2>
 8001838:	464b      	mov	r3, r9
 800183a:	464a      	mov	r2, r9
 800183c:	08c0      	lsrs	r0, r0, #3
 800183e:	075b      	lsls	r3, r3, #29
 8001840:	4665      	mov	r5, ip
 8001842:	4303      	orrs	r3, r0
 8001844:	08d1      	lsrs	r1, r2, #3
 8001846:	e655      	b.n	80014f4 <__aeabi_dadd+0x264>
 8001848:	1ac4      	subs	r4, r0, r3
 800184a:	45a0      	cmp	r8, r4
 800184c:	4180      	sbcs	r0, r0
 800184e:	464b      	mov	r3, r9
 8001850:	4240      	negs	r0, r0
 8001852:	1a59      	subs	r1, r3, r1
 8001854:	1a0b      	subs	r3, r1, r0
 8001856:	469a      	mov	sl, r3
 8001858:	4665      	mov	r5, ip
 800185a:	2601      	movs	r6, #1
 800185c:	e564      	b.n	8001328 <__aeabi_dadd+0x98>
 800185e:	1a1c      	subs	r4, r3, r0
 8001860:	464a      	mov	r2, r9
 8001862:	42a3      	cmp	r3, r4
 8001864:	4180      	sbcs	r0, r0
 8001866:	1a8a      	subs	r2, r1, r2
 8001868:	4240      	negs	r0, r0
 800186a:	1a12      	subs	r2, r2, r0
 800186c:	4692      	mov	sl, r2
 800186e:	0212      	lsls	r2, r2, #8
 8001870:	d549      	bpl.n	8001906 <__aeabi_dadd+0x676>
 8001872:	4642      	mov	r2, r8
 8001874:	1ad4      	subs	r4, r2, r3
 8001876:	45a0      	cmp	r8, r4
 8001878:	4180      	sbcs	r0, r0
 800187a:	464b      	mov	r3, r9
 800187c:	4240      	negs	r0, r0
 800187e:	1a59      	subs	r1, r3, r1
 8001880:	1a0b      	subs	r3, r1, r0
 8001882:	469a      	mov	sl, r3
 8001884:	4665      	mov	r5, ip
 8001886:	e57f      	b.n	8001388 <__aeabi_dadd+0xf8>
 8001888:	464b      	mov	r3, r9
 800188a:	464a      	mov	r2, r9
 800188c:	08c0      	lsrs	r0, r0, #3
 800188e:	075b      	lsls	r3, r3, #29
 8001890:	4303      	orrs	r3, r0
 8001892:	08d1      	lsrs	r1, r2, #3
 8001894:	e62b      	b.n	80014ee <__aeabi_dadd+0x25e>
 8001896:	464a      	mov	r2, r9
 8001898:	08db      	lsrs	r3, r3, #3
 800189a:	4302      	orrs	r2, r0
 800189c:	d138      	bne.n	8001910 <__aeabi_dadd+0x680>
 800189e:	074a      	lsls	r2, r1, #29
 80018a0:	4313      	orrs	r3, r2
 80018a2:	08c9      	lsrs	r1, r1, #3
 80018a4:	e646      	b.n	8001534 <__aeabi_dadd+0x2a4>
 80018a6:	464b      	mov	r3, r9
 80018a8:	464a      	mov	r2, r9
 80018aa:	08c0      	lsrs	r0, r0, #3
 80018ac:	075b      	lsls	r3, r3, #29
 80018ae:	4303      	orrs	r3, r0
 80018b0:	08d1      	lsrs	r1, r2, #3
 80018b2:	e61f      	b.n	80014f4 <__aeabi_dadd+0x264>
 80018b4:	181c      	adds	r4, r3, r0
 80018b6:	429c      	cmp	r4, r3
 80018b8:	419b      	sbcs	r3, r3
 80018ba:	4449      	add	r1, r9
 80018bc:	468a      	mov	sl, r1
 80018be:	425b      	negs	r3, r3
 80018c0:	449a      	add	sl, r3
 80018c2:	4653      	mov	r3, sl
 80018c4:	021b      	lsls	r3, r3, #8
 80018c6:	d400      	bmi.n	80018ca <__aeabi_dadd+0x63a>
 80018c8:	e607      	b.n	80014da <__aeabi_dadd+0x24a>
 80018ca:	4652      	mov	r2, sl
 80018cc:	4b1f      	ldr	r3, [pc, #124]	; (800194c <__aeabi_dadd+0x6bc>)
 80018ce:	2601      	movs	r6, #1
 80018d0:	401a      	ands	r2, r3
 80018d2:	4692      	mov	sl, r2
 80018d4:	e601      	b.n	80014da <__aeabi_dadd+0x24a>
 80018d6:	003c      	movs	r4, r7
 80018d8:	000e      	movs	r6, r1
 80018da:	3c20      	subs	r4, #32
 80018dc:	40e6      	lsrs	r6, r4
 80018de:	2f20      	cmp	r7, #32
 80018e0:	d003      	beq.n	80018ea <__aeabi_dadd+0x65a>
 80018e2:	2440      	movs	r4, #64	; 0x40
 80018e4:	1be4      	subs	r4, r4, r7
 80018e6:	40a1      	lsls	r1, r4
 80018e8:	430b      	orrs	r3, r1
 80018ea:	001c      	movs	r4, r3
 80018ec:	1e63      	subs	r3, r4, #1
 80018ee:	419c      	sbcs	r4, r3
 80018f0:	4334      	orrs	r4, r6
 80018f2:	e65e      	b.n	80015b2 <__aeabi_dadd+0x322>
 80018f4:	4443      	add	r3, r8
 80018f6:	4283      	cmp	r3, r0
 80018f8:	4180      	sbcs	r0, r0
 80018fa:	4449      	add	r1, r9
 80018fc:	468a      	mov	sl, r1
 80018fe:	4240      	negs	r0, r0
 8001900:	001c      	movs	r4, r3
 8001902:	4482      	add	sl, r0
 8001904:	e6bc      	b.n	8001680 <__aeabi_dadd+0x3f0>
 8001906:	4653      	mov	r3, sl
 8001908:	4323      	orrs	r3, r4
 800190a:	d100      	bne.n	800190e <__aeabi_dadd+0x67e>
 800190c:	e6a9      	b.n	8001662 <__aeabi_dadd+0x3d2>
 800190e:	e5e4      	b.n	80014da <__aeabi_dadd+0x24a>
 8001910:	074a      	lsls	r2, r1, #29
 8001912:	4313      	orrs	r3, r2
 8001914:	2280      	movs	r2, #128	; 0x80
 8001916:	08c9      	lsrs	r1, r1, #3
 8001918:	0312      	lsls	r2, r2, #12
 800191a:	4211      	tst	r1, r2
 800191c:	d009      	beq.n	8001932 <__aeabi_dadd+0x6a2>
 800191e:	4648      	mov	r0, r9
 8001920:	08c4      	lsrs	r4, r0, #3
 8001922:	4214      	tst	r4, r2
 8001924:	d105      	bne.n	8001932 <__aeabi_dadd+0x6a2>
 8001926:	4643      	mov	r3, r8
 8001928:	4665      	mov	r5, ip
 800192a:	0021      	movs	r1, r4
 800192c:	08db      	lsrs	r3, r3, #3
 800192e:	0742      	lsls	r2, r0, #29
 8001930:	4313      	orrs	r3, r2
 8001932:	0f5a      	lsrs	r2, r3, #29
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	08db      	lsrs	r3, r3, #3
 8001938:	0752      	lsls	r2, r2, #29
 800193a:	4313      	orrs	r3, r2
 800193c:	e5fa      	b.n	8001534 <__aeabi_dadd+0x2a4>
 800193e:	2300      	movs	r3, #0
 8001940:	4a01      	ldr	r2, [pc, #4]	; (8001948 <__aeabi_dadd+0x6b8>)
 8001942:	001c      	movs	r4, r3
 8001944:	e540      	b.n	80013c8 <__aeabi_dadd+0x138>
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	000007ff 	.word	0x000007ff
 800194c:	ff7fffff 	.word	0xff7fffff

08001950 <__eqdf2>:
 8001950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001952:	464e      	mov	r6, r9
 8001954:	4645      	mov	r5, r8
 8001956:	46de      	mov	lr, fp
 8001958:	4657      	mov	r7, sl
 800195a:	4690      	mov	r8, r2
 800195c:	b5e0      	push	{r5, r6, r7, lr}
 800195e:	0017      	movs	r7, r2
 8001960:	031a      	lsls	r2, r3, #12
 8001962:	0b12      	lsrs	r2, r2, #12
 8001964:	0005      	movs	r5, r0
 8001966:	4684      	mov	ip, r0
 8001968:	4819      	ldr	r0, [pc, #100]	; (80019d0 <__eqdf2+0x80>)
 800196a:	030e      	lsls	r6, r1, #12
 800196c:	004c      	lsls	r4, r1, #1
 800196e:	4691      	mov	r9, r2
 8001970:	005a      	lsls	r2, r3, #1
 8001972:	0fdb      	lsrs	r3, r3, #31
 8001974:	469b      	mov	fp, r3
 8001976:	0b36      	lsrs	r6, r6, #12
 8001978:	0d64      	lsrs	r4, r4, #21
 800197a:	0fc9      	lsrs	r1, r1, #31
 800197c:	0d52      	lsrs	r2, r2, #21
 800197e:	4284      	cmp	r4, r0
 8001980:	d019      	beq.n	80019b6 <__eqdf2+0x66>
 8001982:	4282      	cmp	r2, r0
 8001984:	d010      	beq.n	80019a8 <__eqdf2+0x58>
 8001986:	2001      	movs	r0, #1
 8001988:	4294      	cmp	r4, r2
 800198a:	d10e      	bne.n	80019aa <__eqdf2+0x5a>
 800198c:	454e      	cmp	r6, r9
 800198e:	d10c      	bne.n	80019aa <__eqdf2+0x5a>
 8001990:	2001      	movs	r0, #1
 8001992:	45c4      	cmp	ip, r8
 8001994:	d109      	bne.n	80019aa <__eqdf2+0x5a>
 8001996:	4559      	cmp	r1, fp
 8001998:	d017      	beq.n	80019ca <__eqdf2+0x7a>
 800199a:	2c00      	cmp	r4, #0
 800199c:	d105      	bne.n	80019aa <__eqdf2+0x5a>
 800199e:	0030      	movs	r0, r6
 80019a0:	4328      	orrs	r0, r5
 80019a2:	1e43      	subs	r3, r0, #1
 80019a4:	4198      	sbcs	r0, r3
 80019a6:	e000      	b.n	80019aa <__eqdf2+0x5a>
 80019a8:	2001      	movs	r0, #1
 80019aa:	bcf0      	pop	{r4, r5, r6, r7}
 80019ac:	46bb      	mov	fp, r7
 80019ae:	46b2      	mov	sl, r6
 80019b0:	46a9      	mov	r9, r5
 80019b2:	46a0      	mov	r8, r4
 80019b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019b6:	0033      	movs	r3, r6
 80019b8:	2001      	movs	r0, #1
 80019ba:	432b      	orrs	r3, r5
 80019bc:	d1f5      	bne.n	80019aa <__eqdf2+0x5a>
 80019be:	42a2      	cmp	r2, r4
 80019c0:	d1f3      	bne.n	80019aa <__eqdf2+0x5a>
 80019c2:	464b      	mov	r3, r9
 80019c4:	433b      	orrs	r3, r7
 80019c6:	d1f0      	bne.n	80019aa <__eqdf2+0x5a>
 80019c8:	e7e2      	b.n	8001990 <__eqdf2+0x40>
 80019ca:	2000      	movs	r0, #0
 80019cc:	e7ed      	b.n	80019aa <__eqdf2+0x5a>
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	000007ff 	.word	0x000007ff

080019d4 <__gedf2>:
 80019d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d6:	4647      	mov	r7, r8
 80019d8:	46ce      	mov	lr, r9
 80019da:	0004      	movs	r4, r0
 80019dc:	0018      	movs	r0, r3
 80019de:	0016      	movs	r6, r2
 80019e0:	031b      	lsls	r3, r3, #12
 80019e2:	0b1b      	lsrs	r3, r3, #12
 80019e4:	4d2d      	ldr	r5, [pc, #180]	; (8001a9c <__gedf2+0xc8>)
 80019e6:	004a      	lsls	r2, r1, #1
 80019e8:	4699      	mov	r9, r3
 80019ea:	b580      	push	{r7, lr}
 80019ec:	0043      	lsls	r3, r0, #1
 80019ee:	030f      	lsls	r7, r1, #12
 80019f0:	46a4      	mov	ip, r4
 80019f2:	46b0      	mov	r8, r6
 80019f4:	0b3f      	lsrs	r7, r7, #12
 80019f6:	0d52      	lsrs	r2, r2, #21
 80019f8:	0fc9      	lsrs	r1, r1, #31
 80019fa:	0d5b      	lsrs	r3, r3, #21
 80019fc:	0fc0      	lsrs	r0, r0, #31
 80019fe:	42aa      	cmp	r2, r5
 8001a00:	d021      	beq.n	8001a46 <__gedf2+0x72>
 8001a02:	42ab      	cmp	r3, r5
 8001a04:	d013      	beq.n	8001a2e <__gedf2+0x5a>
 8001a06:	2a00      	cmp	r2, #0
 8001a08:	d122      	bne.n	8001a50 <__gedf2+0x7c>
 8001a0a:	433c      	orrs	r4, r7
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d102      	bne.n	8001a16 <__gedf2+0x42>
 8001a10:	464d      	mov	r5, r9
 8001a12:	432e      	orrs	r6, r5
 8001a14:	d022      	beq.n	8001a5c <__gedf2+0x88>
 8001a16:	2c00      	cmp	r4, #0
 8001a18:	d010      	beq.n	8001a3c <__gedf2+0x68>
 8001a1a:	4281      	cmp	r1, r0
 8001a1c:	d022      	beq.n	8001a64 <__gedf2+0x90>
 8001a1e:	2002      	movs	r0, #2
 8001a20:	3901      	subs	r1, #1
 8001a22:	4008      	ands	r0, r1
 8001a24:	3801      	subs	r0, #1
 8001a26:	bcc0      	pop	{r6, r7}
 8001a28:	46b9      	mov	r9, r7
 8001a2a:	46b0      	mov	r8, r6
 8001a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a2e:	464d      	mov	r5, r9
 8001a30:	432e      	orrs	r6, r5
 8001a32:	d129      	bne.n	8001a88 <__gedf2+0xb4>
 8001a34:	2a00      	cmp	r2, #0
 8001a36:	d1f0      	bne.n	8001a1a <__gedf2+0x46>
 8001a38:	433c      	orrs	r4, r7
 8001a3a:	d1ee      	bne.n	8001a1a <__gedf2+0x46>
 8001a3c:	2800      	cmp	r0, #0
 8001a3e:	d1f2      	bne.n	8001a26 <__gedf2+0x52>
 8001a40:	2001      	movs	r0, #1
 8001a42:	4240      	negs	r0, r0
 8001a44:	e7ef      	b.n	8001a26 <__gedf2+0x52>
 8001a46:	003d      	movs	r5, r7
 8001a48:	4325      	orrs	r5, r4
 8001a4a:	d11d      	bne.n	8001a88 <__gedf2+0xb4>
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d0ee      	beq.n	8001a2e <__gedf2+0x5a>
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1e2      	bne.n	8001a1a <__gedf2+0x46>
 8001a54:	464c      	mov	r4, r9
 8001a56:	4326      	orrs	r6, r4
 8001a58:	d1df      	bne.n	8001a1a <__gedf2+0x46>
 8001a5a:	e7e0      	b.n	8001a1e <__gedf2+0x4a>
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	2c00      	cmp	r4, #0
 8001a60:	d0e1      	beq.n	8001a26 <__gedf2+0x52>
 8001a62:	e7dc      	b.n	8001a1e <__gedf2+0x4a>
 8001a64:	429a      	cmp	r2, r3
 8001a66:	dc0a      	bgt.n	8001a7e <__gedf2+0xaa>
 8001a68:	dbe8      	blt.n	8001a3c <__gedf2+0x68>
 8001a6a:	454f      	cmp	r7, r9
 8001a6c:	d8d7      	bhi.n	8001a1e <__gedf2+0x4a>
 8001a6e:	d00e      	beq.n	8001a8e <__gedf2+0xba>
 8001a70:	2000      	movs	r0, #0
 8001a72:	454f      	cmp	r7, r9
 8001a74:	d2d7      	bcs.n	8001a26 <__gedf2+0x52>
 8001a76:	2900      	cmp	r1, #0
 8001a78:	d0e2      	beq.n	8001a40 <__gedf2+0x6c>
 8001a7a:	0008      	movs	r0, r1
 8001a7c:	e7d3      	b.n	8001a26 <__gedf2+0x52>
 8001a7e:	4243      	negs	r3, r0
 8001a80:	4158      	adcs	r0, r3
 8001a82:	0040      	lsls	r0, r0, #1
 8001a84:	3801      	subs	r0, #1
 8001a86:	e7ce      	b.n	8001a26 <__gedf2+0x52>
 8001a88:	2002      	movs	r0, #2
 8001a8a:	4240      	negs	r0, r0
 8001a8c:	e7cb      	b.n	8001a26 <__gedf2+0x52>
 8001a8e:	45c4      	cmp	ip, r8
 8001a90:	d8c5      	bhi.n	8001a1e <__gedf2+0x4a>
 8001a92:	2000      	movs	r0, #0
 8001a94:	45c4      	cmp	ip, r8
 8001a96:	d2c6      	bcs.n	8001a26 <__gedf2+0x52>
 8001a98:	e7ed      	b.n	8001a76 <__gedf2+0xa2>
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	000007ff 	.word	0x000007ff

08001aa0 <__ledf2>:
 8001aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aa2:	4647      	mov	r7, r8
 8001aa4:	46ce      	mov	lr, r9
 8001aa6:	0004      	movs	r4, r0
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	0016      	movs	r6, r2
 8001aac:	031b      	lsls	r3, r3, #12
 8001aae:	0b1b      	lsrs	r3, r3, #12
 8001ab0:	4d2c      	ldr	r5, [pc, #176]	; (8001b64 <__ledf2+0xc4>)
 8001ab2:	004a      	lsls	r2, r1, #1
 8001ab4:	4699      	mov	r9, r3
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	0043      	lsls	r3, r0, #1
 8001aba:	030f      	lsls	r7, r1, #12
 8001abc:	46a4      	mov	ip, r4
 8001abe:	46b0      	mov	r8, r6
 8001ac0:	0b3f      	lsrs	r7, r7, #12
 8001ac2:	0d52      	lsrs	r2, r2, #21
 8001ac4:	0fc9      	lsrs	r1, r1, #31
 8001ac6:	0d5b      	lsrs	r3, r3, #21
 8001ac8:	0fc0      	lsrs	r0, r0, #31
 8001aca:	42aa      	cmp	r2, r5
 8001acc:	d00d      	beq.n	8001aea <__ledf2+0x4a>
 8001ace:	42ab      	cmp	r3, r5
 8001ad0:	d010      	beq.n	8001af4 <__ledf2+0x54>
 8001ad2:	2a00      	cmp	r2, #0
 8001ad4:	d127      	bne.n	8001b26 <__ledf2+0x86>
 8001ad6:	433c      	orrs	r4, r7
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d111      	bne.n	8001b00 <__ledf2+0x60>
 8001adc:	464d      	mov	r5, r9
 8001ade:	432e      	orrs	r6, r5
 8001ae0:	d10e      	bne.n	8001b00 <__ledf2+0x60>
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	2c00      	cmp	r4, #0
 8001ae6:	d015      	beq.n	8001b14 <__ledf2+0x74>
 8001ae8:	e00e      	b.n	8001b08 <__ledf2+0x68>
 8001aea:	003d      	movs	r5, r7
 8001aec:	4325      	orrs	r5, r4
 8001aee:	d110      	bne.n	8001b12 <__ledf2+0x72>
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d118      	bne.n	8001b26 <__ledf2+0x86>
 8001af4:	464d      	mov	r5, r9
 8001af6:	432e      	orrs	r6, r5
 8001af8:	d10b      	bne.n	8001b12 <__ledf2+0x72>
 8001afa:	2a00      	cmp	r2, #0
 8001afc:	d102      	bne.n	8001b04 <__ledf2+0x64>
 8001afe:	433c      	orrs	r4, r7
 8001b00:	2c00      	cmp	r4, #0
 8001b02:	d00b      	beq.n	8001b1c <__ledf2+0x7c>
 8001b04:	4281      	cmp	r1, r0
 8001b06:	d014      	beq.n	8001b32 <__ledf2+0x92>
 8001b08:	2002      	movs	r0, #2
 8001b0a:	3901      	subs	r1, #1
 8001b0c:	4008      	ands	r0, r1
 8001b0e:	3801      	subs	r0, #1
 8001b10:	e000      	b.n	8001b14 <__ledf2+0x74>
 8001b12:	2002      	movs	r0, #2
 8001b14:	bcc0      	pop	{r6, r7}
 8001b16:	46b9      	mov	r9, r7
 8001b18:	46b0      	mov	r8, r6
 8001b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b1c:	2800      	cmp	r0, #0
 8001b1e:	d1f9      	bne.n	8001b14 <__ledf2+0x74>
 8001b20:	2001      	movs	r0, #1
 8001b22:	4240      	negs	r0, r0
 8001b24:	e7f6      	b.n	8001b14 <__ledf2+0x74>
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1ec      	bne.n	8001b04 <__ledf2+0x64>
 8001b2a:	464c      	mov	r4, r9
 8001b2c:	4326      	orrs	r6, r4
 8001b2e:	d1e9      	bne.n	8001b04 <__ledf2+0x64>
 8001b30:	e7ea      	b.n	8001b08 <__ledf2+0x68>
 8001b32:	429a      	cmp	r2, r3
 8001b34:	dd04      	ble.n	8001b40 <__ledf2+0xa0>
 8001b36:	4243      	negs	r3, r0
 8001b38:	4158      	adcs	r0, r3
 8001b3a:	0040      	lsls	r0, r0, #1
 8001b3c:	3801      	subs	r0, #1
 8001b3e:	e7e9      	b.n	8001b14 <__ledf2+0x74>
 8001b40:	429a      	cmp	r2, r3
 8001b42:	dbeb      	blt.n	8001b1c <__ledf2+0x7c>
 8001b44:	454f      	cmp	r7, r9
 8001b46:	d8df      	bhi.n	8001b08 <__ledf2+0x68>
 8001b48:	d006      	beq.n	8001b58 <__ledf2+0xb8>
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	454f      	cmp	r7, r9
 8001b4e:	d2e1      	bcs.n	8001b14 <__ledf2+0x74>
 8001b50:	2900      	cmp	r1, #0
 8001b52:	d0e5      	beq.n	8001b20 <__ledf2+0x80>
 8001b54:	0008      	movs	r0, r1
 8001b56:	e7dd      	b.n	8001b14 <__ledf2+0x74>
 8001b58:	45c4      	cmp	ip, r8
 8001b5a:	d8d5      	bhi.n	8001b08 <__ledf2+0x68>
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	45c4      	cmp	ip, r8
 8001b60:	d2d8      	bcs.n	8001b14 <__ledf2+0x74>
 8001b62:	e7f5      	b.n	8001b50 <__ledf2+0xb0>
 8001b64:	000007ff 	.word	0x000007ff

08001b68 <__aeabi_dmul>:
 8001b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b6a:	4645      	mov	r5, r8
 8001b6c:	46de      	mov	lr, fp
 8001b6e:	4657      	mov	r7, sl
 8001b70:	464e      	mov	r6, r9
 8001b72:	b5e0      	push	{r5, r6, r7, lr}
 8001b74:	001f      	movs	r7, r3
 8001b76:	030b      	lsls	r3, r1, #12
 8001b78:	0b1b      	lsrs	r3, r3, #12
 8001b7a:	469b      	mov	fp, r3
 8001b7c:	004d      	lsls	r5, r1, #1
 8001b7e:	0fcb      	lsrs	r3, r1, #31
 8001b80:	0004      	movs	r4, r0
 8001b82:	4691      	mov	r9, r2
 8001b84:	4698      	mov	r8, r3
 8001b86:	b087      	sub	sp, #28
 8001b88:	0d6d      	lsrs	r5, r5, #21
 8001b8a:	d100      	bne.n	8001b8e <__aeabi_dmul+0x26>
 8001b8c:	e1cd      	b.n	8001f2a <__aeabi_dmul+0x3c2>
 8001b8e:	4bce      	ldr	r3, [pc, #824]	; (8001ec8 <__aeabi_dmul+0x360>)
 8001b90:	429d      	cmp	r5, r3
 8001b92:	d100      	bne.n	8001b96 <__aeabi_dmul+0x2e>
 8001b94:	e1e9      	b.n	8001f6a <__aeabi_dmul+0x402>
 8001b96:	465a      	mov	r2, fp
 8001b98:	0f43      	lsrs	r3, r0, #29
 8001b9a:	00d2      	lsls	r2, r2, #3
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	2280      	movs	r2, #128	; 0x80
 8001ba0:	0412      	lsls	r2, r2, #16
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	00c3      	lsls	r3, r0, #3
 8001ba6:	469a      	mov	sl, r3
 8001ba8:	4bc8      	ldr	r3, [pc, #800]	; (8001ecc <__aeabi_dmul+0x364>)
 8001baa:	4693      	mov	fp, r2
 8001bac:	469c      	mov	ip, r3
 8001bae:	2300      	movs	r3, #0
 8001bb0:	2600      	movs	r6, #0
 8001bb2:	4465      	add	r5, ip
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	033c      	lsls	r4, r7, #12
 8001bb8:	007b      	lsls	r3, r7, #1
 8001bba:	4648      	mov	r0, r9
 8001bbc:	0b24      	lsrs	r4, r4, #12
 8001bbe:	0d5b      	lsrs	r3, r3, #21
 8001bc0:	0fff      	lsrs	r7, r7, #31
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d100      	bne.n	8001bc8 <__aeabi_dmul+0x60>
 8001bc6:	e189      	b.n	8001edc <__aeabi_dmul+0x374>
 8001bc8:	4abf      	ldr	r2, [pc, #764]	; (8001ec8 <__aeabi_dmul+0x360>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d019      	beq.n	8001c02 <__aeabi_dmul+0x9a>
 8001bce:	0f42      	lsrs	r2, r0, #29
 8001bd0:	00e4      	lsls	r4, r4, #3
 8001bd2:	4322      	orrs	r2, r4
 8001bd4:	2480      	movs	r4, #128	; 0x80
 8001bd6:	0424      	lsls	r4, r4, #16
 8001bd8:	4314      	orrs	r4, r2
 8001bda:	4abc      	ldr	r2, [pc, #752]	; (8001ecc <__aeabi_dmul+0x364>)
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4694      	mov	ip, r2
 8001be0:	4642      	mov	r2, r8
 8001be2:	4463      	add	r3, ip
 8001be4:	195b      	adds	r3, r3, r5
 8001be6:	9301      	str	r3, [sp, #4]
 8001be8:	9b01      	ldr	r3, [sp, #4]
 8001bea:	407a      	eors	r2, r7
 8001bec:	3301      	adds	r3, #1
 8001bee:	00c0      	lsls	r0, r0, #3
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	9302      	str	r3, [sp, #8]
 8001bf4:	2e0a      	cmp	r6, #10
 8001bf6:	dd1c      	ble.n	8001c32 <__aeabi_dmul+0xca>
 8001bf8:	003a      	movs	r2, r7
 8001bfa:	2e0b      	cmp	r6, #11
 8001bfc:	d05e      	beq.n	8001cbc <__aeabi_dmul+0x154>
 8001bfe:	4647      	mov	r7, r8
 8001c00:	e056      	b.n	8001cb0 <__aeabi_dmul+0x148>
 8001c02:	4649      	mov	r1, r9
 8001c04:	4bb0      	ldr	r3, [pc, #704]	; (8001ec8 <__aeabi_dmul+0x360>)
 8001c06:	4321      	orrs	r1, r4
 8001c08:	18eb      	adds	r3, r5, r3
 8001c0a:	9301      	str	r3, [sp, #4]
 8001c0c:	2900      	cmp	r1, #0
 8001c0e:	d12a      	bne.n	8001c66 <__aeabi_dmul+0xfe>
 8001c10:	2080      	movs	r0, #128	; 0x80
 8001c12:	2202      	movs	r2, #2
 8001c14:	0100      	lsls	r0, r0, #4
 8001c16:	002b      	movs	r3, r5
 8001c18:	4684      	mov	ip, r0
 8001c1a:	4316      	orrs	r6, r2
 8001c1c:	4642      	mov	r2, r8
 8001c1e:	4463      	add	r3, ip
 8001c20:	407a      	eors	r2, r7
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	9302      	str	r3, [sp, #8]
 8001c26:	2e0a      	cmp	r6, #10
 8001c28:	dd00      	ble.n	8001c2c <__aeabi_dmul+0xc4>
 8001c2a:	e231      	b.n	8002090 <__aeabi_dmul+0x528>
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	2400      	movs	r4, #0
 8001c30:	2102      	movs	r1, #2
 8001c32:	2e02      	cmp	r6, #2
 8001c34:	dc26      	bgt.n	8001c84 <__aeabi_dmul+0x11c>
 8001c36:	3e01      	subs	r6, #1
 8001c38:	2e01      	cmp	r6, #1
 8001c3a:	d852      	bhi.n	8001ce2 <__aeabi_dmul+0x17a>
 8001c3c:	2902      	cmp	r1, #2
 8001c3e:	d04c      	beq.n	8001cda <__aeabi_dmul+0x172>
 8001c40:	2901      	cmp	r1, #1
 8001c42:	d000      	beq.n	8001c46 <__aeabi_dmul+0xde>
 8001c44:	e118      	b.n	8001e78 <__aeabi_dmul+0x310>
 8001c46:	2300      	movs	r3, #0
 8001c48:	2400      	movs	r4, #0
 8001c4a:	2500      	movs	r5, #0
 8001c4c:	051b      	lsls	r3, r3, #20
 8001c4e:	4323      	orrs	r3, r4
 8001c50:	07d2      	lsls	r2, r2, #31
 8001c52:	4313      	orrs	r3, r2
 8001c54:	0028      	movs	r0, r5
 8001c56:	0019      	movs	r1, r3
 8001c58:	b007      	add	sp, #28
 8001c5a:	bcf0      	pop	{r4, r5, r6, r7}
 8001c5c:	46bb      	mov	fp, r7
 8001c5e:	46b2      	mov	sl, r6
 8001c60:	46a9      	mov	r9, r5
 8001c62:	46a0      	mov	r8, r4
 8001c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c66:	2180      	movs	r1, #128	; 0x80
 8001c68:	2203      	movs	r2, #3
 8001c6a:	0109      	lsls	r1, r1, #4
 8001c6c:	002b      	movs	r3, r5
 8001c6e:	468c      	mov	ip, r1
 8001c70:	4316      	orrs	r6, r2
 8001c72:	4642      	mov	r2, r8
 8001c74:	4463      	add	r3, ip
 8001c76:	407a      	eors	r2, r7
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	9302      	str	r3, [sp, #8]
 8001c7c:	2e0a      	cmp	r6, #10
 8001c7e:	dd00      	ble.n	8001c82 <__aeabi_dmul+0x11a>
 8001c80:	e228      	b.n	80020d4 <__aeabi_dmul+0x56c>
 8001c82:	2103      	movs	r1, #3
 8001c84:	2501      	movs	r5, #1
 8001c86:	40b5      	lsls	r5, r6
 8001c88:	46ac      	mov	ip, r5
 8001c8a:	26a6      	movs	r6, #166	; 0xa6
 8001c8c:	4663      	mov	r3, ip
 8001c8e:	00f6      	lsls	r6, r6, #3
 8001c90:	4035      	ands	r5, r6
 8001c92:	4233      	tst	r3, r6
 8001c94:	d10b      	bne.n	8001cae <__aeabi_dmul+0x146>
 8001c96:	2690      	movs	r6, #144	; 0x90
 8001c98:	00b6      	lsls	r6, r6, #2
 8001c9a:	4233      	tst	r3, r6
 8001c9c:	d118      	bne.n	8001cd0 <__aeabi_dmul+0x168>
 8001c9e:	3eb9      	subs	r6, #185	; 0xb9
 8001ca0:	3eff      	subs	r6, #255	; 0xff
 8001ca2:	421e      	tst	r6, r3
 8001ca4:	d01d      	beq.n	8001ce2 <__aeabi_dmul+0x17a>
 8001ca6:	46a3      	mov	fp, r4
 8001ca8:	4682      	mov	sl, r0
 8001caa:	9100      	str	r1, [sp, #0]
 8001cac:	e000      	b.n	8001cb0 <__aeabi_dmul+0x148>
 8001cae:	0017      	movs	r7, r2
 8001cb0:	9900      	ldr	r1, [sp, #0]
 8001cb2:	003a      	movs	r2, r7
 8001cb4:	2902      	cmp	r1, #2
 8001cb6:	d010      	beq.n	8001cda <__aeabi_dmul+0x172>
 8001cb8:	465c      	mov	r4, fp
 8001cba:	4650      	mov	r0, sl
 8001cbc:	2903      	cmp	r1, #3
 8001cbe:	d1bf      	bne.n	8001c40 <__aeabi_dmul+0xd8>
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	031b      	lsls	r3, r3, #12
 8001cc4:	431c      	orrs	r4, r3
 8001cc6:	0324      	lsls	r4, r4, #12
 8001cc8:	0005      	movs	r5, r0
 8001cca:	4b7f      	ldr	r3, [pc, #508]	; (8001ec8 <__aeabi_dmul+0x360>)
 8001ccc:	0b24      	lsrs	r4, r4, #12
 8001cce:	e7bd      	b.n	8001c4c <__aeabi_dmul+0xe4>
 8001cd0:	2480      	movs	r4, #128	; 0x80
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	4b7c      	ldr	r3, [pc, #496]	; (8001ec8 <__aeabi_dmul+0x360>)
 8001cd6:	0324      	lsls	r4, r4, #12
 8001cd8:	e7b8      	b.n	8001c4c <__aeabi_dmul+0xe4>
 8001cda:	2400      	movs	r4, #0
 8001cdc:	2500      	movs	r5, #0
 8001cde:	4b7a      	ldr	r3, [pc, #488]	; (8001ec8 <__aeabi_dmul+0x360>)
 8001ce0:	e7b4      	b.n	8001c4c <__aeabi_dmul+0xe4>
 8001ce2:	4653      	mov	r3, sl
 8001ce4:	041e      	lsls	r6, r3, #16
 8001ce6:	0c36      	lsrs	r6, r6, #16
 8001ce8:	0c1f      	lsrs	r7, r3, #16
 8001cea:	0033      	movs	r3, r6
 8001cec:	0c01      	lsrs	r1, r0, #16
 8001cee:	0400      	lsls	r0, r0, #16
 8001cf0:	0c00      	lsrs	r0, r0, #16
 8001cf2:	4343      	muls	r3, r0
 8001cf4:	4698      	mov	r8, r3
 8001cf6:	0003      	movs	r3, r0
 8001cf8:	437b      	muls	r3, r7
 8001cfa:	4699      	mov	r9, r3
 8001cfc:	0033      	movs	r3, r6
 8001cfe:	434b      	muls	r3, r1
 8001d00:	469c      	mov	ip, r3
 8001d02:	4643      	mov	r3, r8
 8001d04:	000d      	movs	r5, r1
 8001d06:	0c1b      	lsrs	r3, r3, #16
 8001d08:	469a      	mov	sl, r3
 8001d0a:	437d      	muls	r5, r7
 8001d0c:	44cc      	add	ip, r9
 8001d0e:	44d4      	add	ip, sl
 8001d10:	9500      	str	r5, [sp, #0]
 8001d12:	45e1      	cmp	r9, ip
 8001d14:	d904      	bls.n	8001d20 <__aeabi_dmul+0x1b8>
 8001d16:	2380      	movs	r3, #128	; 0x80
 8001d18:	025b      	lsls	r3, r3, #9
 8001d1a:	4699      	mov	r9, r3
 8001d1c:	444d      	add	r5, r9
 8001d1e:	9500      	str	r5, [sp, #0]
 8001d20:	4663      	mov	r3, ip
 8001d22:	0c1b      	lsrs	r3, r3, #16
 8001d24:	001d      	movs	r5, r3
 8001d26:	4663      	mov	r3, ip
 8001d28:	041b      	lsls	r3, r3, #16
 8001d2a:	469c      	mov	ip, r3
 8001d2c:	4643      	mov	r3, r8
 8001d2e:	041b      	lsls	r3, r3, #16
 8001d30:	0c1b      	lsrs	r3, r3, #16
 8001d32:	4698      	mov	r8, r3
 8001d34:	4663      	mov	r3, ip
 8001d36:	4443      	add	r3, r8
 8001d38:	9303      	str	r3, [sp, #12]
 8001d3a:	0c23      	lsrs	r3, r4, #16
 8001d3c:	4698      	mov	r8, r3
 8001d3e:	0033      	movs	r3, r6
 8001d40:	0424      	lsls	r4, r4, #16
 8001d42:	0c24      	lsrs	r4, r4, #16
 8001d44:	4363      	muls	r3, r4
 8001d46:	469c      	mov	ip, r3
 8001d48:	0023      	movs	r3, r4
 8001d4a:	437b      	muls	r3, r7
 8001d4c:	4699      	mov	r9, r3
 8001d4e:	4643      	mov	r3, r8
 8001d50:	435e      	muls	r6, r3
 8001d52:	435f      	muls	r7, r3
 8001d54:	444e      	add	r6, r9
 8001d56:	4663      	mov	r3, ip
 8001d58:	46b2      	mov	sl, r6
 8001d5a:	0c1e      	lsrs	r6, r3, #16
 8001d5c:	4456      	add	r6, sl
 8001d5e:	45b1      	cmp	r9, r6
 8001d60:	d903      	bls.n	8001d6a <__aeabi_dmul+0x202>
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	025b      	lsls	r3, r3, #9
 8001d66:	4699      	mov	r9, r3
 8001d68:	444f      	add	r7, r9
 8001d6a:	0c33      	lsrs	r3, r6, #16
 8001d6c:	4699      	mov	r9, r3
 8001d6e:	003b      	movs	r3, r7
 8001d70:	444b      	add	r3, r9
 8001d72:	9305      	str	r3, [sp, #20]
 8001d74:	4663      	mov	r3, ip
 8001d76:	46ac      	mov	ip, r5
 8001d78:	041f      	lsls	r7, r3, #16
 8001d7a:	0c3f      	lsrs	r7, r7, #16
 8001d7c:	0436      	lsls	r6, r6, #16
 8001d7e:	19f6      	adds	r6, r6, r7
 8001d80:	44b4      	add	ip, r6
 8001d82:	4663      	mov	r3, ip
 8001d84:	9304      	str	r3, [sp, #16]
 8001d86:	465b      	mov	r3, fp
 8001d88:	0c1b      	lsrs	r3, r3, #16
 8001d8a:	469c      	mov	ip, r3
 8001d8c:	465b      	mov	r3, fp
 8001d8e:	041f      	lsls	r7, r3, #16
 8001d90:	0c3f      	lsrs	r7, r7, #16
 8001d92:	003b      	movs	r3, r7
 8001d94:	4343      	muls	r3, r0
 8001d96:	4699      	mov	r9, r3
 8001d98:	4663      	mov	r3, ip
 8001d9a:	4343      	muls	r3, r0
 8001d9c:	469a      	mov	sl, r3
 8001d9e:	464b      	mov	r3, r9
 8001da0:	4660      	mov	r0, ip
 8001da2:	0c1b      	lsrs	r3, r3, #16
 8001da4:	469b      	mov	fp, r3
 8001da6:	4348      	muls	r0, r1
 8001da8:	4379      	muls	r1, r7
 8001daa:	4451      	add	r1, sl
 8001dac:	4459      	add	r1, fp
 8001dae:	458a      	cmp	sl, r1
 8001db0:	d903      	bls.n	8001dba <__aeabi_dmul+0x252>
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	025b      	lsls	r3, r3, #9
 8001db6:	469a      	mov	sl, r3
 8001db8:	4450      	add	r0, sl
 8001dba:	0c0b      	lsrs	r3, r1, #16
 8001dbc:	469a      	mov	sl, r3
 8001dbe:	464b      	mov	r3, r9
 8001dc0:	041b      	lsls	r3, r3, #16
 8001dc2:	0c1b      	lsrs	r3, r3, #16
 8001dc4:	4699      	mov	r9, r3
 8001dc6:	003b      	movs	r3, r7
 8001dc8:	4363      	muls	r3, r4
 8001dca:	0409      	lsls	r1, r1, #16
 8001dcc:	4645      	mov	r5, r8
 8001dce:	4449      	add	r1, r9
 8001dd0:	4699      	mov	r9, r3
 8001dd2:	4663      	mov	r3, ip
 8001dd4:	435c      	muls	r4, r3
 8001dd6:	436b      	muls	r3, r5
 8001dd8:	469c      	mov	ip, r3
 8001dda:	464b      	mov	r3, r9
 8001ddc:	0c1b      	lsrs	r3, r3, #16
 8001dde:	4698      	mov	r8, r3
 8001de0:	436f      	muls	r7, r5
 8001de2:	193f      	adds	r7, r7, r4
 8001de4:	4447      	add	r7, r8
 8001de6:	4450      	add	r0, sl
 8001de8:	42bc      	cmp	r4, r7
 8001dea:	d903      	bls.n	8001df4 <__aeabi_dmul+0x28c>
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	025b      	lsls	r3, r3, #9
 8001df0:	4698      	mov	r8, r3
 8001df2:	44c4      	add	ip, r8
 8001df4:	9b04      	ldr	r3, [sp, #16]
 8001df6:	9d00      	ldr	r5, [sp, #0]
 8001df8:	4698      	mov	r8, r3
 8001dfa:	4445      	add	r5, r8
 8001dfc:	42b5      	cmp	r5, r6
 8001dfe:	41b6      	sbcs	r6, r6
 8001e00:	4273      	negs	r3, r6
 8001e02:	4698      	mov	r8, r3
 8001e04:	464b      	mov	r3, r9
 8001e06:	041e      	lsls	r6, r3, #16
 8001e08:	9b05      	ldr	r3, [sp, #20]
 8001e0a:	043c      	lsls	r4, r7, #16
 8001e0c:	4699      	mov	r9, r3
 8001e0e:	0c36      	lsrs	r6, r6, #16
 8001e10:	19a4      	adds	r4, r4, r6
 8001e12:	444c      	add	r4, r9
 8001e14:	46a1      	mov	r9, r4
 8001e16:	4683      	mov	fp, r0
 8001e18:	186e      	adds	r6, r5, r1
 8001e1a:	44c1      	add	r9, r8
 8001e1c:	428e      	cmp	r6, r1
 8001e1e:	4189      	sbcs	r1, r1
 8001e20:	44cb      	add	fp, r9
 8001e22:	465d      	mov	r5, fp
 8001e24:	4249      	negs	r1, r1
 8001e26:	186d      	adds	r5, r5, r1
 8001e28:	429c      	cmp	r4, r3
 8001e2a:	41a4      	sbcs	r4, r4
 8001e2c:	45c1      	cmp	r9, r8
 8001e2e:	419b      	sbcs	r3, r3
 8001e30:	4583      	cmp	fp, r0
 8001e32:	4180      	sbcs	r0, r0
 8001e34:	428d      	cmp	r5, r1
 8001e36:	4189      	sbcs	r1, r1
 8001e38:	425b      	negs	r3, r3
 8001e3a:	4264      	negs	r4, r4
 8001e3c:	431c      	orrs	r4, r3
 8001e3e:	4240      	negs	r0, r0
 8001e40:	9b03      	ldr	r3, [sp, #12]
 8001e42:	4249      	negs	r1, r1
 8001e44:	4301      	orrs	r1, r0
 8001e46:	0270      	lsls	r0, r6, #9
 8001e48:	0c3f      	lsrs	r7, r7, #16
 8001e4a:	4318      	orrs	r0, r3
 8001e4c:	19e4      	adds	r4, r4, r7
 8001e4e:	1e47      	subs	r7, r0, #1
 8001e50:	41b8      	sbcs	r0, r7
 8001e52:	1864      	adds	r4, r4, r1
 8001e54:	4464      	add	r4, ip
 8001e56:	0df6      	lsrs	r6, r6, #23
 8001e58:	0261      	lsls	r1, r4, #9
 8001e5a:	4330      	orrs	r0, r6
 8001e5c:	0dec      	lsrs	r4, r5, #23
 8001e5e:	026e      	lsls	r6, r5, #9
 8001e60:	430c      	orrs	r4, r1
 8001e62:	4330      	orrs	r0, r6
 8001e64:	01c9      	lsls	r1, r1, #7
 8001e66:	d400      	bmi.n	8001e6a <__aeabi_dmul+0x302>
 8001e68:	e0f1      	b.n	800204e <__aeabi_dmul+0x4e6>
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	0843      	lsrs	r3, r0, #1
 8001e6e:	4001      	ands	r1, r0
 8001e70:	430b      	orrs	r3, r1
 8001e72:	07e0      	lsls	r0, r4, #31
 8001e74:	4318      	orrs	r0, r3
 8001e76:	0864      	lsrs	r4, r4, #1
 8001e78:	4915      	ldr	r1, [pc, #84]	; (8001ed0 <__aeabi_dmul+0x368>)
 8001e7a:	9b02      	ldr	r3, [sp, #8]
 8001e7c:	468c      	mov	ip, r1
 8001e7e:	4463      	add	r3, ip
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	dc00      	bgt.n	8001e86 <__aeabi_dmul+0x31e>
 8001e84:	e097      	b.n	8001fb6 <__aeabi_dmul+0x44e>
 8001e86:	0741      	lsls	r1, r0, #29
 8001e88:	d009      	beq.n	8001e9e <__aeabi_dmul+0x336>
 8001e8a:	210f      	movs	r1, #15
 8001e8c:	4001      	ands	r1, r0
 8001e8e:	2904      	cmp	r1, #4
 8001e90:	d005      	beq.n	8001e9e <__aeabi_dmul+0x336>
 8001e92:	1d01      	adds	r1, r0, #4
 8001e94:	4281      	cmp	r1, r0
 8001e96:	4180      	sbcs	r0, r0
 8001e98:	4240      	negs	r0, r0
 8001e9a:	1824      	adds	r4, r4, r0
 8001e9c:	0008      	movs	r0, r1
 8001e9e:	01e1      	lsls	r1, r4, #7
 8001ea0:	d506      	bpl.n	8001eb0 <__aeabi_dmul+0x348>
 8001ea2:	2180      	movs	r1, #128	; 0x80
 8001ea4:	00c9      	lsls	r1, r1, #3
 8001ea6:	468c      	mov	ip, r1
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <__aeabi_dmul+0x36c>)
 8001eaa:	401c      	ands	r4, r3
 8001eac:	9b02      	ldr	r3, [sp, #8]
 8001eae:	4463      	add	r3, ip
 8001eb0:	4909      	ldr	r1, [pc, #36]	; (8001ed8 <__aeabi_dmul+0x370>)
 8001eb2:	428b      	cmp	r3, r1
 8001eb4:	dd00      	ble.n	8001eb8 <__aeabi_dmul+0x350>
 8001eb6:	e710      	b.n	8001cda <__aeabi_dmul+0x172>
 8001eb8:	0761      	lsls	r1, r4, #29
 8001eba:	08c5      	lsrs	r5, r0, #3
 8001ebc:	0264      	lsls	r4, r4, #9
 8001ebe:	055b      	lsls	r3, r3, #21
 8001ec0:	430d      	orrs	r5, r1
 8001ec2:	0b24      	lsrs	r4, r4, #12
 8001ec4:	0d5b      	lsrs	r3, r3, #21
 8001ec6:	e6c1      	b.n	8001c4c <__aeabi_dmul+0xe4>
 8001ec8:	000007ff 	.word	0x000007ff
 8001ecc:	fffffc01 	.word	0xfffffc01
 8001ed0:	000003ff 	.word	0x000003ff
 8001ed4:	feffffff 	.word	0xfeffffff
 8001ed8:	000007fe 	.word	0x000007fe
 8001edc:	464b      	mov	r3, r9
 8001ede:	4323      	orrs	r3, r4
 8001ee0:	d059      	beq.n	8001f96 <__aeabi_dmul+0x42e>
 8001ee2:	2c00      	cmp	r4, #0
 8001ee4:	d100      	bne.n	8001ee8 <__aeabi_dmul+0x380>
 8001ee6:	e0a3      	b.n	8002030 <__aeabi_dmul+0x4c8>
 8001ee8:	0020      	movs	r0, r4
 8001eea:	f000 fd85 	bl	80029f8 <__clzsi2>
 8001eee:	0001      	movs	r1, r0
 8001ef0:	0003      	movs	r3, r0
 8001ef2:	390b      	subs	r1, #11
 8001ef4:	221d      	movs	r2, #29
 8001ef6:	1a52      	subs	r2, r2, r1
 8001ef8:	4649      	mov	r1, r9
 8001efa:	0018      	movs	r0, r3
 8001efc:	40d1      	lsrs	r1, r2
 8001efe:	464a      	mov	r2, r9
 8001f00:	3808      	subs	r0, #8
 8001f02:	4082      	lsls	r2, r0
 8001f04:	4084      	lsls	r4, r0
 8001f06:	0010      	movs	r0, r2
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	4a74      	ldr	r2, [pc, #464]	; (80020dc <__aeabi_dmul+0x574>)
 8001f0c:	1aeb      	subs	r3, r5, r3
 8001f0e:	4694      	mov	ip, r2
 8001f10:	4642      	mov	r2, r8
 8001f12:	4463      	add	r3, ip
 8001f14:	9301      	str	r3, [sp, #4]
 8001f16:	9b01      	ldr	r3, [sp, #4]
 8001f18:	407a      	eors	r2, r7
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	9302      	str	r3, [sp, #8]
 8001f22:	2e0a      	cmp	r6, #10
 8001f24:	dd00      	ble.n	8001f28 <__aeabi_dmul+0x3c0>
 8001f26:	e667      	b.n	8001bf8 <__aeabi_dmul+0x90>
 8001f28:	e683      	b.n	8001c32 <__aeabi_dmul+0xca>
 8001f2a:	465b      	mov	r3, fp
 8001f2c:	4303      	orrs	r3, r0
 8001f2e:	469a      	mov	sl, r3
 8001f30:	d02a      	beq.n	8001f88 <__aeabi_dmul+0x420>
 8001f32:	465b      	mov	r3, fp
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d06d      	beq.n	8002014 <__aeabi_dmul+0x4ac>
 8001f38:	4658      	mov	r0, fp
 8001f3a:	f000 fd5d 	bl	80029f8 <__clzsi2>
 8001f3e:	0001      	movs	r1, r0
 8001f40:	0003      	movs	r3, r0
 8001f42:	390b      	subs	r1, #11
 8001f44:	221d      	movs	r2, #29
 8001f46:	1a52      	subs	r2, r2, r1
 8001f48:	0021      	movs	r1, r4
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	465d      	mov	r5, fp
 8001f4e:	40d1      	lsrs	r1, r2
 8001f50:	3808      	subs	r0, #8
 8001f52:	4085      	lsls	r5, r0
 8001f54:	000a      	movs	r2, r1
 8001f56:	4084      	lsls	r4, r0
 8001f58:	432a      	orrs	r2, r5
 8001f5a:	4693      	mov	fp, r2
 8001f5c:	46a2      	mov	sl, r4
 8001f5e:	4d5f      	ldr	r5, [pc, #380]	; (80020dc <__aeabi_dmul+0x574>)
 8001f60:	2600      	movs	r6, #0
 8001f62:	1aed      	subs	r5, r5, r3
 8001f64:	2300      	movs	r3, #0
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	e625      	b.n	8001bb6 <__aeabi_dmul+0x4e>
 8001f6a:	465b      	mov	r3, fp
 8001f6c:	4303      	orrs	r3, r0
 8001f6e:	469a      	mov	sl, r3
 8001f70:	d105      	bne.n	8001f7e <__aeabi_dmul+0x416>
 8001f72:	2300      	movs	r3, #0
 8001f74:	469b      	mov	fp, r3
 8001f76:	3302      	adds	r3, #2
 8001f78:	2608      	movs	r6, #8
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	e61b      	b.n	8001bb6 <__aeabi_dmul+0x4e>
 8001f7e:	2303      	movs	r3, #3
 8001f80:	4682      	mov	sl, r0
 8001f82:	260c      	movs	r6, #12
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	e616      	b.n	8001bb6 <__aeabi_dmul+0x4e>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	469b      	mov	fp, r3
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	2604      	movs	r6, #4
 8001f90:	2500      	movs	r5, #0
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	e60f      	b.n	8001bb6 <__aeabi_dmul+0x4e>
 8001f96:	4642      	mov	r2, r8
 8001f98:	3301      	adds	r3, #1
 8001f9a:	9501      	str	r5, [sp, #4]
 8001f9c:	431e      	orrs	r6, r3
 8001f9e:	9b01      	ldr	r3, [sp, #4]
 8001fa0:	407a      	eors	r2, r7
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	2400      	movs	r4, #0
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	2101      	movs	r1, #1
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	9302      	str	r3, [sp, #8]
 8001fae:	2e0a      	cmp	r6, #10
 8001fb0:	dd00      	ble.n	8001fb4 <__aeabi_dmul+0x44c>
 8001fb2:	e621      	b.n	8001bf8 <__aeabi_dmul+0x90>
 8001fb4:	e63d      	b.n	8001c32 <__aeabi_dmul+0xca>
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	1ac9      	subs	r1, r1, r3
 8001fba:	2938      	cmp	r1, #56	; 0x38
 8001fbc:	dd00      	ble.n	8001fc0 <__aeabi_dmul+0x458>
 8001fbe:	e642      	b.n	8001c46 <__aeabi_dmul+0xde>
 8001fc0:	291f      	cmp	r1, #31
 8001fc2:	dd47      	ble.n	8002054 <__aeabi_dmul+0x4ec>
 8001fc4:	261f      	movs	r6, #31
 8001fc6:	0025      	movs	r5, r4
 8001fc8:	4276      	negs	r6, r6
 8001fca:	1af3      	subs	r3, r6, r3
 8001fcc:	40dd      	lsrs	r5, r3
 8001fce:	002b      	movs	r3, r5
 8001fd0:	2920      	cmp	r1, #32
 8001fd2:	d005      	beq.n	8001fe0 <__aeabi_dmul+0x478>
 8001fd4:	4942      	ldr	r1, [pc, #264]	; (80020e0 <__aeabi_dmul+0x578>)
 8001fd6:	9d02      	ldr	r5, [sp, #8]
 8001fd8:	468c      	mov	ip, r1
 8001fda:	4465      	add	r5, ip
 8001fdc:	40ac      	lsls	r4, r5
 8001fde:	4320      	orrs	r0, r4
 8001fe0:	1e41      	subs	r1, r0, #1
 8001fe2:	4188      	sbcs	r0, r1
 8001fe4:	4318      	orrs	r0, r3
 8001fe6:	2307      	movs	r3, #7
 8001fe8:	001d      	movs	r5, r3
 8001fea:	2400      	movs	r4, #0
 8001fec:	4005      	ands	r5, r0
 8001fee:	4203      	tst	r3, r0
 8001ff0:	d04a      	beq.n	8002088 <__aeabi_dmul+0x520>
 8001ff2:	230f      	movs	r3, #15
 8001ff4:	2400      	movs	r4, #0
 8001ff6:	4003      	ands	r3, r0
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d042      	beq.n	8002082 <__aeabi_dmul+0x51a>
 8001ffc:	1d03      	adds	r3, r0, #4
 8001ffe:	4283      	cmp	r3, r0
 8002000:	4180      	sbcs	r0, r0
 8002002:	4240      	negs	r0, r0
 8002004:	1824      	adds	r4, r4, r0
 8002006:	0018      	movs	r0, r3
 8002008:	0223      	lsls	r3, r4, #8
 800200a:	d53a      	bpl.n	8002082 <__aeabi_dmul+0x51a>
 800200c:	2301      	movs	r3, #1
 800200e:	2400      	movs	r4, #0
 8002010:	2500      	movs	r5, #0
 8002012:	e61b      	b.n	8001c4c <__aeabi_dmul+0xe4>
 8002014:	f000 fcf0 	bl	80029f8 <__clzsi2>
 8002018:	0001      	movs	r1, r0
 800201a:	0003      	movs	r3, r0
 800201c:	3115      	adds	r1, #21
 800201e:	3320      	adds	r3, #32
 8002020:	291c      	cmp	r1, #28
 8002022:	dd8f      	ble.n	8001f44 <__aeabi_dmul+0x3dc>
 8002024:	3808      	subs	r0, #8
 8002026:	2200      	movs	r2, #0
 8002028:	4084      	lsls	r4, r0
 800202a:	4692      	mov	sl, r2
 800202c:	46a3      	mov	fp, r4
 800202e:	e796      	b.n	8001f5e <__aeabi_dmul+0x3f6>
 8002030:	f000 fce2 	bl	80029f8 <__clzsi2>
 8002034:	0001      	movs	r1, r0
 8002036:	0003      	movs	r3, r0
 8002038:	3115      	adds	r1, #21
 800203a:	3320      	adds	r3, #32
 800203c:	291c      	cmp	r1, #28
 800203e:	dc00      	bgt.n	8002042 <__aeabi_dmul+0x4da>
 8002040:	e758      	b.n	8001ef4 <__aeabi_dmul+0x38c>
 8002042:	0002      	movs	r2, r0
 8002044:	464c      	mov	r4, r9
 8002046:	3a08      	subs	r2, #8
 8002048:	2000      	movs	r0, #0
 800204a:	4094      	lsls	r4, r2
 800204c:	e75d      	b.n	8001f0a <__aeabi_dmul+0x3a2>
 800204e:	9b01      	ldr	r3, [sp, #4]
 8002050:	9302      	str	r3, [sp, #8]
 8002052:	e711      	b.n	8001e78 <__aeabi_dmul+0x310>
 8002054:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <__aeabi_dmul+0x57c>)
 8002056:	0026      	movs	r6, r4
 8002058:	469c      	mov	ip, r3
 800205a:	0003      	movs	r3, r0
 800205c:	9d02      	ldr	r5, [sp, #8]
 800205e:	40cb      	lsrs	r3, r1
 8002060:	4465      	add	r5, ip
 8002062:	40ae      	lsls	r6, r5
 8002064:	431e      	orrs	r6, r3
 8002066:	0003      	movs	r3, r0
 8002068:	40ab      	lsls	r3, r5
 800206a:	1e58      	subs	r0, r3, #1
 800206c:	4183      	sbcs	r3, r0
 800206e:	0030      	movs	r0, r6
 8002070:	4318      	orrs	r0, r3
 8002072:	40cc      	lsrs	r4, r1
 8002074:	0743      	lsls	r3, r0, #29
 8002076:	d0c7      	beq.n	8002008 <__aeabi_dmul+0x4a0>
 8002078:	230f      	movs	r3, #15
 800207a:	4003      	ands	r3, r0
 800207c:	2b04      	cmp	r3, #4
 800207e:	d1bd      	bne.n	8001ffc <__aeabi_dmul+0x494>
 8002080:	e7c2      	b.n	8002008 <__aeabi_dmul+0x4a0>
 8002082:	0765      	lsls	r5, r4, #29
 8002084:	0264      	lsls	r4, r4, #9
 8002086:	0b24      	lsrs	r4, r4, #12
 8002088:	08c0      	lsrs	r0, r0, #3
 800208a:	2300      	movs	r3, #0
 800208c:	4305      	orrs	r5, r0
 800208e:	e5dd      	b.n	8001c4c <__aeabi_dmul+0xe4>
 8002090:	2500      	movs	r5, #0
 8002092:	2302      	movs	r3, #2
 8002094:	2e0f      	cmp	r6, #15
 8002096:	d10c      	bne.n	80020b2 <__aeabi_dmul+0x54a>
 8002098:	2480      	movs	r4, #128	; 0x80
 800209a:	465b      	mov	r3, fp
 800209c:	0324      	lsls	r4, r4, #12
 800209e:	4223      	tst	r3, r4
 80020a0:	d00e      	beq.n	80020c0 <__aeabi_dmul+0x558>
 80020a2:	4221      	tst	r1, r4
 80020a4:	d10c      	bne.n	80020c0 <__aeabi_dmul+0x558>
 80020a6:	430c      	orrs	r4, r1
 80020a8:	0324      	lsls	r4, r4, #12
 80020aa:	003a      	movs	r2, r7
 80020ac:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <__aeabi_dmul+0x580>)
 80020ae:	0b24      	lsrs	r4, r4, #12
 80020b0:	e5cc      	b.n	8001c4c <__aeabi_dmul+0xe4>
 80020b2:	2e0b      	cmp	r6, #11
 80020b4:	d000      	beq.n	80020b8 <__aeabi_dmul+0x550>
 80020b6:	e5a2      	b.n	8001bfe <__aeabi_dmul+0x96>
 80020b8:	468b      	mov	fp, r1
 80020ba:	46aa      	mov	sl, r5
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	e5f7      	b.n	8001cb0 <__aeabi_dmul+0x148>
 80020c0:	2480      	movs	r4, #128	; 0x80
 80020c2:	465b      	mov	r3, fp
 80020c4:	0324      	lsls	r4, r4, #12
 80020c6:	431c      	orrs	r4, r3
 80020c8:	0324      	lsls	r4, r4, #12
 80020ca:	4642      	mov	r2, r8
 80020cc:	4655      	mov	r5, sl
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <__aeabi_dmul+0x580>)
 80020d0:	0b24      	lsrs	r4, r4, #12
 80020d2:	e5bb      	b.n	8001c4c <__aeabi_dmul+0xe4>
 80020d4:	464d      	mov	r5, r9
 80020d6:	0021      	movs	r1, r4
 80020d8:	2303      	movs	r3, #3
 80020da:	e7db      	b.n	8002094 <__aeabi_dmul+0x52c>
 80020dc:	fffffc0d 	.word	0xfffffc0d
 80020e0:	0000043e 	.word	0x0000043e
 80020e4:	0000041e 	.word	0x0000041e
 80020e8:	000007ff 	.word	0x000007ff

080020ec <__aeabi_dsub>:
 80020ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ee:	4657      	mov	r7, sl
 80020f0:	464e      	mov	r6, r9
 80020f2:	4645      	mov	r5, r8
 80020f4:	46de      	mov	lr, fp
 80020f6:	b5e0      	push	{r5, r6, r7, lr}
 80020f8:	000d      	movs	r5, r1
 80020fa:	0004      	movs	r4, r0
 80020fc:	0019      	movs	r1, r3
 80020fe:	0010      	movs	r0, r2
 8002100:	032b      	lsls	r3, r5, #12
 8002102:	0a5b      	lsrs	r3, r3, #9
 8002104:	0f62      	lsrs	r2, r4, #29
 8002106:	431a      	orrs	r2, r3
 8002108:	00e3      	lsls	r3, r4, #3
 800210a:	030c      	lsls	r4, r1, #12
 800210c:	0a64      	lsrs	r4, r4, #9
 800210e:	0f47      	lsrs	r7, r0, #29
 8002110:	4327      	orrs	r7, r4
 8002112:	4cd0      	ldr	r4, [pc, #832]	; (8002454 <__aeabi_dsub+0x368>)
 8002114:	006e      	lsls	r6, r5, #1
 8002116:	4691      	mov	r9, r2
 8002118:	b083      	sub	sp, #12
 800211a:	004a      	lsls	r2, r1, #1
 800211c:	00c0      	lsls	r0, r0, #3
 800211e:	4698      	mov	r8, r3
 8002120:	46a2      	mov	sl, r4
 8002122:	0d76      	lsrs	r6, r6, #21
 8002124:	0fed      	lsrs	r5, r5, #31
 8002126:	0d52      	lsrs	r2, r2, #21
 8002128:	0fc9      	lsrs	r1, r1, #31
 800212a:	9001      	str	r0, [sp, #4]
 800212c:	42a2      	cmp	r2, r4
 800212e:	d100      	bne.n	8002132 <__aeabi_dsub+0x46>
 8002130:	e0b9      	b.n	80022a6 <__aeabi_dsub+0x1ba>
 8002132:	2401      	movs	r4, #1
 8002134:	4061      	eors	r1, r4
 8002136:	468b      	mov	fp, r1
 8002138:	428d      	cmp	r5, r1
 800213a:	d100      	bne.n	800213e <__aeabi_dsub+0x52>
 800213c:	e08d      	b.n	800225a <__aeabi_dsub+0x16e>
 800213e:	1ab4      	subs	r4, r6, r2
 8002140:	46a4      	mov	ip, r4
 8002142:	2c00      	cmp	r4, #0
 8002144:	dc00      	bgt.n	8002148 <__aeabi_dsub+0x5c>
 8002146:	e0b7      	b.n	80022b8 <__aeabi_dsub+0x1cc>
 8002148:	2a00      	cmp	r2, #0
 800214a:	d100      	bne.n	800214e <__aeabi_dsub+0x62>
 800214c:	e0cb      	b.n	80022e6 <__aeabi_dsub+0x1fa>
 800214e:	4ac1      	ldr	r2, [pc, #772]	; (8002454 <__aeabi_dsub+0x368>)
 8002150:	4296      	cmp	r6, r2
 8002152:	d100      	bne.n	8002156 <__aeabi_dsub+0x6a>
 8002154:	e186      	b.n	8002464 <__aeabi_dsub+0x378>
 8002156:	2280      	movs	r2, #128	; 0x80
 8002158:	0412      	lsls	r2, r2, #16
 800215a:	4317      	orrs	r7, r2
 800215c:	4662      	mov	r2, ip
 800215e:	2a38      	cmp	r2, #56	; 0x38
 8002160:	dd00      	ble.n	8002164 <__aeabi_dsub+0x78>
 8002162:	e1a4      	b.n	80024ae <__aeabi_dsub+0x3c2>
 8002164:	2a1f      	cmp	r2, #31
 8002166:	dd00      	ble.n	800216a <__aeabi_dsub+0x7e>
 8002168:	e21d      	b.n	80025a6 <__aeabi_dsub+0x4ba>
 800216a:	4661      	mov	r1, ip
 800216c:	2220      	movs	r2, #32
 800216e:	003c      	movs	r4, r7
 8002170:	1a52      	subs	r2, r2, r1
 8002172:	0001      	movs	r1, r0
 8002174:	4090      	lsls	r0, r2
 8002176:	4094      	lsls	r4, r2
 8002178:	1e42      	subs	r2, r0, #1
 800217a:	4190      	sbcs	r0, r2
 800217c:	4662      	mov	r2, ip
 800217e:	46a0      	mov	r8, r4
 8002180:	4664      	mov	r4, ip
 8002182:	40d7      	lsrs	r7, r2
 8002184:	464a      	mov	r2, r9
 8002186:	40e1      	lsrs	r1, r4
 8002188:	4644      	mov	r4, r8
 800218a:	1bd2      	subs	r2, r2, r7
 800218c:	4691      	mov	r9, r2
 800218e:	430c      	orrs	r4, r1
 8002190:	4304      	orrs	r4, r0
 8002192:	1b1c      	subs	r4, r3, r4
 8002194:	42a3      	cmp	r3, r4
 8002196:	4192      	sbcs	r2, r2
 8002198:	464b      	mov	r3, r9
 800219a:	4252      	negs	r2, r2
 800219c:	1a9b      	subs	r3, r3, r2
 800219e:	469a      	mov	sl, r3
 80021a0:	4653      	mov	r3, sl
 80021a2:	021b      	lsls	r3, r3, #8
 80021a4:	d400      	bmi.n	80021a8 <__aeabi_dsub+0xbc>
 80021a6:	e12b      	b.n	8002400 <__aeabi_dsub+0x314>
 80021a8:	4653      	mov	r3, sl
 80021aa:	025a      	lsls	r2, r3, #9
 80021ac:	0a53      	lsrs	r3, r2, #9
 80021ae:	469a      	mov	sl, r3
 80021b0:	4653      	mov	r3, sl
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d100      	bne.n	80021b8 <__aeabi_dsub+0xcc>
 80021b6:	e166      	b.n	8002486 <__aeabi_dsub+0x39a>
 80021b8:	4650      	mov	r0, sl
 80021ba:	f000 fc1d 	bl	80029f8 <__clzsi2>
 80021be:	0003      	movs	r3, r0
 80021c0:	3b08      	subs	r3, #8
 80021c2:	2220      	movs	r2, #32
 80021c4:	0020      	movs	r0, r4
 80021c6:	1ad2      	subs	r2, r2, r3
 80021c8:	4651      	mov	r1, sl
 80021ca:	40d0      	lsrs	r0, r2
 80021cc:	4099      	lsls	r1, r3
 80021ce:	0002      	movs	r2, r0
 80021d0:	409c      	lsls	r4, r3
 80021d2:	430a      	orrs	r2, r1
 80021d4:	429e      	cmp	r6, r3
 80021d6:	dd00      	ble.n	80021da <__aeabi_dsub+0xee>
 80021d8:	e164      	b.n	80024a4 <__aeabi_dsub+0x3b8>
 80021da:	1b9b      	subs	r3, r3, r6
 80021dc:	1c59      	adds	r1, r3, #1
 80021de:	291f      	cmp	r1, #31
 80021e0:	dd00      	ble.n	80021e4 <__aeabi_dsub+0xf8>
 80021e2:	e0fe      	b.n	80023e2 <__aeabi_dsub+0x2f6>
 80021e4:	2320      	movs	r3, #32
 80021e6:	0010      	movs	r0, r2
 80021e8:	0026      	movs	r6, r4
 80021ea:	1a5b      	subs	r3, r3, r1
 80021ec:	409c      	lsls	r4, r3
 80021ee:	4098      	lsls	r0, r3
 80021f0:	40ce      	lsrs	r6, r1
 80021f2:	40ca      	lsrs	r2, r1
 80021f4:	1e63      	subs	r3, r4, #1
 80021f6:	419c      	sbcs	r4, r3
 80021f8:	4330      	orrs	r0, r6
 80021fa:	4692      	mov	sl, r2
 80021fc:	2600      	movs	r6, #0
 80021fe:	4304      	orrs	r4, r0
 8002200:	0763      	lsls	r3, r4, #29
 8002202:	d009      	beq.n	8002218 <__aeabi_dsub+0x12c>
 8002204:	230f      	movs	r3, #15
 8002206:	4023      	ands	r3, r4
 8002208:	2b04      	cmp	r3, #4
 800220a:	d005      	beq.n	8002218 <__aeabi_dsub+0x12c>
 800220c:	1d23      	adds	r3, r4, #4
 800220e:	42a3      	cmp	r3, r4
 8002210:	41a4      	sbcs	r4, r4
 8002212:	4264      	negs	r4, r4
 8002214:	44a2      	add	sl, r4
 8002216:	001c      	movs	r4, r3
 8002218:	4653      	mov	r3, sl
 800221a:	021b      	lsls	r3, r3, #8
 800221c:	d400      	bmi.n	8002220 <__aeabi_dsub+0x134>
 800221e:	e0f2      	b.n	8002406 <__aeabi_dsub+0x31a>
 8002220:	4b8c      	ldr	r3, [pc, #560]	; (8002454 <__aeabi_dsub+0x368>)
 8002222:	3601      	adds	r6, #1
 8002224:	429e      	cmp	r6, r3
 8002226:	d100      	bne.n	800222a <__aeabi_dsub+0x13e>
 8002228:	e10f      	b.n	800244a <__aeabi_dsub+0x35e>
 800222a:	4653      	mov	r3, sl
 800222c:	498a      	ldr	r1, [pc, #552]	; (8002458 <__aeabi_dsub+0x36c>)
 800222e:	08e4      	lsrs	r4, r4, #3
 8002230:	400b      	ands	r3, r1
 8002232:	0019      	movs	r1, r3
 8002234:	075b      	lsls	r3, r3, #29
 8002236:	4323      	orrs	r3, r4
 8002238:	0572      	lsls	r2, r6, #21
 800223a:	024c      	lsls	r4, r1, #9
 800223c:	0b24      	lsrs	r4, r4, #12
 800223e:	0d52      	lsrs	r2, r2, #21
 8002240:	0512      	lsls	r2, r2, #20
 8002242:	4322      	orrs	r2, r4
 8002244:	07ed      	lsls	r5, r5, #31
 8002246:	432a      	orrs	r2, r5
 8002248:	0018      	movs	r0, r3
 800224a:	0011      	movs	r1, r2
 800224c:	b003      	add	sp, #12
 800224e:	bcf0      	pop	{r4, r5, r6, r7}
 8002250:	46bb      	mov	fp, r7
 8002252:	46b2      	mov	sl, r6
 8002254:	46a9      	mov	r9, r5
 8002256:	46a0      	mov	r8, r4
 8002258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800225a:	1ab4      	subs	r4, r6, r2
 800225c:	46a4      	mov	ip, r4
 800225e:	2c00      	cmp	r4, #0
 8002260:	dd59      	ble.n	8002316 <__aeabi_dsub+0x22a>
 8002262:	2a00      	cmp	r2, #0
 8002264:	d100      	bne.n	8002268 <__aeabi_dsub+0x17c>
 8002266:	e0b0      	b.n	80023ca <__aeabi_dsub+0x2de>
 8002268:	4556      	cmp	r6, sl
 800226a:	d100      	bne.n	800226e <__aeabi_dsub+0x182>
 800226c:	e0fa      	b.n	8002464 <__aeabi_dsub+0x378>
 800226e:	2280      	movs	r2, #128	; 0x80
 8002270:	0412      	lsls	r2, r2, #16
 8002272:	4317      	orrs	r7, r2
 8002274:	4662      	mov	r2, ip
 8002276:	2a38      	cmp	r2, #56	; 0x38
 8002278:	dd00      	ble.n	800227c <__aeabi_dsub+0x190>
 800227a:	e0d4      	b.n	8002426 <__aeabi_dsub+0x33a>
 800227c:	2a1f      	cmp	r2, #31
 800227e:	dc00      	bgt.n	8002282 <__aeabi_dsub+0x196>
 8002280:	e1c0      	b.n	8002604 <__aeabi_dsub+0x518>
 8002282:	0039      	movs	r1, r7
 8002284:	3a20      	subs	r2, #32
 8002286:	40d1      	lsrs	r1, r2
 8002288:	4662      	mov	r2, ip
 800228a:	2a20      	cmp	r2, #32
 800228c:	d006      	beq.n	800229c <__aeabi_dsub+0x1b0>
 800228e:	4664      	mov	r4, ip
 8002290:	2240      	movs	r2, #64	; 0x40
 8002292:	1b12      	subs	r2, r2, r4
 8002294:	003c      	movs	r4, r7
 8002296:	4094      	lsls	r4, r2
 8002298:	4304      	orrs	r4, r0
 800229a:	9401      	str	r4, [sp, #4]
 800229c:	9c01      	ldr	r4, [sp, #4]
 800229e:	1e62      	subs	r2, r4, #1
 80022a0:	4194      	sbcs	r4, r2
 80022a2:	430c      	orrs	r4, r1
 80022a4:	e0c3      	b.n	800242e <__aeabi_dsub+0x342>
 80022a6:	003c      	movs	r4, r7
 80022a8:	4304      	orrs	r4, r0
 80022aa:	d02b      	beq.n	8002304 <__aeabi_dsub+0x218>
 80022ac:	468b      	mov	fp, r1
 80022ae:	428d      	cmp	r5, r1
 80022b0:	d02e      	beq.n	8002310 <__aeabi_dsub+0x224>
 80022b2:	4c6a      	ldr	r4, [pc, #424]	; (800245c <__aeabi_dsub+0x370>)
 80022b4:	46a4      	mov	ip, r4
 80022b6:	44b4      	add	ip, r6
 80022b8:	4664      	mov	r4, ip
 80022ba:	2c00      	cmp	r4, #0
 80022bc:	d05f      	beq.n	800237e <__aeabi_dsub+0x292>
 80022be:	1b94      	subs	r4, r2, r6
 80022c0:	46a4      	mov	ip, r4
 80022c2:	2e00      	cmp	r6, #0
 80022c4:	d000      	beq.n	80022c8 <__aeabi_dsub+0x1dc>
 80022c6:	e120      	b.n	800250a <__aeabi_dsub+0x41e>
 80022c8:	464c      	mov	r4, r9
 80022ca:	431c      	orrs	r4, r3
 80022cc:	d100      	bne.n	80022d0 <__aeabi_dsub+0x1e4>
 80022ce:	e1c7      	b.n	8002660 <__aeabi_dsub+0x574>
 80022d0:	4661      	mov	r1, ip
 80022d2:	1e4c      	subs	r4, r1, #1
 80022d4:	2901      	cmp	r1, #1
 80022d6:	d100      	bne.n	80022da <__aeabi_dsub+0x1ee>
 80022d8:	e223      	b.n	8002722 <__aeabi_dsub+0x636>
 80022da:	4d5e      	ldr	r5, [pc, #376]	; (8002454 <__aeabi_dsub+0x368>)
 80022dc:	45ac      	cmp	ip, r5
 80022de:	d100      	bne.n	80022e2 <__aeabi_dsub+0x1f6>
 80022e0:	e1d8      	b.n	8002694 <__aeabi_dsub+0x5a8>
 80022e2:	46a4      	mov	ip, r4
 80022e4:	e11a      	b.n	800251c <__aeabi_dsub+0x430>
 80022e6:	003a      	movs	r2, r7
 80022e8:	4302      	orrs	r2, r0
 80022ea:	d100      	bne.n	80022ee <__aeabi_dsub+0x202>
 80022ec:	e0e4      	b.n	80024b8 <__aeabi_dsub+0x3cc>
 80022ee:	0022      	movs	r2, r4
 80022f0:	3a01      	subs	r2, #1
 80022f2:	2c01      	cmp	r4, #1
 80022f4:	d100      	bne.n	80022f8 <__aeabi_dsub+0x20c>
 80022f6:	e1c3      	b.n	8002680 <__aeabi_dsub+0x594>
 80022f8:	4956      	ldr	r1, [pc, #344]	; (8002454 <__aeabi_dsub+0x368>)
 80022fa:	428c      	cmp	r4, r1
 80022fc:	d100      	bne.n	8002300 <__aeabi_dsub+0x214>
 80022fe:	e0b1      	b.n	8002464 <__aeabi_dsub+0x378>
 8002300:	4694      	mov	ip, r2
 8002302:	e72b      	b.n	800215c <__aeabi_dsub+0x70>
 8002304:	2401      	movs	r4, #1
 8002306:	4061      	eors	r1, r4
 8002308:	468b      	mov	fp, r1
 800230a:	428d      	cmp	r5, r1
 800230c:	d000      	beq.n	8002310 <__aeabi_dsub+0x224>
 800230e:	e716      	b.n	800213e <__aeabi_dsub+0x52>
 8002310:	4952      	ldr	r1, [pc, #328]	; (800245c <__aeabi_dsub+0x370>)
 8002312:	468c      	mov	ip, r1
 8002314:	44b4      	add	ip, r6
 8002316:	4664      	mov	r4, ip
 8002318:	2c00      	cmp	r4, #0
 800231a:	d100      	bne.n	800231e <__aeabi_dsub+0x232>
 800231c:	e0d3      	b.n	80024c6 <__aeabi_dsub+0x3da>
 800231e:	1b91      	subs	r1, r2, r6
 8002320:	468c      	mov	ip, r1
 8002322:	2e00      	cmp	r6, #0
 8002324:	d100      	bne.n	8002328 <__aeabi_dsub+0x23c>
 8002326:	e15e      	b.n	80025e6 <__aeabi_dsub+0x4fa>
 8002328:	494a      	ldr	r1, [pc, #296]	; (8002454 <__aeabi_dsub+0x368>)
 800232a:	428a      	cmp	r2, r1
 800232c:	d100      	bne.n	8002330 <__aeabi_dsub+0x244>
 800232e:	e1be      	b.n	80026ae <__aeabi_dsub+0x5c2>
 8002330:	2180      	movs	r1, #128	; 0x80
 8002332:	464c      	mov	r4, r9
 8002334:	0409      	lsls	r1, r1, #16
 8002336:	430c      	orrs	r4, r1
 8002338:	46a1      	mov	r9, r4
 800233a:	4661      	mov	r1, ip
 800233c:	2938      	cmp	r1, #56	; 0x38
 800233e:	dd00      	ble.n	8002342 <__aeabi_dsub+0x256>
 8002340:	e1ba      	b.n	80026b8 <__aeabi_dsub+0x5cc>
 8002342:	291f      	cmp	r1, #31
 8002344:	dd00      	ble.n	8002348 <__aeabi_dsub+0x25c>
 8002346:	e227      	b.n	8002798 <__aeabi_dsub+0x6ac>
 8002348:	2420      	movs	r4, #32
 800234a:	1a64      	subs	r4, r4, r1
 800234c:	4649      	mov	r1, r9
 800234e:	40a1      	lsls	r1, r4
 8002350:	001e      	movs	r6, r3
 8002352:	4688      	mov	r8, r1
 8002354:	4661      	mov	r1, ip
 8002356:	40a3      	lsls	r3, r4
 8002358:	40ce      	lsrs	r6, r1
 800235a:	4641      	mov	r1, r8
 800235c:	1e5c      	subs	r4, r3, #1
 800235e:	41a3      	sbcs	r3, r4
 8002360:	4331      	orrs	r1, r6
 8002362:	4319      	orrs	r1, r3
 8002364:	000c      	movs	r4, r1
 8002366:	4663      	mov	r3, ip
 8002368:	4649      	mov	r1, r9
 800236a:	40d9      	lsrs	r1, r3
 800236c:	187f      	adds	r7, r7, r1
 800236e:	1824      	adds	r4, r4, r0
 8002370:	4284      	cmp	r4, r0
 8002372:	419b      	sbcs	r3, r3
 8002374:	425b      	negs	r3, r3
 8002376:	469a      	mov	sl, r3
 8002378:	0016      	movs	r6, r2
 800237a:	44ba      	add	sl, r7
 800237c:	e05d      	b.n	800243a <__aeabi_dsub+0x34e>
 800237e:	4c38      	ldr	r4, [pc, #224]	; (8002460 <__aeabi_dsub+0x374>)
 8002380:	1c72      	adds	r2, r6, #1
 8002382:	4222      	tst	r2, r4
 8002384:	d000      	beq.n	8002388 <__aeabi_dsub+0x29c>
 8002386:	e0df      	b.n	8002548 <__aeabi_dsub+0x45c>
 8002388:	464a      	mov	r2, r9
 800238a:	431a      	orrs	r2, r3
 800238c:	2e00      	cmp	r6, #0
 800238e:	d000      	beq.n	8002392 <__aeabi_dsub+0x2a6>
 8002390:	e15c      	b.n	800264c <__aeabi_dsub+0x560>
 8002392:	2a00      	cmp	r2, #0
 8002394:	d100      	bne.n	8002398 <__aeabi_dsub+0x2ac>
 8002396:	e1cf      	b.n	8002738 <__aeabi_dsub+0x64c>
 8002398:	003a      	movs	r2, r7
 800239a:	4302      	orrs	r2, r0
 800239c:	d100      	bne.n	80023a0 <__aeabi_dsub+0x2b4>
 800239e:	e17f      	b.n	80026a0 <__aeabi_dsub+0x5b4>
 80023a0:	1a1c      	subs	r4, r3, r0
 80023a2:	464a      	mov	r2, r9
 80023a4:	42a3      	cmp	r3, r4
 80023a6:	4189      	sbcs	r1, r1
 80023a8:	1bd2      	subs	r2, r2, r7
 80023aa:	4249      	negs	r1, r1
 80023ac:	1a52      	subs	r2, r2, r1
 80023ae:	4692      	mov	sl, r2
 80023b0:	0212      	lsls	r2, r2, #8
 80023b2:	d400      	bmi.n	80023b6 <__aeabi_dsub+0x2ca>
 80023b4:	e20a      	b.n	80027cc <__aeabi_dsub+0x6e0>
 80023b6:	1ac4      	subs	r4, r0, r3
 80023b8:	42a0      	cmp	r0, r4
 80023ba:	4180      	sbcs	r0, r0
 80023bc:	464b      	mov	r3, r9
 80023be:	4240      	negs	r0, r0
 80023c0:	1aff      	subs	r7, r7, r3
 80023c2:	1a3b      	subs	r3, r7, r0
 80023c4:	469a      	mov	sl, r3
 80023c6:	465d      	mov	r5, fp
 80023c8:	e71a      	b.n	8002200 <__aeabi_dsub+0x114>
 80023ca:	003a      	movs	r2, r7
 80023cc:	4302      	orrs	r2, r0
 80023ce:	d073      	beq.n	80024b8 <__aeabi_dsub+0x3cc>
 80023d0:	0022      	movs	r2, r4
 80023d2:	3a01      	subs	r2, #1
 80023d4:	2c01      	cmp	r4, #1
 80023d6:	d100      	bne.n	80023da <__aeabi_dsub+0x2ee>
 80023d8:	e0cb      	b.n	8002572 <__aeabi_dsub+0x486>
 80023da:	4554      	cmp	r4, sl
 80023dc:	d042      	beq.n	8002464 <__aeabi_dsub+0x378>
 80023de:	4694      	mov	ip, r2
 80023e0:	e748      	b.n	8002274 <__aeabi_dsub+0x188>
 80023e2:	0010      	movs	r0, r2
 80023e4:	3b1f      	subs	r3, #31
 80023e6:	40d8      	lsrs	r0, r3
 80023e8:	2920      	cmp	r1, #32
 80023ea:	d003      	beq.n	80023f4 <__aeabi_dsub+0x308>
 80023ec:	2340      	movs	r3, #64	; 0x40
 80023ee:	1a5b      	subs	r3, r3, r1
 80023f0:	409a      	lsls	r2, r3
 80023f2:	4314      	orrs	r4, r2
 80023f4:	1e63      	subs	r3, r4, #1
 80023f6:	419c      	sbcs	r4, r3
 80023f8:	2300      	movs	r3, #0
 80023fa:	2600      	movs	r6, #0
 80023fc:	469a      	mov	sl, r3
 80023fe:	4304      	orrs	r4, r0
 8002400:	0763      	lsls	r3, r4, #29
 8002402:	d000      	beq.n	8002406 <__aeabi_dsub+0x31a>
 8002404:	e6fe      	b.n	8002204 <__aeabi_dsub+0x118>
 8002406:	4652      	mov	r2, sl
 8002408:	08e3      	lsrs	r3, r4, #3
 800240a:	0752      	lsls	r2, r2, #29
 800240c:	4313      	orrs	r3, r2
 800240e:	4652      	mov	r2, sl
 8002410:	46b4      	mov	ip, r6
 8002412:	08d2      	lsrs	r2, r2, #3
 8002414:	490f      	ldr	r1, [pc, #60]	; (8002454 <__aeabi_dsub+0x368>)
 8002416:	458c      	cmp	ip, r1
 8002418:	d02a      	beq.n	8002470 <__aeabi_dsub+0x384>
 800241a:	0312      	lsls	r2, r2, #12
 800241c:	0b14      	lsrs	r4, r2, #12
 800241e:	4662      	mov	r2, ip
 8002420:	0552      	lsls	r2, r2, #21
 8002422:	0d52      	lsrs	r2, r2, #21
 8002424:	e70c      	b.n	8002240 <__aeabi_dsub+0x154>
 8002426:	003c      	movs	r4, r7
 8002428:	4304      	orrs	r4, r0
 800242a:	1e62      	subs	r2, r4, #1
 800242c:	4194      	sbcs	r4, r2
 800242e:	18e4      	adds	r4, r4, r3
 8002430:	429c      	cmp	r4, r3
 8002432:	4192      	sbcs	r2, r2
 8002434:	4252      	negs	r2, r2
 8002436:	444a      	add	r2, r9
 8002438:	4692      	mov	sl, r2
 800243a:	4653      	mov	r3, sl
 800243c:	021b      	lsls	r3, r3, #8
 800243e:	d5df      	bpl.n	8002400 <__aeabi_dsub+0x314>
 8002440:	4b04      	ldr	r3, [pc, #16]	; (8002454 <__aeabi_dsub+0x368>)
 8002442:	3601      	adds	r6, #1
 8002444:	429e      	cmp	r6, r3
 8002446:	d000      	beq.n	800244a <__aeabi_dsub+0x35e>
 8002448:	e0a0      	b.n	800258c <__aeabi_dsub+0x4a0>
 800244a:	0032      	movs	r2, r6
 800244c:	2400      	movs	r4, #0
 800244e:	2300      	movs	r3, #0
 8002450:	e6f6      	b.n	8002240 <__aeabi_dsub+0x154>
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	000007ff 	.word	0x000007ff
 8002458:	ff7fffff 	.word	0xff7fffff
 800245c:	fffff801 	.word	0xfffff801
 8002460:	000007fe 	.word	0x000007fe
 8002464:	08db      	lsrs	r3, r3, #3
 8002466:	464a      	mov	r2, r9
 8002468:	0752      	lsls	r2, r2, #29
 800246a:	4313      	orrs	r3, r2
 800246c:	464a      	mov	r2, r9
 800246e:	08d2      	lsrs	r2, r2, #3
 8002470:	0019      	movs	r1, r3
 8002472:	4311      	orrs	r1, r2
 8002474:	d100      	bne.n	8002478 <__aeabi_dsub+0x38c>
 8002476:	e1b5      	b.n	80027e4 <__aeabi_dsub+0x6f8>
 8002478:	2480      	movs	r4, #128	; 0x80
 800247a:	0324      	lsls	r4, r4, #12
 800247c:	4314      	orrs	r4, r2
 800247e:	0324      	lsls	r4, r4, #12
 8002480:	4ad5      	ldr	r2, [pc, #852]	; (80027d8 <__aeabi_dsub+0x6ec>)
 8002482:	0b24      	lsrs	r4, r4, #12
 8002484:	e6dc      	b.n	8002240 <__aeabi_dsub+0x154>
 8002486:	0020      	movs	r0, r4
 8002488:	f000 fab6 	bl	80029f8 <__clzsi2>
 800248c:	0003      	movs	r3, r0
 800248e:	3318      	adds	r3, #24
 8002490:	2b1f      	cmp	r3, #31
 8002492:	dc00      	bgt.n	8002496 <__aeabi_dsub+0x3aa>
 8002494:	e695      	b.n	80021c2 <__aeabi_dsub+0xd6>
 8002496:	0022      	movs	r2, r4
 8002498:	3808      	subs	r0, #8
 800249a:	4082      	lsls	r2, r0
 800249c:	2400      	movs	r4, #0
 800249e:	429e      	cmp	r6, r3
 80024a0:	dc00      	bgt.n	80024a4 <__aeabi_dsub+0x3b8>
 80024a2:	e69a      	b.n	80021da <__aeabi_dsub+0xee>
 80024a4:	1af6      	subs	r6, r6, r3
 80024a6:	4bcd      	ldr	r3, [pc, #820]	; (80027dc <__aeabi_dsub+0x6f0>)
 80024a8:	401a      	ands	r2, r3
 80024aa:	4692      	mov	sl, r2
 80024ac:	e6a8      	b.n	8002200 <__aeabi_dsub+0x114>
 80024ae:	003c      	movs	r4, r7
 80024b0:	4304      	orrs	r4, r0
 80024b2:	1e62      	subs	r2, r4, #1
 80024b4:	4194      	sbcs	r4, r2
 80024b6:	e66c      	b.n	8002192 <__aeabi_dsub+0xa6>
 80024b8:	464a      	mov	r2, r9
 80024ba:	08db      	lsrs	r3, r3, #3
 80024bc:	0752      	lsls	r2, r2, #29
 80024be:	4313      	orrs	r3, r2
 80024c0:	464a      	mov	r2, r9
 80024c2:	08d2      	lsrs	r2, r2, #3
 80024c4:	e7a6      	b.n	8002414 <__aeabi_dsub+0x328>
 80024c6:	4cc6      	ldr	r4, [pc, #792]	; (80027e0 <__aeabi_dsub+0x6f4>)
 80024c8:	1c72      	adds	r2, r6, #1
 80024ca:	4222      	tst	r2, r4
 80024cc:	d000      	beq.n	80024d0 <__aeabi_dsub+0x3e4>
 80024ce:	e0ac      	b.n	800262a <__aeabi_dsub+0x53e>
 80024d0:	464a      	mov	r2, r9
 80024d2:	431a      	orrs	r2, r3
 80024d4:	2e00      	cmp	r6, #0
 80024d6:	d000      	beq.n	80024da <__aeabi_dsub+0x3ee>
 80024d8:	e105      	b.n	80026e6 <__aeabi_dsub+0x5fa>
 80024da:	2a00      	cmp	r2, #0
 80024dc:	d100      	bne.n	80024e0 <__aeabi_dsub+0x3f4>
 80024de:	e156      	b.n	800278e <__aeabi_dsub+0x6a2>
 80024e0:	003a      	movs	r2, r7
 80024e2:	4302      	orrs	r2, r0
 80024e4:	d100      	bne.n	80024e8 <__aeabi_dsub+0x3fc>
 80024e6:	e0db      	b.n	80026a0 <__aeabi_dsub+0x5b4>
 80024e8:	181c      	adds	r4, r3, r0
 80024ea:	429c      	cmp	r4, r3
 80024ec:	419b      	sbcs	r3, r3
 80024ee:	444f      	add	r7, r9
 80024f0:	46ba      	mov	sl, r7
 80024f2:	425b      	negs	r3, r3
 80024f4:	449a      	add	sl, r3
 80024f6:	4653      	mov	r3, sl
 80024f8:	021b      	lsls	r3, r3, #8
 80024fa:	d400      	bmi.n	80024fe <__aeabi_dsub+0x412>
 80024fc:	e780      	b.n	8002400 <__aeabi_dsub+0x314>
 80024fe:	4652      	mov	r2, sl
 8002500:	4bb6      	ldr	r3, [pc, #728]	; (80027dc <__aeabi_dsub+0x6f0>)
 8002502:	2601      	movs	r6, #1
 8002504:	401a      	ands	r2, r3
 8002506:	4692      	mov	sl, r2
 8002508:	e77a      	b.n	8002400 <__aeabi_dsub+0x314>
 800250a:	4cb3      	ldr	r4, [pc, #716]	; (80027d8 <__aeabi_dsub+0x6ec>)
 800250c:	42a2      	cmp	r2, r4
 800250e:	d100      	bne.n	8002512 <__aeabi_dsub+0x426>
 8002510:	e0c0      	b.n	8002694 <__aeabi_dsub+0x5a8>
 8002512:	2480      	movs	r4, #128	; 0x80
 8002514:	464d      	mov	r5, r9
 8002516:	0424      	lsls	r4, r4, #16
 8002518:	4325      	orrs	r5, r4
 800251a:	46a9      	mov	r9, r5
 800251c:	4664      	mov	r4, ip
 800251e:	2c38      	cmp	r4, #56	; 0x38
 8002520:	dc53      	bgt.n	80025ca <__aeabi_dsub+0x4de>
 8002522:	4661      	mov	r1, ip
 8002524:	2c1f      	cmp	r4, #31
 8002526:	dd00      	ble.n	800252a <__aeabi_dsub+0x43e>
 8002528:	e0cd      	b.n	80026c6 <__aeabi_dsub+0x5da>
 800252a:	2520      	movs	r5, #32
 800252c:	001e      	movs	r6, r3
 800252e:	1b2d      	subs	r5, r5, r4
 8002530:	464c      	mov	r4, r9
 8002532:	40ab      	lsls	r3, r5
 8002534:	40ac      	lsls	r4, r5
 8002536:	40ce      	lsrs	r6, r1
 8002538:	1e5d      	subs	r5, r3, #1
 800253a:	41ab      	sbcs	r3, r5
 800253c:	4334      	orrs	r4, r6
 800253e:	4323      	orrs	r3, r4
 8002540:	464c      	mov	r4, r9
 8002542:	40cc      	lsrs	r4, r1
 8002544:	1b3f      	subs	r7, r7, r4
 8002546:	e045      	b.n	80025d4 <__aeabi_dsub+0x4e8>
 8002548:	464a      	mov	r2, r9
 800254a:	1a1c      	subs	r4, r3, r0
 800254c:	1bd1      	subs	r1, r2, r7
 800254e:	42a3      	cmp	r3, r4
 8002550:	4192      	sbcs	r2, r2
 8002552:	4252      	negs	r2, r2
 8002554:	4692      	mov	sl, r2
 8002556:	000a      	movs	r2, r1
 8002558:	4651      	mov	r1, sl
 800255a:	1a52      	subs	r2, r2, r1
 800255c:	4692      	mov	sl, r2
 800255e:	0212      	lsls	r2, r2, #8
 8002560:	d500      	bpl.n	8002564 <__aeabi_dsub+0x478>
 8002562:	e083      	b.n	800266c <__aeabi_dsub+0x580>
 8002564:	4653      	mov	r3, sl
 8002566:	4323      	orrs	r3, r4
 8002568:	d000      	beq.n	800256c <__aeabi_dsub+0x480>
 800256a:	e621      	b.n	80021b0 <__aeabi_dsub+0xc4>
 800256c:	2200      	movs	r2, #0
 800256e:	2500      	movs	r5, #0
 8002570:	e753      	b.n	800241a <__aeabi_dsub+0x32e>
 8002572:	181c      	adds	r4, r3, r0
 8002574:	429c      	cmp	r4, r3
 8002576:	419b      	sbcs	r3, r3
 8002578:	444f      	add	r7, r9
 800257a:	46ba      	mov	sl, r7
 800257c:	425b      	negs	r3, r3
 800257e:	449a      	add	sl, r3
 8002580:	4653      	mov	r3, sl
 8002582:	2601      	movs	r6, #1
 8002584:	021b      	lsls	r3, r3, #8
 8002586:	d400      	bmi.n	800258a <__aeabi_dsub+0x49e>
 8002588:	e73a      	b.n	8002400 <__aeabi_dsub+0x314>
 800258a:	2602      	movs	r6, #2
 800258c:	4652      	mov	r2, sl
 800258e:	4b93      	ldr	r3, [pc, #588]	; (80027dc <__aeabi_dsub+0x6f0>)
 8002590:	2101      	movs	r1, #1
 8002592:	401a      	ands	r2, r3
 8002594:	0013      	movs	r3, r2
 8002596:	4021      	ands	r1, r4
 8002598:	0862      	lsrs	r2, r4, #1
 800259a:	430a      	orrs	r2, r1
 800259c:	07dc      	lsls	r4, r3, #31
 800259e:	085b      	lsrs	r3, r3, #1
 80025a0:	469a      	mov	sl, r3
 80025a2:	4314      	orrs	r4, r2
 80025a4:	e62c      	b.n	8002200 <__aeabi_dsub+0x114>
 80025a6:	0039      	movs	r1, r7
 80025a8:	3a20      	subs	r2, #32
 80025aa:	40d1      	lsrs	r1, r2
 80025ac:	4662      	mov	r2, ip
 80025ae:	2a20      	cmp	r2, #32
 80025b0:	d006      	beq.n	80025c0 <__aeabi_dsub+0x4d4>
 80025b2:	4664      	mov	r4, ip
 80025b4:	2240      	movs	r2, #64	; 0x40
 80025b6:	1b12      	subs	r2, r2, r4
 80025b8:	003c      	movs	r4, r7
 80025ba:	4094      	lsls	r4, r2
 80025bc:	4304      	orrs	r4, r0
 80025be:	9401      	str	r4, [sp, #4]
 80025c0:	9c01      	ldr	r4, [sp, #4]
 80025c2:	1e62      	subs	r2, r4, #1
 80025c4:	4194      	sbcs	r4, r2
 80025c6:	430c      	orrs	r4, r1
 80025c8:	e5e3      	b.n	8002192 <__aeabi_dsub+0xa6>
 80025ca:	4649      	mov	r1, r9
 80025cc:	4319      	orrs	r1, r3
 80025ce:	000b      	movs	r3, r1
 80025d0:	1e5c      	subs	r4, r3, #1
 80025d2:	41a3      	sbcs	r3, r4
 80025d4:	1ac4      	subs	r4, r0, r3
 80025d6:	42a0      	cmp	r0, r4
 80025d8:	419b      	sbcs	r3, r3
 80025da:	425b      	negs	r3, r3
 80025dc:	1afb      	subs	r3, r7, r3
 80025de:	469a      	mov	sl, r3
 80025e0:	465d      	mov	r5, fp
 80025e2:	0016      	movs	r6, r2
 80025e4:	e5dc      	b.n	80021a0 <__aeabi_dsub+0xb4>
 80025e6:	4649      	mov	r1, r9
 80025e8:	4319      	orrs	r1, r3
 80025ea:	d100      	bne.n	80025ee <__aeabi_dsub+0x502>
 80025ec:	e0ae      	b.n	800274c <__aeabi_dsub+0x660>
 80025ee:	4661      	mov	r1, ip
 80025f0:	4664      	mov	r4, ip
 80025f2:	3901      	subs	r1, #1
 80025f4:	2c01      	cmp	r4, #1
 80025f6:	d100      	bne.n	80025fa <__aeabi_dsub+0x50e>
 80025f8:	e0e0      	b.n	80027bc <__aeabi_dsub+0x6d0>
 80025fa:	4c77      	ldr	r4, [pc, #476]	; (80027d8 <__aeabi_dsub+0x6ec>)
 80025fc:	45a4      	cmp	ip, r4
 80025fe:	d056      	beq.n	80026ae <__aeabi_dsub+0x5c2>
 8002600:	468c      	mov	ip, r1
 8002602:	e69a      	b.n	800233a <__aeabi_dsub+0x24e>
 8002604:	4661      	mov	r1, ip
 8002606:	2220      	movs	r2, #32
 8002608:	003c      	movs	r4, r7
 800260a:	1a52      	subs	r2, r2, r1
 800260c:	4094      	lsls	r4, r2
 800260e:	0001      	movs	r1, r0
 8002610:	4090      	lsls	r0, r2
 8002612:	46a0      	mov	r8, r4
 8002614:	4664      	mov	r4, ip
 8002616:	1e42      	subs	r2, r0, #1
 8002618:	4190      	sbcs	r0, r2
 800261a:	4662      	mov	r2, ip
 800261c:	40e1      	lsrs	r1, r4
 800261e:	4644      	mov	r4, r8
 8002620:	40d7      	lsrs	r7, r2
 8002622:	430c      	orrs	r4, r1
 8002624:	4304      	orrs	r4, r0
 8002626:	44b9      	add	r9, r7
 8002628:	e701      	b.n	800242e <__aeabi_dsub+0x342>
 800262a:	496b      	ldr	r1, [pc, #428]	; (80027d8 <__aeabi_dsub+0x6ec>)
 800262c:	428a      	cmp	r2, r1
 800262e:	d100      	bne.n	8002632 <__aeabi_dsub+0x546>
 8002630:	e70c      	b.n	800244c <__aeabi_dsub+0x360>
 8002632:	1818      	adds	r0, r3, r0
 8002634:	4298      	cmp	r0, r3
 8002636:	419b      	sbcs	r3, r3
 8002638:	444f      	add	r7, r9
 800263a:	425b      	negs	r3, r3
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	07dc      	lsls	r4, r3, #31
 8002640:	0840      	lsrs	r0, r0, #1
 8002642:	085b      	lsrs	r3, r3, #1
 8002644:	469a      	mov	sl, r3
 8002646:	0016      	movs	r6, r2
 8002648:	4304      	orrs	r4, r0
 800264a:	e6d9      	b.n	8002400 <__aeabi_dsub+0x314>
 800264c:	2a00      	cmp	r2, #0
 800264e:	d000      	beq.n	8002652 <__aeabi_dsub+0x566>
 8002650:	e081      	b.n	8002756 <__aeabi_dsub+0x66a>
 8002652:	003b      	movs	r3, r7
 8002654:	4303      	orrs	r3, r0
 8002656:	d11d      	bne.n	8002694 <__aeabi_dsub+0x5a8>
 8002658:	2280      	movs	r2, #128	; 0x80
 800265a:	2500      	movs	r5, #0
 800265c:	0312      	lsls	r2, r2, #12
 800265e:	e70b      	b.n	8002478 <__aeabi_dsub+0x38c>
 8002660:	08c0      	lsrs	r0, r0, #3
 8002662:	077b      	lsls	r3, r7, #29
 8002664:	465d      	mov	r5, fp
 8002666:	4303      	orrs	r3, r0
 8002668:	08fa      	lsrs	r2, r7, #3
 800266a:	e6d3      	b.n	8002414 <__aeabi_dsub+0x328>
 800266c:	1ac4      	subs	r4, r0, r3
 800266e:	42a0      	cmp	r0, r4
 8002670:	4180      	sbcs	r0, r0
 8002672:	464b      	mov	r3, r9
 8002674:	4240      	negs	r0, r0
 8002676:	1aff      	subs	r7, r7, r3
 8002678:	1a3b      	subs	r3, r7, r0
 800267a:	469a      	mov	sl, r3
 800267c:	465d      	mov	r5, fp
 800267e:	e597      	b.n	80021b0 <__aeabi_dsub+0xc4>
 8002680:	1a1c      	subs	r4, r3, r0
 8002682:	464a      	mov	r2, r9
 8002684:	42a3      	cmp	r3, r4
 8002686:	419b      	sbcs	r3, r3
 8002688:	1bd7      	subs	r7, r2, r7
 800268a:	425b      	negs	r3, r3
 800268c:	1afb      	subs	r3, r7, r3
 800268e:	469a      	mov	sl, r3
 8002690:	2601      	movs	r6, #1
 8002692:	e585      	b.n	80021a0 <__aeabi_dsub+0xb4>
 8002694:	08c0      	lsrs	r0, r0, #3
 8002696:	077b      	lsls	r3, r7, #29
 8002698:	465d      	mov	r5, fp
 800269a:	4303      	orrs	r3, r0
 800269c:	08fa      	lsrs	r2, r7, #3
 800269e:	e6e7      	b.n	8002470 <__aeabi_dsub+0x384>
 80026a0:	464a      	mov	r2, r9
 80026a2:	08db      	lsrs	r3, r3, #3
 80026a4:	0752      	lsls	r2, r2, #29
 80026a6:	4313      	orrs	r3, r2
 80026a8:	464a      	mov	r2, r9
 80026aa:	08d2      	lsrs	r2, r2, #3
 80026ac:	e6b5      	b.n	800241a <__aeabi_dsub+0x32e>
 80026ae:	08c0      	lsrs	r0, r0, #3
 80026b0:	077b      	lsls	r3, r7, #29
 80026b2:	4303      	orrs	r3, r0
 80026b4:	08fa      	lsrs	r2, r7, #3
 80026b6:	e6db      	b.n	8002470 <__aeabi_dsub+0x384>
 80026b8:	4649      	mov	r1, r9
 80026ba:	4319      	orrs	r1, r3
 80026bc:	000b      	movs	r3, r1
 80026be:	1e59      	subs	r1, r3, #1
 80026c0:	418b      	sbcs	r3, r1
 80026c2:	001c      	movs	r4, r3
 80026c4:	e653      	b.n	800236e <__aeabi_dsub+0x282>
 80026c6:	464d      	mov	r5, r9
 80026c8:	3c20      	subs	r4, #32
 80026ca:	40e5      	lsrs	r5, r4
 80026cc:	2920      	cmp	r1, #32
 80026ce:	d005      	beq.n	80026dc <__aeabi_dsub+0x5f0>
 80026d0:	2440      	movs	r4, #64	; 0x40
 80026d2:	1a64      	subs	r4, r4, r1
 80026d4:	4649      	mov	r1, r9
 80026d6:	40a1      	lsls	r1, r4
 80026d8:	430b      	orrs	r3, r1
 80026da:	4698      	mov	r8, r3
 80026dc:	4643      	mov	r3, r8
 80026de:	1e5c      	subs	r4, r3, #1
 80026e0:	41a3      	sbcs	r3, r4
 80026e2:	432b      	orrs	r3, r5
 80026e4:	e776      	b.n	80025d4 <__aeabi_dsub+0x4e8>
 80026e6:	2a00      	cmp	r2, #0
 80026e8:	d0e1      	beq.n	80026ae <__aeabi_dsub+0x5c2>
 80026ea:	003a      	movs	r2, r7
 80026ec:	08db      	lsrs	r3, r3, #3
 80026ee:	4302      	orrs	r2, r0
 80026f0:	d100      	bne.n	80026f4 <__aeabi_dsub+0x608>
 80026f2:	e6b8      	b.n	8002466 <__aeabi_dsub+0x37a>
 80026f4:	464a      	mov	r2, r9
 80026f6:	0752      	lsls	r2, r2, #29
 80026f8:	2480      	movs	r4, #128	; 0x80
 80026fa:	4313      	orrs	r3, r2
 80026fc:	464a      	mov	r2, r9
 80026fe:	0324      	lsls	r4, r4, #12
 8002700:	08d2      	lsrs	r2, r2, #3
 8002702:	4222      	tst	r2, r4
 8002704:	d007      	beq.n	8002716 <__aeabi_dsub+0x62a>
 8002706:	08fe      	lsrs	r6, r7, #3
 8002708:	4226      	tst	r6, r4
 800270a:	d104      	bne.n	8002716 <__aeabi_dsub+0x62a>
 800270c:	465d      	mov	r5, fp
 800270e:	0032      	movs	r2, r6
 8002710:	08c3      	lsrs	r3, r0, #3
 8002712:	077f      	lsls	r7, r7, #29
 8002714:	433b      	orrs	r3, r7
 8002716:	0f59      	lsrs	r1, r3, #29
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	0749      	lsls	r1, r1, #29
 800271c:	08db      	lsrs	r3, r3, #3
 800271e:	430b      	orrs	r3, r1
 8002720:	e6a6      	b.n	8002470 <__aeabi_dsub+0x384>
 8002722:	1ac4      	subs	r4, r0, r3
 8002724:	42a0      	cmp	r0, r4
 8002726:	4180      	sbcs	r0, r0
 8002728:	464b      	mov	r3, r9
 800272a:	4240      	negs	r0, r0
 800272c:	1aff      	subs	r7, r7, r3
 800272e:	1a3b      	subs	r3, r7, r0
 8002730:	469a      	mov	sl, r3
 8002732:	465d      	mov	r5, fp
 8002734:	2601      	movs	r6, #1
 8002736:	e533      	b.n	80021a0 <__aeabi_dsub+0xb4>
 8002738:	003b      	movs	r3, r7
 800273a:	4303      	orrs	r3, r0
 800273c:	d100      	bne.n	8002740 <__aeabi_dsub+0x654>
 800273e:	e715      	b.n	800256c <__aeabi_dsub+0x480>
 8002740:	08c0      	lsrs	r0, r0, #3
 8002742:	077b      	lsls	r3, r7, #29
 8002744:	465d      	mov	r5, fp
 8002746:	4303      	orrs	r3, r0
 8002748:	08fa      	lsrs	r2, r7, #3
 800274a:	e666      	b.n	800241a <__aeabi_dsub+0x32e>
 800274c:	08c0      	lsrs	r0, r0, #3
 800274e:	077b      	lsls	r3, r7, #29
 8002750:	4303      	orrs	r3, r0
 8002752:	08fa      	lsrs	r2, r7, #3
 8002754:	e65e      	b.n	8002414 <__aeabi_dsub+0x328>
 8002756:	003a      	movs	r2, r7
 8002758:	08db      	lsrs	r3, r3, #3
 800275a:	4302      	orrs	r2, r0
 800275c:	d100      	bne.n	8002760 <__aeabi_dsub+0x674>
 800275e:	e682      	b.n	8002466 <__aeabi_dsub+0x37a>
 8002760:	464a      	mov	r2, r9
 8002762:	0752      	lsls	r2, r2, #29
 8002764:	2480      	movs	r4, #128	; 0x80
 8002766:	4313      	orrs	r3, r2
 8002768:	464a      	mov	r2, r9
 800276a:	0324      	lsls	r4, r4, #12
 800276c:	08d2      	lsrs	r2, r2, #3
 800276e:	4222      	tst	r2, r4
 8002770:	d007      	beq.n	8002782 <__aeabi_dsub+0x696>
 8002772:	08fe      	lsrs	r6, r7, #3
 8002774:	4226      	tst	r6, r4
 8002776:	d104      	bne.n	8002782 <__aeabi_dsub+0x696>
 8002778:	465d      	mov	r5, fp
 800277a:	0032      	movs	r2, r6
 800277c:	08c3      	lsrs	r3, r0, #3
 800277e:	077f      	lsls	r7, r7, #29
 8002780:	433b      	orrs	r3, r7
 8002782:	0f59      	lsrs	r1, r3, #29
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	08db      	lsrs	r3, r3, #3
 8002788:	0749      	lsls	r1, r1, #29
 800278a:	430b      	orrs	r3, r1
 800278c:	e670      	b.n	8002470 <__aeabi_dsub+0x384>
 800278e:	08c0      	lsrs	r0, r0, #3
 8002790:	077b      	lsls	r3, r7, #29
 8002792:	4303      	orrs	r3, r0
 8002794:	08fa      	lsrs	r2, r7, #3
 8002796:	e640      	b.n	800241a <__aeabi_dsub+0x32e>
 8002798:	464c      	mov	r4, r9
 800279a:	3920      	subs	r1, #32
 800279c:	40cc      	lsrs	r4, r1
 800279e:	4661      	mov	r1, ip
 80027a0:	2920      	cmp	r1, #32
 80027a2:	d006      	beq.n	80027b2 <__aeabi_dsub+0x6c6>
 80027a4:	4666      	mov	r6, ip
 80027a6:	2140      	movs	r1, #64	; 0x40
 80027a8:	1b89      	subs	r1, r1, r6
 80027aa:	464e      	mov	r6, r9
 80027ac:	408e      	lsls	r6, r1
 80027ae:	4333      	orrs	r3, r6
 80027b0:	4698      	mov	r8, r3
 80027b2:	4643      	mov	r3, r8
 80027b4:	1e59      	subs	r1, r3, #1
 80027b6:	418b      	sbcs	r3, r1
 80027b8:	431c      	orrs	r4, r3
 80027ba:	e5d8      	b.n	800236e <__aeabi_dsub+0x282>
 80027bc:	181c      	adds	r4, r3, r0
 80027be:	4284      	cmp	r4, r0
 80027c0:	4180      	sbcs	r0, r0
 80027c2:	444f      	add	r7, r9
 80027c4:	46ba      	mov	sl, r7
 80027c6:	4240      	negs	r0, r0
 80027c8:	4482      	add	sl, r0
 80027ca:	e6d9      	b.n	8002580 <__aeabi_dsub+0x494>
 80027cc:	4653      	mov	r3, sl
 80027ce:	4323      	orrs	r3, r4
 80027d0:	d100      	bne.n	80027d4 <__aeabi_dsub+0x6e8>
 80027d2:	e6cb      	b.n	800256c <__aeabi_dsub+0x480>
 80027d4:	e614      	b.n	8002400 <__aeabi_dsub+0x314>
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	000007ff 	.word	0x000007ff
 80027dc:	ff7fffff 	.word	0xff7fffff
 80027e0:	000007fe 	.word	0x000007fe
 80027e4:	2300      	movs	r3, #0
 80027e6:	4a01      	ldr	r2, [pc, #4]	; (80027ec <__aeabi_dsub+0x700>)
 80027e8:	001c      	movs	r4, r3
 80027ea:	e529      	b.n	8002240 <__aeabi_dsub+0x154>
 80027ec:	000007ff 	.word	0x000007ff

080027f0 <__aeabi_d2iz>:
 80027f0:	000a      	movs	r2, r1
 80027f2:	b530      	push	{r4, r5, lr}
 80027f4:	4c13      	ldr	r4, [pc, #76]	; (8002844 <__aeabi_d2iz+0x54>)
 80027f6:	0053      	lsls	r3, r2, #1
 80027f8:	0309      	lsls	r1, r1, #12
 80027fa:	0005      	movs	r5, r0
 80027fc:	0b09      	lsrs	r1, r1, #12
 80027fe:	2000      	movs	r0, #0
 8002800:	0d5b      	lsrs	r3, r3, #21
 8002802:	0fd2      	lsrs	r2, r2, #31
 8002804:	42a3      	cmp	r3, r4
 8002806:	dd04      	ble.n	8002812 <__aeabi_d2iz+0x22>
 8002808:	480f      	ldr	r0, [pc, #60]	; (8002848 <__aeabi_d2iz+0x58>)
 800280a:	4283      	cmp	r3, r0
 800280c:	dd02      	ble.n	8002814 <__aeabi_d2iz+0x24>
 800280e:	4b0f      	ldr	r3, [pc, #60]	; (800284c <__aeabi_d2iz+0x5c>)
 8002810:	18d0      	adds	r0, r2, r3
 8002812:	bd30      	pop	{r4, r5, pc}
 8002814:	2080      	movs	r0, #128	; 0x80
 8002816:	0340      	lsls	r0, r0, #13
 8002818:	4301      	orrs	r1, r0
 800281a:	480d      	ldr	r0, [pc, #52]	; (8002850 <__aeabi_d2iz+0x60>)
 800281c:	1ac0      	subs	r0, r0, r3
 800281e:	281f      	cmp	r0, #31
 8002820:	dd08      	ble.n	8002834 <__aeabi_d2iz+0x44>
 8002822:	480c      	ldr	r0, [pc, #48]	; (8002854 <__aeabi_d2iz+0x64>)
 8002824:	1ac3      	subs	r3, r0, r3
 8002826:	40d9      	lsrs	r1, r3
 8002828:	000b      	movs	r3, r1
 800282a:	4258      	negs	r0, r3
 800282c:	2a00      	cmp	r2, #0
 800282e:	d1f0      	bne.n	8002812 <__aeabi_d2iz+0x22>
 8002830:	0018      	movs	r0, r3
 8002832:	e7ee      	b.n	8002812 <__aeabi_d2iz+0x22>
 8002834:	4c08      	ldr	r4, [pc, #32]	; (8002858 <__aeabi_d2iz+0x68>)
 8002836:	40c5      	lsrs	r5, r0
 8002838:	46a4      	mov	ip, r4
 800283a:	4463      	add	r3, ip
 800283c:	4099      	lsls	r1, r3
 800283e:	000b      	movs	r3, r1
 8002840:	432b      	orrs	r3, r5
 8002842:	e7f2      	b.n	800282a <__aeabi_d2iz+0x3a>
 8002844:	000003fe 	.word	0x000003fe
 8002848:	0000041d 	.word	0x0000041d
 800284c:	7fffffff 	.word	0x7fffffff
 8002850:	00000433 	.word	0x00000433
 8002854:	00000413 	.word	0x00000413
 8002858:	fffffbed 	.word	0xfffffbed

0800285c <__aeabi_f2d>:
 800285c:	b570      	push	{r4, r5, r6, lr}
 800285e:	0242      	lsls	r2, r0, #9
 8002860:	0043      	lsls	r3, r0, #1
 8002862:	0fc4      	lsrs	r4, r0, #31
 8002864:	20fe      	movs	r0, #254	; 0xfe
 8002866:	0e1b      	lsrs	r3, r3, #24
 8002868:	1c59      	adds	r1, r3, #1
 800286a:	0a55      	lsrs	r5, r2, #9
 800286c:	4208      	tst	r0, r1
 800286e:	d00c      	beq.n	800288a <__aeabi_f2d+0x2e>
 8002870:	21e0      	movs	r1, #224	; 0xe0
 8002872:	0089      	lsls	r1, r1, #2
 8002874:	468c      	mov	ip, r1
 8002876:	076d      	lsls	r5, r5, #29
 8002878:	0b12      	lsrs	r2, r2, #12
 800287a:	4463      	add	r3, ip
 800287c:	051b      	lsls	r3, r3, #20
 800287e:	4313      	orrs	r3, r2
 8002880:	07e4      	lsls	r4, r4, #31
 8002882:	4323      	orrs	r3, r4
 8002884:	0028      	movs	r0, r5
 8002886:	0019      	movs	r1, r3
 8002888:	bd70      	pop	{r4, r5, r6, pc}
 800288a:	2b00      	cmp	r3, #0
 800288c:	d114      	bne.n	80028b8 <__aeabi_f2d+0x5c>
 800288e:	2d00      	cmp	r5, #0
 8002890:	d01b      	beq.n	80028ca <__aeabi_f2d+0x6e>
 8002892:	0028      	movs	r0, r5
 8002894:	f000 f8b0 	bl	80029f8 <__clzsi2>
 8002898:	280a      	cmp	r0, #10
 800289a:	dc1c      	bgt.n	80028d6 <__aeabi_f2d+0x7a>
 800289c:	230b      	movs	r3, #11
 800289e:	002a      	movs	r2, r5
 80028a0:	1a1b      	subs	r3, r3, r0
 80028a2:	40da      	lsrs	r2, r3
 80028a4:	0003      	movs	r3, r0
 80028a6:	3315      	adds	r3, #21
 80028a8:	409d      	lsls	r5, r3
 80028aa:	4b0e      	ldr	r3, [pc, #56]	; (80028e4 <__aeabi_f2d+0x88>)
 80028ac:	0312      	lsls	r2, r2, #12
 80028ae:	1a1b      	subs	r3, r3, r0
 80028b0:	055b      	lsls	r3, r3, #21
 80028b2:	0b12      	lsrs	r2, r2, #12
 80028b4:	0d5b      	lsrs	r3, r3, #21
 80028b6:	e7e1      	b.n	800287c <__aeabi_f2d+0x20>
 80028b8:	2d00      	cmp	r5, #0
 80028ba:	d009      	beq.n	80028d0 <__aeabi_f2d+0x74>
 80028bc:	0b13      	lsrs	r3, r2, #12
 80028be:	2280      	movs	r2, #128	; 0x80
 80028c0:	0312      	lsls	r2, r2, #12
 80028c2:	431a      	orrs	r2, r3
 80028c4:	076d      	lsls	r5, r5, #29
 80028c6:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <__aeabi_f2d+0x8c>)
 80028c8:	e7d8      	b.n	800287c <__aeabi_f2d+0x20>
 80028ca:	2300      	movs	r3, #0
 80028cc:	2200      	movs	r2, #0
 80028ce:	e7d5      	b.n	800287c <__aeabi_f2d+0x20>
 80028d0:	2200      	movs	r2, #0
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <__aeabi_f2d+0x8c>)
 80028d4:	e7d2      	b.n	800287c <__aeabi_f2d+0x20>
 80028d6:	0003      	movs	r3, r0
 80028d8:	002a      	movs	r2, r5
 80028da:	3b0b      	subs	r3, #11
 80028dc:	409a      	lsls	r2, r3
 80028de:	2500      	movs	r5, #0
 80028e0:	e7e3      	b.n	80028aa <__aeabi_f2d+0x4e>
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	00000389 	.word	0x00000389
 80028e8:	000007ff 	.word	0x000007ff

080028ec <__aeabi_d2f>:
 80028ec:	0002      	movs	r2, r0
 80028ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028f0:	004b      	lsls	r3, r1, #1
 80028f2:	030d      	lsls	r5, r1, #12
 80028f4:	0f40      	lsrs	r0, r0, #29
 80028f6:	0d5b      	lsrs	r3, r3, #21
 80028f8:	0fcc      	lsrs	r4, r1, #31
 80028fa:	0a6d      	lsrs	r5, r5, #9
 80028fc:	493a      	ldr	r1, [pc, #232]	; (80029e8 <__aeabi_d2f+0xfc>)
 80028fe:	4305      	orrs	r5, r0
 8002900:	1c58      	adds	r0, r3, #1
 8002902:	00d7      	lsls	r7, r2, #3
 8002904:	4208      	tst	r0, r1
 8002906:	d00a      	beq.n	800291e <__aeabi_d2f+0x32>
 8002908:	4938      	ldr	r1, [pc, #224]	; (80029ec <__aeabi_d2f+0x100>)
 800290a:	1859      	adds	r1, r3, r1
 800290c:	29fe      	cmp	r1, #254	; 0xfe
 800290e:	dd16      	ble.n	800293e <__aeabi_d2f+0x52>
 8002910:	20ff      	movs	r0, #255	; 0xff
 8002912:	2200      	movs	r2, #0
 8002914:	05c0      	lsls	r0, r0, #23
 8002916:	4310      	orrs	r0, r2
 8002918:	07e4      	lsls	r4, r4, #31
 800291a:	4320      	orrs	r0, r4
 800291c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <__aeabi_d2f+0x44>
 8002922:	433d      	orrs	r5, r7
 8002924:	d026      	beq.n	8002974 <__aeabi_d2f+0x88>
 8002926:	2205      	movs	r2, #5
 8002928:	0192      	lsls	r2, r2, #6
 800292a:	0a52      	lsrs	r2, r2, #9
 800292c:	b2d8      	uxtb	r0, r3
 800292e:	e7f1      	b.n	8002914 <__aeabi_d2f+0x28>
 8002930:	432f      	orrs	r7, r5
 8002932:	d0ed      	beq.n	8002910 <__aeabi_d2f+0x24>
 8002934:	2280      	movs	r2, #128	; 0x80
 8002936:	03d2      	lsls	r2, r2, #15
 8002938:	20ff      	movs	r0, #255	; 0xff
 800293a:	432a      	orrs	r2, r5
 800293c:	e7ea      	b.n	8002914 <__aeabi_d2f+0x28>
 800293e:	2900      	cmp	r1, #0
 8002940:	dd1b      	ble.n	800297a <__aeabi_d2f+0x8e>
 8002942:	0192      	lsls	r2, r2, #6
 8002944:	1e50      	subs	r0, r2, #1
 8002946:	4182      	sbcs	r2, r0
 8002948:	00ed      	lsls	r5, r5, #3
 800294a:	0f7f      	lsrs	r7, r7, #29
 800294c:	432a      	orrs	r2, r5
 800294e:	433a      	orrs	r2, r7
 8002950:	0753      	lsls	r3, r2, #29
 8002952:	d047      	beq.n	80029e4 <__aeabi_d2f+0xf8>
 8002954:	230f      	movs	r3, #15
 8002956:	4013      	ands	r3, r2
 8002958:	2b04      	cmp	r3, #4
 800295a:	d000      	beq.n	800295e <__aeabi_d2f+0x72>
 800295c:	3204      	adds	r2, #4
 800295e:	2380      	movs	r3, #128	; 0x80
 8002960:	04db      	lsls	r3, r3, #19
 8002962:	4013      	ands	r3, r2
 8002964:	d03e      	beq.n	80029e4 <__aeabi_d2f+0xf8>
 8002966:	1c48      	adds	r0, r1, #1
 8002968:	29fe      	cmp	r1, #254	; 0xfe
 800296a:	d0d1      	beq.n	8002910 <__aeabi_d2f+0x24>
 800296c:	0192      	lsls	r2, r2, #6
 800296e:	0a52      	lsrs	r2, r2, #9
 8002970:	b2c0      	uxtb	r0, r0
 8002972:	e7cf      	b.n	8002914 <__aeabi_d2f+0x28>
 8002974:	2000      	movs	r0, #0
 8002976:	2200      	movs	r2, #0
 8002978:	e7cc      	b.n	8002914 <__aeabi_d2f+0x28>
 800297a:	000a      	movs	r2, r1
 800297c:	3217      	adds	r2, #23
 800297e:	db2f      	blt.n	80029e0 <__aeabi_d2f+0xf4>
 8002980:	2680      	movs	r6, #128	; 0x80
 8002982:	0436      	lsls	r6, r6, #16
 8002984:	432e      	orrs	r6, r5
 8002986:	251e      	movs	r5, #30
 8002988:	1a6d      	subs	r5, r5, r1
 800298a:	2d1f      	cmp	r5, #31
 800298c:	dd11      	ble.n	80029b2 <__aeabi_d2f+0xc6>
 800298e:	2202      	movs	r2, #2
 8002990:	4252      	negs	r2, r2
 8002992:	1a52      	subs	r2, r2, r1
 8002994:	0031      	movs	r1, r6
 8002996:	40d1      	lsrs	r1, r2
 8002998:	2d20      	cmp	r5, #32
 800299a:	d004      	beq.n	80029a6 <__aeabi_d2f+0xba>
 800299c:	4a14      	ldr	r2, [pc, #80]	; (80029f0 <__aeabi_d2f+0x104>)
 800299e:	4694      	mov	ip, r2
 80029a0:	4463      	add	r3, ip
 80029a2:	409e      	lsls	r6, r3
 80029a4:	4337      	orrs	r7, r6
 80029a6:	003a      	movs	r2, r7
 80029a8:	1e53      	subs	r3, r2, #1
 80029aa:	419a      	sbcs	r2, r3
 80029ac:	430a      	orrs	r2, r1
 80029ae:	2100      	movs	r1, #0
 80029b0:	e7ce      	b.n	8002950 <__aeabi_d2f+0x64>
 80029b2:	4a10      	ldr	r2, [pc, #64]	; (80029f4 <__aeabi_d2f+0x108>)
 80029b4:	0038      	movs	r0, r7
 80029b6:	4694      	mov	ip, r2
 80029b8:	4463      	add	r3, ip
 80029ba:	4098      	lsls	r0, r3
 80029bc:	003a      	movs	r2, r7
 80029be:	1e41      	subs	r1, r0, #1
 80029c0:	4188      	sbcs	r0, r1
 80029c2:	409e      	lsls	r6, r3
 80029c4:	40ea      	lsrs	r2, r5
 80029c6:	4330      	orrs	r0, r6
 80029c8:	4302      	orrs	r2, r0
 80029ca:	2100      	movs	r1, #0
 80029cc:	0753      	lsls	r3, r2, #29
 80029ce:	d1c1      	bne.n	8002954 <__aeabi_d2f+0x68>
 80029d0:	2180      	movs	r1, #128	; 0x80
 80029d2:	0013      	movs	r3, r2
 80029d4:	04c9      	lsls	r1, r1, #19
 80029d6:	2001      	movs	r0, #1
 80029d8:	400b      	ands	r3, r1
 80029da:	420a      	tst	r2, r1
 80029dc:	d1c6      	bne.n	800296c <__aeabi_d2f+0x80>
 80029de:	e7a3      	b.n	8002928 <__aeabi_d2f+0x3c>
 80029e0:	2300      	movs	r3, #0
 80029e2:	e7a0      	b.n	8002926 <__aeabi_d2f+0x3a>
 80029e4:	000b      	movs	r3, r1
 80029e6:	e79f      	b.n	8002928 <__aeabi_d2f+0x3c>
 80029e8:	000007fe 	.word	0x000007fe
 80029ec:	fffffc80 	.word	0xfffffc80
 80029f0:	fffffca2 	.word	0xfffffca2
 80029f4:	fffffc82 	.word	0xfffffc82

080029f8 <__clzsi2>:
 80029f8:	211c      	movs	r1, #28
 80029fa:	2301      	movs	r3, #1
 80029fc:	041b      	lsls	r3, r3, #16
 80029fe:	4298      	cmp	r0, r3
 8002a00:	d301      	bcc.n	8002a06 <__clzsi2+0xe>
 8002a02:	0c00      	lsrs	r0, r0, #16
 8002a04:	3910      	subs	r1, #16
 8002a06:	0a1b      	lsrs	r3, r3, #8
 8002a08:	4298      	cmp	r0, r3
 8002a0a:	d301      	bcc.n	8002a10 <__clzsi2+0x18>
 8002a0c:	0a00      	lsrs	r0, r0, #8
 8002a0e:	3908      	subs	r1, #8
 8002a10:	091b      	lsrs	r3, r3, #4
 8002a12:	4298      	cmp	r0, r3
 8002a14:	d301      	bcc.n	8002a1a <__clzsi2+0x22>
 8002a16:	0900      	lsrs	r0, r0, #4
 8002a18:	3904      	subs	r1, #4
 8002a1a:	a202      	add	r2, pc, #8	; (adr r2, 8002a24 <__clzsi2+0x2c>)
 8002a1c:	5c10      	ldrb	r0, [r2, r0]
 8002a1e:	1840      	adds	r0, r0, r1
 8002a20:	4770      	bx	lr
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	02020304 	.word	0x02020304
 8002a28:	01010101 	.word	0x01010101
	...

08002a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a36:	46c6      	mov	lr, r8
 8002a38:	b500      	push	{lr}
 8002a3a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3c:	2214      	movs	r2, #20
 8002a3e:	2100      	movs	r1, #0
 8002a40:	a803      	add	r0, sp, #12
 8002a42:	f001 fff1 	bl	8004a28 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a46:	4b28      	ldr	r3, [pc, #160]	; (8002ae8 <MX_GPIO_Init+0xb4>)
 8002a48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a4a:	2204      	movs	r2, #4
 8002a4c:	4311      	orrs	r1, r2
 8002a4e:	6359      	str	r1, [r3, #52]	; 0x34
 8002a50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a52:	400a      	ands	r2, r1
 8002a54:	9200      	str	r2, [sp, #0]
 8002a56:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a5a:	2401      	movs	r4, #1
 8002a5c:	4322      	orrs	r2, r4
 8002a5e:	635a      	str	r2, [r3, #52]	; 0x34
 8002a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a62:	4022      	ands	r2, r4
 8002a64:	9201      	str	r2, [sp, #4]
 8002a66:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	4311      	orrs	r1, r2
 8002a6e:	6359      	str	r1, [r3, #52]	; 0x34
 8002a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a72:	401a      	ands	r2, r3
 8002a74:	9202      	str	r2, [sp, #8]
 8002a76:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_MAX7219_Pin|DB_OUT_Pin, GPIO_PIN_RESET);
 8002a78:	4b1c      	ldr	r3, [pc, #112]	; (8002aec <MX_GPIO_Init+0xb8>)
 8002a7a:	4698      	mov	r8, r3
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2141      	movs	r1, #65	; 0x41
 8002a80:	0018      	movs	r0, r3
 8002a82:	f000 fb73 	bl	800316c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VCC_OUT_GPIO_Port, VCC_OUT_Pin, GPIO_PIN_SET);
 8002a86:	2780      	movs	r7, #128	; 0x80
 8002a88:	00ff      	lsls	r7, r7, #3
 8002a8a:	4e19      	ldr	r6, [pc, #100]	; (8002af0 <MX_GPIO_Init+0xbc>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	0039      	movs	r1, r7
 8002a90:	0030      	movs	r0, r6
 8002a92:	f000 fb6b 	bl	800316c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a96:	2308      	movs	r3, #8
 8002a98:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a9a:	2384      	movs	r3, #132	; 0x84
 8002a9c:	039b      	lsls	r3, r3, #14
 8002a9e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aa0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa2:	a903      	add	r1, sp, #12
 8002aa4:	0030      	movs	r0, r6
 8002aa6:	f000 faa1 	bl	8002fec <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_MAX7219_Pin DB_OUT_Pin */
  GPIO_InitStruct.Pin = CS_MAX7219_Pin|DB_OUT_Pin;
 8002aaa:	2341      	movs	r3, #65	; 0x41
 8002aac:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aae:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	2500      	movs	r5, #0
 8002ab2:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab4:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab6:	a903      	add	r1, sp, #12
 8002ab8:	4640      	mov	r0, r8
 8002aba:	f000 fa97 	bl	8002fec <HAL_GPIO_Init>

  /*Configure GPIO pin : VCC_OUT_Pin */
  GPIO_InitStruct.Pin = VCC_OUT_Pin;
 8002abe:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac0:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac4:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(VCC_OUT_GPIO_Port, &GPIO_InitStruct);
 8002ac6:	a903      	add	r1, sp, #12
 8002ac8:	0030      	movs	r0, r6
 8002aca:	f000 fa8f 	bl	8002fec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	2006      	movs	r0, #6
 8002ad4:	f000 fa4e 	bl	8002f74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002ad8:	2006      	movs	r0, #6
 8002ada:	f000 fa7b 	bl	8002fd4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ade:	b008      	add	sp, #32
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	46b8      	mov	r8, r7
 8002ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	50000400 	.word	0x50000400
 8002af0:	50000800 	.word	0x50000800

08002af4 <MX_TIM7_Init>:
{
 8002af4:	b530      	push	{r4, r5, lr}
 8002af6:	b087      	sub	sp, #28
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002af8:	ad01      	add	r5, sp, #4
 8002afa:	2214      	movs	r2, #20
 8002afc:	2100      	movs	r1, #0
 8002afe:	0028      	movs	r0, r5
 8002b00:	f001 ff92 	bl	8004a28 <memset>
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8002b04:	4a15      	ldr	r2, [pc, #84]	; (8002b5c <MX_TIM7_Init+0x68>)
 8002b06:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002b08:	2320      	movs	r3, #32
 8002b0a:	4319      	orrs	r1, r3
 8002b0c:	63d1      	str	r1, [r2, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8002b0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b10:	4013      	ands	r3, r2
 8002b12:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002b14:	9b00      	ldr	r3, [sp, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b16:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <MX_TIM7_Init+0x6c>)
 8002b18:	21c4      	movs	r1, #196	; 0xc4
 8002b1a:	0089      	lsls	r1, r1, #2
 8002b1c:	585a      	ldr	r2, [r3, r1]
 8002b1e:	4811      	ldr	r0, [pc, #68]	; (8002b64 <MX_TIM7_Init+0x70>)
 8002b20:	4002      	ands	r2, r0
 8002b22:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b24:	2280      	movs	r2, #128	; 0x80
 8002b26:	02d2      	lsls	r2, r2, #11
 8002b28:	601a      	str	r2, [r3, #0]
  TIM_InitStruct.Prescaler = 63999;
 8002b2a:	4b0f      	ldr	r3, [pc, #60]	; (8002b68 <MX_TIM7_Init+0x74>)
 8002b2c:	802b      	strh	r3, [r5, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	606b      	str	r3, [r5, #4]
  TIM_InitStruct.Autoreload = 150;
 8002b32:	3396      	adds	r3, #150	; 0x96
 8002b34:	60ab      	str	r3, [r5, #8]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 8002b36:	4c0d      	ldr	r4, [pc, #52]	; (8002b6c <MX_TIM7_Init+0x78>)
 8002b38:	0029      	movs	r1, r5
 8002b3a:	0020      	movs	r0, r4
 8002b3c:	f001 fc72 	bl	8004424 <LL_TIM_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002b40:	6823      	ldr	r3, [r4, #0]
 8002b42:	2280      	movs	r2, #128	; 0x80
 8002b44:	4313      	orrs	r3, r2
 8002b46:	6023      	str	r3, [r4, #0]
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002b48:	6863      	ldr	r3, [r4, #4]
 8002b4a:	2170      	movs	r1, #112	; 0x70
 8002b4c:	438b      	bics	r3, r1
 8002b4e:	6063      	str	r3, [r4, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002b50:	68a3      	ldr	r3, [r4, #8]
 8002b52:	4393      	bics	r3, r2
 8002b54:	60a3      	str	r3, [r4, #8]
}
 8002b56:	b007      	add	sp, #28
 8002b58:	bd30      	pop	{r4, r5, pc}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	e000e100 	.word	0xe000e100
 8002b64:	ff00ffff 	.word	0xff00ffff
 8002b68:	fffff9ff 	.word	0xfffff9ff
 8002b6c:	40001400 	.word	0x40001400

08002b70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b70:	b510      	push	{r4, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002b72:	6802      	ldr	r2, [r0, #0]
 8002b74:	4b03      	ldr	r3, [pc, #12]	; (8002b84 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d000      	beq.n	8002b7c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b7a:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8002b7c:	f000 f9dc 	bl	8002f38 <HAL_IncTick>
}
 8002b80:	e7fb      	b.n	8002b7a <HAL_TIM_PeriodElapsedCallback+0xa>
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	40001000 	.word	0x40001000

08002b88 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b88:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b8a:	e7fe      	b.n	8002b8a <Error_Handler+0x2>

08002b8c <MX_TIM2_Init>:
{
 8002b8c:	b500      	push	{lr}
 8002b8e:	b08d      	sub	sp, #52	; 0x34
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b90:	2224      	movs	r2, #36	; 0x24
 8002b92:	2100      	movs	r1, #0
 8002b94:	a803      	add	r0, sp, #12
 8002b96:	f001 ff47 	bl	8004a28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b9a:	220c      	movs	r2, #12
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	4668      	mov	r0, sp
 8002ba0:	f001 ff42 	bl	8004a28 <memset>
  htim2.Instance = TIM2;
 8002ba4:	4813      	ldr	r0, [pc, #76]	; (8002bf4 <MX_TIM2_Init+0x68>)
 8002ba6:	2380      	movs	r3, #128	; 0x80
 8002ba8:	05db      	lsls	r3, r3, #23
 8002baa:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 0;
 8002bac:	2300      	movs	r3, #0
 8002bae:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb0:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 8002bb2:	4a11      	ldr	r2, [pc, #68]	; (8002bf8 <MX_TIM2_Init+0x6c>)
 8002bb4:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bb6:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bb8:	3380      	adds	r3, #128	; 0x80
 8002bba:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002bbc:	3b7d      	subs	r3, #125	; 0x7d
 8002bbe:	9303      	str	r3, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	9205      	str	r2, [sp, #20]
  sConfig.IC1Filter = 10;
 8002bc4:	3307      	adds	r3, #7
 8002bc6:	9307      	str	r3, [sp, #28]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002bc8:	9209      	str	r2, [sp, #36]	; 0x24
  sConfig.IC2Filter = 10;
 8002bca:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002bcc:	a903      	add	r1, sp, #12
 8002bce:	f001 fb0f 	bl	80041f0 <HAL_TIM_Encoder_Init>
 8002bd2:	2800      	cmp	r0, #0
 8002bd4:	d10a      	bne.n	8002bec <MX_TIM2_Init+0x60>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bda:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bdc:	4805      	ldr	r0, [pc, #20]	; (8002bf4 <MX_TIM2_Init+0x68>)
 8002bde:	4669      	mov	r1, sp
 8002be0:	f001 fbd6 	bl	8004390 <HAL_TIMEx_MasterConfigSynchronization>
 8002be4:	2800      	cmp	r0, #0
 8002be6:	d103      	bne.n	8002bf0 <MX_TIM2_Init+0x64>
}
 8002be8:	b00d      	add	sp, #52	; 0x34
 8002bea:	bd00      	pop	{pc}
    Error_Handler();
 8002bec:	f7ff ffcc 	bl	8002b88 <Error_Handler>
    Error_Handler();
 8002bf0:	f7ff ffca 	bl	8002b88 <Error_Handler>
 8002bf4:	20000098 	.word	0x20000098
 8002bf8:	0000ffff 	.word	0x0000ffff

08002bfc <MX_SPI1_Init>:
{
 8002bfc:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 8002bfe:	4811      	ldr	r0, [pc, #68]	; (8002c44 <MX_SPI1_Init+0x48>)
 8002c00:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <MX_SPI1_Init+0x4c>)
 8002c02:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c04:	2382      	movs	r3, #130	; 0x82
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c0e:	22e0      	movs	r2, #224	; 0xe0
 8002c10:	00d2      	lsls	r2, r2, #3
 8002c12:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c14:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c16:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c18:	2280      	movs	r2, #128	; 0x80
 8002c1a:	0092      	lsls	r2, r2, #2
 8002c1c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002c1e:	3af1      	subs	r2, #241	; 0xf1
 8002c20:	3aff      	subs	r2, #255	; 0xff
 8002c22:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c24:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c26:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c28:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002c2a:	3a09      	subs	r2, #9
 8002c2c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c2e:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c30:	3308      	adds	r3, #8
 8002c32:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c34:	f000 fff8 	bl	8003c28 <HAL_SPI_Init>
 8002c38:	2800      	cmp	r0, #0
 8002c3a:	d100      	bne.n	8002c3e <MX_SPI1_Init+0x42>
}
 8002c3c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002c3e:	f7ff ffa3 	bl	8002b88 <Error_Handler>
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	20000034 	.word	0x20000034
 8002c48:	40013000 	.word	0x40013000

08002c4c <SystemClock_Config>:
{
 8002c4c:	b500      	push	{lr}
 8002c4e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c50:	223c      	movs	r2, #60	; 0x3c
 8002c52:	2100      	movs	r1, #0
 8002c54:	a805      	add	r0, sp, #20
 8002c56:	f001 fee7 	bl	8004a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c5a:	2210      	movs	r2, #16
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	a801      	add	r0, sp, #4
 8002c60:	f001 fee2 	bl	8004a28 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c64:	2080      	movs	r0, #128	; 0x80
 8002c66:	0080      	lsls	r0, r0, #2
 8002c68:	f000 faa0 	bl	80031ac <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c70:	2280      	movs	r2, #128	; 0x80
 8002c72:	0052      	lsls	r2, r2, #1
 8002c74:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002c76:	2200      	movs	r2, #0
 8002c78:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c7a:	2140      	movs	r1, #64	; 0x40
 8002c7c:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c7e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c80:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002c82:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002c84:	3306      	adds	r3, #6
 8002c86:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	029b      	lsls	r3, r3, #10
 8002c8c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002c8e:	2380      	movs	r3, #128	; 0x80
 8002c90:	049b      	lsls	r3, r3, #18
 8002c92:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002c94:	2380      	movs	r3, #128	; 0x80
 8002c96:	059b      	lsls	r3, r3, #22
 8002c98:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c9a:	a805      	add	r0, sp, #20
 8002c9c:	f000 fab0 	bl	8003200 <HAL_RCC_OscConfig>
 8002ca0:	2800      	cmp	r0, #0
 8002ca2:	d10e      	bne.n	8002cc2 <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ca4:	2307      	movs	r3, #7
 8002ca6:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ca8:	3b05      	subs	r3, #5
 8002caa:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cac:	2300      	movs	r3, #0
 8002cae:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cb0:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002cb2:	2102      	movs	r1, #2
 8002cb4:	a801      	add	r0, sp, #4
 8002cb6:	f000 fd8b 	bl	80037d0 <HAL_RCC_ClockConfig>
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	d103      	bne.n	8002cc6 <SystemClock_Config+0x7a>
}
 8002cbe:	b015      	add	sp, #84	; 0x54
 8002cc0:	bd00      	pop	{pc}
    Error_Handler();
 8002cc2:	f7ff ff61 	bl	8002b88 <Error_Handler>
    Error_Handler();
 8002cc6:	f7ff ff5f 	bl	8002b88 <Error_Handler>
	...

08002ccc <main>:
{
 8002ccc:	b510      	push	{r4, lr}
  HAL_Init();
 8002cce:	f000 f91f 	bl	8002f10 <HAL_Init>
  SystemClock_Config();
 8002cd2:	f7ff ffbb 	bl	8002c4c <SystemClock_Config>
  MX_GPIO_Init();
 8002cd6:	f7ff fead 	bl	8002a34 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002cda:	f7ff ff57 	bl	8002b8c <MX_TIM2_Init>
  MX_TIM7_Init();
 8002cde:	f7ff ff09 	bl	8002af4 <MX_TIM7_Init>
  MX_SPI1_Init();
 8002ce2:	f7ff ff8b 	bl	8002bfc <MX_SPI1_Init>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002ce6:	4804      	ldr	r0, [pc, #16]	; (8002cf8 <main+0x2c>)
 8002ce8:	213c      	movs	r1, #60	; 0x3c
 8002cea:	f001 faec 	bl	80042c6 <HAL_TIM_Encoder_Start>
  app_encoder_init();
 8002cee:	f001 fbf1 	bl	80044d4 <app_encoder_init>
	  app_encoder_loop();
 8002cf2:	f001 fc01 	bl	80044f8 <app_encoder_loop>
  while (1)
 8002cf6:	e7fc      	b.n	8002cf2 <main+0x26>
 8002cf8:	20000098 	.word	0x20000098

08002cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cfc:	b500      	push	{lr}
 8002cfe:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_MspInit+0x34>)
 8002d02:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d04:	2201      	movs	r2, #1
 8002d06:	4311      	orrs	r1, r2
 8002d08:	6419      	str	r1, [r3, #64]	; 0x40
 8002d0a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d0c:	400a      	ands	r2, r1
 8002d0e:	9200      	str	r2, [sp, #0]
 8002d10:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d14:	2180      	movs	r1, #128	; 0x80
 8002d16:	0549      	lsls	r1, r1, #21
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1e:	400b      	ands	r3, r1
 8002d20:	9301      	str	r3, [sp, #4]
 8002d22:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8002d24:	20c0      	movs	r0, #192	; 0xc0
 8002d26:	00c0      	lsls	r0, r0, #3
 8002d28:	f000 f918 	bl	8002f5c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d2c:	b003      	add	sp, #12
 8002d2e:	bd00      	pop	{pc}
 8002d30:	40021000 	.word	0x40021000

08002d34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d34:	b510      	push	{r4, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3a:	2214      	movs	r2, #20
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	a803      	add	r0, sp, #12
 8002d40:	f001 fe72 	bl	8004a28 <memset>
  if(hspi->Instance==SPI1)
 8002d44:	6822      	ldr	r2, [r4, #0]
 8002d46:	4b10      	ldr	r3, [pc, #64]	; (8002d88 <HAL_SPI_MspInit+0x54>)
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d001      	beq.n	8002d50 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d4c:	b008      	add	sp, #32
 8002d4e:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d50:	4b0e      	ldr	r3, [pc, #56]	; (8002d8c <HAL_SPI_MspInit+0x58>)
 8002d52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d54:	2180      	movs	r1, #128	; 0x80
 8002d56:	0149      	lsls	r1, r1, #5
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	641a      	str	r2, [r3, #64]	; 0x40
 8002d5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d5e:	400a      	ands	r2, r1
 8002d60:	9201      	str	r2, [sp, #4]
 8002d62:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d64:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d66:	2201      	movs	r2, #1
 8002d68:	4311      	orrs	r1, r2
 8002d6a:	6359      	str	r1, [r3, #52]	; 0x34
 8002d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d6e:	401a      	ands	r2, r3
 8002d70:	9202      	str	r2, [sp, #8]
 8002d72:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002d74:	23a0      	movs	r3, #160	; 0xa0
 8002d76:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d78:	3b9e      	subs	r3, #158	; 0x9e
 8002d7a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7c:	20a0      	movs	r0, #160	; 0xa0
 8002d7e:	a903      	add	r1, sp, #12
 8002d80:	05c0      	lsls	r0, r0, #23
 8002d82:	f000 f933 	bl	8002fec <HAL_GPIO_Init>
}
 8002d86:	e7e1      	b.n	8002d4c <HAL_SPI_MspInit+0x18>
 8002d88:	40013000 	.word	0x40013000
 8002d8c:	40021000 	.word	0x40021000

08002d90 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002d90:	b510      	push	{r4, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d96:	2214      	movs	r2, #20
 8002d98:	2100      	movs	r1, #0
 8002d9a:	a803      	add	r0, sp, #12
 8002d9c:	f001 fe44 	bl	8004a28 <memset>
  if(htim_encoder->Instance==TIM2)
 8002da0:	6822      	ldr	r2, [r4, #0]
 8002da2:	2380      	movs	r3, #128	; 0x80
 8002da4:	05db      	lsls	r3, r3, #23
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d001      	beq.n	8002dae <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002daa:	b008      	add	sp, #32
 8002dac:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dae:	4a0d      	ldr	r2, [pc, #52]	; (8002de4 <HAL_TIM_Encoder_MspInit+0x54>)
 8002db0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002db2:	2301      	movs	r3, #1
 8002db4:	4319      	orrs	r1, r3
 8002db6:	63d1      	str	r1, [r2, #60]	; 0x3c
 8002db8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002dba:	4019      	ands	r1, r3
 8002dbc:	9101      	str	r1, [sp, #4]
 8002dbe:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002dc2:	4319      	orrs	r1, r3
 8002dc4:	6351      	str	r1, [r2, #52]	; 0x34
 8002dc6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002dc8:	4013      	ands	r3, r2
 8002dca:	9302      	str	r3, [sp, #8]
 8002dcc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002dd6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd8:	20a0      	movs	r0, #160	; 0xa0
 8002dda:	a903      	add	r1, sp, #12
 8002ddc:	05c0      	lsls	r0, r0, #23
 8002dde:	f000 f905 	bl	8002fec <HAL_GPIO_Init>
}
 8002de2:	e7e2      	b.n	8002daa <HAL_TIM_Encoder_MspInit+0x1a>
 8002de4:	40021000 	.word	0x40021000

08002de8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002de8:	b530      	push	{r4, r5, lr}
 8002dea:	b087      	sub	sp, #28
 8002dec:	0005      	movs	r5, r0
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002dee:	4a20      	ldr	r2, [pc, #128]	; (8002e70 <HAL_InitTick+0x88>)
 8002df0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002df2:	2310      	movs	r3, #16
 8002df4:	4319      	orrs	r1, r3
 8002df6:	63d1      	str	r1, [r2, #60]	; 0x3c
 8002df8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	9b00      	ldr	r3, [sp, #0]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e00:	a901      	add	r1, sp, #4
 8002e02:	a802      	add	r0, sp, #8
 8002e04:	f000 fdc4 	bl	8003990 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002e08:	9b05      	ldr	r3, [sp, #20]
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d117      	bne.n	8002e3e <HAL_InitTick+0x56>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e0e:	f000 fdab 	bl	8003968 <HAL_RCC_GetPCLK1Freq>
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e12:	4918      	ldr	r1, [pc, #96]	; (8002e74 <HAL_InitTick+0x8c>)
 8002e14:	f7fd f976 	bl	8000104 <__udivsi3>
 8002e18:	1e42      	subs	r2, r0, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002e1a:	4b17      	ldr	r3, [pc, #92]	; (8002e78 <HAL_InitTick+0x90>)
 8002e1c:	4917      	ldr	r1, [pc, #92]	; (8002e7c <HAL_InitTick+0x94>)
 8002e1e:	0018      	movs	r0, r3
 8002e20:	6019      	str	r1, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002e22:	4b17      	ldr	r3, [pc, #92]	; (8002e80 <HAL_InitTick+0x98>)
 8002e24:	60c3      	str	r3, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002e26:	6042      	str	r2, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e2c:	6083      	str	r3, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e2e:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002e30:	f001 f9ae 	bl	8004190 <HAL_TIM_Base_Init>
 8002e34:	1e04      	subs	r4, r0, #0
  if (status == HAL_OK)
 8002e36:	d006      	beq.n	8002e46 <HAL_InitTick+0x5e>
    }
  }

 /* Return function status */
  return status;
}
 8002e38:	0020      	movs	r0, r4
 8002e3a:	b007      	add	sp, #28
 8002e3c:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002e3e:	f000 fd93 	bl	8003968 <HAL_RCC_GetPCLK1Freq>
 8002e42:	0040      	lsls	r0, r0, #1
 8002e44:	e7e5      	b.n	8002e12 <HAL_InitTick+0x2a>
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002e46:	480c      	ldr	r0, [pc, #48]	; (8002e78 <HAL_InitTick+0x90>)
 8002e48:	f001 f84c 	bl	8003ee4 <HAL_TIM_Base_Start_IT>
 8002e4c:	1e04      	subs	r4, r0, #0
    if (status == HAL_OK)
 8002e4e:	d1f3      	bne.n	8002e38 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8002e50:	2011      	movs	r0, #17
 8002e52:	f000 f8bf 	bl	8002fd4 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e56:	2d03      	cmp	r5, #3
 8002e58:	d901      	bls.n	8002e5e <HAL_InitTick+0x76>
        status = HAL_ERROR;
 8002e5a:	2401      	movs	r4, #1
 8002e5c:	e7ec      	b.n	8002e38 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, TickPriority, 0U);
 8002e5e:	2200      	movs	r2, #0
 8002e60:	0029      	movs	r1, r5
 8002e62:	2011      	movs	r0, #17
 8002e64:	f000 f886 	bl	8002f74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e68:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <HAL_InitTick+0x9c>)
 8002e6a:	601d      	str	r5, [r3, #0]
 8002e6c:	e7e4      	b.n	8002e38 <HAL_InitTick+0x50>
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	40021000 	.word	0x40021000
 8002e74:	000f4240 	.word	0x000f4240
 8002e78:	200000e4 	.word	0x200000e4
 8002e7c:	40001000 	.word	0x40001000
 8002e80:	000003e7 	.word	0x000003e7
 8002e84:	20000008 	.word	0x20000008

08002e88 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e88:	e7fe      	b.n	8002e88 <NMI_Handler>

08002e8a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e8a:	e7fe      	b.n	8002e8a <HardFault_Handler>

08002e8c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002e8c:	4770      	bx	lr

08002e8e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e8e:	4770      	bx	lr

08002e90 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e90:	4770      	bx	lr

08002e92 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002e92:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */
  button_isr(); //button (press) interrupt routine
 8002e94:	f001 fc0c 	bl	80046b0 <button_isr>
  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002e98:	2008      	movs	r0, #8
 8002e9a:	f000 f96f 	bl	800317c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002e9e:	bd10      	pop	{r4, pc}

08002ea0 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8002ea0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ea2:	4802      	ldr	r0, [pc, #8]	; (8002eac <TIM6_DAC_LPTIM1_IRQHandler+0xc>)
 8002ea4:	f001 f864 	bl	8003f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8002ea8:	bd10      	pop	{r4, pc}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	200000e4 	.word	0x200000e4

08002eb0 <TIM7_LPTIM2_IRQHandler>:

/**
  * @brief This function handles TIM7 and LPTIM2 global Interrupt.
  */
void TIM7_LPTIM2_IRQHandler(void)
{
 8002eb0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 0 */
	button_timer_isr();
 8002eb2:	f001 fc21 	bl	80046f8 <button_timer_isr>
  /* USER CODE END TIM7_LPTIM2_IRQn 0 */

  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 1 */

  /* USER CODE END TIM7_LPTIM2_IRQn 1 */
}
 8002eb6:	bd10      	pop	{r4, pc}

08002eb8 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002eb8:	4770      	bx	lr
	...

08002ebc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ebc:	480d      	ldr	r0, [pc, #52]	; (8002ef4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ebe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ec0:	f7ff fffa 	bl	8002eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ec4:	480c      	ldr	r0, [pc, #48]	; (8002ef8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ec6:	490d      	ldr	r1, [pc, #52]	; (8002efc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ec8:	4a0d      	ldr	r2, [pc, #52]	; (8002f00 <LoopForever+0xe>)
  movs r3, #0
 8002eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ecc:	e002      	b.n	8002ed4 <LoopCopyDataInit>

08002ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ed2:	3304      	adds	r3, #4

08002ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ed8:	d3f9      	bcc.n	8002ece <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eda:	4a0a      	ldr	r2, [pc, #40]	; (8002f04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002edc:	4c0a      	ldr	r4, [pc, #40]	; (8002f08 <LoopForever+0x16>)
  movs r3, #0
 8002ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ee0:	e001      	b.n	8002ee6 <LoopFillZerobss>

08002ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ee4:	3204      	adds	r2, #4

08002ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ee8:	d3fb      	bcc.n	8002ee2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002eea:	f001 fda5 	bl	8004a38 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002eee:	f7ff feed 	bl	8002ccc <main>

08002ef2 <LoopForever>:

LoopForever:
  b LoopForever
 8002ef2:	e7fe      	b.n	8002ef2 <LoopForever>
  ldr   r0, =_estack
 8002ef4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8002ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002efc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002f00:	08004c0c 	.word	0x08004c0c
  ldr r2, =_sbss
 8002f04:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002f08:	2000016c 	.word	0x2000016c

08002f0c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f0c:	e7fe      	b.n	8002f0c <ADC1_COMP_IRQHandler>
	...

08002f10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f10:	b510      	push	{r4, lr}
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f12:	4a08      	ldr	r2, [pc, #32]	; (8002f34 <HAL_Init+0x24>)
 8002f14:	6811      	ldr	r1, [r2, #0]
 8002f16:	2380      	movs	r3, #128	; 0x80
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	430b      	orrs	r3, r1
 8002f1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f1e:	2003      	movs	r0, #3
 8002f20:	f7ff ff62 	bl	8002de8 <HAL_InitTick>
 8002f24:	1e04      	subs	r4, r0, #0
 8002f26:	d002      	beq.n	8002f2e <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002f28:	2401      	movs	r4, #1
  HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8002f2a:	0020      	movs	r0, r4
 8002f2c:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8002f2e:	f7ff fee5 	bl	8002cfc <HAL_MspInit>
 8002f32:	e7fa      	b.n	8002f2a <HAL_Init+0x1a>
 8002f34:	40022000 	.word	0x40022000

08002f38 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002f38:	4b03      	ldr	r3, [pc, #12]	; (8002f48 <HAL_IncTick+0x10>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	4a03      	ldr	r2, [pc, #12]	; (8002f4c <HAL_IncTick+0x14>)
 8002f3e:	6811      	ldr	r1, [r2, #0]
 8002f40:	185b      	adds	r3, r3, r1
 8002f42:	6013      	str	r3, [r2, #0]
}
 8002f44:	4770      	bx	lr
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	20000004 	.word	0x20000004
 8002f4c:	20000130 	.word	0x20000130

08002f50 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002f50:	4b01      	ldr	r3, [pc, #4]	; (8002f58 <HAL_GetTick+0x8>)
 8002f52:	6818      	ldr	r0, [r3, #0]
}
 8002f54:	4770      	bx	lr
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	20000130 	.word	0x20000130

08002f5c <HAL_SYSCFG_StrobeDBattpinsConfig>:
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002f5c:	4a03      	ldr	r2, [pc, #12]	; (8002f6c <HAL_SYSCFG_StrobeDBattpinsConfig+0x10>)
 8002f5e:	6813      	ldr	r3, [r2, #0]
 8002f60:	4903      	ldr	r1, [pc, #12]	; (8002f70 <HAL_SYSCFG_StrobeDBattpinsConfig+0x14>)
 8002f62:	400b      	ands	r3, r1
 8002f64:	4303      	orrs	r3, r0
 8002f66:	6013      	str	r3, [r2, #0]
}
 8002f68:	4770      	bx	lr
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	40010000 	.word	0x40010000
 8002f70:	fffff9ff 	.word	0xfffff9ff

08002f74 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f74:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8002f76:	2800      	cmp	r0, #0
 8002f78:	db11      	blt.n	8002f9e <HAL_NVIC_SetPriority+0x2a>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f7a:	0883      	lsrs	r3, r0, #2
 8002f7c:	4d13      	ldr	r5, [pc, #76]	; (8002fcc <HAL_NVIC_SetPriority+0x58>)
 8002f7e:	33c0      	adds	r3, #192	; 0xc0
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	595c      	ldr	r4, [r3, r5]
 8002f84:	2203      	movs	r2, #3
 8002f86:	4010      	ands	r0, r2
 8002f88:	00c0      	lsls	r0, r0, #3
 8002f8a:	32fc      	adds	r2, #252	; 0xfc
 8002f8c:	0016      	movs	r6, r2
 8002f8e:	4086      	lsls	r6, r0
 8002f90:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f92:	0189      	lsls	r1, r1, #6
 8002f94:	400a      	ands	r2, r1
 8002f96:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f98:	4322      	orrs	r2, r4
 8002f9a:	515a      	str	r2, [r3, r5]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8002f9c:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f9e:	230f      	movs	r3, #15
 8002fa0:	4003      	ands	r3, r0
 8002fa2:	3b08      	subs	r3, #8
 8002fa4:	089b      	lsrs	r3, r3, #2
 8002fa6:	3306      	adds	r3, #6
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4a09      	ldr	r2, [pc, #36]	; (8002fd0 <HAL_NVIC_SetPriority+0x5c>)
 8002fac:	4694      	mov	ip, r2
 8002fae:	4463      	add	r3, ip
 8002fb0:	685c      	ldr	r4, [r3, #4]
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	4010      	ands	r0, r2
 8002fb6:	00c0      	lsls	r0, r0, #3
 8002fb8:	32fc      	adds	r2, #252	; 0xfc
 8002fba:	0015      	movs	r5, r2
 8002fbc:	4085      	lsls	r5, r0
 8002fbe:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fc0:	0189      	lsls	r1, r1, #6
 8002fc2:	400a      	ands	r2, r1
 8002fc4:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fc6:	4322      	orrs	r2, r4
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	e7e7      	b.n	8002f9c <HAL_NVIC_SetPriority+0x28>
 8002fcc:	e000e100 	.word	0xe000e100
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	db05      	blt.n	8002fe4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fd8:	231f      	movs	r3, #31
 8002fda:	4018      	ands	r0, r3
 8002fdc:	3b1e      	subs	r3, #30
 8002fde:	4083      	lsls	r3, r0
 8002fe0:	4a01      	ldr	r2, [pc, #4]	; (8002fe8 <HAL_NVIC_EnableIRQ+0x14>)
 8002fe2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002fe4:	4770      	bx	lr
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	e000e100 	.word	0xe000e100

08002fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fec:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00u;
 8002fee:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ff0:	e059      	b.n	80030a6 <HAL_GPIO_Init+0xba>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ff2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ff4:	005f      	lsls	r7, r3, #1
 8002ff6:	2403      	movs	r4, #3
 8002ff8:	40bc      	lsls	r4, r7
 8002ffa:	43a6      	bics	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ffc:	68cc      	ldr	r4, [r1, #12]
 8002ffe:	40bc      	lsls	r4, r7
 8003000:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8003002:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003004:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003006:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003008:	684e      	ldr	r6, [r1, #4]
 800300a:	0936      	lsrs	r6, r6, #4
 800300c:	2201      	movs	r2, #1
 800300e:	4032      	ands	r2, r6
 8003010:	409a      	lsls	r2, r3
 8003012:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8003014:	6042      	str	r2, [r0, #4]
 8003016:	e056      	b.n	80030c6 <HAL_GPIO_Init+0xda>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003018:	08de      	lsrs	r6, r3, #3
 800301a:	3608      	adds	r6, #8
 800301c:	00b6      	lsls	r6, r6, #2
 800301e:	5837      	ldr	r7, [r6, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003020:	3205      	adds	r2, #5
 8003022:	401a      	ands	r2, r3
 8003024:	0092      	lsls	r2, r2, #2
 8003026:	240f      	movs	r4, #15
 8003028:	4094      	lsls	r4, r2
 800302a:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800302c:	690c      	ldr	r4, [r1, #16]
 800302e:	4094      	lsls	r4, r2
 8003030:	0022      	movs	r2, r4
 8003032:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3u] = temp;
 8003034:	5032      	str	r2, [r6, r0]
 8003036:	e059      	b.n	80030ec <HAL_GPIO_Init+0x100>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003038:	2604      	movs	r6, #4
 800303a:	e000      	b.n	800303e <HAL_GPIO_Init+0x52>
 800303c:	2600      	movs	r6, #0
 800303e:	40a6      	lsls	r6, r4
 8003040:	0034      	movs	r4, r6
 8003042:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2u] = temp;
 8003044:	4e44      	ldr	r6, [pc, #272]	; (8003158 <HAL_GPIO_Init+0x16c>)
 8003046:	3218      	adds	r2, #24
 8003048:	0092      	lsls	r2, r2, #2
 800304a:	5194      	str	r4, [r2, r6]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800304c:	6837      	ldr	r7, [r6, #0]
        temp &= ~(iocurrent);
 800304e:	43ea      	mvns	r2, r5
 8003050:	003e      	movs	r6, r7
 8003052:	43ae      	bics	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003054:	684c      	ldr	r4, [r1, #4]
 8003056:	02e4      	lsls	r4, r4, #11
 8003058:	d501      	bpl.n	800305e <HAL_GPIO_Init+0x72>
        {
          temp |= iocurrent;
 800305a:	003e      	movs	r6, r7
 800305c:	432e      	orrs	r6, r5
        }
        EXTI->RTSR1 = temp;
 800305e:	4c3e      	ldr	r4, [pc, #248]	; (8003158 <HAL_GPIO_Init+0x16c>)
 8003060:	6026      	str	r6, [r4, #0]

        temp = EXTI->FTSR1;
 8003062:	6867      	ldr	r7, [r4, #4]
        temp &= ~(iocurrent);
 8003064:	003e      	movs	r6, r7
 8003066:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003068:	684c      	ldr	r4, [r1, #4]
 800306a:	02a4      	lsls	r4, r4, #10
 800306c:	d501      	bpl.n	8003072 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 800306e:	003e      	movs	r6, r7
 8003070:	432e      	orrs	r6, r5
        }
        EXTI->FTSR1 = temp;
 8003072:	4c39      	ldr	r4, [pc, #228]	; (8003158 <HAL_GPIO_Init+0x16c>)
 8003074:	6066      	str	r6, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003076:	2684      	movs	r6, #132	; 0x84
 8003078:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(iocurrent);
 800307a:	003e      	movs	r6, r7
 800307c:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800307e:	684c      	ldr	r4, [r1, #4]
 8003080:	03a4      	lsls	r4, r4, #14
 8003082:	d501      	bpl.n	8003088 <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 8003084:	003e      	movs	r6, r7
 8003086:	432e      	orrs	r6, r5
        }
        EXTI->EMR1 = temp;
 8003088:	4c33      	ldr	r4, [pc, #204]	; (8003158 <HAL_GPIO_Init+0x16c>)
 800308a:	2784      	movs	r7, #132	; 0x84
 800308c:	51e6      	str	r6, [r4, r7]

        temp = EXTI->IMR1;
 800308e:	2680      	movs	r6, #128	; 0x80
 8003090:	59a6      	ldr	r6, [r4, r6]
        temp &= ~(iocurrent);
 8003092:	4032      	ands	r2, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003094:	684c      	ldr	r4, [r1, #4]
 8003096:	03e4      	lsls	r4, r4, #15
 8003098:	d501      	bpl.n	800309e <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 800309a:	002a      	movs	r2, r5
 800309c:	4332      	orrs	r2, r6
        }
        EXTI->IMR1 = temp;
 800309e:	4d2e      	ldr	r5, [pc, #184]	; (8003158 <HAL_GPIO_Init+0x16c>)
 80030a0:	2480      	movs	r4, #128	; 0x80
 80030a2:	512a      	str	r2, [r5, r4]
      }
    }

    position++;
 80030a4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030a6:	680c      	ldr	r4, [r1, #0]
 80030a8:	0022      	movs	r2, r4
 80030aa:	40da      	lsrs	r2, r3
 80030ac:	d053      	beq.n	8003156 <HAL_GPIO_Init+0x16a>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030ae:	2201      	movs	r2, #1
 80030b0:	409a      	lsls	r2, r3
 80030b2:	0025      	movs	r5, r4
 80030b4:	4015      	ands	r5, r2
    if (iocurrent != 0x00u)
 80030b6:	4214      	tst	r4, r2
 80030b8:	d0f4      	beq.n	80030a4 <HAL_GPIO_Init+0xb8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030ba:	684e      	ldr	r6, [r1, #4]
 80030bc:	2403      	movs	r4, #3
 80030be:	4034      	ands	r4, r6
 80030c0:	3c01      	subs	r4, #1
 80030c2:	2c01      	cmp	r4, #1
 80030c4:	d995      	bls.n	8002ff2 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030c6:	684c      	ldr	r4, [r1, #4]
 80030c8:	2203      	movs	r2, #3
 80030ca:	4022      	ands	r2, r4
 80030cc:	2a03      	cmp	r2, #3
 80030ce:	d008      	beq.n	80030e2 <HAL_GPIO_Init+0xf6>
        temp = GPIOx->PUPDR;
 80030d0:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80030d2:	005e      	lsls	r6, r3, #1
 80030d4:	2203      	movs	r2, #3
 80030d6:	40b2      	lsls	r2, r6
 80030d8:	4394      	bics	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80030da:	688a      	ldr	r2, [r1, #8]
 80030dc:	40b2      	lsls	r2, r6
 80030de:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80030e0:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030e2:	684c      	ldr	r4, [r1, #4]
 80030e4:	2203      	movs	r2, #3
 80030e6:	4022      	ands	r2, r4
 80030e8:	2a02      	cmp	r2, #2
 80030ea:	d095      	beq.n	8003018 <HAL_GPIO_Init+0x2c>
      temp = GPIOx->MODER;
 80030ec:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030ee:	005e      	lsls	r6, r3, #1
 80030f0:	2203      	movs	r2, #3
 80030f2:	0017      	movs	r7, r2
 80030f4:	40b7      	lsls	r7, r6
 80030f6:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030f8:	684f      	ldr	r7, [r1, #4]
 80030fa:	403a      	ands	r2, r7
 80030fc:	40b2      	lsls	r2, r6
 80030fe:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8003100:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003102:	684c      	ldr	r4, [r1, #4]
 8003104:	22c0      	movs	r2, #192	; 0xc0
 8003106:	0292      	lsls	r2, r2, #10
 8003108:	4214      	tst	r4, r2
 800310a:	d0cb      	beq.n	80030a4 <HAL_GPIO_Init+0xb8>
        temp = EXTI->EXTICR[position >> 2u];
 800310c:	089a      	lsrs	r2, r3, #2
 800310e:	0014      	movs	r4, r2
 8003110:	3418      	adds	r4, #24
 8003112:	00a4      	lsls	r4, r4, #2
 8003114:	4e10      	ldr	r6, [pc, #64]	; (8003158 <HAL_GPIO_Init+0x16c>)
 8003116:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003118:	2403      	movs	r4, #3
 800311a:	401c      	ands	r4, r3
 800311c:	00e4      	lsls	r4, r4, #3
 800311e:	260f      	movs	r6, #15
 8003120:	40a6      	lsls	r6, r4
 8003122:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003124:	26a0      	movs	r6, #160	; 0xa0
 8003126:	05f6      	lsls	r6, r6, #23
 8003128:	42b0      	cmp	r0, r6
 800312a:	d087      	beq.n	800303c <HAL_GPIO_Init+0x50>
 800312c:	4e0b      	ldr	r6, [pc, #44]	; (800315c <HAL_GPIO_Init+0x170>)
 800312e:	42b0      	cmp	r0, r6
 8003130:	d00b      	beq.n	800314a <HAL_GPIO_Init+0x15e>
 8003132:	4e0b      	ldr	r6, [pc, #44]	; (8003160 <HAL_GPIO_Init+0x174>)
 8003134:	42b0      	cmp	r0, r6
 8003136:	d00a      	beq.n	800314e <HAL_GPIO_Init+0x162>
 8003138:	4e0a      	ldr	r6, [pc, #40]	; (8003164 <HAL_GPIO_Init+0x178>)
 800313a:	42b0      	cmp	r0, r6
 800313c:	d009      	beq.n	8003152 <HAL_GPIO_Init+0x166>
 800313e:	4e0a      	ldr	r6, [pc, #40]	; (8003168 <HAL_GPIO_Init+0x17c>)
 8003140:	42b0      	cmp	r0, r6
 8003142:	d100      	bne.n	8003146 <HAL_GPIO_Init+0x15a>
 8003144:	e778      	b.n	8003038 <HAL_GPIO_Init+0x4c>
 8003146:	2605      	movs	r6, #5
 8003148:	e779      	b.n	800303e <HAL_GPIO_Init+0x52>
 800314a:	2601      	movs	r6, #1
 800314c:	e777      	b.n	800303e <HAL_GPIO_Init+0x52>
 800314e:	2602      	movs	r6, #2
 8003150:	e775      	b.n	800303e <HAL_GPIO_Init+0x52>
 8003152:	2603      	movs	r6, #3
 8003154:	e773      	b.n	800303e <HAL_GPIO_Init+0x52>
  }
}
 8003156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003158:	40021800 	.word	0x40021800
 800315c:	50000400 	.word	0x50000400
 8003160:	50000800 	.word	0x50000800
 8003164:	50000c00 	.word	0x50000c00
 8003168:	50001000 	.word	0x50001000

0800316c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800316c:	2a00      	cmp	r2, #0
 800316e:	d001      	beq.n	8003174 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003170:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003172:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003174:	6281      	str	r1, [r0, #40]	; 0x28
}
 8003176:	e7fc      	b.n	8003172 <HAL_GPIO_WritePin+0x6>

08003178 <HAL_GPIO_EXTI_Rising_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8003178:	4770      	bx	lr

0800317a <HAL_GPIO_EXTI_Falling_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800317a:	4770      	bx	lr

0800317c <HAL_GPIO_EXTI_IRQHandler>:
{
 800317c:	b510      	push	{r4, lr}
 800317e:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003180:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	4218      	tst	r0, r3
 8003186:	d104      	bne.n	8003192 <HAL_GPIO_EXTI_IRQHandler+0x16>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003188:	4b07      	ldr	r3, [pc, #28]	; (80031a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	4223      	tst	r3, r4
 800318e:	d105      	bne.n	800319c <HAL_GPIO_EXTI_IRQHandler+0x20>
}
 8003190:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003192:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003194:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003196:	f7ff ffef 	bl	8003178 <HAL_GPIO_EXTI_Rising_Callback>
 800319a:	e7f5      	b.n	8003188 <HAL_GPIO_EXTI_IRQHandler+0xc>
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800319c:	4b02      	ldr	r3, [pc, #8]	; (80031a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800319e:	611c      	str	r4, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80031a0:	0020      	movs	r0, r4
 80031a2:	f7ff ffea 	bl	800317a <HAL_GPIO_EXTI_Falling_Callback>
}
 80031a6:	e7f3      	b.n	8003190 <HAL_GPIO_EXTI_IRQHandler+0x14>
 80031a8:	40021800 	.word	0x40021800

080031ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031ac:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80031ae:	4a10      	ldr	r2, [pc, #64]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0x44>)
 80031b0:	6813      	ldr	r3, [r2, #0]
 80031b2:	4910      	ldr	r1, [pc, #64]	; (80031f4 <HAL_PWREx_ControlVoltageScaling+0x48>)
 80031b4:	400b      	ands	r3, r1
 80031b6:	4303      	orrs	r3, r0
 80031b8:	6013      	str	r3, [r2, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031ba:	2380      	movs	r3, #128	; 0x80
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4298      	cmp	r0, r3
 80031c0:	d001      	beq.n	80031c6 <HAL_PWREx_ControlVoltageScaling+0x1a>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80031c2:	2000      	movs	r0, #0
}
 80031c4:	bd10      	pop	{r4, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80031c6:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	0058      	lsls	r0, r3, #1
 80031cc:	18c0      	adds	r0, r0, r3
 80031ce:	0040      	lsls	r0, r0, #1
 80031d0:	490a      	ldr	r1, [pc, #40]	; (80031fc <HAL_PWREx_ControlVoltageScaling+0x50>)
 80031d2:	f7fc ff97 	bl	8000104 <__udivsi3>
 80031d6:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031d8:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0x44>)
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	055b      	lsls	r3, r3, #21
 80031de:	d503      	bpl.n	80031e8 <HAL_PWREx_ControlVoltageScaling+0x3c>
      if (wait_loop_index != 0U)
 80031e0:	2800      	cmp	r0, #0
 80031e2:	d003      	beq.n	80031ec <HAL_PWREx_ControlVoltageScaling+0x40>
        wait_loop_index--;
 80031e4:	3801      	subs	r0, #1
 80031e6:	e7f7      	b.n	80031d8 <HAL_PWREx_ControlVoltageScaling+0x2c>
  return HAL_OK;
 80031e8:	2000      	movs	r0, #0
 80031ea:	e7eb      	b.n	80031c4 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 80031ec:	2003      	movs	r0, #3
 80031ee:	e7e9      	b.n	80031c4 <HAL_PWREx_ControlVoltageScaling+0x18>
 80031f0:	40007000 	.word	0x40007000
 80031f4:	fffff9ff 	.word	0xfffff9ff
 80031f8:	20000000 	.word	0x20000000
 80031fc:	000f4240 	.word	0x000f4240

08003200 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003200:	b570      	push	{r4, r5, r6, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003206:	d100      	bne.n	800320a <HAL_RCC_OscConfig+0xa>
 8003208:	e25e      	b.n	80036c8 <HAL_RCC_OscConfig+0x4c8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800320a:	6803      	ldr	r3, [r0, #0]
 800320c:	07db      	lsls	r3, r3, #31
 800320e:	d539      	bpl.n	8003284 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003210:	4ac1      	ldr	r2, [pc, #772]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 8003212:	6891      	ldr	r1, [r2, #8]
 8003214:	2338      	movs	r3, #56	; 0x38
 8003216:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003218:	68d1      	ldr	r1, [r2, #12]
 800321a:	2203      	movs	r2, #3
 800321c:	400a      	ands	r2, r1

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800321e:	2b10      	cmp	r3, #16
 8003220:	d026      	beq.n	8003270 <HAL_RCC_OscConfig+0x70>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003222:	2b08      	cmp	r3, #8
 8003224:	d026      	beq.n	8003274 <HAL_RCC_OscConfig+0x74>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003226:	6863      	ldr	r3, [r4, #4]
 8003228:	2280      	movs	r2, #128	; 0x80
 800322a:	0252      	lsls	r2, r2, #9
 800322c:	4293      	cmp	r3, r2
 800322e:	d07f      	beq.n	8003330 <HAL_RCC_OscConfig+0x130>
 8003230:	22a0      	movs	r2, #160	; 0xa0
 8003232:	02d2      	lsls	r2, r2, #11
 8003234:	4293      	cmp	r3, r2
 8003236:	d100      	bne.n	800323a <HAL_RCC_OscConfig+0x3a>
 8003238:	e081      	b.n	800333e <HAL_RCC_OscConfig+0x13e>
 800323a:	4bb7      	ldr	r3, [pc, #732]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	49b7      	ldr	r1, [pc, #732]	; (800351c <HAL_RCC_OscConfig+0x31c>)
 8003240:	400a      	ands	r2, r1
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	49b6      	ldr	r1, [pc, #728]	; (8003520 <HAL_RCC_OscConfig+0x320>)
 8003248:	400a      	ands	r2, r1
 800324a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800324c:	6863      	ldr	r3, [r4, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d100      	bne.n	8003254 <HAL_RCC_OscConfig+0x54>
 8003252:	e080      	b.n	8003356 <HAL_RCC_OscConfig+0x156>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7ff fe7c 	bl	8002f50 <HAL_GetTick>
 8003258:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800325a:	4baf      	ldr	r3, [pc, #700]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	039b      	lsls	r3, r3, #14
 8003260:	d410      	bmi.n	8003284 <HAL_RCC_OscConfig+0x84>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003262:	f7ff fe75 	bl	8002f50 <HAL_GetTick>
 8003266:	1b40      	subs	r0, r0, r5
 8003268:	2864      	cmp	r0, #100	; 0x64
 800326a:	d9f6      	bls.n	800325a <HAL_RCC_OscConfig+0x5a>
          {
            return HAL_TIMEOUT;
 800326c:	2003      	movs	r0, #3
 800326e:	e22c      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003270:	2a03      	cmp	r2, #3
 8003272:	d1d6      	bne.n	8003222 <HAL_RCC_OscConfig+0x22>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003274:	4ba8      	ldr	r3, [pc, #672]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	039b      	lsls	r3, r3, #14
 800327a:	d503      	bpl.n	8003284 <HAL_RCC_OscConfig+0x84>
 800327c:	6863      	ldr	r3, [r4, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d100      	bne.n	8003284 <HAL_RCC_OscConfig+0x84>
 8003282:	e224      	b.n	80036ce <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003284:	6823      	ldr	r3, [r4, #0]
 8003286:	079b      	lsls	r3, r3, #30
 8003288:	d531      	bpl.n	80032ee <HAL_RCC_OscConfig+0xee>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800328a:	4aa3      	ldr	r2, [pc, #652]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 800328c:	6891      	ldr	r1, [r2, #8]
 800328e:	2338      	movs	r3, #56	; 0x38
 8003290:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003292:	68d1      	ldr	r1, [r2, #12]
 8003294:	2203      	movs	r2, #3
 8003296:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003298:	2b10      	cmp	r3, #16
 800329a:	d06a      	beq.n	8003372 <HAL_RCC_OscConfig+0x172>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800329c:	2b00      	cmp	r3, #0
 800329e:	d16b      	bne.n	8003378 <HAL_RCC_OscConfig+0x178>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032a0:	4a9d      	ldr	r2, [pc, #628]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	0552      	lsls	r2, r2, #21
 80032a6:	d503      	bpl.n	80032b0 <HAL_RCC_OscConfig+0xb0>
 80032a8:	68e2      	ldr	r2, [r4, #12]
 80032aa:	2a00      	cmp	r2, #0
 80032ac:	d100      	bne.n	80032b0 <HAL_RCC_OscConfig+0xb0>
 80032ae:	e210      	b.n	80036d2 <HAL_RCC_OscConfig+0x4d2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b0:	4899      	ldr	r0, [pc, #612]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 80032b2:	6842      	ldr	r2, [r0, #4]
 80032b4:	499b      	ldr	r1, [pc, #620]	; (8003524 <HAL_RCC_OscConfig+0x324>)
 80032b6:	400a      	ands	r2, r1
 80032b8:	6961      	ldr	r1, [r4, #20]
 80032ba:	0209      	lsls	r1, r1, #8
 80032bc:	430a      	orrs	r2, r1
 80032be:	6042      	str	r2, [r0, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10d      	bne.n	80032e0 <HAL_RCC_OscConfig+0xe0>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80032c4:	6803      	ldr	r3, [r0, #0]
 80032c6:	4998      	ldr	r1, [pc, #608]	; (8003528 <HAL_RCC_OscConfig+0x328>)
 80032c8:	400b      	ands	r3, r1
 80032ca:	6921      	ldr	r1, [r4, #16]
 80032cc:	430b      	orrs	r3, r1
 80032ce:	6003      	str	r3, [r0, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80032d0:	6803      	ldr	r3, [r0, #0]
 80032d2:	0adb      	lsrs	r3, r3, #11
 80032d4:	2207      	movs	r2, #7
 80032d6:	401a      	ands	r2, r3
 80032d8:	4b94      	ldr	r3, [pc, #592]	; (800352c <HAL_RCC_OscConfig+0x32c>)
 80032da:	40d3      	lsrs	r3, r2
 80032dc:	4a94      	ldr	r2, [pc, #592]	; (8003530 <HAL_RCC_OscConfig+0x330>)
 80032de:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032e0:	4b94      	ldr	r3, [pc, #592]	; (8003534 <HAL_RCC_OscConfig+0x334>)
 80032e2:	6818      	ldr	r0, [r3, #0]
 80032e4:	f7ff fd80 	bl	8002de8 <HAL_InitTick>
 80032e8:	2800      	cmp	r0, #0
 80032ea:	d000      	beq.n	80032ee <HAL_RCC_OscConfig+0xee>
 80032ec:	e1f3      	b.n	80036d6 <HAL_RCC_OscConfig+0x4d6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ee:	6823      	ldr	r3, [r4, #0]
 80032f0:	071b      	lsls	r3, r3, #28
 80032f2:	d400      	bmi.n	80032f6 <HAL_RCC_OscConfig+0xf6>
 80032f4:	e081      	b.n	80033fa <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80032f6:	4b88      	ldr	r3, [pc, #544]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	2338      	movs	r3, #56	; 0x38
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b18      	cmp	r3, #24
 8003300:	d073      	beq.n	80033ea <HAL_RCC_OscConfig+0x1ea>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003302:	69a3      	ldr	r3, [r4, #24]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d100      	bne.n	800330a <HAL_RCC_OscConfig+0x10a>
 8003308:	e0b4      	b.n	8003474 <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800330a:	4a83      	ldr	r2, [pc, #524]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 800330c:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800330e:	2101      	movs	r1, #1
 8003310:	430b      	orrs	r3, r1
 8003312:	6613      	str	r3, [r2, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003314:	f7ff fe1c 	bl	8002f50 <HAL_GetTick>
 8003318:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800331a:	4b7f      	ldr	r3, [pc, #508]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 800331c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800331e:	079b      	lsls	r3, r3, #30
 8003320:	d46b      	bmi.n	80033fa <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003322:	f7ff fe15 	bl	8002f50 <HAL_GetTick>
 8003326:	1b40      	subs	r0, r0, r5
 8003328:	2802      	cmp	r0, #2
 800332a:	d9f6      	bls.n	800331a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800332c:	2003      	movs	r0, #3
 800332e:	e1cc      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003330:	4a79      	ldr	r2, [pc, #484]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 8003332:	6811      	ldr	r1, [r2, #0]
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	025b      	lsls	r3, r3, #9
 8003338:	430b      	orrs	r3, r1
 800333a:	6013      	str	r3, [r2, #0]
 800333c:	e786      	b.n	800324c <HAL_RCC_OscConfig+0x4c>
 800333e:	4b76      	ldr	r3, [pc, #472]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 8003340:	6819      	ldr	r1, [r3, #0]
 8003342:	2280      	movs	r2, #128	; 0x80
 8003344:	02d2      	lsls	r2, r2, #11
 8003346:	430a      	orrs	r2, r1
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	6819      	ldr	r1, [r3, #0]
 800334c:	2280      	movs	r2, #128	; 0x80
 800334e:	0252      	lsls	r2, r2, #9
 8003350:	430a      	orrs	r2, r1
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	e77a      	b.n	800324c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8003356:	f7ff fdfb 	bl	8002f50 <HAL_GetTick>
 800335a:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800335c:	4b6e      	ldr	r3, [pc, #440]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	039b      	lsls	r3, r3, #14
 8003362:	d58f      	bpl.n	8003284 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003364:	f7ff fdf4 	bl	8002f50 <HAL_GetTick>
 8003368:	1b40      	subs	r0, r0, r5
 800336a:	2864      	cmp	r0, #100	; 0x64
 800336c:	d9f6      	bls.n	800335c <HAL_RCC_OscConfig+0x15c>
            return HAL_TIMEOUT;
 800336e:	2003      	movs	r0, #3
 8003370:	e1ab      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003372:	2a02      	cmp	r2, #2
 8003374:	d192      	bne.n	800329c <HAL_RCC_OscConfig+0x9c>
 8003376:	e793      	b.n	80032a0 <HAL_RCC_OscConfig+0xa0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003378:	68e3      	ldr	r3, [r4, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d022      	beq.n	80033c4 <HAL_RCC_OscConfig+0x1c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800337e:	4a66      	ldr	r2, [pc, #408]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 8003380:	6813      	ldr	r3, [r2, #0]
 8003382:	4969      	ldr	r1, [pc, #420]	; (8003528 <HAL_RCC_OscConfig+0x328>)
 8003384:	400b      	ands	r3, r1
 8003386:	6921      	ldr	r1, [r4, #16]
 8003388:	430b      	orrs	r3, r1
 800338a:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 800338c:	6811      	ldr	r1, [r2, #0]
 800338e:	2380      	movs	r3, #128	; 0x80
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	430b      	orrs	r3, r1
 8003394:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003396:	f7ff fddb 	bl	8002f50 <HAL_GetTick>
 800339a:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800339c:	4b5e      	ldr	r3, [pc, #376]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	055b      	lsls	r3, r3, #21
 80033a2:	d406      	bmi.n	80033b2 <HAL_RCC_OscConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a4:	f7ff fdd4 	bl	8002f50 <HAL_GetTick>
 80033a8:	1b40      	subs	r0, r0, r5
 80033aa:	2802      	cmp	r0, #2
 80033ac:	d9f6      	bls.n	800339c <HAL_RCC_OscConfig+0x19c>
            return HAL_TIMEOUT;
 80033ae:	2003      	movs	r0, #3
 80033b0:	e18b      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b2:	4959      	ldr	r1, [pc, #356]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 80033b4:	684b      	ldr	r3, [r1, #4]
 80033b6:	4a5b      	ldr	r2, [pc, #364]	; (8003524 <HAL_RCC_OscConfig+0x324>)
 80033b8:	4013      	ands	r3, r2
 80033ba:	6962      	ldr	r2, [r4, #20]
 80033bc:	0212      	lsls	r2, r2, #8
 80033be:	4313      	orrs	r3, r2
 80033c0:	604b      	str	r3, [r1, #4]
 80033c2:	e794      	b.n	80032ee <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 80033c4:	4a54      	ldr	r2, [pc, #336]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 80033c6:	6813      	ldr	r3, [r2, #0]
 80033c8:	495b      	ldr	r1, [pc, #364]	; (8003538 <HAL_RCC_OscConfig+0x338>)
 80033ca:	400b      	ands	r3, r1
 80033cc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80033ce:	f7ff fdbf 	bl	8002f50 <HAL_GetTick>
 80033d2:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033d4:	4b50      	ldr	r3, [pc, #320]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	d588      	bpl.n	80032ee <HAL_RCC_OscConfig+0xee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033dc:	f7ff fdb8 	bl	8002f50 <HAL_GetTick>
 80033e0:	1b40      	subs	r0, r0, r5
 80033e2:	2802      	cmp	r0, #2
 80033e4:	d9f6      	bls.n	80033d4 <HAL_RCC_OscConfig+0x1d4>
            return HAL_TIMEOUT;
 80033e6:	2003      	movs	r0, #3
 80033e8:	e16f      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80033ea:	4b4b      	ldr	r3, [pc, #300]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 80033ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ee:	079b      	lsls	r3, r3, #30
 80033f0:	d503      	bpl.n	80033fa <HAL_RCC_OscConfig+0x1fa>
 80033f2:	69a3      	ldr	r3, [r4, #24]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d100      	bne.n	80033fa <HAL_RCC_OscConfig+0x1fa>
 80033f8:	e16f      	b.n	80036da <HAL_RCC_OscConfig+0x4da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033fa:	6823      	ldr	r3, [r4, #0]
 80033fc:	075b      	lsls	r3, r3, #29
 80033fe:	d400      	bmi.n	8003402 <HAL_RCC_OscConfig+0x202>
 8003400:	e0a2      	b.n	8003548 <HAL_RCC_OscConfig+0x348>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003402:	4b45      	ldr	r3, [pc, #276]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	2338      	movs	r3, #56	; 0x38
 8003408:	4013      	ands	r3, r2
 800340a:	2b20      	cmp	r3, #32
 800340c:	d045      	beq.n	800349a <HAL_RCC_OscConfig+0x29a>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800340e:	4b42      	ldr	r3, [pc, #264]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 8003410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	d44a      	bmi.n	80034ac <HAL_RCC_OscConfig+0x2ac>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003416:	4b40      	ldr	r3, [pc, #256]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 8003418:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800341a:	2180      	movs	r1, #128	; 0x80
 800341c:	0549      	lsls	r1, r1, #21
 800341e:	430a      	orrs	r2, r1
 8003420:	63da      	str	r2, [r3, #60]	; 0x3c
 8003422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003424:	400b      	ands	r3, r1
 8003426:	9301      	str	r3, [sp, #4]
 8003428:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 800342a:	2501      	movs	r5, #1
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800342c:	4b43      	ldr	r3, [pc, #268]	; (800353c <HAL_RCC_OscConfig+0x33c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	05db      	lsls	r3, r3, #23
 8003432:	d53d      	bpl.n	80034b0 <HAL_RCC_OscConfig+0x2b0>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003434:	68a3      	ldr	r3, [r4, #8]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d04e      	beq.n	80034d8 <HAL_RCC_OscConfig+0x2d8>
 800343a:	2b05      	cmp	r3, #5
 800343c:	d052      	beq.n	80034e4 <HAL_RCC_OscConfig+0x2e4>
 800343e:	4b36      	ldr	r3, [pc, #216]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 8003440:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003442:	2101      	movs	r1, #1
 8003444:	438a      	bics	r2, r1
 8003446:	65da      	str	r2, [r3, #92]	; 0x5c
 8003448:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800344a:	3103      	adds	r1, #3
 800344c:	438a      	bics	r2, r1
 800344e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003450:	68a3      	ldr	r3, [r4, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d050      	beq.n	80034f8 <HAL_RCC_OscConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003456:	f7ff fd7b 	bl	8002f50 <HAL_GetTick>
 800345a:	0006      	movs	r6, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800345c:	4b2e      	ldr	r3, [pc, #184]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 800345e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003460:	079b      	lsls	r3, r3, #30
 8003462:	d46f      	bmi.n	8003544 <HAL_RCC_OscConfig+0x344>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003464:	f7ff fd74 	bl	8002f50 <HAL_GetTick>
 8003468:	1b80      	subs	r0, r0, r6
 800346a:	4b35      	ldr	r3, [pc, #212]	; (8003540 <HAL_RCC_OscConfig+0x340>)
 800346c:	4298      	cmp	r0, r3
 800346e:	d9f5      	bls.n	800345c <HAL_RCC_OscConfig+0x25c>
          {
            return HAL_TIMEOUT;
 8003470:	2003      	movs	r0, #3
 8003472:	e12a      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_LSI_DISABLE();
 8003474:	4a28      	ldr	r2, [pc, #160]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 8003476:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8003478:	2101      	movs	r1, #1
 800347a:	438b      	bics	r3, r1
 800347c:	6613      	str	r3, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 800347e:	f7ff fd67 	bl	8002f50 <HAL_GetTick>
 8003482:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003484:	4b24      	ldr	r3, [pc, #144]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 8003486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003488:	079b      	lsls	r3, r3, #30
 800348a:	d5b6      	bpl.n	80033fa <HAL_RCC_OscConfig+0x1fa>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800348c:	f7ff fd60 	bl	8002f50 <HAL_GetTick>
 8003490:	1b40      	subs	r0, r0, r5
 8003492:	2802      	cmp	r0, #2
 8003494:	d9f6      	bls.n	8003484 <HAL_RCC_OscConfig+0x284>
            return HAL_TIMEOUT;
 8003496:	2003      	movs	r0, #3
 8003498:	e117      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800349a:	4b1f      	ldr	r3, [pc, #124]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 800349c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349e:	079b      	lsls	r3, r3, #30
 80034a0:	d552      	bpl.n	8003548 <HAL_RCC_OscConfig+0x348>
 80034a2:	68a3      	ldr	r3, [r4, #8]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d14f      	bne.n	8003548 <HAL_RCC_OscConfig+0x348>
        return HAL_ERROR;
 80034a8:	2001      	movs	r0, #1
 80034aa:	e10e      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
    FlagStatus       pwrclkchanged = RESET;
 80034ac:	2500      	movs	r5, #0
 80034ae:	e7bd      	b.n	800342c <HAL_RCC_OscConfig+0x22c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034b0:	4a22      	ldr	r2, [pc, #136]	; (800353c <HAL_RCC_OscConfig+0x33c>)
 80034b2:	6811      	ldr	r1, [r2, #0]
 80034b4:	2380      	movs	r3, #128	; 0x80
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	430b      	orrs	r3, r1
 80034ba:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80034bc:	f7ff fd48 	bl	8002f50 <HAL_GetTick>
 80034c0:	0006      	movs	r6, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c2:	4b1e      	ldr	r3, [pc, #120]	; (800353c <HAL_RCC_OscConfig+0x33c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	05db      	lsls	r3, r3, #23
 80034c8:	d4b4      	bmi.n	8003434 <HAL_RCC_OscConfig+0x234>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ca:	f7ff fd41 	bl	8002f50 <HAL_GetTick>
 80034ce:	1b80      	subs	r0, r0, r6
 80034d0:	2802      	cmp	r0, #2
 80034d2:	d9f6      	bls.n	80034c2 <HAL_RCC_OscConfig+0x2c2>
            return HAL_TIMEOUT;
 80034d4:	2003      	movs	r0, #3
 80034d6:	e0f8      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d8:	4a0f      	ldr	r2, [pc, #60]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 80034da:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80034dc:	2101      	movs	r1, #1
 80034de:	430b      	orrs	r3, r1
 80034e0:	65d3      	str	r3, [r2, #92]	; 0x5c
 80034e2:	e7b5      	b.n	8003450 <HAL_RCC_OscConfig+0x250>
 80034e4:	4b0c      	ldr	r3, [pc, #48]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 80034e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034e8:	2104      	movs	r1, #4
 80034ea:	430a      	orrs	r2, r1
 80034ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80034ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034f0:	3903      	subs	r1, #3
 80034f2:	430a      	orrs	r2, r1
 80034f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80034f6:	e7ab      	b.n	8003450 <HAL_RCC_OscConfig+0x250>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f8:	f7ff fd2a 	bl	8002f50 <HAL_GetTick>
 80034fc:	0006      	movs	r6, r0

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034fe:	4b06      	ldr	r3, [pc, #24]	; (8003518 <HAL_RCC_OscConfig+0x318>)
 8003500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003502:	079b      	lsls	r3, r3, #30
 8003504:	d51e      	bpl.n	8003544 <HAL_RCC_OscConfig+0x344>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003506:	f7ff fd23 	bl	8002f50 <HAL_GetTick>
 800350a:	1b80      	subs	r0, r0, r6
 800350c:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <HAL_RCC_OscConfig+0x340>)
 800350e:	4298      	cmp	r0, r3
 8003510:	d9f5      	bls.n	80034fe <HAL_RCC_OscConfig+0x2fe>
          {
            return HAL_TIMEOUT;
 8003512:	2003      	movs	r0, #3
 8003514:	e0d9      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	40021000 	.word	0x40021000
 800351c:	fffeffff 	.word	0xfffeffff
 8003520:	fffbffff 	.word	0xfffbffff
 8003524:	ffff80ff 	.word	0xffff80ff
 8003528:	ffffc7ff 	.word	0xffffc7ff
 800352c:	00f42400 	.word	0x00f42400
 8003530:	20000000 	.word	0x20000000
 8003534:	20000008 	.word	0x20000008
 8003538:	fffffeff 	.word	0xfffffeff
 800353c:	40007000 	.word	0x40007000
 8003540:	00001388 	.word	0x00001388
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003544:	2d01      	cmp	r5, #1
 8003546:	d019      	beq.n	800357c <HAL_RCC_OscConfig+0x37c>
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003548:	6823      	ldr	r3, [r4, #0]
 800354a:	069b      	lsls	r3, r3, #26
 800354c:	d52f      	bpl.n	80035ae <HAL_RCC_OscConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800354e:	69e3      	ldr	r3, [r4, #28]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d019      	beq.n	8003588 <HAL_RCC_OscConfig+0x388>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003554:	4a6a      	ldr	r2, [pc, #424]	; (8003700 <HAL_RCC_OscConfig+0x500>)
 8003556:	6811      	ldr	r1, [r2, #0]
 8003558:	2380      	movs	r3, #128	; 0x80
 800355a:	03db      	lsls	r3, r3, #15
 800355c:	430b      	orrs	r3, r1
 800355e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003560:	f7ff fcf6 	bl	8002f50 <HAL_GetTick>
 8003564:	0005      	movs	r5, r0

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003566:	4b66      	ldr	r3, [pc, #408]	; (8003700 <HAL_RCC_OscConfig+0x500>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	021b      	lsls	r3, r3, #8
 800356c:	d41f      	bmi.n	80035ae <HAL_RCC_OscConfig+0x3ae>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800356e:	f7ff fcef 	bl	8002f50 <HAL_GetTick>
 8003572:	1b40      	subs	r0, r0, r5
 8003574:	2802      	cmp	r0, #2
 8003576:	d9f6      	bls.n	8003566 <HAL_RCC_OscConfig+0x366>
        {
          return HAL_TIMEOUT;
 8003578:	2003      	movs	r0, #3
 800357a:	e0a6      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_PWR_CLK_DISABLE();
 800357c:	4a60      	ldr	r2, [pc, #384]	; (8003700 <HAL_RCC_OscConfig+0x500>)
 800357e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8003580:	4960      	ldr	r1, [pc, #384]	; (8003704 <HAL_RCC_OscConfig+0x504>)
 8003582:	400b      	ands	r3, r1
 8003584:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003586:	e7df      	b.n	8003548 <HAL_RCC_OscConfig+0x348>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003588:	4a5d      	ldr	r2, [pc, #372]	; (8003700 <HAL_RCC_OscConfig+0x500>)
 800358a:	6813      	ldr	r3, [r2, #0]
 800358c:	495e      	ldr	r1, [pc, #376]	; (8003708 <HAL_RCC_OscConfig+0x508>)
 800358e:	400b      	ands	r3, r1
 8003590:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003592:	f7ff fcdd 	bl	8002f50 <HAL_GetTick>
 8003596:	0005      	movs	r5, r0

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003598:	4b59      	ldr	r3, [pc, #356]	; (8003700 <HAL_RCC_OscConfig+0x500>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	021b      	lsls	r3, r3, #8
 800359e:	d506      	bpl.n	80035ae <HAL_RCC_OscConfig+0x3ae>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035a0:	f7ff fcd6 	bl	8002f50 <HAL_GetTick>
 80035a4:	1b40      	subs	r0, r0, r5
 80035a6:	2802      	cmp	r0, #2
 80035a8:	d9f6      	bls.n	8003598 <HAL_RCC_OscConfig+0x398>
        {
          return HAL_TIMEOUT;
 80035aa:	2003      	movs	r0, #3
 80035ac:	e08d      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035ae:	6a23      	ldr	r3, [r4, #32]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d100      	bne.n	80035b6 <HAL_RCC_OscConfig+0x3b6>
 80035b4:	e093      	b.n	80036de <HAL_RCC_OscConfig+0x4de>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035b6:	4a52      	ldr	r2, [pc, #328]	; (8003700 <HAL_RCC_OscConfig+0x500>)
 80035b8:	6891      	ldr	r1, [r2, #8]
 80035ba:	2238      	movs	r2, #56	; 0x38
 80035bc:	400a      	ands	r2, r1
 80035be:	2a10      	cmp	r2, #16
 80035c0:	d05a      	beq.n	8003678 <HAL_RCC_OscConfig+0x478>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d012      	beq.n	80035ec <HAL_RCC_OscConfig+0x3ec>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c6:	4a4e      	ldr	r2, [pc, #312]	; (8003700 <HAL_RCC_OscConfig+0x500>)
 80035c8:	6813      	ldr	r3, [r2, #0]
 80035ca:	4950      	ldr	r1, [pc, #320]	; (800370c <HAL_RCC_OscConfig+0x50c>)
 80035cc:	400b      	ands	r3, r1
 80035ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d0:	f7ff fcbe 	bl	8002f50 <HAL_GetTick>
 80035d4:	0004      	movs	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035d6:	4b4a      	ldr	r3, [pc, #296]	; (8003700 <HAL_RCC_OscConfig+0x500>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	019b      	lsls	r3, r3, #6
 80035dc:	d545      	bpl.n	800366a <HAL_RCC_OscConfig+0x46a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035de:	f7ff fcb7 	bl	8002f50 <HAL_GetTick>
 80035e2:	1b00      	subs	r0, r0, r4
 80035e4:	2802      	cmp	r0, #2
 80035e6:	d9f6      	bls.n	80035d6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80035e8:	2003      	movs	r0, #3
 80035ea:	e06e      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_PLL_DISABLE();
 80035ec:	4a44      	ldr	r2, [pc, #272]	; (8003700 <HAL_RCC_OscConfig+0x500>)
 80035ee:	6813      	ldr	r3, [r2, #0]
 80035f0:	4946      	ldr	r1, [pc, #280]	; (800370c <HAL_RCC_OscConfig+0x50c>)
 80035f2:	400b      	ands	r3, r1
 80035f4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80035f6:	f7ff fcab 	bl	8002f50 <HAL_GetTick>
 80035fa:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035fc:	4b40      	ldr	r3, [pc, #256]	; (8003700 <HAL_RCC_OscConfig+0x500>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	019b      	lsls	r3, r3, #6
 8003602:	d506      	bpl.n	8003612 <HAL_RCC_OscConfig+0x412>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003604:	f7ff fca4 	bl	8002f50 <HAL_GetTick>
 8003608:	1b40      	subs	r0, r0, r5
 800360a:	2802      	cmp	r0, #2
 800360c:	d9f6      	bls.n	80035fc <HAL_RCC_OscConfig+0x3fc>
            return HAL_TIMEOUT;
 800360e:	2003      	movs	r0, #3
 8003610:	e05b      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003612:	4a3b      	ldr	r2, [pc, #236]	; (8003700 <HAL_RCC_OscConfig+0x500>)
 8003614:	68d3      	ldr	r3, [r2, #12]
 8003616:	493e      	ldr	r1, [pc, #248]	; (8003710 <HAL_RCC_OscConfig+0x510>)
 8003618:	4019      	ands	r1, r3
 800361a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800361c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800361e:	4303      	orrs	r3, r0
 8003620:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003622:	0200      	lsls	r0, r0, #8
 8003624:	4303      	orrs	r3, r0
 8003626:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003628:	4303      	orrs	r3, r0
 800362a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800362c:	4303      	orrs	r3, r0
 800362e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003630:	4303      	orrs	r3, r0
 8003632:	430b      	orrs	r3, r1
 8003634:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8003636:	6811      	ldr	r1, [r2, #0]
 8003638:	2380      	movs	r3, #128	; 0x80
 800363a:	045b      	lsls	r3, r3, #17
 800363c:	430b      	orrs	r3, r1
 800363e:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003640:	68d1      	ldr	r1, [r2, #12]
 8003642:	2380      	movs	r3, #128	; 0x80
 8003644:	055b      	lsls	r3, r3, #21
 8003646:	430b      	orrs	r3, r1
 8003648:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 800364a:	f7ff fc81 	bl	8002f50 <HAL_GetTick>
 800364e:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003650:	4b2b      	ldr	r3, [pc, #172]	; (8003700 <HAL_RCC_OscConfig+0x500>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	019b      	lsls	r3, r3, #6
 8003656:	d406      	bmi.n	8003666 <HAL_RCC_OscConfig+0x466>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003658:	f7ff fc7a 	bl	8002f50 <HAL_GetTick>
 800365c:	1b00      	subs	r0, r0, r4
 800365e:	2802      	cmp	r0, #2
 8003660:	d9f6      	bls.n	8003650 <HAL_RCC_OscConfig+0x450>
            return HAL_TIMEOUT;
 8003662:	2003      	movs	r0, #3
 8003664:	e031      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003666:	2000      	movs	r0, #0
 8003668:	e02f      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800366a:	4a25      	ldr	r2, [pc, #148]	; (8003700 <HAL_RCC_OscConfig+0x500>)
 800366c:	68d3      	ldr	r3, [r2, #12]
 800366e:	4929      	ldr	r1, [pc, #164]	; (8003714 <HAL_RCC_OscConfig+0x514>)
 8003670:	400b      	ands	r3, r1
 8003672:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8003674:	2000      	movs	r0, #0
 8003676:	e028      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003678:	2b01      	cmp	r3, #1
 800367a:	d032      	beq.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
        temp_pllckcfg = RCC->PLLCFGR;
 800367c:	4b20      	ldr	r3, [pc, #128]	; (8003700 <HAL_RCC_OscConfig+0x500>)
 800367e:	68da      	ldr	r2, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003680:	2303      	movs	r3, #3
 8003682:	4013      	ands	r3, r2
 8003684:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003686:	428b      	cmp	r3, r1
 8003688:	d12d      	bne.n	80036e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800368a:	2370      	movs	r3, #112	; 0x70
 800368c:	4013      	ands	r3, r2
 800368e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003690:	428b      	cmp	r3, r1
 8003692:	d12a      	bne.n	80036ea <HAL_RCC_OscConfig+0x4ea>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003694:	21fe      	movs	r1, #254	; 0xfe
 8003696:	01c9      	lsls	r1, r1, #7
 8003698:	4011      	ands	r1, r2
 800369a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800369c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800369e:	4299      	cmp	r1, r3
 80036a0:	d125      	bne.n	80036ee <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036a2:	23f8      	movs	r3, #248	; 0xf8
 80036a4:	039b      	lsls	r3, r3, #14
 80036a6:	4013      	ands	r3, r2
 80036a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036aa:	428b      	cmp	r3, r1
 80036ac:	d121      	bne.n	80036f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80036ae:	23e0      	movs	r3, #224	; 0xe0
 80036b0:	051b      	lsls	r3, r3, #20
 80036b2:	4013      	ands	r3, r2
 80036b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036b6:	428b      	cmp	r3, r1
 80036b8:	d11d      	bne.n	80036f6 <HAL_RCC_OscConfig+0x4f6>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80036ba:	0f52      	lsrs	r2, r2, #29
 80036bc:	0752      	lsls	r2, r2, #29
 80036be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d11a      	bne.n	80036fa <HAL_RCC_OscConfig+0x4fa>
  return HAL_OK;
 80036c4:	2000      	movs	r0, #0
 80036c6:	e000      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
    return HAL_ERROR;
 80036c8:	2001      	movs	r0, #1
}
 80036ca:	b002      	add	sp, #8
 80036cc:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80036ce:	2001      	movs	r0, #1
 80036d0:	e7fb      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
        return HAL_ERROR;
 80036d2:	2001      	movs	r0, #1
 80036d4:	e7f9      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
          return HAL_ERROR;
 80036d6:	2001      	movs	r0, #1
 80036d8:	e7f7      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
        return HAL_ERROR;
 80036da:	2001      	movs	r0, #1
 80036dc:	e7f5      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
  return HAL_OK;
 80036de:	2000      	movs	r0, #0
 80036e0:	e7f3      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
        return HAL_ERROR;
 80036e2:	2001      	movs	r0, #1
 80036e4:	e7f1      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
          return HAL_ERROR;
 80036e6:	2001      	movs	r0, #1
 80036e8:	e7ef      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
 80036ea:	2001      	movs	r0, #1
 80036ec:	e7ed      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
 80036ee:	2001      	movs	r0, #1
 80036f0:	e7eb      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
 80036f2:	2001      	movs	r0, #1
 80036f4:	e7e9      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
 80036f6:	2001      	movs	r0, #1
 80036f8:	e7e7      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
 80036fa:	2001      	movs	r0, #1
 80036fc:	e7e5      	b.n	80036ca <HAL_RCC_OscConfig+0x4ca>
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	40021000 	.word	0x40021000
 8003704:	efffffff 	.word	0xefffffff
 8003708:	ffbfffff 	.word	0xffbfffff
 800370c:	feffffff 	.word	0xfeffffff
 8003710:	11c1808c 	.word	0x11c1808c
 8003714:	eefefffc 	.word	0xeefefffc

08003718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003718:	b510      	push	{r4, lr}
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800371a:	4b2a      	ldr	r3, [pc, #168]	; (80037c4 <HAL_RCC_GetSysClockFreq+0xac>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	2238      	movs	r2, #56	; 0x38
 8003720:	421a      	tst	r2, r3
 8003722:	d107      	bne.n	8003734 <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003724:	4b27      	ldr	r3, [pc, #156]	; (80037c4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	0ad2      	lsrs	r2, r2, #11
 800372a:	2307      	movs	r3, #7
 800372c:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800372e:	4826      	ldr	r0, [pc, #152]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003730:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8003732:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003734:	4b23      	ldr	r3, [pc, #140]	; (80037c4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	2338      	movs	r3, #56	; 0x38
 800373a:	4013      	ands	r3, r2
 800373c:	2b08      	cmp	r3, #8
 800373e:	d03b      	beq.n	80037b8 <HAL_RCC_GetSysClockFreq+0xa0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003740:	4b20      	ldr	r3, [pc, #128]	; (80037c4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	2338      	movs	r3, #56	; 0x38
 8003746:	4013      	ands	r3, r2
 8003748:	2b10      	cmp	r3, #16
 800374a:	d00d      	beq.n	8003768 <HAL_RCC_GetSysClockFreq+0x50>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800374c:	4b1d      	ldr	r3, [pc, #116]	; (80037c4 <HAL_RCC_GetSysClockFreq+0xac>)
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	2338      	movs	r3, #56	; 0x38
 8003752:	4013      	ands	r3, r2
 8003754:	2b20      	cmp	r3, #32
 8003756:	d031      	beq.n	80037bc <HAL_RCC_GetSysClockFreq+0xa4>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003758:	4b1a      	ldr	r3, [pc, #104]	; (80037c4 <HAL_RCC_GetSysClockFreq+0xac>)
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	2338      	movs	r3, #56	; 0x38
 800375e:	4013      	ands	r3, r2
 8003760:	2b18      	cmp	r3, #24
 8003762:	d026      	beq.n	80037b2 <HAL_RCC_GetSysClockFreq+0x9a>
    sysclockfreq = 0U;
 8003764:	2000      	movs	r0, #0
  return sysclockfreq;
 8003766:	e7e4      	b.n	8003732 <HAL_RCC_GetSysClockFreq+0x1a>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003768:	4a16      	ldr	r2, [pc, #88]	; (80037c4 <HAL_RCC_GetSysClockFreq+0xac>)
 800376a:	68d1      	ldr	r1, [r2, #12]
 800376c:	3b0d      	subs	r3, #13
 800376e:	400b      	ands	r3, r1
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003770:	68d2      	ldr	r2, [r2, #12]
 8003772:	0912      	lsrs	r2, r2, #4
 8003774:	2107      	movs	r1, #7
 8003776:	4011      	ands	r1, r2
 8003778:	3101      	adds	r1, #1
    switch (pllsource)
 800377a:	2b03      	cmp	r3, #3
 800377c:	d00f      	beq.n	800379e <HAL_RCC_GetSysClockFreq+0x86>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800377e:	4812      	ldr	r0, [pc, #72]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003780:	f7fc fcc0 	bl	8000104 <__udivsi3>
 8003784:	4b0f      	ldr	r3, [pc, #60]	; (80037c4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	0a12      	lsrs	r2, r2, #8
 800378a:	237f      	movs	r3, #127	; 0x7f
 800378c:	4013      	ands	r3, r2
 800378e:	4358      	muls	r0, r3
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003790:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003792:	68d9      	ldr	r1, [r3, #12]
 8003794:	0f49      	lsrs	r1, r1, #29
 8003796:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8003798:	f7fc fcb4 	bl	8000104 <__udivsi3>
 800379c:	e7c9      	b.n	8003732 <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800379e:	480b      	ldr	r0, [pc, #44]	; (80037cc <HAL_RCC_GetSysClockFreq+0xb4>)
 80037a0:	f7fc fcb0 	bl	8000104 <__udivsi3>
 80037a4:	4b07      	ldr	r3, [pc, #28]	; (80037c4 <HAL_RCC_GetSysClockFreq+0xac>)
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	0a12      	lsrs	r2, r2, #8
 80037aa:	237f      	movs	r3, #127	; 0x7f
 80037ac:	4013      	ands	r3, r2
 80037ae:	4358      	muls	r0, r3
        break;
 80037b0:	e7ee      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x78>
    sysclockfreq = LSI_VALUE;
 80037b2:	20fa      	movs	r0, #250	; 0xfa
 80037b4:	01c0      	lsls	r0, r0, #7
 80037b6:	e7bc      	b.n	8003732 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = HSE_VALUE;
 80037b8:	4804      	ldr	r0, [pc, #16]	; (80037cc <HAL_RCC_GetSysClockFreq+0xb4>)
 80037ba:	e7ba      	b.n	8003732 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = LSE_VALUE;
 80037bc:	2080      	movs	r0, #128	; 0x80
 80037be:	0200      	lsls	r0, r0, #8
 80037c0:	e7b7      	b.n	8003732 <HAL_RCC_GetSysClockFreq+0x1a>
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	40021000 	.word	0x40021000
 80037c8:	00f42400 	.word	0x00f42400
 80037cc:	007a1200 	.word	0x007a1200

080037d0 <HAL_RCC_ClockConfig>:
{
 80037d0:	b570      	push	{r4, r5, r6, lr}
 80037d2:	0004      	movs	r4, r0
 80037d4:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80037d6:	2800      	cmp	r0, #0
 80037d8:	d100      	bne.n	80037dc <HAL_RCC_ClockConfig+0xc>
 80037da:	e0aa      	b.n	8003932 <HAL_RCC_ClockConfig+0x162>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037dc:	4b57      	ldr	r3, [pc, #348]	; (800393c <HAL_RCC_ClockConfig+0x16c>)
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	2307      	movs	r3, #7
 80037e2:	4013      	ands	r3, r2
 80037e4:	428b      	cmp	r3, r1
 80037e6:	d321      	bcc.n	800382c <HAL_RCC_ClockConfig+0x5c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e8:	6823      	ldr	r3, [r4, #0]
 80037ea:	079a      	lsls	r2, r3, #30
 80037ec:	d50e      	bpl.n	800380c <HAL_RCC_ClockConfig+0x3c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ee:	075b      	lsls	r3, r3, #29
 80037f0:	d505      	bpl.n	80037fe <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80037f2:	4a53      	ldr	r2, [pc, #332]	; (8003940 <HAL_RCC_ClockConfig+0x170>)
 80037f4:	6891      	ldr	r1, [r2, #8]
 80037f6:	23e0      	movs	r3, #224	; 0xe0
 80037f8:	01db      	lsls	r3, r3, #7
 80037fa:	430b      	orrs	r3, r1
 80037fc:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037fe:	4a50      	ldr	r2, [pc, #320]	; (8003940 <HAL_RCC_ClockConfig+0x170>)
 8003800:	6893      	ldr	r3, [r2, #8]
 8003802:	4950      	ldr	r1, [pc, #320]	; (8003944 <HAL_RCC_ClockConfig+0x174>)
 8003804:	400b      	ands	r3, r1
 8003806:	68a1      	ldr	r1, [r4, #8]
 8003808:	430b      	orrs	r3, r1
 800380a:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	07db      	lsls	r3, r3, #31
 8003810:	d554      	bpl.n	80038bc <HAL_RCC_ClockConfig+0xec>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003812:	6863      	ldr	r3, [r4, #4]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d020      	beq.n	800385a <HAL_RCC_ClockConfig+0x8a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003818:	2b02      	cmp	r3, #2
 800381a:	d03b      	beq.n	8003894 <HAL_RCC_ClockConfig+0xc4>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800381c:	2b00      	cmp	r3, #0
 800381e:	d13f      	bne.n	80038a0 <HAL_RCC_ClockConfig+0xd0>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003820:	4a47      	ldr	r2, [pc, #284]	; (8003940 <HAL_RCC_ClockConfig+0x170>)
 8003822:	6812      	ldr	r2, [r2, #0]
 8003824:	0552      	lsls	r2, r2, #21
 8003826:	d41c      	bmi.n	8003862 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8003828:	2001      	movs	r0, #1
 800382a:	e06a      	b.n	8003902 <HAL_RCC_ClockConfig+0x132>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382c:	4a43      	ldr	r2, [pc, #268]	; (800393c <HAL_RCC_ClockConfig+0x16c>)
 800382e:	6813      	ldr	r3, [r2, #0]
 8003830:	2107      	movs	r1, #7
 8003832:	438b      	bics	r3, r1
 8003834:	432b      	orrs	r3, r5
 8003836:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003838:	f7ff fb8a 	bl	8002f50 <HAL_GetTick>
 800383c:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800383e:	4b3f      	ldr	r3, [pc, #252]	; (800393c <HAL_RCC_ClockConfig+0x16c>)
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	2307      	movs	r3, #7
 8003844:	4013      	ands	r3, r2
 8003846:	42ab      	cmp	r3, r5
 8003848:	d0ce      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800384a:	f7ff fb81 	bl	8002f50 <HAL_GetTick>
 800384e:	1b80      	subs	r0, r0, r6
 8003850:	4a3d      	ldr	r2, [pc, #244]	; (8003948 <HAL_RCC_ClockConfig+0x178>)
 8003852:	4290      	cmp	r0, r2
 8003854:	d9f3      	bls.n	800383e <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 8003856:	2003      	movs	r0, #3
 8003858:	e053      	b.n	8003902 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800385a:	4a39      	ldr	r2, [pc, #228]	; (8003940 <HAL_RCC_ClockConfig+0x170>)
 800385c:	6812      	ldr	r2, [r2, #0]
 800385e:	0392      	lsls	r2, r2, #14
 8003860:	d569      	bpl.n	8003936 <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003862:	4937      	ldr	r1, [pc, #220]	; (8003940 <HAL_RCC_ClockConfig+0x170>)
 8003864:	688a      	ldr	r2, [r1, #8]
 8003866:	2007      	movs	r0, #7
 8003868:	4382      	bics	r2, r0
 800386a:	4313      	orrs	r3, r2
 800386c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800386e:	f7ff fb6f 	bl	8002f50 <HAL_GetTick>
 8003872:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003874:	4b32      	ldr	r3, [pc, #200]	; (8003940 <HAL_RCC_ClockConfig+0x170>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2238      	movs	r2, #56	; 0x38
 800387a:	401a      	ands	r2, r3
 800387c:	6863      	ldr	r3, [r4, #4]
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	429a      	cmp	r2, r3
 8003882:	d01b      	beq.n	80038bc <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003884:	f7ff fb64 	bl	8002f50 <HAL_GetTick>
 8003888:	1b80      	subs	r0, r0, r6
 800388a:	4b2f      	ldr	r3, [pc, #188]	; (8003948 <HAL_RCC_ClockConfig+0x178>)
 800388c:	4298      	cmp	r0, r3
 800388e:	d9f1      	bls.n	8003874 <HAL_RCC_ClockConfig+0xa4>
        return HAL_TIMEOUT;
 8003890:	2003      	movs	r0, #3
 8003892:	e036      	b.n	8003902 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003894:	4a2a      	ldr	r2, [pc, #168]	; (8003940 <HAL_RCC_ClockConfig+0x170>)
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	0192      	lsls	r2, r2, #6
 800389a:	d4e2      	bmi.n	8003862 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 800389c:	2001      	movs	r0, #1
 800389e:	e030      	b.n	8003902 <HAL_RCC_ClockConfig+0x132>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80038a0:	2b03      	cmp	r3, #3
 80038a2:	d005      	beq.n	80038b0 <HAL_RCC_ClockConfig+0xe0>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038a4:	4a26      	ldr	r2, [pc, #152]	; (8003940 <HAL_RCC_ClockConfig+0x170>)
 80038a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038a8:	0792      	lsls	r2, r2, #30
 80038aa:	d4da      	bmi.n	8003862 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 80038ac:	2001      	movs	r0, #1
 80038ae:	e028      	b.n	8003902 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038b0:	4a23      	ldr	r2, [pc, #140]	; (8003940 <HAL_RCC_ClockConfig+0x170>)
 80038b2:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80038b4:	0792      	lsls	r2, r2, #30
 80038b6:	d4d4      	bmi.n	8003862 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 80038b8:	2001      	movs	r0, #1
 80038ba:	e022      	b.n	8003902 <HAL_RCC_ClockConfig+0x132>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038bc:	4b1f      	ldr	r3, [pc, #124]	; (800393c <HAL_RCC_ClockConfig+0x16c>)
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	2307      	movs	r3, #7
 80038c2:	4013      	ands	r3, r2
 80038c4:	42ab      	cmp	r3, r5
 80038c6:	d81d      	bhi.n	8003904 <HAL_RCC_ClockConfig+0x134>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c8:	6823      	ldr	r3, [r4, #0]
 80038ca:	075b      	lsls	r3, r3, #29
 80038cc:	d506      	bpl.n	80038dc <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80038ce:	4a1c      	ldr	r2, [pc, #112]	; (8003940 <HAL_RCC_ClockConfig+0x170>)
 80038d0:	6893      	ldr	r3, [r2, #8]
 80038d2:	491e      	ldr	r1, [pc, #120]	; (800394c <HAL_RCC_ClockConfig+0x17c>)
 80038d4:	400b      	ands	r3, r1
 80038d6:	68e1      	ldr	r1, [r4, #12]
 80038d8:	430b      	orrs	r3, r1
 80038da:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80038dc:	f7ff ff1c 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 80038e0:	4b17      	ldr	r3, [pc, #92]	; (8003940 <HAL_RCC_ClockConfig+0x170>)
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	0a12      	lsrs	r2, r2, #8
 80038e6:	230f      	movs	r3, #15
 80038e8:	4013      	ands	r3, r2
 80038ea:	4a19      	ldr	r2, [pc, #100]	; (8003950 <HAL_RCC_ClockConfig+0x180>)
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	589a      	ldr	r2, [r3, r2]
 80038f0:	231f      	movs	r3, #31
 80038f2:	4013      	ands	r3, r2
 80038f4:	40d8      	lsrs	r0, r3
 80038f6:	4b17      	ldr	r3, [pc, #92]	; (8003954 <HAL_RCC_ClockConfig+0x184>)
 80038f8:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80038fa:	4b17      	ldr	r3, [pc, #92]	; (8003958 <HAL_RCC_ClockConfig+0x188>)
 80038fc:	6818      	ldr	r0, [r3, #0]
 80038fe:	f7ff fa73 	bl	8002de8 <HAL_InitTick>
}
 8003902:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003904:	4a0d      	ldr	r2, [pc, #52]	; (800393c <HAL_RCC_ClockConfig+0x16c>)
 8003906:	6813      	ldr	r3, [r2, #0]
 8003908:	2107      	movs	r1, #7
 800390a:	438b      	bics	r3, r1
 800390c:	432b      	orrs	r3, r5
 800390e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003910:	f7ff fb1e 	bl	8002f50 <HAL_GetTick>
 8003914:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003916:	4b09      	ldr	r3, [pc, #36]	; (800393c <HAL_RCC_ClockConfig+0x16c>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	2307      	movs	r3, #7
 800391c:	4013      	ands	r3, r2
 800391e:	42ab      	cmp	r3, r5
 8003920:	d0d2      	beq.n	80038c8 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003922:	f7ff fb15 	bl	8002f50 <HAL_GetTick>
 8003926:	1b80      	subs	r0, r0, r6
 8003928:	4b07      	ldr	r3, [pc, #28]	; (8003948 <HAL_RCC_ClockConfig+0x178>)
 800392a:	4298      	cmp	r0, r3
 800392c:	d9f3      	bls.n	8003916 <HAL_RCC_ClockConfig+0x146>
        return HAL_TIMEOUT;
 800392e:	2003      	movs	r0, #3
 8003930:	e7e7      	b.n	8003902 <HAL_RCC_ClockConfig+0x132>
    return HAL_ERROR;
 8003932:	2001      	movs	r0, #1
 8003934:	e7e5      	b.n	8003902 <HAL_RCC_ClockConfig+0x132>
        return HAL_ERROR;
 8003936:	2001      	movs	r0, #1
 8003938:	e7e3      	b.n	8003902 <HAL_RCC_ClockConfig+0x132>
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	40022000 	.word	0x40022000
 8003940:	40021000 	.word	0x40021000
 8003944:	fffff0ff 	.word	0xfffff0ff
 8003948:	00001388 	.word	0x00001388
 800394c:	ffff8fff 	.word	0xffff8fff
 8003950:	08004b94 	.word	0x08004b94
 8003954:	20000000 	.word	0x20000000
 8003958:	20000008 	.word	0x20000008

0800395c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800395c:	4b01      	ldr	r3, [pc, #4]	; (8003964 <HAL_RCC_GetHCLKFreq+0x8>)
 800395e:	6818      	ldr	r0, [r3, #0]
}
 8003960:	4770      	bx	lr
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	20000000 	.word	0x20000000

08003968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003968:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800396a:	f7ff fff7 	bl	800395c <HAL_RCC_GetHCLKFreq>
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800396e:	4b06      	ldr	r3, [pc, #24]	; (8003988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	0b12      	lsrs	r2, r2, #12
 8003974:	2307      	movs	r3, #7
 8003976:	4013      	ands	r3, r2
 8003978:	4a04      	ldr	r2, [pc, #16]	; (800398c <HAL_RCC_GetPCLK1Freq+0x24>)
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	589a      	ldr	r2, [r3, r2]
 800397e:	231f      	movs	r3, #31
 8003980:	4013      	ands	r3, r2
 8003982:	40d8      	lsrs	r0, r3
}
 8003984:	bd10      	pop	{r4, pc}
 8003986:	46c0      	nop			; (mov r8, r8)
 8003988:	40021000 	.word	0x40021000
 800398c:	08004bd4 	.word	0x08004bd4

08003990 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003990:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003992:	2307      	movs	r3, #7
 8003994:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003996:	4a09      	ldr	r2, [pc, #36]	; (80039bc <HAL_RCC_GetClockConfig+0x2c>)
 8003998:	6894      	ldr	r4, [r2, #8]
 800399a:	401c      	ands	r4, r3
 800399c:	6044      	str	r4, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800399e:	6894      	ldr	r4, [r2, #8]
 80039a0:	25f0      	movs	r5, #240	; 0xf0
 80039a2:	012d      	lsls	r5, r5, #4
 80039a4:	402c      	ands	r4, r5
 80039a6:	6084      	str	r4, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 80039a8:	6892      	ldr	r2, [r2, #8]
 80039aa:	24e0      	movs	r4, #224	; 0xe0
 80039ac:	01e4      	lsls	r4, r4, #7
 80039ae:	4022      	ands	r2, r4
 80039b0:	60c2      	str	r2, [r0, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039b2:	4a03      	ldr	r2, [pc, #12]	; (80039c0 <HAL_RCC_GetClockConfig+0x30>)
 80039b4:	6812      	ldr	r2, [r2, #0]
 80039b6:	4013      	ands	r3, r2
 80039b8:	600b      	str	r3, [r1, #0]
}
 80039ba:	bd30      	pop	{r4, r5, pc}
 80039bc:	40021000 	.word	0x40021000
 80039c0:	40022000 	.word	0x40022000

080039c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039c6:	46d6      	mov	lr, sl
 80039c8:	464f      	mov	r7, r9
 80039ca:	4646      	mov	r6, r8
 80039cc:	b5c0      	push	{r6, r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	0006      	movs	r6, r0
 80039d2:	000d      	movs	r5, r1
 80039d4:	4690      	mov	r8, r2
 80039d6:	001f      	movs	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039d8:	f7ff faba 	bl	8002f50 <HAL_GetTick>
 80039dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039de:	1a18      	subs	r0, r3, r0
 80039e0:	4681      	mov	r9, r0
 80039e2:	44b9      	add	r9, r7
  tmp_tickstart = HAL_GetTick();
 80039e4:	f7ff fab4 	bl	8002f50 <HAL_GetTick>
 80039e8:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039ea:	4b2e      	ldr	r3, [pc, #184]	; (8003aa4 <SPI_WaitFlagStateUntilTimeout+0xe0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	015b      	lsls	r3, r3, #5
 80039f0:	0d1b      	lsrs	r3, r3, #20
 80039f2:	464a      	mov	r2, r9
 80039f4:	4353      	muls	r3, r2
 80039f6:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039f8:	6833      	ldr	r3, [r6, #0]
 80039fa:	689c      	ldr	r4, [r3, #8]
 80039fc:	402c      	ands	r4, r5
 80039fe:	1b64      	subs	r4, r4, r5
 8003a00:	4263      	negs	r3, r4
 8003a02:	415c      	adcs	r4, r3
 8003a04:	4544      	cmp	r4, r8
 8003a06:	d045      	beq.n	8003a94 <SPI_WaitFlagStateUntilTimeout+0xd0>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a08:	1c7b      	adds	r3, r7, #1
 8003a0a:	d0f5      	beq.n	80039f8 <SPI_WaitFlagStateUntilTimeout+0x34>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a0c:	f7ff faa0 	bl	8002f50 <HAL_GetTick>
 8003a10:	4653      	mov	r3, sl
 8003a12:	1ac0      	subs	r0, r0, r3
 8003a14:	4548      	cmp	r0, r9
 8003a16:	d20b      	bcs.n	8003a30 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8003a18:	464b      	mov	r3, r9
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d008      	beq.n	8003a30 <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a1e:	9a01      	ldr	r2, [sp, #4]
 8003a20:	2a00      	cmp	r2, #0
 8003a22:	d000      	beq.n	8003a26 <SPI_WaitFlagStateUntilTimeout+0x62>
 8003a24:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8003a26:	9b01      	ldr	r3, [sp, #4]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	9301      	str	r3, [sp, #4]
 8003a2c:	4691      	mov	r9, r2
 8003a2e:	e7e3      	b.n	80039f8 <SPI_WaitFlagStateUntilTimeout+0x34>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a30:	6832      	ldr	r2, [r6, #0]
 8003a32:	6853      	ldr	r3, [r2, #4]
 8003a34:	21e0      	movs	r1, #224	; 0xe0
 8003a36:	438b      	bics	r3, r1
 8003a38:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a3a:	6872      	ldr	r2, [r6, #4]
 8003a3c:	2382      	movs	r3, #130	; 0x82
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d00c      	beq.n	8003a5e <SPI_WaitFlagStateUntilTimeout+0x9a>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a44:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8003a46:	2380      	movs	r3, #128	; 0x80
 8003a48:	019b      	lsls	r3, r3, #6
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d016      	beq.n	8003a7c <SPI_WaitFlagStateUntilTimeout+0xb8>
        hspi->State = HAL_SPI_STATE_READY;
 8003a4e:	235d      	movs	r3, #93	; 0x5d
 8003a50:	2201      	movs	r2, #1
 8003a52:	54f2      	strb	r2, [r6, r3]
        __HAL_UNLOCK(hspi);
 8003a54:	3b01      	subs	r3, #1
 8003a56:	2200      	movs	r2, #0
 8003a58:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8003a5a:	2003      	movs	r0, #3
 8003a5c:	e01b      	b.n	8003a96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a5e:	68b3      	ldr	r3, [r6, #8]
 8003a60:	2280      	movs	r2, #128	; 0x80
 8003a62:	0212      	lsls	r2, r2, #8
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d003      	beq.n	8003a70 <SPI_WaitFlagStateUntilTimeout+0xac>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a68:	2280      	movs	r2, #128	; 0x80
 8003a6a:	00d2      	lsls	r2, r2, #3
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d1e9      	bne.n	8003a44 <SPI_WaitFlagStateUntilTimeout+0x80>
          __HAL_SPI_DISABLE(hspi);
 8003a70:	6832      	ldr	r2, [r6, #0]
 8003a72:	6813      	ldr	r3, [r2, #0]
 8003a74:	2140      	movs	r1, #64	; 0x40
 8003a76:	438b      	bics	r3, r1
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	e7e3      	b.n	8003a44 <SPI_WaitFlagStateUntilTimeout+0x80>
          SPI_RESET_CRC(hspi);
 8003a7c:	6832      	ldr	r2, [r6, #0]
 8003a7e:	6813      	ldr	r3, [r2, #0]
 8003a80:	4909      	ldr	r1, [pc, #36]	; (8003aa8 <SPI_WaitFlagStateUntilTimeout+0xe4>)
 8003a82:	400b      	ands	r3, r1
 8003a84:	6013      	str	r3, [r2, #0]
 8003a86:	6832      	ldr	r2, [r6, #0]
 8003a88:	6811      	ldr	r1, [r2, #0]
 8003a8a:	2380      	movs	r3, #128	; 0x80
 8003a8c:	019b      	lsls	r3, r3, #6
 8003a8e:	430b      	orrs	r3, r1
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	e7dc      	b.n	8003a4e <SPI_WaitFlagStateUntilTimeout+0x8a>
    }
  }

  return HAL_OK;
 8003a94:	2000      	movs	r0, #0
}
 8003a96:	b002      	add	sp, #8
 8003a98:	bce0      	pop	{r5, r6, r7}
 8003a9a:	46ba      	mov	sl, r7
 8003a9c:	46b1      	mov	r9, r6
 8003a9e:	46a8      	mov	r8, r5
 8003aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	20000000 	.word	0x20000000
 8003aa8:	ffffdfff 	.word	0xffffdfff

08003aac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aae:	46de      	mov	lr, fp
 8003ab0:	4657      	mov	r7, sl
 8003ab2:	464e      	mov	r6, r9
 8003ab4:	4645      	mov	r5, r8
 8003ab6:	b5e0      	push	{r5, r6, r7, lr}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	0007      	movs	r7, r0
 8003abc:	000d      	movs	r5, r1
 8003abe:	0016      	movs	r6, r2
 8003ac0:	4698      	mov	r8, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003ac2:	466b      	mov	r3, sp
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	70da      	strb	r2, [r3, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003ac8:	f7ff fa42 	bl	8002f50 <HAL_GetTick>
 8003acc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003ace:	1a18      	subs	r0, r3, r0
 8003ad0:	4440      	add	r0, r8
 8003ad2:	4681      	mov	r9, r0
  tmp_tickstart = HAL_GetTick();
 8003ad4:	f7ff fa3c 	bl	8002f50 <HAL_GetTick>
 8003ad8:	4682      	mov	sl, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	469b      	mov	fp, r3

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003ade:	4b36      	ldr	r3, [pc, #216]	; (8003bb8 <SPI_WaitFifoStateUntilTimeout+0x10c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	009a      	lsls	r2, r3, #2
 8003ae4:	18d2      	adds	r2, r2, r3
 8003ae6:	00d3      	lsls	r3, r2, #3
 8003ae8:	1a9b      	subs	r3, r3, r2
 8003aea:	0d1b      	lsrs	r3, r3, #20
 8003aec:	464a      	mov	r2, r9
 8003aee:	4353      	muls	r3, r2
 8003af0:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8003af2:	e002      	b.n	8003afa <SPI_WaitFifoStateUntilTimeout+0x4e>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8003af4:	4643      	mov	r3, r8
 8003af6:	3301      	adds	r3, #1
 8003af8:	d111      	bne.n	8003b1e <SPI_WaitFifoStateUntilTimeout+0x72>
  while ((hspi->Instance->SR & Fifo) != State)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	689c      	ldr	r4, [r3, #8]
 8003afe:	402c      	ands	r4, r5
 8003b00:	42b4      	cmp	r4, r6
 8003b02:	d050      	beq.n	8003ba6 <SPI_WaitFifoStateUntilTimeout+0xfa>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b04:	23c0      	movs	r3, #192	; 0xc0
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	429d      	cmp	r5, r3
 8003b0a:	d1f3      	bne.n	8003af4 <SPI_WaitFifoStateUntilTimeout+0x48>
 8003b0c:	2e00      	cmp	r6, #0
 8003b0e:	d1f1      	bne.n	8003af4 <SPI_WaitFifoStateUntilTimeout+0x48>
      tmpreg8 = *ptmpreg8;
 8003b10:	465b      	mov	r3, fp
 8003b12:	7b1b      	ldrb	r3, [r3, #12]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	466a      	mov	r2, sp
 8003b18:	70d3      	strb	r3, [r2, #3]
      UNUSED(tmpreg8);
 8003b1a:	78d3      	ldrb	r3, [r2, #3]
 8003b1c:	e7ea      	b.n	8003af4 <SPI_WaitFifoStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b1e:	f7ff fa17 	bl	8002f50 <HAL_GetTick>
 8003b22:	4653      	mov	r3, sl
 8003b24:	1ac0      	subs	r0, r0, r3
 8003b26:	4548      	cmp	r0, r9
 8003b28:	d20b      	bcs.n	8003b42 <SPI_WaitFifoStateUntilTimeout+0x96>
 8003b2a:	464b      	mov	r3, r9
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d008      	beq.n	8003b42 <SPI_WaitFifoStateUntilTimeout+0x96>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b30:	9a01      	ldr	r2, [sp, #4]
 8003b32:	2a00      	cmp	r2, #0
 8003b34:	d000      	beq.n	8003b38 <SPI_WaitFifoStateUntilTimeout+0x8c>
 8003b36:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8003b38:	9b01      	ldr	r3, [sp, #4]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	9301      	str	r3, [sp, #4]
 8003b3e:	4691      	mov	r9, r2
 8003b40:	e7db      	b.n	8003afa <SPI_WaitFifoStateUntilTimeout+0x4e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	6853      	ldr	r3, [r2, #4]
 8003b46:	21e0      	movs	r1, #224	; 0xe0
 8003b48:	438b      	bics	r3, r1
 8003b4a:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	2382      	movs	r3, #130	; 0x82
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d00c      	beq.n	8003b70 <SPI_WaitFifoStateUntilTimeout+0xc4>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b58:	2380      	movs	r3, #128	; 0x80
 8003b5a:	019b      	lsls	r3, r3, #6
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d016      	beq.n	8003b8e <SPI_WaitFifoStateUntilTimeout+0xe2>
        hspi->State = HAL_SPI_STATE_READY;
 8003b60:	235d      	movs	r3, #93	; 0x5d
 8003b62:	2201      	movs	r2, #1
 8003b64:	54fa      	strb	r2, [r7, r3]
        __HAL_UNLOCK(hspi);
 8003b66:	3b01      	subs	r3, #1
 8003b68:	2200      	movs	r2, #0
 8003b6a:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 8003b6c:	2003      	movs	r0, #3
 8003b6e:	e01b      	b.n	8003ba8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2280      	movs	r2, #128	; 0x80
 8003b74:	0212      	lsls	r2, r2, #8
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d003      	beq.n	8003b82 <SPI_WaitFifoStateUntilTimeout+0xd6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b7a:	2280      	movs	r2, #128	; 0x80
 8003b7c:	00d2      	lsls	r2, r2, #3
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d1e9      	bne.n	8003b56 <SPI_WaitFifoStateUntilTimeout+0xaa>
          __HAL_SPI_DISABLE(hspi);
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	6813      	ldr	r3, [r2, #0]
 8003b86:	2140      	movs	r1, #64	; 0x40
 8003b88:	438b      	bics	r3, r1
 8003b8a:	6013      	str	r3, [r2, #0]
 8003b8c:	e7e3      	b.n	8003b56 <SPI_WaitFifoStateUntilTimeout+0xaa>
          SPI_RESET_CRC(hspi);
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	6813      	ldr	r3, [r2, #0]
 8003b92:	490a      	ldr	r1, [pc, #40]	; (8003bbc <SPI_WaitFifoStateUntilTimeout+0x110>)
 8003b94:	400b      	ands	r3, r1
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	6811      	ldr	r1, [r2, #0]
 8003b9c:	2380      	movs	r3, #128	; 0x80
 8003b9e:	019b      	lsls	r3, r3, #6
 8003ba0:	430b      	orrs	r3, r1
 8003ba2:	6013      	str	r3, [r2, #0]
 8003ba4:	e7dc      	b.n	8003b60 <SPI_WaitFifoStateUntilTimeout+0xb4>
    }
  }

  return HAL_OK;
 8003ba6:	2000      	movs	r0, #0
}
 8003ba8:	b003      	add	sp, #12
 8003baa:	bcf0      	pop	{r4, r5, r6, r7}
 8003bac:	46bb      	mov	fp, r7
 8003bae:	46b2      	mov	sl, r6
 8003bb0:	46a9      	mov	r9, r5
 8003bb2:	46a0      	mov	r8, r4
 8003bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bb6:	46c0      	nop			; (mov r8, r8)
 8003bb8:	20000000 	.word	0x20000000
 8003bbc:	ffffdfff 	.word	0xffffdfff

08003bc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc0:	b570      	push	{r4, r5, r6, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	0004      	movs	r4, r0
 8003bc6:	000d      	movs	r5, r1
 8003bc8:	0016      	movs	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003bca:	21c0      	movs	r1, #192	; 0xc0
 8003bcc:	9200      	str	r2, [sp, #0]
 8003bce:	002b      	movs	r3, r5
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	0149      	lsls	r1, r1, #5
 8003bd4:	f7ff ff6a 	bl	8003aac <SPI_WaitFifoStateUntilTimeout>
 8003bd8:	2800      	cmp	r0, #0
 8003bda:	d118      	bne.n	8003c0e <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bdc:	9600      	str	r6, [sp, #0]
 8003bde:	002b      	movs	r3, r5
 8003be0:	2200      	movs	r2, #0
 8003be2:	2180      	movs	r1, #128	; 0x80
 8003be4:	0020      	movs	r0, r4
 8003be6:	f7ff feed 	bl	80039c4 <SPI_WaitFlagStateUntilTimeout>
 8003bea:	2800      	cmp	r0, #0
 8003bec:	d116      	bne.n	8003c1c <SPI_EndRxTxTransaction+0x5c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003bee:	21c0      	movs	r1, #192	; 0xc0
 8003bf0:	9600      	str	r6, [sp, #0]
 8003bf2:	002b      	movs	r3, r5
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	00c9      	lsls	r1, r1, #3
 8003bf8:	0020      	movs	r0, r4
 8003bfa:	f7ff ff57 	bl	8003aac <SPI_WaitFifoStateUntilTimeout>
 8003bfe:	2800      	cmp	r0, #0
 8003c00:	d00a      	beq.n	8003c18 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c02:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003c04:	2220      	movs	r2, #32
 8003c06:	4313      	orrs	r3, r2
 8003c08:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c0a:	2003      	movs	r0, #3
 8003c0c:	e004      	b.n	8003c18 <SPI_EndRxTxTransaction+0x58>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c0e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003c10:	2220      	movs	r2, #32
 8003c12:	4313      	orrs	r3, r2
 8003c14:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c16:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8003c18:	b002      	add	sp, #8
 8003c1a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c1c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003c1e:	2220      	movs	r2, #32
 8003c20:	4313      	orrs	r3, r2
 8003c22:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c24:	2003      	movs	r0, #3
 8003c26:	e7f7      	b.n	8003c18 <SPI_EndRxTxTransaction+0x58>

08003c28 <HAL_SPI_Init>:
{
 8003c28:	b570      	push	{r4, r5, r6, lr}
 8003c2a:	1e04      	subs	r4, r0, #0
  if (hspi == NULL)
 8003c2c:	d100      	bne.n	8003c30 <HAL_SPI_Init+0x8>
 8003c2e:	e078      	b.n	8003d22 <HAL_SPI_Init+0xfa>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c30:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d107      	bne.n	8003c46 <HAL_SPI_Init+0x1e>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c36:	6842      	ldr	r2, [r0, #4]
 8003c38:	3305      	adds	r3, #5
 8003c3a:	33ff      	adds	r3, #255	; 0xff
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d005      	beq.n	8003c4c <HAL_SPI_Init+0x24>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c40:	2300      	movs	r3, #0
 8003c42:	61c3      	str	r3, [r0, #28]
 8003c44:	e002      	b.n	8003c4c <HAL_SPI_Init+0x24>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c46:	2300      	movs	r3, #0
 8003c48:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c4a:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c50:	335d      	adds	r3, #93	; 0x5d
 8003c52:	5ce3      	ldrb	r3, [r4, r3]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d05a      	beq.n	8003d0e <HAL_SPI_Init+0xe6>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003c58:	235d      	movs	r3, #93	; 0x5d
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8003c5e:	6822      	ldr	r2, [r4, #0]
 8003c60:	6813      	ldr	r3, [r2, #0]
 8003c62:	2140      	movs	r1, #64	; 0x40
 8003c64:	438b      	bics	r3, r1
 8003c66:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c68:	68e3      	ldr	r3, [r4, #12]
 8003c6a:	22e0      	movs	r2, #224	; 0xe0
 8003c6c:	00d2      	lsls	r2, r2, #3
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d954      	bls.n	8003d1c <HAL_SPI_Init+0xf4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c72:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c74:	21f0      	movs	r1, #240	; 0xf0
 8003c76:	0109      	lsls	r1, r1, #4
 8003c78:	428b      	cmp	r3, r1
 8003c7a:	d005      	beq.n	8003c88 <HAL_SPI_Init+0x60>
 8003c7c:	21e0      	movs	r1, #224	; 0xe0
 8003c7e:	00c9      	lsls	r1, r1, #3
 8003c80:	428b      	cmp	r3, r1
 8003c82:	d001      	beq.n	8003c88 <HAL_SPI_Init+0x60>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c84:	2300      	movs	r3, #0
 8003c86:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c88:	6863      	ldr	r3, [r4, #4]
 8003c8a:	2182      	movs	r1, #130	; 0x82
 8003c8c:	0049      	lsls	r1, r1, #1
 8003c8e:	400b      	ands	r3, r1
 8003c90:	68a1      	ldr	r1, [r4, #8]
 8003c92:	2084      	movs	r0, #132	; 0x84
 8003c94:	0200      	lsls	r0, r0, #8
 8003c96:	4001      	ands	r1, r0
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	6920      	ldr	r0, [r4, #16]
 8003c9c:	2102      	movs	r1, #2
 8003c9e:	4001      	ands	r1, r0
 8003ca0:	430b      	orrs	r3, r1
 8003ca2:	6960      	ldr	r0, [r4, #20]
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	4008      	ands	r0, r1
 8003ca8:	4303      	orrs	r3, r0
 8003caa:	69a0      	ldr	r0, [r4, #24]
 8003cac:	2580      	movs	r5, #128	; 0x80
 8003cae:	00ad      	lsls	r5, r5, #2
 8003cb0:	4028      	ands	r0, r5
 8003cb2:	4303      	orrs	r3, r0
 8003cb4:	69e5      	ldr	r5, [r4, #28]
 8003cb6:	2038      	movs	r0, #56	; 0x38
 8003cb8:	4028      	ands	r0, r5
 8003cba:	4303      	orrs	r3, r0
 8003cbc:	6a25      	ldr	r5, [r4, #32]
 8003cbe:	2080      	movs	r0, #128	; 0x80
 8003cc0:	4028      	ands	r0, r5
 8003cc2:	4303      	orrs	r3, r0
 8003cc4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003cc6:	2580      	movs	r5, #128	; 0x80
 8003cc8:	01ad      	lsls	r5, r5, #6
 8003cca:	4028      	ands	r0, r5
 8003ccc:	6825      	ldr	r5, [r4, #0]
 8003cce:	4303      	orrs	r3, r0
 8003cd0:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003cd2:	8b60      	ldrh	r0, [r4, #26]
 8003cd4:	2304      	movs	r3, #4
 8003cd6:	4003      	ands	r3, r0
 8003cd8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003cda:	2010      	movs	r0, #16
 8003cdc:	4028      	ands	r0, r5
 8003cde:	4303      	orrs	r3, r0
 8003ce0:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8003ce2:	2008      	movs	r0, #8
 8003ce4:	4028      	ands	r0, r5
 8003ce6:	4303      	orrs	r3, r0
 8003ce8:	68e0      	ldr	r0, [r4, #12]
 8003cea:	25f0      	movs	r5, #240	; 0xf0
 8003cec:	012d      	lsls	r5, r5, #4
 8003cee:	4028      	ands	r0, r5
 8003cf0:	4303      	orrs	r3, r0
 8003cf2:	6820      	ldr	r0, [r4, #0]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	6043      	str	r3, [r0, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cf8:	6822      	ldr	r2, [r4, #0]
 8003cfa:	69d3      	ldr	r3, [r2, #28]
 8003cfc:	480a      	ldr	r0, [pc, #40]	; (8003d28 <HAL_SPI_Init+0x100>)
 8003cfe:	4003      	ands	r3, r0
 8003d00:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d02:	2300      	movs	r3, #0
 8003d04:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d06:	335d      	adds	r3, #93	; 0x5d
 8003d08:	54e1      	strb	r1, [r4, r3]
  return HAL_OK;
 8003d0a:	2000      	movs	r0, #0
}
 8003d0c:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003d0e:	335c      	adds	r3, #92	; 0x5c
 8003d10:	2200      	movs	r2, #0
 8003d12:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 8003d14:	0020      	movs	r0, r4
 8003d16:	f7ff f80d 	bl	8002d34 <HAL_SPI_MspInit>
 8003d1a:	e79d      	b.n	8003c58 <HAL_SPI_Init+0x30>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d1c:	2280      	movs	r2, #128	; 0x80
 8003d1e:	0152      	lsls	r2, r2, #5
 8003d20:	e7a8      	b.n	8003c74 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8003d22:	2001      	movs	r0, #1
 8003d24:	e7f2      	b.n	8003d0c <HAL_SPI_Init+0xe4>
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	fffff7ff 	.word	0xfffff7ff

08003d2c <HAL_SPI_Transmit>:
{
 8003d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d2e:	46ce      	mov	lr, r9
 8003d30:	b500      	push	{lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	0004      	movs	r4, r0
 8003d36:	9101      	str	r1, [sp, #4]
 8003d38:	4691      	mov	r9, r2
 8003d3a:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 8003d3c:	235c      	movs	r3, #92	; 0x5c
 8003d3e:	5cc3      	ldrb	r3, [r0, r3]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d100      	bne.n	8003d46 <HAL_SPI_Transmit+0x1a>
 8003d44:	e0cb      	b.n	8003ede <HAL_SPI_Transmit+0x1b2>
 8003d46:	235c      	movs	r3, #92	; 0x5c
 8003d48:	2201      	movs	r2, #1
 8003d4a:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8003d4c:	f7ff f900 	bl	8002f50 <HAL_GetTick>
 8003d50:	0006      	movs	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003d52:	235d      	movs	r3, #93	; 0x5d
 8003d54:	5ce3      	ldrb	r3, [r4, r3]
 8003d56:	b2df      	uxtb	r7, r3
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d000      	beq.n	8003d5e <HAL_SPI_Transmit+0x32>
 8003d5c:	e0b6      	b.n	8003ecc <HAL_SPI_Transmit+0x1a0>
  if ((pData == NULL) || (Size == 0U))
 8003d5e:	9901      	ldr	r1, [sp, #4]
 8003d60:	2900      	cmp	r1, #0
 8003d62:	d100      	bne.n	8003d66 <HAL_SPI_Transmit+0x3a>
 8003d64:	e0b3      	b.n	8003ece <HAL_SPI_Transmit+0x1a2>
 8003d66:	464b      	mov	r3, r9
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d100      	bne.n	8003d6e <HAL_SPI_Transmit+0x42>
 8003d6c:	e0af      	b.n	8003ece <HAL_SPI_Transmit+0x1a2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d6e:	235d      	movs	r3, #93	; 0x5d
 8003d70:	2203      	movs	r2, #3
 8003d72:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d74:	2300      	movs	r3, #0
 8003d76:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d78:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003d7a:	464a      	mov	r2, r9
 8003d7c:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003d7e:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d80:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003d82:	2244      	movs	r2, #68	; 0x44
 8003d84:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 8003d86:	3202      	adds	r2, #2
 8003d88:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 8003d8a:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003d8c:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d8e:	68a2      	ldr	r2, [r4, #8]
 8003d90:	2380      	movs	r3, #128	; 0x80
 8003d92:	021b      	lsls	r3, r3, #8
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d01e      	beq.n	8003dd6 <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d98:	6822      	ldr	r2, [r4, #0]
 8003d9a:	6813      	ldr	r3, [r2, #0]
 8003d9c:	065b      	lsls	r3, r3, #25
 8003d9e:	d403      	bmi.n	8003da8 <HAL_SPI_Transmit+0x7c>
    __HAL_SPI_ENABLE(hspi);
 8003da0:	6813      	ldr	r3, [r2, #0]
 8003da2:	2140      	movs	r1, #64	; 0x40
 8003da4:	430b      	orrs	r3, r1
 8003da6:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003da8:	68e2      	ldr	r2, [r4, #12]
 8003daa:	23e0      	movs	r3, #224	; 0xe0
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d93e      	bls.n	8003e30 <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003db2:	6863      	ldr	r3, [r4, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <HAL_SPI_Transmit+0x92>
 8003db8:	464b      	mov	r3, r9
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d120      	bne.n	8003e00 <HAL_SPI_Transmit+0xd4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dbe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	8812      	ldrh	r2, [r2, #0]
 8003dc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003dc8:	3302      	adds	r3, #2
 8003dca:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003dcc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003dd4:	e014      	b.n	8003e00 <HAL_SPI_Transmit+0xd4>
    __HAL_SPI_DISABLE(hspi);
 8003dd6:	6822      	ldr	r2, [r4, #0]
 8003dd8:	6813      	ldr	r3, [r2, #0]
 8003dda:	2140      	movs	r1, #64	; 0x40
 8003ddc:	438b      	bics	r3, r1
 8003dde:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8003de0:	6822      	ldr	r2, [r4, #0]
 8003de2:	6811      	ldr	r1, [r2, #0]
 8003de4:	2380      	movs	r3, #128	; 0x80
 8003de6:	01db      	lsls	r3, r3, #7
 8003de8:	430b      	orrs	r3, r1
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	e7d4      	b.n	8003d98 <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dee:	f7ff f8af 	bl	8002f50 <HAL_GetTick>
 8003df2:	1b80      	subs	r0, r0, r6
 8003df4:	42a8      	cmp	r0, r5
 8003df6:	d301      	bcc.n	8003dfc <HAL_SPI_Transmit+0xd0>
 8003df8:	1c6b      	adds	r3, r5, #1
 8003dfa:	d114      	bne.n	8003e26 <HAL_SPI_Transmit+0xfa>
 8003dfc:	2d00      	cmp	r5, #0
 8003dfe:	d012      	beq.n	8003e26 <HAL_SPI_Transmit+0xfa>
    while (hspi->TxXferCount > 0U)
 8003e00:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8003e02:	b289      	uxth	r1, r1
 8003e04:	2900      	cmp	r1, #0
 8003e06:	d046      	beq.n	8003e96 <HAL_SPI_Transmit+0x16a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e08:	6822      	ldr	r2, [r4, #0]
 8003e0a:	6893      	ldr	r3, [r2, #8]
 8003e0c:	079b      	lsls	r3, r3, #30
 8003e0e:	d5ee      	bpl.n	8003dee <HAL_SPI_Transmit+0xc2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	60d3      	str	r3, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e18:	3302      	adds	r3, #2
 8003e1a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003e1c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003e24:	e7ec      	b.n	8003e00 <HAL_SPI_Transmit+0xd4>
          hspi->State = HAL_SPI_STATE_READY;
 8003e26:	235d      	movs	r3, #93	; 0x5d
 8003e28:	2201      	movs	r2, #1
 8003e2a:	54e2      	strb	r2, [r4, r3]
          errorcode = HAL_TIMEOUT;
 8003e2c:	2703      	movs	r7, #3
          goto error;
 8003e2e:	e04e      	b.n	8003ece <HAL_SPI_Transmit+0x1a2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e30:	6863      	ldr	r3, [r4, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <HAL_SPI_Transmit+0x110>
 8003e36:	464b      	mov	r3, r9
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d114      	bne.n	8003e66 <HAL_SPI_Transmit+0x13a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e3c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	7812      	ldrb	r2, [r2, #0]
 8003e42:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e46:	3301      	adds	r3, #1
 8003e48:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003e4a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003e52:	e008      	b.n	8003e66 <HAL_SPI_Transmit+0x13a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e54:	f7ff f87c 	bl	8002f50 <HAL_GetTick>
 8003e58:	1b80      	subs	r0, r0, r6
 8003e5a:	42a8      	cmp	r0, r5
 8003e5c:	d301      	bcc.n	8003e62 <HAL_SPI_Transmit+0x136>
 8003e5e:	1c6b      	adds	r3, r5, #1
 8003e60:	d114      	bne.n	8003e8c <HAL_SPI_Transmit+0x160>
 8003e62:	2d00      	cmp	r5, #0
 8003e64:	d012      	beq.n	8003e8c <HAL_SPI_Transmit+0x160>
    while (hspi->TxXferCount > 0U)
 8003e66:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8003e68:	b289      	uxth	r1, r1
 8003e6a:	2900      	cmp	r1, #0
 8003e6c:	d013      	beq.n	8003e96 <HAL_SPI_Transmit+0x16a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e6e:	6822      	ldr	r2, [r4, #0]
 8003e70:	6893      	ldr	r3, [r2, #8]
 8003e72:	079b      	lsls	r3, r3, #30
 8003e74:	d5ee      	bpl.n	8003e54 <HAL_SPI_Transmit+0x128>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e7e:	3301      	adds	r3, #1
 8003e80:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003e82:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003e8a:	e7ec      	b.n	8003e66 <HAL_SPI_Transmit+0x13a>
          hspi->State = HAL_SPI_STATE_READY;
 8003e8c:	235d      	movs	r3, #93	; 0x5d
 8003e8e:	2201      	movs	r2, #1
 8003e90:	54e2      	strb	r2, [r4, r3]
          errorcode = HAL_TIMEOUT;
 8003e92:	2703      	movs	r7, #3
          goto error;
 8003e94:	e01b      	b.n	8003ece <HAL_SPI_Transmit+0x1a2>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e96:	0032      	movs	r2, r6
 8003e98:	0029      	movs	r1, r5
 8003e9a:	0020      	movs	r0, r4
 8003e9c:	f7ff fe90 	bl	8003bc0 <SPI_EndRxTxTransaction>
 8003ea0:	2800      	cmp	r0, #0
 8003ea2:	d001      	beq.n	8003ea8 <HAL_SPI_Transmit+0x17c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ea4:	2320      	movs	r3, #32
 8003ea6:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ea8:	68a3      	ldr	r3, [r4, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d106      	bne.n	8003ebc <HAL_SPI_Transmit+0x190>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003eae:	9303      	str	r3, [sp, #12]
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	68da      	ldr	r2, [r3, #12]
 8003eb4:	9203      	str	r2, [sp, #12]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	9303      	str	r3, [sp, #12]
 8003eba:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ebc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d105      	bne.n	8003ece <HAL_SPI_Transmit+0x1a2>
    hspi->State = HAL_SPI_STATE_READY;
 8003ec2:	335d      	adds	r3, #93	; 0x5d
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	54e2      	strb	r2, [r4, r3]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ec8:	2700      	movs	r7, #0
 8003eca:	e000      	b.n	8003ece <HAL_SPI_Transmit+0x1a2>
    errorcode = HAL_BUSY;
 8003ecc:	2702      	movs	r7, #2
  __HAL_UNLOCK(hspi);
 8003ece:	235c      	movs	r3, #92	; 0x5c
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	54e2      	strb	r2, [r4, r3]
}
 8003ed4:	0038      	movs	r0, r7
 8003ed6:	b004      	add	sp, #16
 8003ed8:	bc80      	pop	{r7}
 8003eda:	46b9      	mov	r9, r7
 8003edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 8003ede:	2702      	movs	r7, #2
 8003ee0:	e7f8      	b.n	8003ed4 <HAL_SPI_Transmit+0x1a8>

08003ee2 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ee4:	233d      	movs	r3, #61	; 0x3d
 8003ee6:	5cc3      	ldrb	r3, [r0, r3]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d12c      	bne.n	8003f46 <HAL_TIM_Base_Start_IT+0x62>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eec:	333c      	adds	r3, #60	; 0x3c
 8003eee:	2202      	movs	r2, #2
 8003ef0:	54c2      	strb	r2, [r0, r3]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ef2:	6802      	ldr	r2, [r0, #0]
 8003ef4:	68d3      	ldr	r3, [r2, #12]
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	430b      	orrs	r3, r1
 8003efa:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003efc:	6803      	ldr	r3, [r0, #0]
 8003efe:	4a15      	ldr	r2, [pc, #84]	; (8003f54 <HAL_TIM_Base_Start_IT+0x70>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d012      	beq.n	8003f2a <HAL_TIM_Base_Start_IT+0x46>
 8003f04:	2280      	movs	r2, #128	; 0x80
 8003f06:	05d2      	lsls	r2, r2, #23
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00e      	beq.n	8003f2a <HAL_TIM_Base_Start_IT+0x46>
 8003f0c:	4a12      	ldr	r2, [pc, #72]	; (8003f58 <HAL_TIM_Base_Start_IT+0x74>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d00b      	beq.n	8003f2a <HAL_TIM_Base_Start_IT+0x46>
 8003f12:	4a12      	ldr	r2, [pc, #72]	; (8003f5c <HAL_TIM_Base_Start_IT+0x78>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d008      	beq.n	8003f2a <HAL_TIM_Base_Start_IT+0x46>
 8003f18:	4a11      	ldr	r2, [pc, #68]	; (8003f60 <HAL_TIM_Base_Start_IT+0x7c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d005      	beq.n	8003f2a <HAL_TIM_Base_Start_IT+0x46>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	2101      	movs	r1, #1
 8003f22:	430a      	orrs	r2, r1
 8003f24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f26:	2000      	movs	r0, #0
 8003f28:	e00e      	b.n	8003f48 <HAL_TIM_Base_Start_IT+0x64>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	490d      	ldr	r1, [pc, #52]	; (8003f64 <HAL_TIM_Base_Start_IT+0x80>)
 8003f2e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f30:	2a06      	cmp	r2, #6
 8003f32:	d00a      	beq.n	8003f4a <HAL_TIM_Base_Start_IT+0x66>
 8003f34:	3907      	subs	r1, #7
 8003f36:	428a      	cmp	r2, r1
 8003f38:	d009      	beq.n	8003f4e <HAL_TIM_Base_Start_IT+0x6a>
      __HAL_TIM_ENABLE(htim);
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003f42:	2000      	movs	r0, #0
 8003f44:	e000      	b.n	8003f48 <HAL_TIM_Base_Start_IT+0x64>
    return HAL_ERROR;
 8003f46:	2001      	movs	r0, #1
}
 8003f48:	4770      	bx	lr
  return HAL_OK;
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	e7fc      	b.n	8003f48 <HAL_TIM_Base_Start_IT+0x64>
 8003f4e:	2000      	movs	r0, #0
 8003f50:	e7fa      	b.n	8003f48 <HAL_TIM_Base_Start_IT+0x64>
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	40012c00 	.word	0x40012c00
 8003f58:	40000400 	.word	0x40000400
 8003f5c:	40000800 	.word	0x40000800
 8003f60:	40014000 	.word	0x40014000
 8003f64:	00010007 	.word	0x00010007

08003f68 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f68:	4770      	bx	lr

08003f6a <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f6a:	4770      	bx	lr

08003f6c <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f6c:	4770      	bx	lr

08003f6e <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f6e:	4770      	bx	lr

08003f70 <HAL_TIM_IRQHandler>:
{
 8003f70:	b570      	push	{r4, r5, r6, lr}
 8003f72:	0005      	movs	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 8003f74:	6803      	ldr	r3, [r0, #0]
 8003f76:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f78:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f7a:	07a2      	lsls	r2, r4, #30
 8003f7c:	d50e      	bpl.n	8003f9c <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f7e:	07b2      	lsls	r2, r6, #30
 8003f80:	d50c      	bpl.n	8003f9c <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f82:	2203      	movs	r2, #3
 8003f84:	4252      	negs	r2, r2
 8003f86:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f8c:	6803      	ldr	r3, [r0, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	079b      	lsls	r3, r3, #30
 8003f92:	d057      	beq.n	8004044 <HAL_TIM_IRQHandler+0xd4>
          HAL_TIM_IC_CaptureCallback(htim);
 8003f94:	f7ff ffe9 	bl	8003f6a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f9c:	0763      	lsls	r3, r4, #29
 8003f9e:	d512      	bpl.n	8003fc6 <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fa0:	0773      	lsls	r3, r6, #29
 8003fa2:	d510      	bpl.n	8003fc6 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fa4:	682b      	ldr	r3, [r5, #0]
 8003fa6:	2205      	movs	r2, #5
 8003fa8:	4252      	negs	r2, r2
 8003faa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fac:	2302      	movs	r3, #2
 8003fae:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fb0:	682b      	ldr	r3, [r5, #0]
 8003fb2:	699a      	ldr	r2, [r3, #24]
 8003fb4:	23c0      	movs	r3, #192	; 0xc0
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	421a      	tst	r2, r3
 8003fba:	d049      	beq.n	8004050 <HAL_TIM_IRQHandler+0xe0>
        HAL_TIM_IC_CaptureCallback(htim);
 8003fbc:	0028      	movs	r0, r5
 8003fbe:	f7ff ffd4 	bl	8003f6a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fc6:	0723      	lsls	r3, r4, #28
 8003fc8:	d510      	bpl.n	8003fec <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fca:	0733      	lsls	r3, r6, #28
 8003fcc:	d50e      	bpl.n	8003fec <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003fce:	682b      	ldr	r3, [r5, #0]
 8003fd0:	2209      	movs	r2, #9
 8003fd2:	4252      	negs	r2, r2
 8003fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fd6:	2304      	movs	r3, #4
 8003fd8:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fda:	682b      	ldr	r3, [r5, #0]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	079b      	lsls	r3, r3, #30
 8003fe0:	d03d      	beq.n	800405e <HAL_TIM_IRQHandler+0xee>
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe2:	0028      	movs	r0, r5
 8003fe4:	f7ff ffc1 	bl	8003f6a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003fec:	06e3      	lsls	r3, r4, #27
 8003fee:	d512      	bpl.n	8004016 <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ff0:	06f3      	lsls	r3, r6, #27
 8003ff2:	d510      	bpl.n	8004016 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ff4:	682b      	ldr	r3, [r5, #0]
 8003ff6:	2211      	movs	r2, #17
 8003ff8:	4252      	negs	r2, r2
 8003ffa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ffc:	2308      	movs	r3, #8
 8003ffe:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004000:	682b      	ldr	r3, [r5, #0]
 8004002:	69da      	ldr	r2, [r3, #28]
 8004004:	23c0      	movs	r3, #192	; 0xc0
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	421a      	tst	r2, r3
 800400a:	d02f      	beq.n	800406c <HAL_TIM_IRQHandler+0xfc>
        HAL_TIM_IC_CaptureCallback(htim);
 800400c:	0028      	movs	r0, r5
 800400e:	f7ff ffac 	bl	8003f6a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004012:	2300      	movs	r3, #0
 8004014:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004016:	07e3      	lsls	r3, r4, #31
 8004018:	d501      	bpl.n	800401e <HAL_TIM_IRQHandler+0xae>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800401a:	07f3      	lsls	r3, r6, #31
 800401c:	d42d      	bmi.n	800407a <HAL_TIM_IRQHandler+0x10a>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800401e:	2382      	movs	r3, #130	; 0x82
 8004020:	019b      	lsls	r3, r3, #6
 8004022:	421c      	tst	r4, r3
 8004024:	d001      	beq.n	800402a <HAL_TIM_IRQHandler+0xba>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004026:	0633      	lsls	r3, r6, #24
 8004028:	d42f      	bmi.n	800408a <HAL_TIM_IRQHandler+0x11a>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800402a:	05e3      	lsls	r3, r4, #23
 800402c:	d501      	bpl.n	8004032 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800402e:	0633      	lsls	r3, r6, #24
 8004030:	d432      	bmi.n	8004098 <HAL_TIM_IRQHandler+0x128>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004032:	0663      	lsls	r3, r4, #25
 8004034:	d501      	bpl.n	800403a <HAL_TIM_IRQHandler+0xca>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004036:	0673      	lsls	r3, r6, #25
 8004038:	d435      	bmi.n	80040a6 <HAL_TIM_IRQHandler+0x136>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800403a:	06a4      	lsls	r4, r4, #26
 800403c:	d501      	bpl.n	8004042 <HAL_TIM_IRQHandler+0xd2>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800403e:	06b6      	lsls	r6, r6, #26
 8004040:	d439      	bmi.n	80040b6 <HAL_TIM_IRQHandler+0x146>
}
 8004042:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004044:	f7ff ff90 	bl	8003f68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004048:	0028      	movs	r0, r5
 800404a:	f7ff ff8f 	bl	8003f6c <HAL_TIM_PWM_PulseFinishedCallback>
 800404e:	e7a3      	b.n	8003f98 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004050:	0028      	movs	r0, r5
 8004052:	f7ff ff89 	bl	8003f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004056:	0028      	movs	r0, r5
 8004058:	f7ff ff88 	bl	8003f6c <HAL_TIM_PWM_PulseFinishedCallback>
 800405c:	e7b1      	b.n	8003fc2 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800405e:	0028      	movs	r0, r5
 8004060:	f7ff ff82 	bl	8003f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004064:	0028      	movs	r0, r5
 8004066:	f7ff ff81 	bl	8003f6c <HAL_TIM_PWM_PulseFinishedCallback>
 800406a:	e7bd      	b.n	8003fe8 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800406c:	0028      	movs	r0, r5
 800406e:	f7ff ff7b 	bl	8003f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004072:	0028      	movs	r0, r5
 8004074:	f7ff ff7a 	bl	8003f6c <HAL_TIM_PWM_PulseFinishedCallback>
 8004078:	e7cb      	b.n	8004012 <HAL_TIM_IRQHandler+0xa2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800407a:	682b      	ldr	r3, [r5, #0]
 800407c:	2202      	movs	r2, #2
 800407e:	4252      	negs	r2, r2
 8004080:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004082:	0028      	movs	r0, r5
 8004084:	f7fe fd74 	bl	8002b70 <HAL_TIM_PeriodElapsedCallback>
 8004088:	e7c9      	b.n	800401e <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800408a:	682b      	ldr	r3, [r5, #0]
 800408c:	4a0e      	ldr	r2, [pc, #56]	; (80040c8 <HAL_TIM_IRQHandler+0x158>)
 800408e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004090:	0028      	movs	r0, r5
 8004092:	f000 f9c4 	bl	800441e <HAL_TIMEx_BreakCallback>
 8004096:	e7c8      	b.n	800402a <HAL_TIM_IRQHandler+0xba>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004098:	682b      	ldr	r3, [r5, #0]
 800409a:	4a0c      	ldr	r2, [pc, #48]	; (80040cc <HAL_TIM_IRQHandler+0x15c>)
 800409c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800409e:	0028      	movs	r0, r5
 80040a0:	f000 f9be 	bl	8004420 <HAL_TIMEx_Break2Callback>
 80040a4:	e7c5      	b.n	8004032 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040a6:	682b      	ldr	r3, [r5, #0]
 80040a8:	2241      	movs	r2, #65	; 0x41
 80040aa:	4252      	negs	r2, r2
 80040ac:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80040ae:	0028      	movs	r0, r5
 80040b0:	f7ff ff5d 	bl	8003f6e <HAL_TIM_TriggerCallback>
 80040b4:	e7c1      	b.n	800403a <HAL_TIM_IRQHandler+0xca>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040b6:	682b      	ldr	r3, [r5, #0]
 80040b8:	2221      	movs	r2, #33	; 0x21
 80040ba:	4252      	negs	r2, r2
 80040bc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80040be:	0028      	movs	r0, r5
 80040c0:	f000 f9ac 	bl	800441c <HAL_TIMEx_CommutCallback>
}
 80040c4:	e7bd      	b.n	8004042 <HAL_TIM_IRQHandler+0xd2>
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	ffffdf7f 	.word	0xffffdf7f
 80040cc:	fffffeff 	.word	0xfffffeff

080040d0 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040d0:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040d2:	4a27      	ldr	r2, [pc, #156]	; (8004170 <TIM_Base_SetConfig+0xa0>)
 80040d4:	4290      	cmp	r0, r2
 80040d6:	d009      	beq.n	80040ec <TIM_Base_SetConfig+0x1c>
 80040d8:	2280      	movs	r2, #128	; 0x80
 80040da:	05d2      	lsls	r2, r2, #23
 80040dc:	4290      	cmp	r0, r2
 80040de:	d005      	beq.n	80040ec <TIM_Base_SetConfig+0x1c>
 80040e0:	4a24      	ldr	r2, [pc, #144]	; (8004174 <TIM_Base_SetConfig+0xa4>)
 80040e2:	4290      	cmp	r0, r2
 80040e4:	d002      	beq.n	80040ec <TIM_Base_SetConfig+0x1c>
 80040e6:	4a24      	ldr	r2, [pc, #144]	; (8004178 <TIM_Base_SetConfig+0xa8>)
 80040e8:	4290      	cmp	r0, r2
 80040ea:	d103      	bne.n	80040f4 <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040ec:	2270      	movs	r2, #112	; 0x70
 80040ee:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80040f0:	684a      	ldr	r2, [r1, #4]
 80040f2:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040f4:	4a1e      	ldr	r2, [pc, #120]	; (8004170 <TIM_Base_SetConfig+0xa0>)
 80040f6:	4290      	cmp	r0, r2
 80040f8:	d015      	beq.n	8004126 <TIM_Base_SetConfig+0x56>
 80040fa:	2280      	movs	r2, #128	; 0x80
 80040fc:	05d2      	lsls	r2, r2, #23
 80040fe:	4290      	cmp	r0, r2
 8004100:	d011      	beq.n	8004126 <TIM_Base_SetConfig+0x56>
 8004102:	4a1c      	ldr	r2, [pc, #112]	; (8004174 <TIM_Base_SetConfig+0xa4>)
 8004104:	4290      	cmp	r0, r2
 8004106:	d00e      	beq.n	8004126 <TIM_Base_SetConfig+0x56>
 8004108:	4a1b      	ldr	r2, [pc, #108]	; (8004178 <TIM_Base_SetConfig+0xa8>)
 800410a:	4290      	cmp	r0, r2
 800410c:	d00b      	beq.n	8004126 <TIM_Base_SetConfig+0x56>
 800410e:	4a1b      	ldr	r2, [pc, #108]	; (800417c <TIM_Base_SetConfig+0xac>)
 8004110:	4290      	cmp	r0, r2
 8004112:	d008      	beq.n	8004126 <TIM_Base_SetConfig+0x56>
 8004114:	4a1a      	ldr	r2, [pc, #104]	; (8004180 <TIM_Base_SetConfig+0xb0>)
 8004116:	4290      	cmp	r0, r2
 8004118:	d005      	beq.n	8004126 <TIM_Base_SetConfig+0x56>
 800411a:	4a1a      	ldr	r2, [pc, #104]	; (8004184 <TIM_Base_SetConfig+0xb4>)
 800411c:	4290      	cmp	r0, r2
 800411e:	d002      	beq.n	8004126 <TIM_Base_SetConfig+0x56>
 8004120:	4a19      	ldr	r2, [pc, #100]	; (8004188 <TIM_Base_SetConfig+0xb8>)
 8004122:	4290      	cmp	r0, r2
 8004124:	d103      	bne.n	800412e <TIM_Base_SetConfig+0x5e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004126:	4a19      	ldr	r2, [pc, #100]	; (800418c <TIM_Base_SetConfig+0xbc>)
 8004128:	401a      	ands	r2, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800412a:	68cb      	ldr	r3, [r1, #12]
 800412c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800412e:	2280      	movs	r2, #128	; 0x80
 8004130:	4393      	bics	r3, r2
 8004132:	694a      	ldr	r2, [r1, #20]
 8004134:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004136:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004138:	688b      	ldr	r3, [r1, #8]
 800413a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800413c:	680b      	ldr	r3, [r1, #0]
 800413e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004140:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <TIM_Base_SetConfig+0xa0>)
 8004142:	4298      	cmp	r0, r3
 8004144:	d008      	beq.n	8004158 <TIM_Base_SetConfig+0x88>
 8004146:	4b0e      	ldr	r3, [pc, #56]	; (8004180 <TIM_Base_SetConfig+0xb0>)
 8004148:	4298      	cmp	r0, r3
 800414a:	d005      	beq.n	8004158 <TIM_Base_SetConfig+0x88>
 800414c:	4b0d      	ldr	r3, [pc, #52]	; (8004184 <TIM_Base_SetConfig+0xb4>)
 800414e:	4298      	cmp	r0, r3
 8004150:	d002      	beq.n	8004158 <TIM_Base_SetConfig+0x88>
 8004152:	4b0d      	ldr	r3, [pc, #52]	; (8004188 <TIM_Base_SetConfig+0xb8>)
 8004154:	4298      	cmp	r0, r3
 8004156:	d101      	bne.n	800415c <TIM_Base_SetConfig+0x8c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004158:	690b      	ldr	r3, [r1, #16]
 800415a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800415c:	2301      	movs	r3, #1
 800415e:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004160:	6902      	ldr	r2, [r0, #16]
 8004162:	4213      	tst	r3, r2
 8004164:	d003      	beq.n	800416e <TIM_Base_SetConfig+0x9e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004166:	6903      	ldr	r3, [r0, #16]
 8004168:	2201      	movs	r2, #1
 800416a:	4393      	bics	r3, r2
 800416c:	6103      	str	r3, [r0, #16]
  }
}
 800416e:	4770      	bx	lr
 8004170:	40012c00 	.word	0x40012c00
 8004174:	40000400 	.word	0x40000400
 8004178:	40000800 	.word	0x40000800
 800417c:	40002000 	.word	0x40002000
 8004180:	40014000 	.word	0x40014000
 8004184:	40014400 	.word	0x40014400
 8004188:	40014800 	.word	0x40014800
 800418c:	fffffcff 	.word	0xfffffcff

08004190 <HAL_TIM_Base_Init>:
{
 8004190:	b570      	push	{r4, r5, r6, lr}
 8004192:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8004194:	d02a      	beq.n	80041ec <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004196:	233d      	movs	r3, #61	; 0x3d
 8004198:	5cc3      	ldrb	r3, [r0, r3]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d020      	beq.n	80041e0 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 800419e:	253d      	movs	r5, #61	; 0x3d
 80041a0:	2302      	movs	r3, #2
 80041a2:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a4:	0021      	movs	r1, r4
 80041a6:	c901      	ldmia	r1!, {r0}
 80041a8:	f7ff ff92 	bl	80040d0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041ac:	2301      	movs	r3, #1
 80041ae:	2248      	movs	r2, #72	; 0x48
 80041b0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b2:	3a0a      	subs	r2, #10
 80041b4:	54a3      	strb	r3, [r4, r2]
 80041b6:	3201      	adds	r2, #1
 80041b8:	54a3      	strb	r3, [r4, r2]
 80041ba:	3201      	adds	r2, #1
 80041bc:	54a3      	strb	r3, [r4, r2]
 80041be:	3201      	adds	r2, #1
 80041c0:	54a3      	strb	r3, [r4, r2]
 80041c2:	3201      	adds	r2, #1
 80041c4:	54a3      	strb	r3, [r4, r2]
 80041c6:	3201      	adds	r2, #1
 80041c8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ca:	3201      	adds	r2, #1
 80041cc:	54a3      	strb	r3, [r4, r2]
 80041ce:	3201      	adds	r2, #1
 80041d0:	54a3      	strb	r3, [r4, r2]
 80041d2:	3201      	adds	r2, #1
 80041d4:	54a3      	strb	r3, [r4, r2]
 80041d6:	3201      	adds	r2, #1
 80041d8:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80041da:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80041dc:	2000      	movs	r0, #0
}
 80041de:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80041e0:	333c      	adds	r3, #60	; 0x3c
 80041e2:	2200      	movs	r2, #0
 80041e4:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80041e6:	f7ff fe7c 	bl	8003ee2 <HAL_TIM_Base_MspInit>
 80041ea:	e7d8      	b.n	800419e <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80041ec:	2001      	movs	r0, #1
 80041ee:	e7f6      	b.n	80041de <HAL_TIM_Base_Init+0x4e>

080041f0 <HAL_TIM_Encoder_Init>:
{
 80041f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041f2:	46c6      	mov	lr, r8
 80041f4:	b500      	push	{lr}
 80041f6:	0004      	movs	r4, r0
 80041f8:	000d      	movs	r5, r1
  if (htim == NULL)
 80041fa:	2800      	cmp	r0, #0
 80041fc:	d04d      	beq.n	800429a <HAL_TIM_Encoder_Init+0xaa>
  if (htim->State == HAL_TIM_STATE_RESET)
 80041fe:	233d      	movs	r3, #61	; 0x3d
 8004200:	5cc3      	ldrb	r3, [r0, r3]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d043      	beq.n	800428e <HAL_TIM_Encoder_Init+0x9e>
  htim->State = HAL_TIM_STATE_BUSY;
 8004206:	263d      	movs	r6, #61	; 0x3d
 8004208:	2302      	movs	r3, #2
 800420a:	55a3      	strb	r3, [r4, r6]
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800420c:	6822      	ldr	r2, [r4, #0]
 800420e:	6893      	ldr	r3, [r2, #8]
 8004210:	4923      	ldr	r1, [pc, #140]	; (80042a0 <HAL_TIM_Encoder_Init+0xb0>)
 8004212:	400b      	ands	r3, r1
 8004214:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004216:	0021      	movs	r1, r4
 8004218:	c901      	ldmia	r1!, {r0}
 800421a:	f7ff ff59 	bl	80040d0 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 800421e:	6821      	ldr	r1, [r4, #0]
 8004220:	688b      	ldr	r3, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8004222:	698a      	ldr	r2, [r1, #24]
  tmpccer = htim->Instance->CCER;
 8004224:	6a0f      	ldr	r7, [r1, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8004226:	6828      	ldr	r0, [r5, #0]
 8004228:	4318      	orrs	r0, r3
 800422a:	4680      	mov	r8, r0
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800422c:	4b1d      	ldr	r3, [pc, #116]	; (80042a4 <HAL_TIM_Encoder_Init+0xb4>)
 800422e:	401a      	ands	r2, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004230:	68ab      	ldr	r3, [r5, #8]
 8004232:	69a8      	ldr	r0, [r5, #24]
 8004234:	0200      	lsls	r0, r0, #8
 8004236:	4303      	orrs	r3, r0
 8004238:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800423a:	4a1b      	ldr	r2, [pc, #108]	; (80042a8 <HAL_TIM_Encoder_Init+0xb8>)
 800423c:	4013      	ands	r3, r2
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800423e:	68ea      	ldr	r2, [r5, #12]
 8004240:	69e8      	ldr	r0, [r5, #28]
 8004242:	0200      	lsls	r0, r0, #8
 8004244:	4302      	orrs	r2, r0
 8004246:	431a      	orrs	r2, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004248:	692b      	ldr	r3, [r5, #16]
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	6a28      	ldr	r0, [r5, #32]
 800424e:	0300      	lsls	r0, r0, #12
 8004250:	4303      	orrs	r3, r0
 8004252:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004254:	22aa      	movs	r2, #170	; 0xaa
 8004256:	4397      	bics	r7, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004258:	686a      	ldr	r2, [r5, #4]
 800425a:	696d      	ldr	r5, [r5, #20]
 800425c:	012d      	lsls	r5, r5, #4
 800425e:	432a      	orrs	r2, r5
 8004260:	433a      	orrs	r2, r7
  htim->Instance->SMCR = tmpsmcr;
 8004262:	4640      	mov	r0, r8
 8004264:	6088      	str	r0, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8004266:	6821      	ldr	r1, [r4, #0]
 8004268:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 800426a:	6823      	ldr	r3, [r4, #0]
 800426c:	621a      	str	r2, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800426e:	2301      	movs	r3, #1
 8004270:	2248      	movs	r2, #72	; 0x48
 8004272:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004274:	3a0a      	subs	r2, #10
 8004276:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004278:	3201      	adds	r2, #1
 800427a:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800427c:	3205      	adds	r2, #5
 800427e:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004280:	3201      	adds	r2, #1
 8004282:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8004284:	55a3      	strb	r3, [r4, r6]
  return HAL_OK;
 8004286:	2000      	movs	r0, #0
}
 8004288:	bc80      	pop	{r7}
 800428a:	46b8      	mov	r8, r7
 800428c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 800428e:	333c      	adds	r3, #60	; 0x3c
 8004290:	2200      	movs	r2, #0
 8004292:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Encoder_MspInit(htim);
 8004294:	f7fe fd7c 	bl	8002d90 <HAL_TIM_Encoder_MspInit>
 8004298:	e7b5      	b.n	8004206 <HAL_TIM_Encoder_Init+0x16>
    return HAL_ERROR;
 800429a:	2001      	movs	r0, #1
 800429c:	e7f4      	b.n	8004288 <HAL_TIM_Encoder_Init+0x98>
 800429e:	46c0      	nop			; (mov r8, r8)
 80042a0:	fffebff8 	.word	0xfffebff8
 80042a4:	fffffcfc 	.word	0xfffffcfc
 80042a8:	ffff0303 	.word	0xffff0303

080042ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042ac:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042ae:	231f      	movs	r3, #31
 80042b0:	4019      	ands	r1, r3
 80042b2:	2401      	movs	r4, #1
 80042b4:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042b6:	6a03      	ldr	r3, [r0, #32]
 80042b8:	43a3      	bics	r3, r4
 80042ba:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042bc:	6a03      	ldr	r3, [r0, #32]
 80042be:	408a      	lsls	r2, r1
 80042c0:	4313      	orrs	r3, r2
 80042c2:	6203      	str	r3, [r0, #32]
}
 80042c4:	bd10      	pop	{r4, pc}

080042c6 <HAL_TIM_Encoder_Start>:
{
 80042c6:	b570      	push	{r4, r5, r6, lr}
 80042c8:	0004      	movs	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80042ca:	233e      	movs	r3, #62	; 0x3e
 80042cc:	5cc0      	ldrb	r0, [r0, r3]
 80042ce:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80042d0:	3301      	adds	r3, #1
 80042d2:	5ce3      	ldrb	r3, [r4, r3]
 80042d4:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80042d6:	2244      	movs	r2, #68	; 0x44
 80042d8:	5ca2      	ldrb	r2, [r4, r2]
 80042da:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80042dc:	2545      	movs	r5, #69	; 0x45
 80042de:	5d65      	ldrb	r5, [r4, r5]
 80042e0:	b2ed      	uxtb	r5, r5
  if (Channel == TIM_CHANNEL_1)
 80042e2:	2900      	cmp	r1, #0
 80042e4:	d117      	bne.n	8004316 <HAL_TIM_Encoder_Start+0x50>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80042e6:	2801      	cmp	r0, #1
 80042e8:	d145      	bne.n	8004376 <HAL_TIM_Encoder_Start+0xb0>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80042ea:	2a01      	cmp	r2, #1
 80042ec:	d144      	bne.n	8004378 <HAL_TIM_Encoder_Start+0xb2>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042ee:	2302      	movs	r3, #2
 80042f0:	323d      	adds	r2, #61	; 0x3d
 80042f2:	54a3      	strb	r3, [r4, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042f4:	3206      	adds	r2, #6
 80042f6:	54a3      	strb	r3, [r4, r2]
  switch (Channel)
 80042f8:	2900      	cmp	r1, #0
 80042fa:	d02a      	beq.n	8004352 <HAL_TIM_Encoder_Start+0x8c>
 80042fc:	2904      	cmp	r1, #4
 80042fe:	d034      	beq.n	800436a <HAL_TIM_Encoder_Start+0xa4>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004300:	6820      	ldr	r0, [r4, #0]
 8004302:	2201      	movs	r2, #1
 8004304:	2100      	movs	r1, #0
 8004306:	f7ff ffd1 	bl	80042ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800430a:	6820      	ldr	r0, [r4, #0]
 800430c:	2201      	movs	r2, #1
 800430e:	2104      	movs	r1, #4
 8004310:	f7ff ffcc 	bl	80042ac <TIM_CCxChannelCmd>
      break;
 8004314:	e022      	b.n	800435c <HAL_TIM_Encoder_Start+0x96>
  else if (Channel == TIM_CHANNEL_2)
 8004316:	2904      	cmp	r1, #4
 8004318:	d011      	beq.n	800433e <HAL_TIM_Encoder_Start+0x78>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800431a:	2801      	cmp	r0, #1
 800431c:	d131      	bne.n	8004382 <HAL_TIM_Encoder_Start+0xbc>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800431e:	2b01      	cmp	r3, #1
 8004320:	d12a      	bne.n	8004378 <HAL_TIM_Encoder_Start+0xb2>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004322:	2a01      	cmp	r2, #1
 8004324:	d12f      	bne.n	8004386 <HAL_TIM_Encoder_Start+0xc0>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004326:	2d01      	cmp	r5, #1
 8004328:	d12f      	bne.n	800438a <HAL_TIM_Encoder_Start+0xc4>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800432a:	3301      	adds	r3, #1
 800432c:	323d      	adds	r2, #61	; 0x3d
 800432e:	54a3      	strb	r3, [r4, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004330:	3201      	adds	r2, #1
 8004332:	54a3      	strb	r3, [r4, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004334:	3205      	adds	r2, #5
 8004336:	54a3      	strb	r3, [r4, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004338:	3201      	adds	r2, #1
 800433a:	54a3      	strb	r3, [r4, r2]
 800433c:	e7dc      	b.n	80042f8 <HAL_TIM_Encoder_Start+0x32>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800433e:	2b01      	cmp	r3, #1
 8004340:	d11b      	bne.n	800437a <HAL_TIM_Encoder_Start+0xb4>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004342:	2d01      	cmp	r5, #1
 8004344:	d11b      	bne.n	800437e <HAL_TIM_Encoder_Start+0xb8>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004346:	3301      	adds	r3, #1
 8004348:	223f      	movs	r2, #63	; 0x3f
 800434a:	54a3      	strb	r3, [r4, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800434c:	3206      	adds	r2, #6
 800434e:	54a3      	strb	r3, [r4, r2]
 8004350:	e7d2      	b.n	80042f8 <HAL_TIM_Encoder_Start+0x32>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004352:	6820      	ldr	r0, [r4, #0]
 8004354:	2201      	movs	r2, #1
 8004356:	2100      	movs	r1, #0
 8004358:	f7ff ffa8 	bl	80042ac <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 800435c:	6822      	ldr	r2, [r4, #0]
 800435e:	6813      	ldr	r3, [r2, #0]
 8004360:	2101      	movs	r1, #1
 8004362:	430b      	orrs	r3, r1
 8004364:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004366:	2000      	movs	r0, #0
 8004368:	e006      	b.n	8004378 <HAL_TIM_Encoder_Start+0xb2>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800436a:	6820      	ldr	r0, [r4, #0]
 800436c:	2201      	movs	r2, #1
 800436e:	2104      	movs	r1, #4
 8004370:	f7ff ff9c 	bl	80042ac <TIM_CCxChannelCmd>
      break;
 8004374:	e7f2      	b.n	800435c <HAL_TIM_Encoder_Start+0x96>
      return HAL_ERROR;
 8004376:	2001      	movs	r0, #1
}
 8004378:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800437a:	2001      	movs	r0, #1
 800437c:	e7fc      	b.n	8004378 <HAL_TIM_Encoder_Start+0xb2>
 800437e:	0018      	movs	r0, r3
 8004380:	e7fa      	b.n	8004378 <HAL_TIM_Encoder_Start+0xb2>
      return HAL_ERROR;
 8004382:	2001      	movs	r0, #1
 8004384:	e7f8      	b.n	8004378 <HAL_TIM_Encoder_Start+0xb2>
 8004386:	0018      	movs	r0, r3
 8004388:	e7f6      	b.n	8004378 <HAL_TIM_Encoder_Start+0xb2>
 800438a:	0010      	movs	r0, r2
 800438c:	e7f4      	b.n	8004378 <HAL_TIM_Encoder_Start+0xb2>
	...

08004390 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004390:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004392:	233c      	movs	r3, #60	; 0x3c
 8004394:	5cc3      	ldrb	r3, [r0, r3]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d033      	beq.n	8004402 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800439a:	233c      	movs	r3, #60	; 0x3c
 800439c:	2201      	movs	r2, #1
 800439e:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a0:	3301      	adds	r3, #1
 80043a2:	3201      	adds	r2, #1
 80043a4:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043a6:	6802      	ldr	r2, [r0, #0]
 80043a8:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043aa:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043ac:	4c16      	ldr	r4, [pc, #88]	; (8004408 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 80043ae:	42a2      	cmp	r2, r4
 80043b0:	d022      	beq.n	80043f8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043b2:	2470      	movs	r4, #112	; 0x70
 80043b4:	43a3      	bics	r3, r4
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043b6:	680c      	ldr	r4, [r1, #0]
 80043b8:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043ba:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043bc:	6803      	ldr	r3, [r0, #0]
 80043be:	4a12      	ldr	r2, [pc, #72]	; (8004408 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00c      	beq.n	80043de <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80043c4:	2280      	movs	r2, #128	; 0x80
 80043c6:	05d2      	lsls	r2, r2, #23
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d008      	beq.n	80043de <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80043cc:	4a0f      	ldr	r2, [pc, #60]	; (800440c <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d005      	beq.n	80043de <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80043d2:	4a0f      	ldr	r2, [pc, #60]	; (8004410 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d002      	beq.n	80043de <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80043d8:	4a0e      	ldr	r2, [pc, #56]	; (8004414 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d104      	bne.n	80043e8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043de:	2280      	movs	r2, #128	; 0x80
 80043e0:	4395      	bics	r5, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043e2:	688a      	ldr	r2, [r1, #8]
 80043e4:	432a      	orrs	r2, r5

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043e8:	233d      	movs	r3, #61	; 0x3d
 80043ea:	2201      	movs	r2, #1
 80043ec:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 80043ee:	3b01      	subs	r3, #1
 80043f0:	2200      	movs	r2, #0
 80043f2:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80043f4:	2000      	movs	r0, #0
}
 80043f6:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043f8:	4c07      	ldr	r4, [pc, #28]	; (8004418 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 80043fa:	4023      	ands	r3, r4
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043fc:	684c      	ldr	r4, [r1, #4]
 80043fe:	4323      	orrs	r3, r4
 8004400:	e7d7      	b.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8004402:	2002      	movs	r0, #2
 8004404:	e7f7      	b.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	40012c00 	.word	0x40012c00
 800440c:	40000400 	.word	0x40000400
 8004410:	40000800 	.word	0x40000800
 8004414:	40014000 	.word	0x40014000
 8004418:	ff0fffff 	.word	0xff0fffff

0800441c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800441c:	4770      	bx	lr

0800441e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800441e:	4770      	bx	lr

08004420 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004420:	4770      	bx	lr
	...

08004424 <LL_TIM_Init>:
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004424:	6803      	ldr	r3, [r0, #0]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004426:	4a23      	ldr	r2, [pc, #140]	; (80044b4 <LL_TIM_Init+0x90>)
 8004428:	4290      	cmp	r0, r2
 800442a:	d009      	beq.n	8004440 <LL_TIM_Init+0x1c>
 800442c:	2280      	movs	r2, #128	; 0x80
 800442e:	05d2      	lsls	r2, r2, #23
 8004430:	4290      	cmp	r0, r2
 8004432:	d005      	beq.n	8004440 <LL_TIM_Init+0x1c>
 8004434:	4a20      	ldr	r2, [pc, #128]	; (80044b8 <LL_TIM_Init+0x94>)
 8004436:	4290      	cmp	r0, r2
 8004438:	d002      	beq.n	8004440 <LL_TIM_Init+0x1c>
 800443a:	4a20      	ldr	r2, [pc, #128]	; (80044bc <LL_TIM_Init+0x98>)
 800443c:	4290      	cmp	r0, r2
 800443e:	d103      	bne.n	8004448 <LL_TIM_Init+0x24>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004440:	2270      	movs	r2, #112	; 0x70
 8004442:	4393      	bics	r3, r2
 8004444:	684a      	ldr	r2, [r1, #4]
 8004446:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004448:	4a1a      	ldr	r2, [pc, #104]	; (80044b4 <LL_TIM_Init+0x90>)
 800444a:	4290      	cmp	r0, r2
 800444c:	d015      	beq.n	800447a <LL_TIM_Init+0x56>
 800444e:	2280      	movs	r2, #128	; 0x80
 8004450:	05d2      	lsls	r2, r2, #23
 8004452:	4290      	cmp	r0, r2
 8004454:	d011      	beq.n	800447a <LL_TIM_Init+0x56>
 8004456:	4a18      	ldr	r2, [pc, #96]	; (80044b8 <LL_TIM_Init+0x94>)
 8004458:	4290      	cmp	r0, r2
 800445a:	d00e      	beq.n	800447a <LL_TIM_Init+0x56>
 800445c:	4a17      	ldr	r2, [pc, #92]	; (80044bc <LL_TIM_Init+0x98>)
 800445e:	4290      	cmp	r0, r2
 8004460:	d00b      	beq.n	800447a <LL_TIM_Init+0x56>
 8004462:	4a17      	ldr	r2, [pc, #92]	; (80044c0 <LL_TIM_Init+0x9c>)
 8004464:	4290      	cmp	r0, r2
 8004466:	d008      	beq.n	800447a <LL_TIM_Init+0x56>
 8004468:	4a16      	ldr	r2, [pc, #88]	; (80044c4 <LL_TIM_Init+0xa0>)
 800446a:	4290      	cmp	r0, r2
 800446c:	d005      	beq.n	800447a <LL_TIM_Init+0x56>
 800446e:	4a16      	ldr	r2, [pc, #88]	; (80044c8 <LL_TIM_Init+0xa4>)
 8004470:	4290      	cmp	r0, r2
 8004472:	d002      	beq.n	800447a <LL_TIM_Init+0x56>
 8004474:	4a15      	ldr	r2, [pc, #84]	; (80044cc <LL_TIM_Init+0xa8>)
 8004476:	4290      	cmp	r0, r2
 8004478:	d103      	bne.n	8004482 <LL_TIM_Init+0x5e>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800447a:	4a15      	ldr	r2, [pc, #84]	; (80044d0 <LL_TIM_Init+0xac>)
 800447c:	401a      	ands	r2, r3
 800447e:	68cb      	ldr	r3, [r1, #12]
 8004480:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004482:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004484:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004486:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004488:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800448a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800448c:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <LL_TIM_Init+0x90>)
 800448e:	4298      	cmp	r0, r3
 8004490:	d008      	beq.n	80044a4 <LL_TIM_Init+0x80>
 8004492:	4b0c      	ldr	r3, [pc, #48]	; (80044c4 <LL_TIM_Init+0xa0>)
 8004494:	4298      	cmp	r0, r3
 8004496:	d005      	beq.n	80044a4 <LL_TIM_Init+0x80>
 8004498:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <LL_TIM_Init+0xa4>)
 800449a:	4298      	cmp	r0, r3
 800449c:	d002      	beq.n	80044a4 <LL_TIM_Init+0x80>
 800449e:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <LL_TIM_Init+0xa8>)
 80044a0:	4298      	cmp	r0, r3
 80044a2:	d101      	bne.n	80044a8 <LL_TIM_Init+0x84>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80044a4:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80044a6:	6303      	str	r3, [r0, #48]	; 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80044a8:	6943      	ldr	r3, [r0, #20]
 80044aa:	2201      	movs	r2, #1
 80044ac:	4313      	orrs	r3, r2
 80044ae:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 80044b0:	2000      	movs	r0, #0
 80044b2:	4770      	bx	lr
 80044b4:	40012c00 	.word	0x40012c00
 80044b8:	40000400 	.word	0x40000400
 80044bc:	40000800 	.word	0x40000800
 80044c0:	40002000 	.word	0x40002000
 80044c4:	40014000 	.word	0x40014000
 80044c8:	40014400 	.word	0x40014400
 80044cc:	40014800 	.word	0x40014800
 80044d0:	fffffcff 	.word	0xfffffcff

080044d4 <app_encoder_init>:
float result3;

/*
 * Initialization function
 */
void app_encoder_init(void){
 80044d4:	b510      	push	{r4, lr}
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80044d6:	4b07      	ldr	r3, [pc, #28]	; (80044f4 <app_encoder_init+0x20>)
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	2101      	movs	r1, #1
 80044dc:	430a      	orrs	r2, r1
 80044de:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80044e0:	2202      	movs	r2, #2
 80044e2:	4252      	negs	r2, r2
 80044e4:	611a      	str	r2, [r3, #16]
	//TIM7 initialization
	LL_TIM_EnableIT_UPDATE(TIM7); //Enable interrupt generation when timer goes to max value and UPDATE event flag is set
	LL_TIM_ClearFlag_UPDATE(TIM7); //Clear update flag on TIMER6

	//Init 7 segment display
	max7219_Init( 7 );
 80044e6:	2007      	movs	r0, #7
 80044e8:	f000 f97a 	bl	80047e0 <max7219_Init>
	max7219_Decode_On();
 80044ec:	f000 f986 	bl	80047fc <max7219_Decode_On>
}
 80044f0:	bd10      	pop	{r4, pc}
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	40001400 	.word	0x40001400

080044f8 <app_encoder_loop>:

/*
 * Loop function
 */
void app_encoder_loop(void){
 80044f8:	b570      	push	{r4, r5, r6, lr}
	encoderVal = (TIM2 -> CNT) >> 2;
 80044fa:	2380      	movs	r3, #128	; 0x80
 80044fc:	05db      	lsls	r3, r3, #23
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	089b      	lsrs	r3, r3, #2
 8004502:	4a58      	ldr	r2, [pc, #352]	; (8004664 <app_encoder_loop+0x16c>)
 8004504:	6013      	str	r3, [r2, #0]

	if (encoderVal != encoderValPrev){
 8004506:	4a58      	ldr	r2, [pc, #352]	; (8004668 <app_encoder_loop+0x170>)
 8004508:	6811      	ldr	r1, [r2, #0]
 800450a:	428b      	cmp	r3, r1
 800450c:	d066      	beq.n	80045dc <app_encoder_loop+0xe4>
		switch (encoderPress) {
 800450e:	4a57      	ldr	r2, [pc, #348]	; (800466c <app_encoder_loop+0x174>)
 8004510:	6812      	ldr	r2, [r2, #0]
 8004512:	2a03      	cmp	r2, #3
 8004514:	d04b      	beq.n	80045ae <app_encoder_loop+0xb6>
 8004516:	dc09      	bgt.n	800452c <app_encoder_loop+0x34>
 8004518:	2a01      	cmp	r2, #1
 800451a:	d00f      	beq.n	800453c <app_encoder_loop+0x44>
 800451c:	2a02      	cmp	r2, #2
 800451e:	d112      	bne.n	8004546 <app_encoder_loop+0x4e>
			case 1:
				val = 0.01;
				break;
			case 2:
				val = 0.1;
 8004520:	4a53      	ldr	r2, [pc, #332]	; (8004670 <app_encoder_loop+0x178>)
 8004522:	4c54      	ldr	r4, [pc, #336]	; (8004674 <app_encoder_loop+0x17c>)
 8004524:	4d54      	ldr	r5, [pc, #336]	; (8004678 <app_encoder_loop+0x180>)
 8004526:	6014      	str	r4, [r2, #0]
 8004528:	6055      	str	r5, [r2, #4]
				break;
 800452a:	e00c      	b.n	8004546 <app_encoder_loop+0x4e>
		switch (encoderPress) {
 800452c:	2a04      	cmp	r2, #4
 800452e:	d10a      	bne.n	8004546 <app_encoder_loop+0x4e>
			case 3:
				val = 1;
				break;
			case 4:
				val = 10;
 8004530:	4a4f      	ldr	r2, [pc, #316]	; (8004670 <app_encoder_loop+0x178>)
 8004532:	2400      	movs	r4, #0
 8004534:	4d51      	ldr	r5, [pc, #324]	; (800467c <app_encoder_loop+0x184>)
 8004536:	6014      	str	r4, [r2, #0]
 8004538:	6055      	str	r5, [r2, #4]
				break;
 800453a:	e004      	b.n	8004546 <app_encoder_loop+0x4e>
				val = 0.01;
 800453c:	4a4c      	ldr	r2, [pc, #304]	; (8004670 <app_encoder_loop+0x178>)
 800453e:	4c50      	ldr	r4, [pc, #320]	; (8004680 <app_encoder_loop+0x188>)
 8004540:	4d50      	ldr	r5, [pc, #320]	; (8004684 <app_encoder_loop+0x18c>)
 8004542:	6014      	str	r4, [r2, #0]
 8004544:	6055      	str	r5, [r2, #4]
		}

		//Get direction of encoder turning
		if (encoderVal > encoderValPrev) {
 8004546:	428b      	cmp	r3, r1
 8004548:	dd37      	ble.n	80045ba <app_encoder_loop+0xc2>
			voltageTemp += val;
 800454a:	4c4f      	ldr	r4, [pc, #316]	; (8004688 <app_encoder_loop+0x190>)
 800454c:	4b48      	ldr	r3, [pc, #288]	; (8004670 <app_encoder_loop+0x178>)
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	6820      	ldr	r0, [r4, #0]
 8004554:	6861      	ldr	r1, [r4, #4]
 8004556:	f7fc fe9b 	bl	8001290 <__aeabi_dadd>
 800455a:	6020      	str	r0, [r4, #0]
 800455c:	6061      	str	r1, [r4, #4]
		} else {
			voltageTemp -= val;
		}

		//If required temp value within limits, assign it to voltage
		if (voltageMin <= voltageTemp && voltageTemp <= voltageMax) {
 800455e:	4b4b      	ldr	r3, [pc, #300]	; (800468c <app_encoder_loop+0x194>)
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	6859      	ldr	r1, [r3, #4]
 8004564:	4b48      	ldr	r3, [pc, #288]	; (8004688 <app_encoder_loop+0x190>)
 8004566:	681c      	ldr	r4, [r3, #0]
 8004568:	685d      	ldr	r5, [r3, #4]
 800456a:	0022      	movs	r2, r4
 800456c:	002b      	movs	r3, r5
 800456e:	f7fb ff5f 	bl	8000430 <__aeabi_dcmple>
 8004572:	2800      	cmp	r0, #0
 8004574:	d02c      	beq.n	80045d0 <app_encoder_loop+0xd8>
 8004576:	4b46      	ldr	r3, [pc, #280]	; (8004690 <app_encoder_loop+0x198>)
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	0020      	movs	r0, r4
 800457e:	0029      	movs	r1, r5
 8004580:	f7fb ff56 	bl	8000430 <__aeabi_dcmple>
 8004584:	2800      	cmp	r0, #0
 8004586:	d023      	beq.n	80045d0 <app_encoder_loop+0xd8>
			voltage = ceilf(100*voltageTemp)/100;
 8004588:	2200      	movs	r2, #0
 800458a:	4b42      	ldr	r3, [pc, #264]	; (8004694 <app_encoder_loop+0x19c>)
 800458c:	0020      	movs	r0, r4
 800458e:	0029      	movs	r1, r5
 8004590:	f7fd faea 	bl	8001b68 <__aeabi_dmul>
 8004594:	f7fe f9aa 	bl	80028ec <__aeabi_d2f>
 8004598:	f000 fa72 	bl	8004a80 <ceilf>
 800459c:	493e      	ldr	r1, [pc, #248]	; (8004698 <app_encoder_loop+0x1a0>)
 800459e:	f7fc f957 	bl	8000850 <__aeabi_fdiv>
 80045a2:	f7fe f95b 	bl	800285c <__aeabi_f2d>
 80045a6:	4b3d      	ldr	r3, [pc, #244]	; (800469c <app_encoder_loop+0x1a4>)
 80045a8:	6018      	str	r0, [r3, #0]
 80045aa:	6059      	str	r1, [r3, #4]
 80045ac:	e016      	b.n	80045dc <app_encoder_loop+0xe4>
				val = 1;
 80045ae:	4a30      	ldr	r2, [pc, #192]	; (8004670 <app_encoder_loop+0x178>)
 80045b0:	2400      	movs	r4, #0
 80045b2:	4d3b      	ldr	r5, [pc, #236]	; (80046a0 <app_encoder_loop+0x1a8>)
 80045b4:	6014      	str	r4, [r2, #0]
 80045b6:	6055      	str	r5, [r2, #4]
				break;
 80045b8:	e7c5      	b.n	8004546 <app_encoder_loop+0x4e>
			voltageTemp -= val;
 80045ba:	4c33      	ldr	r4, [pc, #204]	; (8004688 <app_encoder_loop+0x190>)
 80045bc:	4b2c      	ldr	r3, [pc, #176]	; (8004670 <app_encoder_loop+0x178>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	6820      	ldr	r0, [r4, #0]
 80045c4:	6861      	ldr	r1, [r4, #4]
 80045c6:	f7fd fd91 	bl	80020ec <__aeabi_dsub>
 80045ca:	6020      	str	r0, [r4, #0]
 80045cc:	6061      	str	r1, [r4, #4]
 80045ce:	e7c6      	b.n	800455e <app_encoder_loop+0x66>
		} else {
			voltageTemp = voltage;
 80045d0:	4b2d      	ldr	r3, [pc, #180]	; (8004688 <app_encoder_loop+0x190>)
 80045d2:	4a32      	ldr	r2, [pc, #200]	; (800469c <app_encoder_loop+0x1a4>)
 80045d4:	6810      	ldr	r0, [r2, #0]
 80045d6:	6851      	ldr	r1, [r2, #4]
 80045d8:	6018      	str	r0, [r3, #0]
 80045da:	6059      	str	r1, [r3, #4]
		}
	}

	if (g < 1000) {
 80045dc:	4b31      	ldr	r3, [pc, #196]	; (80046a4 <app_encoder_loop+0x1ac>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	22fa      	movs	r2, #250	; 0xfa
 80045e2:	0092      	lsls	r2, r2, #2
 80045e4:	4293      	cmp	r3, r2
 80045e6:	da02      	bge.n	80045ee <app_encoder_loop+0xf6>
		g++;
 80045e8:	4a2e      	ldr	r2, [pc, #184]	; (80046a4 <app_encoder_loop+0x1ac>)
 80045ea:	3301      	adds	r3, #1
 80045ec:	6013      	str	r3, [r2, #0]

	//7 segment display
	//max7219_Clean();

	// Get number of int numbers of voltage
	integer_part = (int)voltage;
 80045ee:	4b2b      	ldr	r3, [pc, #172]	; (800469c <app_encoder_loop+0x1a4>)
 80045f0:	681c      	ldr	r4, [r3, #0]
 80045f2:	685d      	ldr	r5, [r3, #4]
 80045f4:	0020      	movs	r0, r4
 80045f6:	0029      	movs	r1, r5
 80045f8:	f7fe f8fa 	bl	80027f0 <__aeabi_d2iz>
 80045fc:	4b2a      	ldr	r3, [pc, #168]	; (80046a8 <app_encoder_loop+0x1b0>)
 80045fe:	6018      	str	r0, [r3, #0]
	num_digits = 0;
 8004600:	4b2a      	ldr	r3, [pc, #168]	; (80046ac <app_encoder_loop+0x1b4>)
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]

	while (integer_part) {
 8004606:	e008      	b.n	800461a <app_encoder_loop+0x122>
		integer_part = integer_part/10;
 8004608:	210a      	movs	r1, #10
 800460a:	f7fb fe05 	bl	8000218 <__divsi3>
 800460e:	4b26      	ldr	r3, [pc, #152]	; (80046a8 <app_encoder_loop+0x1b0>)
 8004610:	6018      	str	r0, [r3, #0]
		num_digits++;
 8004612:	4a26      	ldr	r2, [pc, #152]	; (80046ac <app_encoder_loop+0x1b4>)
 8004614:	6813      	ldr	r3, [r2, #0]
 8004616:	3301      	adds	r3, #1
 8004618:	6013      	str	r3, [r2, #0]
	while (integer_part) {
 800461a:	4b23      	ldr	r3, [pc, #140]	; (80046a8 <app_encoder_loop+0x1b0>)
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	2800      	cmp	r0, #0
 8004620:	d1f2      	bne.n	8004608 <app_encoder_loop+0x110>
	}

	//Print the voltage to the display
	if (num_digits == 2) {
 8004622:	4b22      	ldr	r3, [pc, #136]	; (80046ac <app_encoder_loop+0x1b4>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b02      	cmp	r3, #2
 8004628:	d012      	beq.n	8004650 <app_encoder_loop+0x158>
		max7219_PrintFtos(4, voltage , 2);
	} else {
		max7219_PrintItos(4, 0);
 800462a:	2100      	movs	r1, #0
 800462c:	2004      	movs	r0, #4
 800462e:	f000 f927 	bl	8004880 <max7219_PrintItos>
		max7219_PrintFtos(3, voltage , 2);
 8004632:	4b1a      	ldr	r3, [pc, #104]	; (800469c <app_encoder_loop+0x1a4>)
 8004634:	6818      	ldr	r0, [r3, #0]
 8004636:	6859      	ldr	r1, [r3, #4]
 8004638:	f7fe f958 	bl	80028ec <__aeabi_d2f>
 800463c:	1c01      	adds	r1, r0, #0
 800463e:	2202      	movs	r2, #2
 8004640:	2003      	movs	r0, #3
 8004642:	f000 f99f 	bl	8004984 <max7219_PrintFtos>
	}

	encoderValPrev = encoderVal;
 8004646:	4b08      	ldr	r3, [pc, #32]	; (8004668 <app_encoder_loop+0x170>)
 8004648:	4a06      	ldr	r2, [pc, #24]	; (8004664 <app_encoder_loop+0x16c>)
 800464a:	6812      	ldr	r2, [r2, #0]
 800464c:	601a      	str	r2, [r3, #0]
}
 800464e:	bd70      	pop	{r4, r5, r6, pc}
		max7219_PrintFtos(4, voltage , 2);
 8004650:	0020      	movs	r0, r4
 8004652:	0029      	movs	r1, r5
 8004654:	f7fe f94a 	bl	80028ec <__aeabi_d2f>
 8004658:	1c01      	adds	r1, r0, #0
 800465a:	2202      	movs	r2, #2
 800465c:	2004      	movs	r0, #4
 800465e:	f000 f991 	bl	8004984 <max7219_PrintFtos>
 8004662:	e7f0      	b.n	8004646 <app_encoder_loop+0x14e>
 8004664:	20000134 	.word	0x20000134
 8004668:	20000138 	.word	0x20000138
 800466c:	2000000c 	.word	0x2000000c
 8004670:	20000148 	.word	0x20000148
 8004674:	9999999a 	.word	0x9999999a
 8004678:	3fb99999 	.word	0x3fb99999
 800467c:	40240000 	.word	0x40240000
 8004680:	47ae147b 	.word	0x47ae147b
 8004684:	3f847ae1 	.word	0x3f847ae1
 8004688:	20000160 	.word	0x20000160
 800468c:	20000158 	.word	0x20000158
 8004690:	20000010 	.word	0x20000010
 8004694:	40590000 	.word	0x40590000
 8004698:	42c80000 	.word	0x42c80000
 800469c:	20000150 	.word	0x20000150
 80046a0:	3ff00000 	.word	0x3ff00000
 80046a4:	2000013c 	.word	0x2000013c
 80046a8:	20000140 	.word	0x20000140
 80046ac:	20000144 	.word	0x20000144

080046b0 <button_isr>:
/**
 * Button interrupt service routine
 */
void button_isr(void){
	//Mask unwanted button interrupts caused by debouncing
	EXTI->IMR1 &= ~(EXTI_IMR1_IM3);
 80046b0:	490e      	ldr	r1, [pc, #56]	; (80046ec <button_isr+0x3c>)
 80046b2:	2280      	movs	r2, #128	; 0x80
 80046b4:	588b      	ldr	r3, [r1, r2]
 80046b6:	2008      	movs	r0, #8
 80046b8:	4383      	bics	r3, r0
 80046ba:	508b      	str	r3, [r1, r2]
  WRITE_REG(TIMx->CNT, Counter);
 80046bc:	4b0c      	ldr	r3, [pc, #48]	; (80046f0 <button_isr+0x40>)
 80046be:	2200      	movs	r2, #0
 80046c0:	625a      	str	r2, [r3, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	2101      	movs	r1, #1
 80046c6:	430a      	orrs	r2, r1
 80046c8:	601a      	str	r2, [r3, #0]

	//Zero TIM6 counter and start counting
	LL_TIM_SetCounter(TIM7, 0); //set counter register value of timer 7 to 0
	LL_TIM_EnableCounter(TIM7); //start counting of timer 7

	if (encoderPress > 1){
 80046ca:	4b0a      	ldr	r3, [pc, #40]	; (80046f4 <button_isr+0x44>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	dd07      	ble.n	80046e2 <button_isr+0x32>
		encoderPress--;
 80046d2:	4a08      	ldr	r2, [pc, #32]	; (80046f4 <button_isr+0x44>)
 80046d4:	3b01      	subs	r3, #1
 80046d6:	6013      	str	r3, [r2, #0]
	else {
		encoderPress = 4;
	}

	//Erase btn (PC3) interrupt flag
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 80046d8:	4b04      	ldr	r3, [pc, #16]	; (80046ec <button_isr+0x3c>)
 80046da:	2208      	movs	r2, #8
 80046dc:	60da      	str	r2, [r3, #12]
 80046de:	611a      	str	r2, [r3, #16]
}
 80046e0:	4770      	bx	lr
		encoderPress = 4;
 80046e2:	4b04      	ldr	r3, [pc, #16]	; (80046f4 <button_isr+0x44>)
 80046e4:	2204      	movs	r2, #4
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	e7f6      	b.n	80046d8 <button_isr+0x28>
 80046ea:	46c0      	nop			; (mov r8, r8)
 80046ec:	40021800 	.word	0x40021800
 80046f0:	40001400 	.word	0x40001400
 80046f4:	2000000c 	.word	0x2000000c

080046f8 <button_timer_isr>:

/*
 * Timer interrupt routine
 */
void button_timer_isr(void){
	EXTI->IMR1 |= EXTI_IMR1_IM3; //unmask interrupt mask register on exti line 3
 80046f8:	4904      	ldr	r1, [pc, #16]	; (800470c <button_timer_isr+0x14>)
 80046fa:	2280      	movs	r2, #128	; 0x80
 80046fc:	588b      	ldr	r3, [r1, r2]
 80046fe:	2008      	movs	r0, #8
 8004700:	4303      	orrs	r3, r0
 8004702:	508b      	str	r3, [r1, r2]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004704:	4b02      	ldr	r3, [pc, #8]	; (8004710 <button_timer_isr+0x18>)
 8004706:	3a82      	subs	r2, #130	; 0x82
 8004708:	611a      	str	r2, [r3, #16]
	LL_TIM_ClearFlag_UPDATE(TIM7); //Clear update flag on TIMER7
}
 800470a:	4770      	bx	lr
 800470c:	40021800 	.word	0x40021800
 8004710:	40001400 	.word	0x40001400

08004714 <getSymbol>:
	return position;
}

static uint16_t getSymbol(uint8_t number)
{
	return SYMBOLS[number];
 8004714:	4b01      	ldr	r3, [pc, #4]	; (800471c <getSymbol+0x8>)
 8004716:	5c18      	ldrb	r0, [r3, r0]
}
 8004718:	4770      	bx	lr
 800471a:	46c0      	nop			; (mov r8, r8)
 800471c:	08004bf4 	.word	0x08004bf4

08004720 <lcdPow10>:

static uint32_t lcdPow10(uint8_t n)
{
 8004720:	0003      	movs	r3, r0
	uint32_t retval = 1u;
 8004722:	2001      	movs	r0, #1

	while (n > 0u)
 8004724:	e004      	b.n	8004730 <lcdPow10+0x10>
	{
		retval *= 10u;
 8004726:	0082      	lsls	r2, r0, #2
 8004728:	1810      	adds	r0, r2, r0
 800472a:	0040      	lsls	r0, r0, #1
		n--;
 800472c:	3b01      	subs	r3, #1
 800472e:	b2db      	uxtb	r3, r3
	while (n > 0u)
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1f8      	bne.n	8004726 <lcdPow10+0x6>
	}

	return retval;
}
 8004734:	4770      	bx	lr
	...

08004738 <max7219_SendData>:
{
 8004738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800473a:	46c6      	mov	lr, r8
 800473c:	b500      	push	{lr}
 800473e:	b082      	sub	sp, #8
 8004740:	2307      	movs	r3, #7
 8004742:	446b      	add	r3, sp
 8004744:	4698      	mov	r8, r3
 8004746:	7018      	strb	r0, [r3, #0]
 8004748:	466b      	mov	r3, sp
 800474a:	1d9e      	adds	r6, r3, #6
 800474c:	7199      	strb	r1, [r3, #6]
	CS_SET();
 800474e:	4d0f      	ldr	r5, [pc, #60]	; (800478c <max7219_SendData+0x54>)
 8004750:	2200      	movs	r2, #0
 8004752:	2101      	movs	r1, #1
 8004754:	0028      	movs	r0, r5
 8004756:	f7fe fd09 	bl	800316c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 800475a:	2701      	movs	r7, #1
 800475c:	427f      	negs	r7, r7
 800475e:	4c0c      	ldr	r4, [pc, #48]	; (8004790 <max7219_SendData+0x58>)
 8004760:	003b      	movs	r3, r7
 8004762:	2201      	movs	r2, #1
 8004764:	4641      	mov	r1, r8
 8004766:	0020      	movs	r0, r4
 8004768:	f7ff fae0 	bl	8003d2c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 800476c:	003b      	movs	r3, r7
 800476e:	2201      	movs	r2, #1
 8004770:	0031      	movs	r1, r6
 8004772:	0020      	movs	r0, r4
 8004774:	f7ff fada 	bl	8003d2c <HAL_SPI_Transmit>
	CS_RESET();
 8004778:	2201      	movs	r2, #1
 800477a:	2101      	movs	r1, #1
 800477c:	0028      	movs	r0, r5
 800477e:	f7fe fcf5 	bl	800316c <HAL_GPIO_WritePin>
}
 8004782:	b002      	add	sp, #8
 8004784:	bc80      	pop	{r7}
 8004786:	46b8      	mov	r8, r7
 8004788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800478a:	46c0      	nop			; (mov r8, r8)
 800478c:	50000400 	.word	0x50000400
 8004790:	20000034 	.word	0x20000034

08004794 <max7219_SetIntensivity>:
{
 8004794:	b510      	push	{r4, lr}
 8004796:	0001      	movs	r1, r0
	if (intensivity > 0x0F)
 8004798:	280f      	cmp	r0, #15
 800479a:	d900      	bls.n	800479e <max7219_SetIntensivity+0xa>
}
 800479c:	bd10      	pop	{r4, pc}
	max7219_SendData(REG_INTENSITY, intensivity);
 800479e:	200a      	movs	r0, #10
 80047a0:	f7ff ffca 	bl	8004738 <max7219_SendData>
 80047a4:	e7fa      	b.n	800479c <max7219_SetIntensivity+0x8>
	...

080047a8 <max7219_Clean>:
{
 80047a8:	b570      	push	{r4, r5, r6, lr}
	if(decodeMode == 0xFF)
 80047aa:	4b09      	ldr	r3, [pc, #36]	; (80047d0 <max7219_Clean+0x28>)
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	2bff      	cmp	r3, #255	; 0xff
 80047b0:	d002      	beq.n	80047b8 <max7219_Clean+0x10>
	uint8_t clear = 0x00;
 80047b2:	2500      	movs	r5, #0
	for (int i = 0; i < 8; ++i)
 80047b4:	2400      	movs	r4, #0
 80047b6:	e007      	b.n	80047c8 <max7219_Clean+0x20>
		clear = BLANK;
 80047b8:	250f      	movs	r5, #15
 80047ba:	e7fb      	b.n	80047b4 <max7219_Clean+0xc>
		max7219_SendData(i + 1, clear);
 80047bc:	1c60      	adds	r0, r4, #1
 80047be:	b2c0      	uxtb	r0, r0
 80047c0:	0029      	movs	r1, r5
 80047c2:	f7ff ffb9 	bl	8004738 <max7219_SendData>
	for (int i = 0; i < 8; ++i)
 80047c6:	3401      	adds	r4, #1
 80047c8:	2c07      	cmp	r4, #7
 80047ca:	ddf7      	ble.n	80047bc <max7219_Clean+0x14>
}
 80047cc:	bd70      	pop	{r4, r5, r6, pc}
 80047ce:	46c0      	nop			; (mov r8, r8)
 80047d0:	20000168 	.word	0x20000168

080047d4 <max7219_Turn_On>:
{
 80047d4:	b510      	push	{r4, lr}
	max7219_SendData(REG_SHUTDOWN, 0x01);
 80047d6:	2101      	movs	r1, #1
 80047d8:	200c      	movs	r0, #12
 80047da:	f7ff ffad 	bl	8004738 <max7219_SendData>
}
 80047de:	bd10      	pop	{r4, pc}

080047e0 <max7219_Init>:
{
 80047e0:	b510      	push	{r4, lr}
 80047e2:	0004      	movs	r4, r0
	max7219_Turn_On();
 80047e4:	f7ff fff6 	bl	80047d4 <max7219_Turn_On>
	max7219_SendData(REG_SCAN_LIMIT, NUMBER_OF_DIGITS - 1);
 80047e8:	2107      	movs	r1, #7
 80047ea:	200b      	movs	r0, #11
 80047ec:	f7ff ffa4 	bl	8004738 <max7219_SendData>
	max7219_SetIntensivity(intensivity);
 80047f0:	0020      	movs	r0, r4
 80047f2:	f7ff ffcf 	bl	8004794 <max7219_SetIntensivity>
	max7219_Clean();
 80047f6:	f7ff ffd7 	bl	80047a8 <max7219_Clean>
}
 80047fa:	bd10      	pop	{r4, pc}

080047fc <max7219_Decode_On>:
{
 80047fc:	b510      	push	{r4, lr}
	decodeMode = 0xFF;
 80047fe:	4b04      	ldr	r3, [pc, #16]	; (8004810 <max7219_Decode_On+0x14>)
 8004800:	22ff      	movs	r2, #255	; 0xff
 8004802:	701a      	strb	r2, [r3, #0]
	max7219_SendData(REG_DECODE_MODE, decodeMode);
 8004804:	21ff      	movs	r1, #255	; 0xff
 8004806:	2009      	movs	r0, #9
 8004808:	f7ff ff96 	bl	8004738 <max7219_SendData>
}
 800480c:	bd10      	pop	{r4, pc}
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	20000168 	.word	0x20000168

08004814 <max7219_PrintDigit>:
{
 8004814:	b510      	push	{r4, lr}
 8004816:	0004      	movs	r4, r0
	if(position > NUMBER_OF_DIGITS)
 8004818:	2808      	cmp	r0, #8
 800481a:	d807      	bhi.n	800482c <max7219_PrintDigit+0x18>
	if(point)
 800481c:	2a00      	cmp	r2, #0
 800481e:	d018      	beq.n	8004852 <max7219_PrintDigit+0x3e>
		if(decodeMode == 0x00)
 8004820:	4b16      	ldr	r3, [pc, #88]	; (800487c <max7219_PrintDigit+0x68>)
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <max7219_PrintDigit+0x1a>
		else if(decodeMode == 0xFF)
 8004828:	2bff      	cmp	r3, #255	; 0xff
 800482a:	d00b      	beq.n	8004844 <max7219_PrintDigit+0x30>
}
 800482c:	bd10      	pop	{r4, pc}
			max7219_SendData(position, getSymbol(numeric) | (1 << 7));
 800482e:	0008      	movs	r0, r1
 8004830:	f7ff ff70 	bl	8004714 <getSymbol>
 8004834:	2180      	movs	r1, #128	; 0x80
 8004836:	4249      	negs	r1, r1
 8004838:	4301      	orrs	r1, r0
 800483a:	b2c9      	uxtb	r1, r1
 800483c:	0020      	movs	r0, r4
 800483e:	f7ff ff7b 	bl	8004738 <max7219_SendData>
 8004842:	e7f3      	b.n	800482c <max7219_PrintDigit+0x18>
			max7219_SendData(position, numeric | (1 << 7));
 8004844:	3b80      	subs	r3, #128	; 0x80
 8004846:	3bff      	subs	r3, #255	; 0xff
 8004848:	4319      	orrs	r1, r3
 800484a:	b2c9      	uxtb	r1, r1
 800484c:	f7ff ff74 	bl	8004738 <max7219_SendData>
 8004850:	e7ec      	b.n	800482c <max7219_PrintDigit+0x18>
		if(decodeMode == 0x00)
 8004852:	4b0a      	ldr	r3, [pc, #40]	; (800487c <max7219_PrintDigit+0x68>)
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d006      	beq.n	8004868 <max7219_PrintDigit+0x54>
		else if(decodeMode == 0xFF)
 800485a:	2bff      	cmp	r3, #255	; 0xff
 800485c:	d1e6      	bne.n	800482c <max7219_PrintDigit+0x18>
			max7219_SendData(position, numeric & (~(1 << 7)));
 800485e:	3b80      	subs	r3, #128	; 0x80
 8004860:	4019      	ands	r1, r3
 8004862:	f7ff ff69 	bl	8004738 <max7219_SendData>
 8004866:	e7e1      	b.n	800482c <max7219_PrintDigit+0x18>
			max7219_SendData(position, getSymbol(numeric) & (~(1 << 7)));
 8004868:	0008      	movs	r0, r1
 800486a:	f7ff ff53 	bl	8004714 <getSymbol>
 800486e:	217f      	movs	r1, #127	; 0x7f
 8004870:	4001      	ands	r1, r0
 8004872:	0020      	movs	r0, r4
 8004874:	f7ff ff60 	bl	8004738 <max7219_SendData>
 8004878:	e7d8      	b.n	800482c <max7219_PrintDigit+0x18>
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	20000168 	.word	0x20000168

08004880 <max7219_PrintItos>:
{
 8004880:	b570      	push	{r4, r5, r6, lr}
 8004882:	0005      	movs	r5, r0
 8004884:	000e      	movs	r6, r1
	max7219_SendData(REG_DECODE_MODE, 0xFF);
 8004886:	21ff      	movs	r1, #255	; 0xff
 8004888:	2009      	movs	r0, #9
 800488a:	f7ff ff55 	bl	8004738 <max7219_SendData>
	if (value < 0)
 800488e:	2e00      	cmp	r6, #0
 8004890:	db01      	blt.n	8004896 <max7219_PrintItos+0x16>
	i = 1;
 8004892:	2401      	movs	r4, #1
	while ((value / i) > 9)
 8004894:	e00d      	b.n	80048b2 <max7219_PrintItos+0x32>
		if(position > 0)
 8004896:	2d00      	cmp	r5, #0
 8004898:	d101      	bne.n	800489e <max7219_PrintItos+0x1e>
		value = -value;
 800489a:	4276      	negs	r6, r6
 800489c:	e7f9      	b.n	8004892 <max7219_PrintItos+0x12>
			max7219_SendData(position, MINUS);
 800489e:	210a      	movs	r1, #10
 80048a0:	0028      	movs	r0, r5
 80048a2:	f7ff ff49 	bl	8004738 <max7219_SendData>
			position--;
 80048a6:	3d01      	subs	r5, #1
 80048a8:	b2ed      	uxtb	r5, r5
 80048aa:	e7f6      	b.n	800489a <max7219_PrintItos+0x1a>
		i *= 10;
 80048ac:	00a3      	lsls	r3, r4, #2
 80048ae:	191c      	adds	r4, r3, r4
 80048b0:	0064      	lsls	r4, r4, #1
	while ((value / i) > 9)
 80048b2:	0021      	movs	r1, r4
 80048b4:	0030      	movs	r0, r6
 80048b6:	f7fb fcaf 	bl	8000218 <__divsi3>
 80048ba:	2809      	cmp	r0, #9
 80048bc:	dcf6      	bgt.n	80048ac <max7219_PrintItos+0x2c>
	if(position > 0)
 80048be:	2d00      	cmp	r5, #0
 80048c0:	d105      	bne.n	80048ce <max7219_PrintItos+0x4e>
	i /= 10;
 80048c2:	210a      	movs	r1, #10
 80048c4:	0020      	movs	r0, r4
 80048c6:	f7fb fca7 	bl	8000218 <__divsi3>
 80048ca:	0004      	movs	r4, r0
	while (i > 0)
 80048cc:	e00b      	b.n	80048e6 <max7219_PrintItos+0x66>
		max7219_SendData(position, value/i);
 80048ce:	b2c1      	uxtb	r1, r0
 80048d0:	0028      	movs	r0, r5
 80048d2:	f7ff ff31 	bl	8004738 <max7219_SendData>
		position--;
 80048d6:	3d01      	subs	r5, #1
 80048d8:	b2ed      	uxtb	r5, r5
 80048da:	e7f2      	b.n	80048c2 <max7219_PrintItos+0x42>
		i /= 10;
 80048dc:	210a      	movs	r1, #10
 80048de:	0020      	movs	r0, r4
 80048e0:	f7fb fc9a 	bl	8000218 <__divsi3>
 80048e4:	0004      	movs	r4, r0
	while (i > 0)
 80048e6:	2c00      	cmp	r4, #0
 80048e8:	dd12      	ble.n	8004910 <max7219_PrintItos+0x90>
		if(position > 0)
 80048ea:	2d00      	cmp	r5, #0
 80048ec:	d0f6      	beq.n	80048dc <max7219_PrintItos+0x5c>
			max7219_SendData(position, (value % (i * 10)) / i);
 80048ee:	00a1      	lsls	r1, r4, #2
 80048f0:	1909      	adds	r1, r1, r4
 80048f2:	0049      	lsls	r1, r1, #1
 80048f4:	0030      	movs	r0, r6
 80048f6:	f7fb fd75 	bl	80003e4 <__aeabi_idivmod>
 80048fa:	0008      	movs	r0, r1
 80048fc:	0021      	movs	r1, r4
 80048fe:	f7fb fc8b 	bl	8000218 <__divsi3>
 8004902:	b2c1      	uxtb	r1, r0
 8004904:	0028      	movs	r0, r5
 8004906:	f7ff ff17 	bl	8004738 <max7219_SendData>
			position--;
 800490a:	3d01      	subs	r5, #1
 800490c:	b2ed      	uxtb	r5, r5
 800490e:	e7e5      	b.n	80048dc <max7219_PrintItos+0x5c>
	max7219_SendData(REG_DECODE_MODE, decodeMode);
 8004910:	4b03      	ldr	r3, [pc, #12]	; (8004920 <max7219_PrintItos+0xa0>)
 8004912:	7819      	ldrb	r1, [r3, #0]
 8004914:	2009      	movs	r0, #9
 8004916:	f7ff ff0f 	bl	8004738 <max7219_SendData>
}
 800491a:	0028      	movs	r0, r5
 800491c:	bd70      	pop	{r4, r5, r6, pc}
 800491e:	46c0      	nop			; (mov r8, r8)
 8004920:	20000168 	.word	0x20000168

08004924 <max7219_PrintNtos>:
{
 8004924:	b570      	push	{r4, r5, r6, lr}
 8004926:	0005      	movs	r5, r0
 8004928:	000e      	movs	r6, r1
 800492a:	0014      	movs	r4, r2
	max7219_SendData(REG_DECODE_MODE, 0xFF);
 800492c:	21ff      	movs	r1, #255	; 0xff
 800492e:	2009      	movs	r0, #9
 8004930:	f7ff ff02 	bl	8004738 <max7219_SendData>
	if (n > 0u)
 8004934:	2c00      	cmp	r4, #0
 8004936:	d01c      	beq.n	8004972 <max7219_PrintNtos+0x4e>
		uint32_t i = lcdPow10(n - 1u);
 8004938:	3c01      	subs	r4, #1
 800493a:	b2e0      	uxtb	r0, r4
 800493c:	f7ff fef0 	bl	8004720 <lcdPow10>
 8004940:	0004      	movs	r4, r0
		while (i > 0u)	/* Display at least one symbol */
 8004942:	e004      	b.n	800494e <max7219_PrintNtos+0x2a>
			i /= 10u;
 8004944:	210a      	movs	r1, #10
 8004946:	0020      	movs	r0, r4
 8004948:	f7fb fbdc 	bl	8000104 <__udivsi3>
 800494c:	0004      	movs	r4, r0
		while (i > 0u)	/* Display at least one symbol */
 800494e:	2c00      	cmp	r4, #0
 8004950:	d00f      	beq.n	8004972 <max7219_PrintNtos+0x4e>
			if(position > 0u)
 8004952:	2d00      	cmp	r5, #0
 8004954:	d0f6      	beq.n	8004944 <max7219_PrintNtos+0x20>
				max7219_SendData(position, (value / i) % 10u);
 8004956:	0021      	movs	r1, r4
 8004958:	0030      	movs	r0, r6
 800495a:	f7fb fbd3 	bl	8000104 <__udivsi3>
 800495e:	210a      	movs	r1, #10
 8004960:	f7fb fc56 	bl	8000210 <__aeabi_uidivmod>
 8004964:	b2c9      	uxtb	r1, r1
 8004966:	0028      	movs	r0, r5
 8004968:	f7ff fee6 	bl	8004738 <max7219_SendData>
				position--;
 800496c:	3d01      	subs	r5, #1
 800496e:	b2ed      	uxtb	r5, r5
 8004970:	e7e8      	b.n	8004944 <max7219_PrintNtos+0x20>
	max7219_SendData(REG_DECODE_MODE, decodeMode);
 8004972:	4b03      	ldr	r3, [pc, #12]	; (8004980 <max7219_PrintNtos+0x5c>)
 8004974:	7819      	ldrb	r1, [r3, #0]
 8004976:	2009      	movs	r0, #9
 8004978:	f7ff fede 	bl	8004738 <max7219_SendData>
}
 800497c:	0028      	movs	r0, r5
 800497e:	bd70      	pop	{r4, r5, r6, pc}
 8004980:	20000168 	.word	0x20000168

08004984 <max7219_PrintFtos>:
{
 8004984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004986:	b083      	sub	sp, #12
 8004988:	0006      	movs	r6, r0
 800498a:	1c0c      	adds	r4, r1, #0
 800498c:	0015      	movs	r5, r2
	if(n > 4)
 800498e:	2a04      	cmp	r2, #4
 8004990:	d900      	bls.n	8004994 <max7219_PrintFtos+0x10>
		n = 4;
 8004992:	2504      	movs	r5, #4
	max7219_SendData(REG_DECODE_MODE, 0xFF);
 8004994:	21ff      	movs	r1, #255	; 0xff
 8004996:	2009      	movs	r0, #9
 8004998:	f7ff fece 	bl	8004738 <max7219_SendData>
	if (value < 0.0)
 800499c:	2100      	movs	r1, #0
 800499e:	1c20      	adds	r0, r4, #0
 80049a0:	f7fb fd76 	bl	8000490 <__aeabi_fcmplt>
 80049a4:	2800      	cmp	r0, #0
 80049a6:	d113      	bne.n	80049d0 <max7219_PrintFtos+0x4c>
	position = max7219_PrintItos(position, (int32_t) value);
 80049a8:	1c20      	adds	r0, r4, #0
 80049aa:	f7fc fc09 	bl	80011c0 <__aeabi_f2iz>
 80049ae:	0007      	movs	r7, r0
 80049b0:	0001      	movs	r1, r0
 80049b2:	0030      	movs	r0, r6
 80049b4:	f7ff ff64 	bl	8004880 <max7219_PrintItos>
 80049b8:	9001      	str	r0, [sp, #4]
 80049ba:	0006      	movs	r6, r0
	if (n > 0u)
 80049bc:	2d00      	cmp	r5, #0
 80049be:	d115      	bne.n	80049ec <max7219_PrintFtos+0x68>
	max7219_SendData(REG_DECODE_MODE, decodeMode);
 80049c0:	4b18      	ldr	r3, [pc, #96]	; (8004a24 <max7219_PrintFtos+0xa0>)
 80049c2:	7819      	ldrb	r1, [r3, #0]
 80049c4:	2009      	movs	r0, #9
 80049c6:	f7ff feb7 	bl	8004738 <max7219_SendData>
}
 80049ca:	0030      	movs	r0, r6
 80049cc:	b003      	add	sp, #12
 80049ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(position > 0)
 80049d0:	2e00      	cmp	r6, #0
 80049d2:	d104      	bne.n	80049de <max7219_PrintFtos+0x5a>
		value = -value;
 80049d4:	2380      	movs	r3, #128	; 0x80
 80049d6:	061b      	lsls	r3, r3, #24
 80049d8:	469c      	mov	ip, r3
 80049da:	4464      	add	r4, ip
 80049dc:	e7e4      	b.n	80049a8 <max7219_PrintFtos+0x24>
			max7219_SendData(position, MINUS);
 80049de:	210a      	movs	r1, #10
 80049e0:	0030      	movs	r0, r6
 80049e2:	f7ff fea9 	bl	8004738 <max7219_SendData>
			position--;
 80049e6:	3e01      	subs	r6, #1
 80049e8:	b2f6      	uxtb	r6, r6
 80049ea:	e7f3      	b.n	80049d4 <max7219_PrintFtos+0x50>
		max7219_PrintDigit(position + 1, ((int32_t) value) % 10, true);
 80049ec:	1c46      	adds	r6, r0, #1
 80049ee:	b2f6      	uxtb	r6, r6
 80049f0:	210a      	movs	r1, #10
 80049f2:	0038      	movs	r0, r7
 80049f4:	f7fb fcf6 	bl	80003e4 <__aeabi_idivmod>
 80049f8:	b2c9      	uxtb	r1, r1
 80049fa:	2201      	movs	r2, #1
 80049fc:	0030      	movs	r0, r6
 80049fe:	f7ff ff09 	bl	8004814 <max7219_PrintDigit>
		position = max7219_PrintNtos(position, (uint32_t) (value * (float) lcdPow10(n)), n);
 8004a02:	0028      	movs	r0, r5
 8004a04:	f7ff fe8c 	bl	8004720 <lcdPow10>
 8004a08:	f7fc fbfa 	bl	8001200 <__aeabi_ui2f>
 8004a0c:	1c21      	adds	r1, r4, #0
 8004a0e:	f7fc f8e9 	bl	8000be4 <__aeabi_fmul>
 8004a12:	f7fb fd65 	bl	80004e0 <__aeabi_f2uiz>
 8004a16:	0001      	movs	r1, r0
 8004a18:	002a      	movs	r2, r5
 8004a1a:	9801      	ldr	r0, [sp, #4]
 8004a1c:	f7ff ff82 	bl	8004924 <max7219_PrintNtos>
 8004a20:	0006      	movs	r6, r0
 8004a22:	e7cd      	b.n	80049c0 <max7219_PrintFtos+0x3c>
 8004a24:	20000168 	.word	0x20000168

08004a28 <memset>:
 8004a28:	0003      	movs	r3, r0
 8004a2a:	1882      	adds	r2, r0, r2
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d100      	bne.n	8004a32 <memset+0xa>
 8004a30:	4770      	bx	lr
 8004a32:	7019      	strb	r1, [r3, #0]
 8004a34:	3301      	adds	r3, #1
 8004a36:	e7f9      	b.n	8004a2c <memset+0x4>

08004a38 <__libc_init_array>:
 8004a38:	b570      	push	{r4, r5, r6, lr}
 8004a3a:	2600      	movs	r6, #0
 8004a3c:	4c0c      	ldr	r4, [pc, #48]	; (8004a70 <__libc_init_array+0x38>)
 8004a3e:	4d0d      	ldr	r5, [pc, #52]	; (8004a74 <__libc_init_array+0x3c>)
 8004a40:	1b64      	subs	r4, r4, r5
 8004a42:	10a4      	asrs	r4, r4, #2
 8004a44:	42a6      	cmp	r6, r4
 8004a46:	d109      	bne.n	8004a5c <__libc_init_array+0x24>
 8004a48:	2600      	movs	r6, #0
 8004a4a:	f000 f857 	bl	8004afc <_init>
 8004a4e:	4c0a      	ldr	r4, [pc, #40]	; (8004a78 <__libc_init_array+0x40>)
 8004a50:	4d0a      	ldr	r5, [pc, #40]	; (8004a7c <__libc_init_array+0x44>)
 8004a52:	1b64      	subs	r4, r4, r5
 8004a54:	10a4      	asrs	r4, r4, #2
 8004a56:	42a6      	cmp	r6, r4
 8004a58:	d105      	bne.n	8004a66 <__libc_init_array+0x2e>
 8004a5a:	bd70      	pop	{r4, r5, r6, pc}
 8004a5c:	00b3      	lsls	r3, r6, #2
 8004a5e:	58eb      	ldr	r3, [r5, r3]
 8004a60:	4798      	blx	r3
 8004a62:	3601      	adds	r6, #1
 8004a64:	e7ee      	b.n	8004a44 <__libc_init_array+0xc>
 8004a66:	00b3      	lsls	r3, r6, #2
 8004a68:	58eb      	ldr	r3, [r5, r3]
 8004a6a:	4798      	blx	r3
 8004a6c:	3601      	adds	r6, #1
 8004a6e:	e7f2      	b.n	8004a56 <__libc_init_array+0x1e>
 8004a70:	08004c04 	.word	0x08004c04
 8004a74:	08004c04 	.word	0x08004c04
 8004a78:	08004c08 	.word	0x08004c08
 8004a7c:	08004c04 	.word	0x08004c04

08004a80 <ceilf>:
 8004a80:	b570      	push	{r4, r5, r6, lr}
 8004a82:	0045      	lsls	r5, r0, #1
 8004a84:	086e      	lsrs	r6, r5, #1
 8004a86:	0e2d      	lsrs	r5, r5, #24
 8004a88:	3d7f      	subs	r5, #127	; 0x7f
 8004a8a:	0004      	movs	r4, r0
 8004a8c:	2d16      	cmp	r5, #22
 8004a8e:	dc25      	bgt.n	8004adc <ceilf+0x5c>
 8004a90:	2d00      	cmp	r5, #0
 8004a92:	da0f      	bge.n	8004ab4 <ceilf+0x34>
 8004a94:	4917      	ldr	r1, [pc, #92]	; (8004af4 <ceilf+0x74>)
 8004a96:	f7fb fd3b 	bl	8000510 <__aeabi_fadd>
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	f7fb fd0c 	bl	80004b8 <__aeabi_fcmpgt>
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	d005      	beq.n	8004ab0 <ceilf+0x30>
 8004aa4:	2c00      	cmp	r4, #0
 8004aa6:	db21      	blt.n	8004aec <ceilf+0x6c>
 8004aa8:	2e00      	cmp	r6, #0
 8004aaa:	d001      	beq.n	8004ab0 <ceilf+0x30>
 8004aac:	24fe      	movs	r4, #254	; 0xfe
 8004aae:	05a4      	lsls	r4, r4, #22
 8004ab0:	1c20      	adds	r0, r4, #0
 8004ab2:	e01a      	b.n	8004aea <ceilf+0x6a>
 8004ab4:	4e10      	ldr	r6, [pc, #64]	; (8004af8 <ceilf+0x78>)
 8004ab6:	412e      	asrs	r6, r5
 8004ab8:	4206      	tst	r6, r0
 8004aba:	d016      	beq.n	8004aea <ceilf+0x6a>
 8004abc:	490d      	ldr	r1, [pc, #52]	; (8004af4 <ceilf+0x74>)
 8004abe:	f7fb fd27 	bl	8000510 <__aeabi_fadd>
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	f7fb fcf8 	bl	80004b8 <__aeabi_fcmpgt>
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	d0f1      	beq.n	8004ab0 <ceilf+0x30>
 8004acc:	2c00      	cmp	r4, #0
 8004ace:	dd03      	ble.n	8004ad8 <ceilf+0x58>
 8004ad0:	2380      	movs	r3, #128	; 0x80
 8004ad2:	041b      	lsls	r3, r3, #16
 8004ad4:	412b      	asrs	r3, r5
 8004ad6:	18e4      	adds	r4, r4, r3
 8004ad8:	43b4      	bics	r4, r6
 8004ada:	e7e9      	b.n	8004ab0 <ceilf+0x30>
 8004adc:	23ff      	movs	r3, #255	; 0xff
 8004ade:	05db      	lsls	r3, r3, #23
 8004ae0:	429e      	cmp	r6, r3
 8004ae2:	d302      	bcc.n	8004aea <ceilf+0x6a>
 8004ae4:	1c01      	adds	r1, r0, #0
 8004ae6:	f7fb fd13 	bl	8000510 <__aeabi_fadd>
 8004aea:	bd70      	pop	{r4, r5, r6, pc}
 8004aec:	2480      	movs	r4, #128	; 0x80
 8004aee:	0624      	lsls	r4, r4, #24
 8004af0:	e7de      	b.n	8004ab0 <ceilf+0x30>
 8004af2:	46c0      	nop			; (mov r8, r8)
 8004af4:	7149f2ca 	.word	0x7149f2ca
 8004af8:	007fffff 	.word	0x007fffff

08004afc <_init>:
 8004afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afe:	46c0      	nop			; (mov r8, r8)
 8004b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b02:	bc08      	pop	{r3}
 8004b04:	469e      	mov	lr, r3
 8004b06:	4770      	bx	lr

08004b08 <_fini>:
 8004b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b0e:	bc08      	pop	{r3}
 8004b10:	469e      	mov	lr, r3
 8004b12:	4770      	bx	lr
