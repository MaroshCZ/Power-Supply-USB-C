@startuml
title USB-C PPS State diagram
legend
    Format PlantUML code: Alt+Shift+F
    Preview diagram: Alt +D
end legend
[*] --> OFF

ON -up-> OFF: PwrBtnPress()
OFF -down-> INIT: PwrBtnPress()
ON -up-> ERROR: [errorTrigger()]
ERROR -up-> OFF: PwrBtnPress()


OFF: general off state
INIT: system init
INIT: display init
INIT: initialization of variables
INIT: show source limits
ERROR: **do**/ display error number


state ON {


    state DEFAULT {
        state IDLE {
            IDLE: **entry**/ display set values
            IDLE: **entry**/ output off
            IDLE: depending on temperature, fan on
            IDLE: **exit**/ lastState = "IDLE"
        }


        IDLE -down-> ACTIVE: OffOnBtnPress()
        ACTIVE -down-> IDLE: [OffOnBtnPress() || OCPTrigger]
        INIT -down-> IDLE

        state ACTIVE {
            ACTIVE: **entry**/ display measured voltage and current
            ACTIVE: **entry**/ output on
            ACTIVE: set OCP/OVP
            ACTIVE: set Voltage/Current
            ACTIVE: **exit**/ lastState = "ACTIVE"

        }
    }


    state LOCK {
        LOCK: display buttons not working
        LOCK: only LckBtn and PwrBtn works
    }

    state c1 <<choice>>
    LOCK --> c1: [LckBtnHold() > 2000]
    c1 --> IDLE: [lastState == "IDLE"]
    c1 --> ACTIVE: [lastState == "ACTIVE"]
    DEFAULT --> LOCK: [LckBtnHold() > 1500]

    state DisplayToggle {
        DisplayToggle: **entry** / timeCounter = 0
        ShowLimits: display source limits
        ShowSet: display user settings
        ShowMeasured: display measured values

        [*] --> ShowLimits
        ShowLimits --> ShowSet: ShowBtnPress()
        ShowSet --> ShowMeasured: ShowBtnPress()
        ShowMeasured --> ShowLimits: ShowBtnPress()
    }

    DEFAULT --> DisplayToggle: ShowBtnPress()

    DisplayToggle --> c1: [timeCounter > 2000]


    state OCPToggle {
        OCPToggle: **entry**/ timeCounter = 0

        [*] --> OCPOn
        OCPOn --> OCPOff: OCPBtnPress()
        OCPOff --> OCPOn: OCPBtnPress()
        OCPOn: **entry**/ OCPLedON(),OCPON()
        OCPOff: **entry**/ OCPLedOff(), OCPOFF()
    }

    DEFAULT --> OCPToggle: OCPBtnPress()

    OCPToggle --> c1: [timeCounter > 500]


    state SetValues {
        [*] --> VOLTAGE
        VOLTAGE --> CURRENT: SetBtnPress()
        CURRENT --> VOLTAGE: SetBtnPress()
        SetValues: **entry**/ show set values
        SetValues: **entry**/ timeCounter = 0
        SetValues: **entry**/ digit = 0 (range 0-3)

        state VOLTAGE {
            VOLTAGE: **entry**/ setState = "Voltage"
            VOLTAGE: **do**/ blink digit
            VOLTAGE: **do**/ on rotaryBtnPress() toggle digit
        }

        state CURRENT {
            CURRENT: **entry**/ setState = "Current"
            CURRENT: **do**/ blink digit
            CURRENT: **do**/ on rotaryBtnPress() toggle digit
        }


    }

    state c2 <<choice>>
    SetValues -right-> c2: rotaryInterrupt()

    state c3 <<choice>>
    c2 -down-> c3: [readCLK() == 1]/setFlag = "increment"
    c2 -down-> c3: [readCLK() == 0]/setFlag = "decrement"

    c3 -left-> VOLTAGE: [setState == "Voltage"]/ changeValue(setState, setFlag, digit)
    c3 -left-> CURRENT: [setState == "Current"]/ changeValue(setState, setFlag, digit)

    DEFAULT --> SetValues: SetBtnPress()
    SetValues --> c1: [timeCounter > 4000]
}